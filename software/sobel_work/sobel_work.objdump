
sobel_work.elf:     file format elf32-littlenios2
sobel_work.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011eb0 memsz 0x00011eb0 flags r-x
    LOAD off    0x00012ed0 vaddr 0x00011ed0 paddr 0x000139bc align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000154a8 vaddr 0x000154a8 paddr 0x000154a8 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001150c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000780  00011750  00011750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00011ed0  000139bc  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  000154a8  000154a8  000154a8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015638  00015638  000149bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000149bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  000149e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026ba8  00000000  00000000  00015a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009cd8  00000000  00000000  0003c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c710  00000000  00000000  00046298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026dc  00000000  00000000  000529a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e62  00000000  00000000  00055084  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001aa54  00000000  00000000  00058ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007393c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001980  00000000  00000000  000739a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078de6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00078de9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078df5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078df6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00078df7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00078dfb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078dff  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00078e03  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00078e0c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00078e15  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00078e1e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000065  00000000  00000000  00078e29  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a3e  00000000  00000000  00078e8e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00077e84  00000000  00000000  0007e8cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011750 l    d  .rodata	00000000 .rodata
00011ed0 l    d  .rwdata	00000000 .rwdata
000154a8 l    d  .bss	00000000 .bss
00015638 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /run/media/leemarc/Shared/Switchdrive/Private/Documents/Master/1_S1/EmbHardw/mse_demo/software/sobel_work_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011c1e l     O .rodata	00000010 zeroes.4404
00005014 l     F .text	000000bc __sbprintf
00011c2e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005224 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006d54 l     F .text	00000008 __fp_unlock
00006d68 l     F .text	0000019c __sinit.part.1
00006f04 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000122d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001271c l     O .rwdata	00000020 lc_ctype_charset
000126fc l     O .rwdata	00000020 lc_message_charset
0001273c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011c60 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009aa0 l     F .text	000000fc __sprint_r.part.0
00011d94 l     O .rodata	00000010 blanks.4348
00011d84 l     O .rodata	00000010 zeroes.4349
0000b02c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ece8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000edf4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ee20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ef0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000efec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f0d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f2ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000139ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f65c l     F .text	00000034 alt_dev_reg
0001291c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f968 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fb74 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000101ac l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010af8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010c38 l     F .text	0000003c alt_get_errno
00010c74 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001550c g     O .bss	00000004 alt_instruction_exception_handler
00009138 g     F .text	00000074 _mprec_log10
00009224 g     F .text	0000008c __any_on
0000b5c8 g     F .text	00000054 _isatty_r
00011c6c g     O .rodata	00000028 __mprec_tinytens
0000f1e8 g     F .text	0000007c alt_main
00002c40 g     F .text	000000c0 _puts_r
00015538 g     O .bss	00000100 alt_irq
0000b61c g     F .text	00000060 _lseek_r
00011bca g     O .rodata	00000009 gy_array
000139bc g       *ABS*	00000000 __flash_rwdata_start
0000d814 g     F .text	00000088 .hidden __eqdf2
00015638 g       *ABS*	00000000 __alt_heap_start
00002c04 g     F .text	0000003c printf
0000b834 g     F .text	0000009c _wcrtomb_r
00009960 g     F .text	0000005c __sseek
000070a4 g     F .text	00000010 __sinit
0000b6dc g     F .text	00000140 __swbuf_r
00007b6c g     F .text	0000007c _setlocale_r
00006f0c g     F .text	00000068 __sfmoreglue
0000f288 g     F .text	00000024 __malloc_unlock
000009dc g     F .text	00000014 LCD_Write_Command
000154b8 g     O .bss	00000004 sobel_width
000154fc g     O .bss	00000004 altera_avalon_timer_ts_freq
00008030 g     F .text	0000015c memmove
000009f0 g     F .text	00000014 LCD_Write_Data
0000708c g     F .text	00000018 _cleanup
000082b4 g     F .text	000000a8 _Balloc
0000d89c g     F .text	000000dc .hidden __gtdf2
00011030 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000b56c g     F .text	0000005c _fstat_r
000154dc g     O .bss	00000004 errno
000098dc g     F .text	00000008 __seofread
000154f0 g     O .bss	00000004 alt_argv
0001b97c g       *ABS*	00000000 _gp
0000f4f8 g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
0001279c g     O .rwdata	00000180 alt_fd_list
00002380 g     F .text	00000010 vga_set_pointer
00011054 g     F .text	00000090 alt_find_dev
00007ee8 g     F .text	00000148 memcpy
00006d5c g     F .text	0000000c _cleanup_r
0000eb00 g     F .text	000000dc .hidden __floatsidf
00010bbc g     F .text	0000007c alt_io_redirect
0000d978 g     F .text	000000f4 .hidden __ltdf2
00011750 g       *ABS*	00000000 __DTOR_END__
00002d00 g     F .text	00000014 puts
00011320 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009814 g     F .text	00000074 __fpclassifyd
00009094 g     F .text	000000a4 __ratio
0000b010 g     F .text	0000001c __vfiprintf_internal
0000fd6c g     F .text	0000021c altera_avalon_jtag_uart_read
000023a0 g     F .text	00000014 malloc
00002bd4 g     F .text	00000030 _printf_r
00000830 g     F .text	00000008 get_grayscale_picture
0000c5c4 g     F .text	00000064 .hidden __udivsi3
000117b0 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000ef48 g     F .text	000000a4 isatty
00011cbc g     O .rodata	000000c8 __mprec_tens
00007be8 g     F .text	0000000c __locale_charset
00011290 g     F .text	00000090 alt_icache_flush
000154d8 g     O .bss	00000004 __malloc_top_pad
0001398c g     O .rwdata	00000004 __mb_cur_max
00007c18 g     F .text	0000000c _localeconv_r
00001778 g     F .text	00000138 sobel_x
000086c0 g     F .text	0000003c __i2b
00007528 g     F .text	000004bc __sfvwrite_r
00000a04 g     F .text	00000414 init_LCD
00002d14 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000b67c g     F .text	00000060 _read_r
000154bc g     O .bss	00000004 sobel_result
000139a4 g     O .rwdata	00000004 alt_max_fd
0000b260 g     F .text	000000f0 _fclose_r
00006d24 g     F .text	00000030 fflush
000154d4 g     O .bss	00000004 __malloc_max_sbrked_mem
000154b0 g     O .bss	00000004 grayscale_array
0000c680 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00008e3c g     F .text	0000010c __b2d
0000bf94 g     F .text	00000538 .hidden __umoddi3
0000f114 g     F .text	000000d4 lseek
000008f8 g     F .text	0000008c i2c_short_read
00013984 g     O .rwdata	00000004 _global_impure_ptr
000092b0 g     F .text	00000564 _realloc_r
00015638 g       *ABS*	00000000 __bss_end
00010a08 g     F .text	000000f0 alt_iic_isr_register
00010f28 g     F .text	00000108 alt_tick
0000ba1c g     F .text	00000578 .hidden __udivdi3
0000b4c8 g     F .text	00000024 _fputwc_r
00011c94 g     O .rodata	00000028 __mprec_bigtens
000084a4 g     F .text	00000104 __s2b
0000ebdc g     F .text	000000a8 .hidden __floatunsidf
00008b7c g     F .text	00000060 __mcmp
000070c4 g     F .text	00000018 __fp_lock_all
000109bc g     F .text	0000004c alt_ic_irq_enabled
000154a8 g     O .bss	00000004 grayscape_height
00010e8c g     F .text	0000009c alt_alarm_stop
00015500 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012774 g     O .rwdata	00000028 alt_dev_null
00000ea4 g     F .text	00000078 transfer_LCD_with_dma
0000136c g     F .text	00000130 sobel_complete
0001063c g     F .text	00000048 alt_dcache_flush_all
000085a8 g     F .text	00000068 __hi0bits
0000ea80 g     F .text	00000080 .hidden __fixdfsi
000139bc g       *ABS*	00000000 __ram_rwdata_end
0001399c g     O .rwdata	00000008 alt_dev_list
0000f564 g     F .text	000000f8 write
00010398 g     F .text	00000020 alt_timestamp_freq
00011ed0 g       *ABS*	00000000 __ram_rodata_end
0000ee5c g     F .text	000000b0 fstat
0000d978 g     F .text	000000f4 .hidden __ledf2
000088f4 g     F .text	00000140 __pow5mult
00009bb4 g     F .text	0000145c ___vfiprintf_internal_r
000154e8 g     O .bss	00000004 __nlocale_changed
0000c628 g     F .text	00000058 .hidden __umodsi3
00002370 g     F .text	00000008 GetSobel_rgb
00015638 g       *ABS*	00000000 end
00002378 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
0000208c g     F .text	00000184 sobel_y_with_rgb
0000f8a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00011750 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010224 g     F .text	0000007c alt_avalon_timer_sc_init
0000ec84 g     F .text	00000064 .hidden __clzsi2
0000ff88 g     F .text	00000224 altera_avalon_jtag_uart_write
000070b4 g     F .text	00000004 __sfp_lock_acquire
00007e04 g     F .text	000000e4 memchr
00002e00 g     F .text	000021f8 ___vfprintf_internal_r
00007218 g     F .text	00000310 _free_r
00007bf4 g     F .text	00000010 __locale_mb_cur_max
00001cc4 g     F .text	0000011c sobel_y
000118d8 g     O .rodata	00000140 noise_reduction_reg_settings_array
0001159c g     F .text	00000180 __call_exitprocs
000154e4 g     O .bss	00000004 __mlocale_changed
0001397c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015504 g     O .bss	00000004 _alt_tick_rate
00008a34 g     F .text	00000148 __lshift
00015508 g     O .bss	00000004 _alt_nticks
0000f2e8 g     F .text	000000fc read
0000f6c8 g     F .text	0000007c alt_sys_init
000016bc g     F .text	000000bc sobel_mac_unroll
00001b5c g     F .text	00000168 sobel_x_with_rgb
00011484 g     F .text	00000118 __register_exitproc
000086fc g     F .text	000001f8 __multiply
0000fc14 g     F .text	00000068 altera_avalon_jtag_uart_close
00011ed0 g       *ABS*	00000000 __ram_rwdata_start
00011750 g       *ABS*	00000000 __ram_rodata_start
00015510 g     O .bss	00000028 __malloc_current_mallinfo
00008f48 g     F .text	0000014c __d2b
000154c0 g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000f744 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001288 g     F .text	000000e4 init_sobel_arrays
000111ec g     F .text	000000a4 alt_get_fd
000104e4 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b148 g     F .text	00000054 _close_r
00011408 g     F .text	0000007c memcmp
0000f804 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015638 g       *ABS*	00000000 __alt_stack_base
0000f854 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000050d0 g     F .text	00000154 __swsetup_r
0000cf2c g     F .text	000008e8 .hidden __divdf3
00006f74 g     F .text	00000118 __sfp
000091ac g     F .text	00000078 __copybits
00011ed0 g     O .rwdata	00000408 __malloc_av_
000070c0 g     F .text	00000004 __sinit_lock_release
0000da6c g     F .text	00000718 .hidden __muldf3
00009888 g     F .text	00000054 __sread
000110e4 g     F .text	00000108 alt_find_file
000106c0 g     F .text	000000a4 alt_dev_llist_insert
0000f264 g     F .text	00000024 __malloc_lock
0000f448 g     F .text	000000b0 sbrk
00006cc8 g     F .text	0000005c _fflush_r
0000b19c g     F .text	000000c4 _calloc_r
000018b0 g     F .text	000002ac sobel_x_inline
000154a8 g       *ABS*	00000000 __bss_start
000015c4 g     F .text	000000f8 sobel_mac_unrollx
0000818c g     F .text	00000128 memset
00000f1c g     F .text	0000036c main
000154f4 g     O .bss	00000004 alt_envp
000154d0 g     O .bss	00000004 __malloc_max_total_mem
00000820 g     F .text	00000008 get_grayscale_width
0000f7a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b81c g     F .text	00000018 __swbuf
000154c4 g     O .bss	00000004 sobel_x_result
000099bc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b350 g     F .text	00000014 fclose
000102a0 g     F .text	00000078 alt_timestamp_start
00005424 g     F .text	00001688 _dtoa_r
000023c8 g     F .text	0000080c _malloc_r
0000b990 g     F .text	00000030 __ascii_wctomb
000139a8 g     O .rwdata	00000004 alt_errno
000079e4 g     F .text	000000c4 _fwalk
0000c4cc g     F .text	00000084 .hidden __divsi3
000070f4 g     F .text	00000124 _malloc_trim_r
00011750 g       *ABS*	00000000 __CTOR_END__
000154ac g     O .bss	00000004 grayscale_width
000099c4 g     F .text	000000dc strcmp
00000e18 g     F .text	0000008c transfer_LCD_no_dma
00011750 g       *ABS*	00000000 __flash_rodata_start
00011750 g       *ABS*	00000000 __DTOR_LIST__
0000d814 g     F .text	00000088 .hidden __nedf2
00011a18 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f690 g     F .text	00000038 alt_irq_init
0000f3e4 g     F .text	00000064 alt_release_fd
00000850 g     F .text	000000a8 i2c_auto_detect
00011da4 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
000154e0 g     O .bss	00000004 _PathLocale
00000838 g     F .text	00000018 i2c_busy_wait
000113bc g     F .text	00000014 atexit
0000b0e8 g     F .text	00000060 _write_r
00007c24 g     F .text	00000018 setlocale
00001de0 g     F .text	000002ac sobel_y_inline
00013988 g     O .rwdata	00000004 _impure_ptr
000154ec g     O .bss	00000004 alt_argc
00006aac g     F .text	0000021c __sflush_r
000154f8 g     O .bss	00000004 altera_avalon_timer_ts_base
000107c4 g     F .text	00000060 _do_dtors
00007c10 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008dd8 g     F .text	00000064 __ulp
000070dc g     F .text	00000018 __fp_unlock_all
00013994 g     O .rwdata	00000008 alt_fs_list
000154c8 g     O .bss	00000004 sobel_y_result
00000984 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
000154b4 g     O .bss	00000002 LCD_height
00007c3c g     F .text	0000000c localeconv
00010318 g     F .text	00000080 alt_timestamp
00002390 g     F .text	00000010 vga_set_swap
00010858 g     F .text	00000050 alt_ic_isr_register
00002210 g     F .text	000000b4 sobel_threshold
000139bc g       *ABS*	00000000 _edata
00015638 g       *ABS*	00000000 _end
0000b364 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fc7c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011bd3 g     O .rodata	00000009 gx_array
00010930 g     F .text	0000008c alt_ic_irq_disable
000098e4 g     F .text	0000007c __swrite
00013980 g     O .rwdata	00000004 __malloc_trim_threshold
000154b6 g     O .bss	00000002 LCD_width
00000774 g     F .text	000000ac conv_grayscale
00007c04 g     F .text	0000000c __locale_msgcharset
000113d0 g     F .text	00000038 exit
00007aa8 g     F .text	000000c4 _fwalk_reent
00008bdc g     F .text	000001fc __mdiff
0000c550 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000070b8 g     F .text	00000004 __sfp_lock_release
00000828 g     F .text	00000008 get_grayscale_height
0001171c g     F .text	00000034 _exit
0000149c g     F .text	00000128 sobel_mac
000103b8 g     F .text	0000012c alt_alarm_start
00007c48 g     F .text	000001bc __smakebuf_r
000154cc g     O .bss	00000004 sobel_rgb565
00002d68 g     F .text	00000098 strlen
00010d38 g     F .text	00000154 open
0000d89c g     F .text	000000dc .hidden __gedf2
00013990 g     O .rwdata	00000004 __wctomb
00009b9c g     F .text	00000018 __sprint_r
00010824 g     F .text	00000034 alt_icache_flush_all
000139b0 g     O .rwdata	00000004 alt_priority_mask
000022c4 g     F .text	000000ac sobel_threshold128
000108a8 g     F .text	00000088 alt_ic_irq_enable
00004ff8 g     F .text	0000001c __vfprintf_internal
0000b9c0 g     F .text	0000005c _wctomb_r
0000e184 g     F .text	000008fc .hidden __subdf3
00008610 g     F .text	000000b0 __lo0bits
000139b4 g     O .rwdata	00000008 alt_alarm_list
00010764 g     F .text	00000060 _do_ctors
0000b8d0 g     F .text	000000c0 wcrtomb
0000ed24 g     F .text	000000d0 close
0000f054 g     F .text	00000084 alt_load
0000b4ec g     F .text	00000080 fputwc
000023b4 g     F .text	00000014 free
000070bc g     F .text	00000004 __sinit_lock_acquire
00008384 g     F .text	00000120 __multadd
0000835c g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10954e04 	addi	r2,r2,21816
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10954e04 	addi	r2,r2,21816
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ae5f14 	ori	gp,gp,47484
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10952a14 	ori	r2,r2,21672

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d58e14 	ori	r3,r3,22072

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000f0540 	call	f054 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000f1e80 	call	f1e8 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10882744 	addi	r2,r2,8349
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10880304 	addi	r2,r2,8204
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <init_camera+0x28>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10880304 	addi	r2,r2,8204
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <init_camera+0x48>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009840 	call	984 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <init_camera+0x90>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009840 	call	984 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <init_camera+0xd4>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009840 	call	984 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <init_camera+0x118>
     3b4:	04000074 	movhi	r16,1
     3b8:	84068604 	addi	r16,r16,6680
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009840 	call	984 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009840 	call	984 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <init_camera+0x144>
     3f0:	04000074 	movhi	r16,1
     3f4:	84063604 	addi	r16,r16,6360
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009840 	call	984 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <init_camera+0x170>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009840 	call	984 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009840 	call	984 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <init_camera+0x1c4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009840 	call	984 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <init_camera+0x1f8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009840 	call	984 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <init_camera+0x22c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009840 	call	984 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <init_camera+0x260>
     4fc:	04000074 	movhi	r16,1
     500:	8405ec04 	addi	r16,r16,6064
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009840 	call	984 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <init_camera+0x27c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <init_camera+0x2a0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009840 	call	984 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <init_camera+0x2c4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009840 	call	984 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <init_camera+0x2e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009841 	jmpi	984 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c80304 	addi	r3,r3,8204
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <cam_get_xsize+0x8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10880004 	addi	r2,r2,8192
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c80304 	addi	r3,r3,8204
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <cam_get_ysize+0x8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10880104 	addi	r2,r2,8196
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c80304 	addi	r3,r3,8204
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <cam_get_profiling+0x8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10880004 	addi	r2,r2,8192
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2105d404 	addi	r4,r4,5968
     620:	297fffcc 	andi	r5,r5,65535
     624:	0002c040 	call	2c04 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10880104 	addi	r2,r2,8196
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2105dc04 	addi	r4,r4,6000
     63c:	297fffcc 	andi	r5,r5,65535
     640:	0002c040 	call	2c04 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10880204 	addi	r2,r2,8200
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2105e404 	addi	r4,r4,6032
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	0002c041 	jmpi	2c04 <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10880704 	addi	r2,r2,8220
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10880604 	addi	r2,r2,8216
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10880404 	addi	r2,r2,8208
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10880504 	addi	r2,r2,8212
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10880304 	addi	r2,r2,8204
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10880404 	addi	r2,r2,8208
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c80304 	addi	r3,r3,8204
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <take_picture_blocking+0x10>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10880304 	addi	r2,r2,8204
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c80304 	addi	r3,r3,8204
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10882804 	addi	r2,r2,8352
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a6cd17 	ldw	r2,-25804(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     78c:	d166cc15 	stw	r5,-25808(gp)
	grayscape_height = height;
     790:	d1a6cb15 	stw	r6,-25812(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     794:	2821883a 	mov	r16,r5
     798:	3025883a 	mov	r18,r6
     79c:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
		free(grayscale_array);
     7a4:	1009883a 	mov	r4,r2
     7a8:	00023b40 	call	23b4 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7ac:	8489383a 	mul	r4,r16,r18
     7b0:	00023a00 	call	23a0 <malloc>
     7b4:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     7b8:	0480130e 	bge	zero,r18,808 <conv_grayscale+0x94>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	8809883a 	mov	r4,r17
     7c4:	8013883a 	mov	r9,r16
     7c8:	000b883a 	mov	r5,zero
		for (x = 0 ; x < width ; x++) {
     7cc:	04000a0e 	bge	zero,r16,7f8 <conv_grayscale+0x84>
     7d0:	4c05c83a 	sub	r2,r9,r16
     7d4:	2011883a 	mov	r8,r4
			gray /= 100;

			*/

#ifdef CI
			gray=ALT_CI_CONV_GRAYSCALE_CI_0(rgb);
     7d8:	41c0000b 	ldhu	r7,0(r8)
     7dc:	380fc032 	custom	0,r7,r7,zero
#endif




			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7e0:	d0e6cd17 	ldw	r3,-25804(gp)
     7e4:	1887883a 	add	r3,r3,r2
     7e8:	19c00025 	stbio	r7,0(r3)
     7ec:	10800044 	addi	r2,r2,1
     7f0:	42000084 	addi	r8,r8,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7f4:	48bff81e 	bne	r9,r2,7d8 <conv_grayscale+0x64>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7f8:	29400044 	addi	r5,r5,1
     7fc:	2189883a 	add	r4,r4,r6
     800:	4c13883a 	add	r9,r9,r16
     804:	917ff11e 	bne	r18,r5,7cc <conv_grayscale+0x58>


			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     808:	dfc00317 	ldw	ra,12(sp)
     80c:	dc800217 	ldw	r18,8(sp)
     810:	dc400117 	ldw	r17,4(sp)
     814:	dc000017 	ldw	r16,0(sp)
     818:	dec00404 	addi	sp,sp,16
     81c:	f800283a 	ret

00000820 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     820:	d0a6cc17 	ldw	r2,-25808(gp)
     824:	f800283a 	ret

00000828 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     828:	d0a6cb17 	ldw	r2,-25812(gp)
     82c:	f800283a 	ret

00000830 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     830:	d0a6cd17 	ldw	r2,-25804(gp)
     834:	f800283a 	ret

00000838 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	00c04034 	movhi	r3,256
     83c:	18c82704 	addi	r3,r3,8348
     840:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     844:	108000cc 	andi	r2,r2,3
     848:	103ffd1e 	bne	r2,zero,840 <i2c_busy_wait+0x8>
}
     84c:	f800283a 	ret

00000850 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     850:	01004034 	movhi	r4,256
     854:	21082704 	addi	r4,r4,8348
     858:	00c04034 	movhi	r3,256
     85c:	18c82704 	addi	r3,r3,8348
     860:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     864:	108000cc 	andi	r2,r2,3
     868:	103ffb1e 	bne	r2,zero,858 <i2c_auto_detect+0x8>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     86c:	00800104 	movi	r2,4
     870:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     874:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffd1e 	bne	r2,zero,874 <i2c_auto_detect+0x24>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     880:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     884:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     888:	10882504 	addi	r2,r2,8340
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     88c:	dfc00315 	stw	ra,12(sp)
     890:	dc800215 	stw	r18,8(sp)
     894:	dc400115 	stw	r17,4(sp)
     898:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     89c:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8a0:	01000074 	movhi	r4,1
     8a4:	2106cc04 	addi	r4,r4,6960
     8a8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8ac:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8b0:	0002c040 	call	2c04 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8b4:	04800a0e 	bge	zero,r18,8e0 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8b8:	04404034 	movhi	r17,256
     8bc:	8c482404 	addi	r17,r17,8336
     8c0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8c4:	89800037 	ldwio	r6,0(r17)
     8c8:	01000074 	movhi	r4,1
     8cc:	800b883a 	mov	r5,r16
     8d0:	2106d504 	addi	r4,r4,6996
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8d4:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8d8:	0002c040 	call	2c04 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8dc:	943ff81e 	bne	r18,r16,8c0 <i2c_auto_detect+0x70>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     8e0:	dfc00317 	ldw	ra,12(sp)
     8e4:	dc800217 	ldw	r18,8(sp)
     8e8:	dc400117 	ldw	r17,4(sp)
     8ec:	dc000017 	ldw	r16,0(sp)
     8f0:	dec00404 	addi	sp,sp,16
     8f4:	f800283a 	ret

000008f8 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f8:	01804034 	movhi	r6,256
     8fc:	31882704 	addi	r6,r6,8348
     900:	00c04034 	movhi	r3,256
     904:	18c82704 	addi	r3,r3,8348
     908:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     90c:	108000cc 	andi	r2,r2,3
     910:	103ffb1e 	bne	r2,zero,900 <i2c_short_read+0x8>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     914:	00804034 	movhi	r2,256
     918:	21003fcc 	andi	r4,r4,255
     91c:	10882404 	addi	r2,r2,8336
     920:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     924:	00804034 	movhi	r2,256
     928:	10882504 	addi	r2,r2,8340
     92c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     930:	008010c4 	movi	r2,67
     934:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     938:	180b883a 	mov	r5,r3
     93c:	00c04034 	movhi	r3,256
     940:	18c82704 	addi	r3,r3,8348
     944:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     948:	108000cc 	andi	r2,r2,3
     94c:	103ffb1e 	bne	r2,zero,93c <i2c_short_read+0x44>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     950:	00804034 	movhi	r2,256
     954:	21000044 	addi	r4,r4,1
     958:	10882404 	addi	r2,r2,8336
     95c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     960:	00800884 	movi	r2,34
     964:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     968:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     96c:	108000cc 	andi	r2,r2,3
     970:	103ffd1e 	bne	r2,zero,968 <i2c_short_read+0x70>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     974:	00804034 	movhi	r2,256
     978:	10882604 	addi	r2,r2,8344
}
     97c:	10800037 	ldwio	r2,0(r2)
     980:	f800283a 	ret

00000984 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     984:	01c04034 	movhi	r7,256
     988:	39c82704 	addi	r7,r7,8348
     98c:	00c04034 	movhi	r3,256
     990:	18c82704 	addi	r3,r3,8348
     994:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     998:	108000cc 	andi	r2,r2,3
     99c:	103ffb1e 	bne	r2,zero,98c <i2c_short_write+0x8>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9a0:	00804034 	movhi	r2,256
     9a4:	10882404 	addi	r2,r2,8336
     9a8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9ac:	00804034 	movhi	r2,256
     9b0:	10882504 	addi	r2,r2,8340
     9b4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9b8:	00804034 	movhi	r2,256
     9bc:	10882604 	addi	r2,r2,8344
     9c0:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9c4:	00801084 	movi	r2,66
     9c8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9cc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9d0:	108000cc 	andi	r2,r2,3
     9d4:	103ffd1e 	bne	r2,zero,9cc <i2c_short_write+0x48>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     9d8:	f800283a 	ret

000009dc <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9dc:	00804034 	movhi	r2,256
     9e0:	10880804 	addi	r2,r2,8224
     9e4:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9e8:	01000284 	movi	r4,10
     9ec:	000f4f81 	jmpi	f4f8 <usleep>

000009f0 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	00804034 	movhi	r2,256
     9f4:	10880904 	addi	r2,r2,8228
     9f8:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9fc:	01000284 	movi	r4,10
     a00:	000f4f81 	jmpi	f4f8 <usleep>

00000a04 <init_LCD>:
}


void init_LCD() {
     a04:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a08:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a0c:	dd400515 	stw	r21,20(sp)
     a10:	dfc00815 	stw	ra,32(sp)
     a14:	ddc00715 	stw	r23,28(sp)
     a18:	dd800615 	stw	r22,24(sp)
     a1c:	dd000415 	stw	r20,16(sp)
     a20:	dcc00315 	stw	r19,12(sp)
     a24:	dc800215 	stw	r18,8(sp)
     a28:	dc400115 	stw	r17,4(sp)
     a2c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a30:	05400084 	movi	r21,2
     a34:	10880a04 	addi	r2,r2,8232
     a38:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a3c:	04804034 	movhi	r18,256
     a40:	94880804 	addi	r18,r18,8224
     a44:	00800a04 	movi	r2,40
     a48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a4c:	04000284 	movi	r16,10
     a50:	8009883a 	mov	r4,r16
     a54:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a58:	05c00444 	movi	r23,17
     a5c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a60:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	04404034 	movhi	r17,256
     a68:	8c480904 	addi	r17,r17,8228
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a6c:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a70:	0027883a 	mov	r19,zero
     a74:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a78:	8009883a 	mov	r4,r16
     a7c:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a80:	008032c4 	movi	r2,203
     a84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a88:	8009883a 	mov	r4,r16
     a8c:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a90:	00800e44 	movi	r2,57
     a94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a98:	8009883a 	mov	r4,r16
     a9c:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa0:	00800b04 	movi	r2,44
     aa4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	00800d04 	movi	r2,52
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ad0:	8009883a 	mov	r4,r16
     ad4:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ad8:	008033c4 	movi	r2,207
     adc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ae0:	8009883a 	mov	r4,r16
     ae4:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aec:	8009883a 	mov	r4,r16
     af0:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af4:	05802044 	movi	r22,129
     af8:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     afc:	8009883a 	mov	r4,r16
     b00:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	00800c04 	movi	r2,48
     b08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b0c:	8009883a 	mov	r4,r16
     b10:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b14:	00803a04 	movi	r2,232
     b18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b1c:	8009883a 	mov	r4,r16
     b20:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b24:	00802144 	movi	r2,133
     b28:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b2c:	8009883a 	mov	r4,r16
     b30:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b34:	05000044 	movi	r20,1
     b38:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b3c:	8009883a 	mov	r4,r16
     b40:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b44:	00801e44 	movi	r2,121
     b48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b54:	00803a84 	movi	r2,234
     b58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b68:	8009883a 	mov	r4,r16
     b6c:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b70:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b74:	8009883a 	mov	r4,r16
     b78:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b7c:	00801904 	movi	r2,100
     b80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b84:	8009883a 	mov	r4,r16
     b88:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b8c:	008000c4 	movi	r2,3
     b90:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b94:	8009883a 	mov	r4,r16
     b98:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b9c:	00800484 	movi	r2,18
     ba0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba4:	8009883a 	mov	r4,r16
     ba8:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bac:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb8:	00803dc4 	movi	r2,247
     bbc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bc0:	8009883a 	mov	r4,r16
     bc4:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc8:	00800804 	movi	r2,32
     bcc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd0:	8009883a 	mov	r4,r16
     bd4:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd8:	00803004 	movi	r2,192
     bdc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be0:	8009883a 	mov	r4,r16
     be4:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be8:	05800984 	movi	r22,38
     bec:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bf0:	8009883a 	mov	r4,r16
     bf4:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf8:	00800104 	movi	r2,4
     bfc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c00:	8009883a 	mov	r4,r16
     c04:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c08:	00803044 	movi	r2,193
     c0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c10:	8009883a 	mov	r4,r16
     c14:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c18:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c1c:	8009883a 	mov	r4,r16
     c20:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c24:	00803144 	movi	r2,197
     c28:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c2c:	8009883a 	mov	r4,r16
     c30:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c34:	00800d44 	movi	r2,53
     c38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c44:	00800f84 	movi	r2,62
     c48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c54:	008031c4 	movi	r2,199
     c58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c5c:	8009883a 	mov	r4,r16
     c60:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c64:	00802f84 	movi	r2,190
     c68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c6c:	8009883a 	mov	r4,r16
     c70:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c74:	00802c44 	movi	r2,177
     c78:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c7c:	8009883a 	mov	r4,r16
     c80:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c84:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c88:	8009883a 	mov	r4,r16
     c8c:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c90:	00800404 	movi	r2,16
     c94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca0:	00800e84 	movi	r2,58
     ca4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00801544 	movi	r2,85
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	00802d84 	movi	r2,182
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	00802884 	movi	r2,162
     ce0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce4:	8009883a 	mov	r4,r16
     ce8:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cec:	00803c84 	movi	r2,242
     cf0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf4:	8009883a 	mov	r4,r16
     cf8:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cfc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d00:	8009883a 	mov	r4,r16
     d04:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d08:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d14:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
     d1c:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00800d84 	movi	r2,54
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d3c:	00800a84 	movi	r2,42
     d40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d44:	8009883a 	mov	r4,r16
     d48:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d4c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d58:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d5c:	8009883a 	mov	r4,r16
     d60:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	00803bc4 	movi	r2,239
     d74:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000f4f80 	call	f4f8 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d80:	00800ac4 	movi	r2,43
     d84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d88:	8009883a 	mov	r4,r16
     d8c:	000f4f80 	call	f4f8 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000f4f80 	call	f4f8 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	00800fc4 	movi	r2,63
     db8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dbc:	8009883a 	mov	r4,r16
     dc0:	000f4f80 	call	f4f8 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dc4:	00c04034 	movhi	r3,256
     dc8:	00803c04 	movi	r2,240
     dcc:	18c80d04 	addi	r3,r3,8244
     dd0:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     dd4:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
     dd8:	00805004 	movi	r2,320
     ddc:	d0a6ce0d 	sth	r2,-25800(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     de0:	00800a44 	movi	r2,41
     de4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de8:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     dec:	dfc00817 	ldw	ra,32(sp)
     df0:	ddc00717 	ldw	r23,28(sp)
     df4:	dd800617 	ldw	r22,24(sp)
     df8:	dd400517 	ldw	r21,20(sp)
     dfc:	dd000417 	ldw	r20,16(sp)
     e00:	dcc00317 	ldw	r19,12(sp)
     e04:	dc800217 	ldw	r18,8(sp)
     e08:	dc400117 	ldw	r17,4(sp)
     e0c:	dc000017 	ldw	r16,0(sp)
     e10:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e14:	000f4f81 	jmpi	f4f8 <usleep>

00000e18 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e18:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e1c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e20:	dc000015 	stw	r16,0(sp)
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	dcc00315 	stw	r19,12(sp)
     e2c:	dc800215 	stw	r18,8(sp)
     e30:	dc400115 	stw	r17,4(sp)
     e34:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e38:	10880e04 	addi	r2,r2,8248
     e3c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e40:	00804034 	movhi	r2,256
     e44:	10880804 	addi	r2,r2,8224
     e48:	00c00b04 	movi	r3,44
     e4c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e50:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e54:	01000284 	movi	r4,10
     e58:	000f4f80 	call	f4f8 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e5c:	90000a26 	beq	r18,zero,e88 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e60:	04c04034 	movhi	r19,256
     e64:	9cc80904 	addi	r19,r19,8228
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e68:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e6c:	8080000b 	ldhu	r2,0(r16)
     e70:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e74:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e78:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     e7c:	000f4f80 	call	f4f8 <usleep>
     e80:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e84:	8cbff91e 	bne	r17,r18,e6c <transfer_LCD_no_dma+0x54>
		LCD_Write_Data(data_array[pixels]);
}
     e88:	dfc00417 	ldw	ra,16(sp)
     e8c:	dcc00317 	ldw	r19,12(sp)
     e90:	dc800217 	ldw	r18,8(sp)
     e94:	dc400117 	ldw	r17,4(sp)
     e98:	dc000017 	ldw	r16,0(sp)
     e9c:	dec00504 	addi	sp,sp,20
     ea0:	f800283a 	ret

00000ea4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     ea4:	d0a6ce0b 	ldhu	r2,-25800(gp)
     ea8:	3080010e 	bge	r6,r2,eb0 <transfer_LCD_with_dma+0xc>
     eac:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     eb0:	d0e6ce8b 	ldhu	r3,-25798(gp)
     eb4:	28c0010e 	bge	r5,r3,ebc <transfer_LCD_with_dma+0x18>
     eb8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	01804034 	movhi	r6,256
     ec0:	31880e04 	addi	r6,r6,8248
     ec4:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     ec8:	01404034 	movhi	r5,256
     ecc:	29480b04 	addi	r5,r5,8236
     ed0:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     ed4:	18ffffcc 	andi	r3,r3,65535
     ed8:	10bfffcc 	andi	r2,r2,65535
     edc:	1885383a 	mul	r2,r3,r2
     ee0:	00c04034 	movhi	r3,256
     ee4:	18c80c04 	addi	r3,r3,8240
     ee8:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     eec:	39c03fcc 	andi	r7,r7,255
     ef0:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ef4:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ef8:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     efc:	10880a04 	addi	r2,r2,8232
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f00:	38000326 	beq	r7,zero,f10 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f04:	00c04404 	movi	r3,272
     f08:	10c0002d 	sthio	r3,0(r2)
     f0c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f10:	00c04004 	movi	r3,256
     f14:	10c0002d 	sthio	r3,0(r2)
     f18:	f800283a 	ret

00000f1c <main>:
#include "vga.h"
#include "dipswitch.h"
#include "sobel.h"

int main()
{
     f1c:	defff804 	addi	sp,sp,-32
     f20:	dfc00715 	stw	ra,28(sp)
     f24:	dd800615 	stw	r22,24(sp)
     f28:	dd400515 	stw	r21,20(sp)
     f2c:	dd000415 	stw	r20,16(sp)
     f30:	dcc00315 	stw	r19,12(sp)
     f34:	dc800215 	stw	r18,8(sp)
     f38:	dc400115 	stw	r17,4(sp)
     f3c:	dc000015 	stw	r16,0(sp)
  unsigned char mode;

	alt_u32 timestampStart = 0;
	alt_u32 timestampStop = 0;

	alt_timestamp_start();
     f40:	00102a00 	call	102a0 <alt_timestamp_start>

  init_LCD();
     f44:	0000a040 	call	a04 <init_LCD>
  init_camera();
     f48:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f4c:	01000604 	movi	r4,24
     f50:	00023900 	call	2390 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f54:	01000074 	movhi	r4,1
     f58:	2106de04 	addi	r4,r4,7032
     f5c:	0002d000 	call	2d00 <puts>
  cam_get_profiling();
     f60:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f64:	00005a80 	call	5a8 <cam_get_xsize>
     f68:	1021883a 	mov	r16,r2
     f6c:	00005cc0 	call	5cc <cam_get_ysize>
     f70:	10bfffcc 	andi	r2,r2,65535
     f74:	813fffcc 	andi	r4,r16,65535
     f78:	2089383a 	mul	r4,r4,r2
     f7c:	04800034 	movhi	r18,0
     f80:	94842504 	addi	r18,r18,4244
     f84:	00023a00 	call	23a0 <malloc>
     f88:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f8c:	00005a80 	call	5a8 <cam_get_xsize>
     f90:	1021883a 	mov	r16,r2
     f94:	00005cc0 	call	5cc <cam_get_ysize>
     f98:	10bfffcc 	andi	r2,r2,65535
     f9c:	813fffcc 	andi	r4,r16,65535
     fa0:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     fa4:	04400104 	movi	r17,4
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
     fa8:	04e04414 	movui	r19,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fac:	00023a00 	call	23a0 <malloc>
     fb0:	102b883a 	mov	r21,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb4:	00005a80 	call	5a8 <cam_get_xsize>
     fb8:	1021883a 	mov	r16,r2
     fbc:	00005cc0 	call	5cc <cam_get_ysize>
     fc0:	10bfffcc 	andi	r2,r2,65535
     fc4:	813fffcc 	andi	r4,r16,65535
     fc8:	2089383a 	mul	r4,r4,r2
     fcc:	00023a00 	call	23a0 <malloc>
     fd0:	1029883a 	mov	r20,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd4:	00005a80 	call	5a8 <cam_get_xsize>
     fd8:	1021883a 	mov	r16,r2
     fdc:	00005cc0 	call	5cc <cam_get_ysize>
     fe0:	10bfffcc 	andi	r2,r2,65535
     fe4:	813fffcc 	andi	r4,r16,65535
     fe8:	2089383a 	mul	r4,r4,r2
     fec:	00023a00 	call	23a0 <malloc>
  cam_set_image_pointer(0,buffer1);
     ff0:	b00b883a 	mov	r5,r22
     ff4:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ff8:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     ffc:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1000:	a80b883a 	mov	r5,r21
    1004:	01000044 	movi	r4,1
    1008:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    100c:	a00b883a 	mov	r5,r20
    1010:	01000084 	movi	r4,2
    1014:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1018:	800b883a 	mov	r5,r16
    101c:	010000c4 	movi	r4,3
    1020:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1024:	00007200 	call	720 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1028:	00005a80 	call	5a8 <cam_get_xsize>
    102c:	1021883a 	mov	r16,r2
    1030:	00005cc0 	call	5cc <cam_get_ysize>
    1034:	813fffcc 	andi	r4,r16,65535
    1038:	2008d07a 	srli	r4,r4,1
    103c:	117fffcc 	andi	r5,r2,65535
    1040:	00012880 	call	1288 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1044:	00007340 	call	734 <new_image_available>
    1048:	10803fcc 	andi	r2,r2,255
    104c:	1080201c 	xori	r2,r2,128
    1050:	10bfe004 	addi	r2,r2,-128
    1054:	103ffb26 	beq	r2,zero,1044 <main+0x128>
		  if (current_image_valid()!=0) {
    1058:	00006dc0 	call	6dc <current_image_valid>
    105c:	10bfffcc 	andi	r2,r2,65535
    1060:	10a0001c 	xori	r2,r2,32768
    1064:	10a00004 	addi	r2,r2,-32768
    1068:	103ff626 	beq	r2,zero,1044 <main+0x128>
			  current_mode = DIPSW_get_value();
    106c:	00007600 	call	760 <DIPSW_get_value>
    1070:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1074:	00006f00 	call	6f0 <current_image_pointer>
    1078:	1029883a 	mov	r20,r2
		      switch (mode) {
    107c:	808001cc 	andi	r2,r16,7
    1080:	88800936 	bltu	r17,r2,10a8 <main+0x18c>
    1084:	100490ba 	slli	r2,r2,2
    1088:	1485883a 	add	r2,r2,r18
    108c:	10800017 	ldw	r2,0(r2)
    1090:	1000683a 	jmp	r2
    1094:	00001240 	call	124 <alt_irq_handler+0x28>
    1098:	000011e8 	cmpgeui	zero,zero,71
    109c:	00001210 	cmplti	zero,zero,72
    10a0:	00001160 	cmpeqi	zero,zero,69
    10a4:	000010a8 	cmpgeui	zero,zero,66
					  vga_set_pointer(grayscale);
				  }

		    	  break;
		      default:
		    	  timestampStart = alt_timestamp();
    10a8:	00103180 	call	10318 <alt_timestamp>
    10ac:	102d883a 	mov	r22,r2
		    	  conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    10b0:	00005a80 	call	5a8 <cam_get_xsize>
    10b4:	102b883a 	mov	r21,r2
	                                  cam_get_ysize());
    10b8:	00005cc0 	call	5cc <cam_get_ysize>
				  }

		    	  break;
		      default:
		    	  timestampStart = alt_timestamp();
		    	  conv_grayscale((void *)image,
    10bc:	a97fffcc 	andi	r5,r21,65535
    10c0:	280ad07a 	srli	r5,r5,1
    10c4:	11bfffcc 	andi	r6,r2,65535
    10c8:	a009883a 	mov	r4,r20
    10cc:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  timestampStop = alt_timestamp();
    10d0:	00103180 	call	10318 <alt_timestamp>
		    	  printf("conv_grayscale (cycles) : %u\n", timestampStop-timestampStart);
    10d4:	01000074 	movhi	r4,1
    10d8:	158bc83a 	sub	r5,r2,r22
    10dc:	2106e304 	addi	r4,r4,7052
    10e0:	0002c040 	call	2c04 <printf>

                       grayscale = get_grayscale_picture();
    10e4:	00008300 	call	830 <get_grayscale_picture>
    10e8:	102b883a 	mov	r21,r2


     		    	  timestampStart = alt_timestamp();
    10ec:	00103180 	call	10318 <alt_timestamp>
                      //sobel_x(grayscale);
     		    	  //sobel_x_inline(grayscale);
     		    	  sobel_complete(grayscale);
    10f0:	a809883a 	mov	r4,r21
		    	  printf("conv_grayscale (cycles) : %u\n", timestampStop-timestampStart);

                       grayscale = get_grayscale_picture();


     		    	  timestampStart = alt_timestamp();
    10f4:	1029883a 	mov	r20,r2
                      //sobel_x(grayscale);
     		    	  //sobel_x_inline(grayscale);
     		    	  sobel_complete(grayscale);
    10f8:	000136c0 	call	136c <sobel_complete>
     		    	  timestampStop = alt_timestamp();
    10fc:	00103180 	call	10318 <alt_timestamp>
     		    	  printf("sobel_complete (cycles) : %u\n", timestampStop-timestampStart);
    1100:	01000074 	movhi	r4,1
    1104:	2106eb04 	addi	r4,r4,7084
    1108:	150bc83a 	sub	r5,r2,r20
    110c:	0002c040 	call	2c04 <printf>
    		    	  //sobel_threshold128();
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
    1110:	00023780 	call	2378 <GetSobelResult>
    1114:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1118:	00005a80 	call	5a8 <cam_get_xsize>
    111c:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),1);
    1120:	00005cc0 	call	5cc <cam_get_ysize>
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1124:	a17fffcc 	andi	r5,r20,65535
    1128:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    112c:	84003fcc 	andi	r16,r16,255
    1130:	8400201c 	xori	r16,r16,128
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1134:	01c00044 	movi	r7,1
    1138:	11bfffcc 	andi	r6,r2,65535
    113c:	a9102204 	addi	r4,r21,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1140:	843fe004 	addi	r16,r16,-128
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1144:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1148:	803fbe0e 	bge	r16,zero,1044 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    114c:	01000604 	movi	r4,24
    1150:	00023900 	call	2390 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1154:	a809883a 	mov	r4,r21
    1158:	00023800 	call	2380 <vga_set_pointer>
    115c:	003fb906 	br	1044 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1160:	00005a80 	call	5a8 <cam_get_xsize>
    1164:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    1168:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    116c:	a97fffcc 	andi	r5,r21,65535
    1170:	280ad07a 	srli	r5,r5,1
    1174:	a009883a 	mov	r4,r20
    1178:	11bfffcc 	andi	r6,r2,65535
    117c:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1180:	00008300 	call	830 <get_grayscale_picture>
		               sobel_x(grayscale);
    1184:	1009883a 	mov	r4,r2
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1188:	1029883a 	mov	r20,r2
		               sobel_x(grayscale);
    118c:	00017780 	call	1778 <sobel_x>
		               sobel_y_with_rgb(grayscale);
    1190:	a009883a 	mov	r4,r20
    1194:	000208c0 	call	208c <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1198:	00023700 	call	2370 <GetSobel_rgb>
    119c:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    11a0:	00005a80 	call	5a8 <cam_get_xsize>
    11a4:	1029883a 	mov	r20,r2
		      		                	cam_get_ysize(),0);
    11a8:	00005cc0 	call	5cc <cam_get_ysize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11ac:	a17fffcc 	andi	r5,r20,65535
    11b0:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b4:	84003fcc 	andi	r16,r16,255
    11b8:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11bc:	000f883a 	mov	r7,zero
    11c0:	11bfffcc 	andi	r6,r2,65535
    11c4:	acc9883a 	add	r4,r21,r19
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11c8:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    11cc:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11d0:	803f9c0e 	bge	r16,zero,1044 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    11d4:	01000204 	movi	r4,8
    11d8:	00023900 	call	2390 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    11dc:	a809883a 	mov	r4,r21
    11e0:	00023800 	call	2380 <vga_set_pointer>
    11e4:	003f9706 	br	1044 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11e8:	00005a80 	call	5a8 <cam_get_xsize>
    11ec:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    11f0:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    11f4:	a97fffcc 	andi	r5,r21,65535
    11f8:	280ad07a 	srli	r5,r5,1
    11fc:	11bfffcc 	andi	r6,r2,65535
    1200:	a009883a 	mov	r4,r20
    1204:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1208:	00008300 	call	830 <get_grayscale_picture>
    120c:	003fc106 	br	1114 <main+0x1f8>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1210:	00005a80 	call	5a8 <cam_get_xsize>
    1214:	102b883a 	mov	r21,r2
		    		                  cam_get_ysize());
    1218:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    121c:	a97fffcc 	andi	r5,r21,65535
    1220:	280ad07a 	srli	r5,r5,1
    1224:	a009883a 	mov	r4,r20
    1228:	11bfffcc 	andi	r6,r2,65535
    122c:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    1230:	00008300 	call	830 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1234:	1009883a 	mov	r4,r2
    1238:	0001b5c0 	call	1b5c <sobel_x_with_rgb>
    123c:	003fd606 	br	1198 <main+0x27c>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1240:	00005a80 	call	5a8 <cam_get_xsize>
    1244:	102b883a 	mov	r21,r2
		                	cam_get_ysize(),0);
    1248:	00005cc0 	call	5cc <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    124c:	a97fffcc 	andi	r5,r21,65535
    1250:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1254:	84003fcc 	andi	r16,r16,255
    1258:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    125c:	000f883a 	mov	r7,zero
    1260:	11bfffcc 	andi	r6,r2,65535
    1264:	a4c9883a 	add	r4,r20,r19
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1268:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    126c:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1270:	803f740e 	bge	r16,zero,1044 <main+0x128>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1274:	01000204 	movi	r4,8
    1278:	00023900 	call	2390 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    127c:	a009883a 	mov	r4,r20
    1280:	00023800 	call	2380 <vga_set_pointer>
    1284:	003f6f06 	br	1044 <main+0x128>

00001288 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1288:	d0a6d217 	ldw	r2,-25784(gp)
unsigned short *sobel_rgb565;
volatile unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    128c:	defffd04 	addi	sp,sp,-12
    1290:	dc400115 	stw	r17,4(sp)
    1294:	dc000015 	stw	r16,0(sp)
    1298:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    129c:	d126cf15 	stw	r4,-25796(gp)
	sobel_height = height;
    12a0:	d166d115 	stw	r5,-25788(gp)
unsigned short *sobel_rgb565;
volatile unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12a4:	2023883a 	mov	r17,r4
    12a8:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12ac:	10000226 	beq	r2,zero,12b8 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    12b0:	1009883a 	mov	r4,r2
    12b4:	00023b40 	call	23b4 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12b8:	8c21383a 	mul	r16,r17,r16
    12bc:	8423883a 	add	r17,r16,r16
    12c0:	8809883a 	mov	r4,r17
    12c4:	00023a00 	call	23a0 <malloc>
	if (sobel_y_result != NULL)
    12c8:	d126d317 	ldw	r4,-25780(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12cc:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    12d0:	20000126 	beq	r4,zero,12d8 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    12d4:	00023b40 	call	23b4 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12d8:	8809883a 	mov	r4,r17
    12dc:	00023a00 	call	23a0 <malloc>
	if (sobel_result != NULL)
    12e0:	d126d017 	ldw	r4,-25792(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12e4:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    12e8:	20000126 	beq	r4,zero,12f0 <init_sobel_arrays+0x68>
		free(sobel_result);
    12ec:	00023b40 	call	23b4 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12f0:	8009883a 	mov	r4,r16
    12f4:	00023a00 	call	23a0 <malloc>
	if (sobel_rgb565 != NULL)
    12f8:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12fc:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    1300:	20000126 	beq	r4,zero,1308 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1304:	00023b40 	call	23b4 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1308:	8809883a 	mov	r4,r17
    130c:	00023a00 	call	23a0 <malloc>
    1310:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1314:	0005883a 	mov	r2,zero
    1318:	04000f0e 	bge	zero,r16,1358 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    131c:	d226d217 	ldw	r8,-25784(gp)
		sobel_y_result[loop] = 0;
    1320:	d1e6d317 	ldw	r7,-25780(gp)
		sobel_result[loop] = 0;
    1324:	d1a6d017 	ldw	r6,-25792(gp)
    1328:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    132c:	40d1883a 	add	r8,r8,r3
    1330:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1334:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    1338:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    133c:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1340:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1344:	d1a6d417 	ldw	r6,-25776(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1348:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    134c:	30c7883a 	add	r3,r6,r3
    1350:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1354:	80bff11e 	bne	r16,r2,131c <init_sobel_arrays+0x94>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1358:	dfc00217 	ldw	ra,8(sp)
    135c:	dc400117 	ldw	r17,4(sp)
    1360:	dc000017 	ldw	r16,0(sp)
    1364:	dec00304 	addi	sp,sp,12
    1368:	f800283a 	ret

0000136c <sobel_complete>:
	   short resultx = 0;
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
    136c:	d166d117 	ldw	r5,-25788(gp)
    1370:	03400084 	movi	r13,2
    1374:	6940480e 	bge	r13,r5,1498 <sobel_complete+0x12c>
    1378:	d0a6cf17 	ldw	r2,-25796(gp)
		sobel_rgb565[loop] = 0;
	}
}


void sobel_complete(unsigned char *source){
    137c:	defffa04 	addi	sp,sp,-24
    1380:	dc000015 	stw	r16,0(sp)
    1384:	dfc00515 	stw	ra,20(sp)
    1388:	dd000415 	stw	r20,16(sp)
    138c:	dcc00315 	stw	r19,12(sp)
    1390:	dc800215 	stw	r18,8(sp)
    1394:	dc400115 	stw	r17,4(sp)
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1398:	6821883a 	mov	r16,r13
    139c:	6bbfffc4 	addi	r14,r13,-1
    13a0:	683f883a 	mov	ra,r13
    13a4:	8080320e 	bge	r16,r2,1470 <sobel_complete+0x104>
    13a8:	6bffff84 	addi	r15,r13,-2
    13ac:	683f883a 	mov	ra,r13
    13b0:	01c00044 	movi	r7,1
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));

	    	    dataB = (int) ( (int)(source[(y+1)*sobel_width+(x-1)]<<24) | (int)(source[(y+1)*sobel_width+(x)]<<16) | (int)(source[(y+1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x+1)]<<0));
    13b4:	134b383a 	mul	r5,r2,r13
	    	    //         5 6 7
	    	  	// DataA = bytes 0,1,2,3 in this order
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));
    13b8:	13c7383a 	mul	r3,r2,r15
    13bc:	3b000044 	addi	r12,r7,1

	    	    dataB = (int) ( (int)(source[(y+1)*sobel_width+(x-1)]<<24) | (int)(source[(y+1)*sobel_width+(x)]<<16) | (int)(source[(y+1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x+1)]<<0));
    13c0:	214d883a 	add	r6,r4,r5
	    	    //         5 6 7
	    	  	// DataA = bytes 0,1,2,3 in this order
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));
    13c4:	20c7883a 	add	r3,r4,r3

	    	    dataB = (int) ( (int)(source[(y+1)*sobel_width+(x-1)]<<24) | (int)(source[(y+1)*sobel_width+(x)]<<16) | (int)(source[(y+1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x+1)]<<0));
    13c8:	2317883a 	add	r11,r4,r12
	    	    //         5 6 7
	    	  	// DataA = bytes 0,1,2,3 in this order
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));
    13cc:	1385383a 	mul	r2,r2,r14
    13d0:	19e3883a 	add	r17,r3,r7
    13d4:	1b13883a 	add	r9,r3,r12

	    	    dataB = (int) ( (int)(source[(y+1)*sobel_width+(x-1)]<<24) | (int)(source[(y+1)*sobel_width+(x)]<<16) | (int)(source[(y+1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x+1)]<<0));
    13d8:	31d1883a 	add	r8,r6,r7
    13dc:	594b883a 	add	r5,r11,r5
    13e0:	3abfffc4 	addi	r10,r7,-1


				// If sum is greater than 128
				//sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
				//sobel_result[arrayindex] = (sum >128) ? 0xFF : 0;
				sobel_result[arrayindex] = (unsigned char) (ALT_CI_SOBEL_XY_CI_0(dataA,dataB) & 0x000000FF);
    13e4:	8cc00003 	ldbu	r19,0(r17)
    13e8:	4c800003 	ldbu	r18,0(r9)
    13ec:	42000003 	ldbu	r8,0(r8)
    13f0:	2a400003 	ldbu	r9,0(r5)
	    	    //         5 6 7
	    	  	// DataA = bytes 0,1,2,3 in this order
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));
    13f4:	1a87883a 	add	r3,r3,r10

	    	    dataB = (int) ( (int)(source[(y+1)*sobel_width+(x-1)]<<24) | (int)(source[(y+1)*sobel_width+(x)]<<16) | (int)(source[(y+1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x+1)]<<0));
    13f8:	328d883a 	add	r6,r6,r10
	    	    //         5 6 7
	    	  	// DataA = bytes 0,1,2,3 in this order
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));
    13fc:	20a3883a 	add	r17,r4,r2


				// If sum is greater than 128
				//sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
				//sobel_result[arrayindex] = (sum >128) ? 0xFF : 0;
				sobel_result[arrayindex] = (unsigned char) (ALT_CI_SOBEL_XY_CI_0(dataA,dataB) & 0x000000FF);
    1400:	19400003 	ldbu	r5,0(r3)
    1404:	35000003 	ldbu	r20,0(r6)
    1408:	9826943a 	slli	r19,r19,16
    140c:	9024923a 	slli	r18,r18,8
	    	    //         5 6 7
	    	  	// DataA = bytes 0,1,2,3 in this order
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));
    1410:	8a95883a 	add	r10,r17,r10


				// If sum is greater than 128
				//sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
				//sobel_result[arrayindex] = (sum >128) ? 0xFF : 0;
				sobel_result[arrayindex] = (unsigned char) (ALT_CI_SOBEL_XY_CI_0(dataA,dataB) & 0x000000FF);
    1414:	4812923a 	slli	r9,r9,8
	    	    // DataB = bytes 5,6,7,4 in this order


	    	    dataA = (int) ( (int)(source[(y-1)*sobel_width+(x-1)]<<24) | (int)(source[(y-1)*sobel_width+(x)]<<16) | (int)(source[(y-1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x-1)]<<0));

	    	    dataB = (int) ( (int)(source[(y+1)*sobel_width+(x-1)]<<24) | (int)(source[(y+1)*sobel_width+(x)]<<16) | (int)(source[(y+1)*sobel_width+(x+1)]<<8)  | (int)(source[(y)*sobel_width+(x+1)]<<0));
    1418:	5897883a 	add	r11,r11,r2


				// If sum is greater than 128
				//sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
				//sobel_result[arrayindex] = (sum >128) ? 0xFF : 0;
				sobel_result[arrayindex] = (unsigned char) (ALT_CI_SOBEL_XY_CI_0(dataA,dataB) & 0x000000FF);
    141c:	4010943a 	slli	r8,r8,16
    1420:	54400003 	ldbu	r17,0(r10)
    1424:	5ac00003 	ldbu	r11,0(r11)
    1428:	280c963a 	slli	r6,r5,24
    142c:	a014963a 	slli	r10,r20,24
    1430:	d166d017 	ldw	r5,-25792(gp)
    1434:	9c86b03a 	or	r3,r19,r18
    1438:	4250b03a 	or	r8,r8,r9
    143c:	1c46b03a 	or	r3,r3,r17
    1440:	11c5883a 	add	r2,r2,r7
    1444:	42d0b03a 	or	r8,r8,r11
    1448:	2885883a 	add	r2,r5,r2
    144c:	198ab03a 	or	r5,r3,r6
    1450:	4286b03a 	or	r3,r8,r10
    1454:	28c7c0b2 	custom	2,r3,r5,r3
    1458:	10c00005 	stb	r3,0(r2)
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
    145c:	d0a6cf17 	ldw	r2,-25796(gp)
    1460:	600f883a 	mov	r7,r12
    1464:	10ffffc4 	addi	r3,r2,-1
    1468:	60ffd216 	blt	r12,r3,13b4 <sobel_complete+0x48>
    146c:	d166d117 	ldw	r5,-25788(gp)
	   short resultx = 0;
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1470:	28ffffc4 	addi	r3,r5,-1
    1474:	6b400044 	addi	r13,r13,1
    1478:	f8ffc816 	blt	ra,r3,139c <sobel_complete+0x30>


	      }
	   }
	   return;
}
    147c:	dfc00517 	ldw	ra,20(sp)
    1480:	dd000417 	ldw	r20,16(sp)
    1484:	dcc00317 	ldw	r19,12(sp)
    1488:	dc800217 	ldw	r18,8(sp)
    148c:	dc400117 	ldw	r17,4(sp)
    1490:	dc000017 	ldw	r16,0(sp)
    1494:	dec00604 	addi	sp,sp,24
    1498:	f800283a 	ret

0000149c <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    149c:	defff904 	addi	sp,sp,-28
    14a0:	da400717 	ldw	r9,28(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    14a4:	30ffffc4 	addi	r3,r6,-1
    14a8:	30800044 	addi	r2,r6,1
    14ac:	3251383a 	mul	r8,r6,r9
    14b0:	1a47383a 	mul	r3,r3,r9
    14b4:	1245383a 	mul	r2,r2,r9
    14b8:	29bfffc4 	addi	r6,r5,-1
    14bc:	2b000044 	addi	r12,r5,1
    14c0:	2211883a 	add	r8,r4,r8
    14c4:	2155883a 	add	r10,r4,r5
    14c8:	2193883a 	add	r9,r4,r6

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    14cc:	dfc00615 	stw	ra,24(sp)
    14d0:	dd400515 	stw	r21,20(sp)
    14d4:	dd000415 	stw	r20,16(sp)
    14d8:	dcc00315 	stw	r19,12(sp)
    14dc:	dc800215 	stw	r18,8(sp)
    14e0:	dc400115 	stw	r17,4(sp)
    14e4:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    14e8:	2085883a 	add	r2,r4,r2
    14ec:	415b883a 	add	r13,r8,r5
    14f0:	4197883a 	add	r11,r8,r6
    14f4:	50d5883a 	add	r10,r10,r3
    14f8:	48d3883a 	add	r9,r9,r3
    14fc:	2309883a 	add	r4,r4,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1500:	54400003 	ldbu	r17,0(r10)
    1504:	4c000003 	ldbu	r16,0(r9)
    1508:	3a800007 	ldb	r10,0(r7)
                   pixels[(y+dy)*width+(x+dx)];
    150c:	20c9883a 	add	r4,r4,r3
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1510:	6c800003 	ldbu	r18,0(r13)
    1514:	5fc00003 	ldbu	ra,0(r11)
    1518:	3b400107 	ldb	r13,4(r7)
                   pixels[(y+dy)*width+(x+dx)];
    151c:	4317883a 	add	r11,r8,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1520:	3a4000c7 	ldb	r9,3(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1524:	118d883a 	add	r6,r2,r6
    1528:	114b883a 	add	r5,r2,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    152c:	3b800047 	ldb	r14,1(r7)
    1530:	25000003 	ldbu	r20,0(r4)
    1534:	3a000087 	ldb	r8,2(r7)
    1538:	5cc00003 	ldbu	r19,0(r11)
    153c:	39000147 	ldb	r4,5(r7)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1540:	33c00003 	ldbu	r15,0(r6)
    1544:	3ac00187 	ldb	r11,6(r7)
    1548:	2d400003 	ldbu	r21,0(r5)
    154c:	398001c7 	ldb	r6,7(r7)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1550:	130b883a 	add	r5,r2,r12
      }
   }
   return result;
    1554:	2b000003 	ldbu	r12,0(r5)
    1558:	39400207 	ldb	r5,8(r7)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    155c:	8295383a 	mul	r10,r16,r10
    1560:	8b8f383a 	mul	r7,r17,r14
    1564:	9347383a 	mul	r3,r18,r13
    1568:	fa53383a 	mul	r9,ra,r9
    156c:	a211383a 	mul	r8,r20,r8
    1570:	9909383a 	mul	r4,r19,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1574:	7ac5383a 	mul	r2,r15,r11
    1578:	a98d383a 	mul	r6,r21,r6
    157c:	614b383a 	mul	r5,r12,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1580:	3a8f883a 	add	r7,r7,r10
    1584:	1a47883a 	add	r3,r3,r9
    1588:	3a0f883a 	add	r7,r7,r8
    158c:	1907883a 	add	r3,r3,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1590:	1185883a 	add	r2,r2,r6
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1594:	38c7883a 	add	r3,r7,r3
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1598:	1145883a 	add	r2,r2,r5
}
    159c:	1885883a 	add	r2,r3,r2
    15a0:	dfc00617 	ldw	ra,24(sp)
    15a4:	dd400517 	ldw	r21,20(sp)
    15a8:	dd000417 	ldw	r20,16(sp)
    15ac:	dcc00317 	ldw	r19,12(sp)
    15b0:	dc800217 	ldw	r18,8(sp)
    15b4:	dc400117 	ldw	r17,4(sp)
    15b8:	dc000017 	ldw	r16,0(sp)
    15bc:	dec00704 	addi	sp,sp,28
    15c0:	f800283a 	ret

000015c4 <sobel_mac_unrollx>:

short sobel_mac_unrollx( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    15c4:	defffa04 	addi	sp,sp,-24
    15c8:	d8c00617 	ldw	r3,24(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    15cc:	30bfffc4 	addi	r2,r6,-1

short sobel_mac_unrollx( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    15d0:	dfc00515 	stw	ra,20(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    15d4:	30d1383a 	mul	r8,r6,r3
    15d8:	10c5383a 	mul	r2,r2,r3
    15dc:	31800044 	addi	r6,r6,1
    15e0:	30c7383a 	mul	r3,r6,r3
    15e4:	1145883a 	add	r2,r2,r5
    15e8:	4151883a 	add	r8,r8,r5

short sobel_mac_unrollx( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    15ec:	dd000415 	stw	r20,16(sp)
    15f0:	dcc00315 	stw	r19,12(sp)
    15f4:	dc800215 	stw	r18,8(sp)
    15f8:	dc400115 	stw	r17,4(sp)
    15fc:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1600:	2211883a 	add	r8,r4,r8
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1604:	2085883a 	add	r2,r4,r2
    1608:	194b883a 	add	r5,r3,r5
    160c:	2149883a 	add	r4,r4,r5
    1610:	10ffffc3 	ldbu	r3,-1(r2)
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1614:	45000043 	ldbu	r20,1(r8)
    1618:	3b800147 	ldb	r14,5(r7)
    161c:	44ffffc3 	ldbu	r19,-1(r8)
    1620:	3ac000c7 	ldb	r11,3(r7)
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1624:	3b400007 	ldb	r13,0(r7)
    1628:	14800003 	ldbu	r18,0(r2)
    162c:	3a800047 	ldb	r10,1(r7)
    1630:	39400087 	ldb	r5,2(r7)
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1634:	44400003 	ldbu	r17,0(r8)
    1638:	3a400107 	ldb	r9,4(r7)
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    163c:	14000043 	ldbu	r16,1(r2)
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
   }
   return result;
    1640:	3b000187 	ldb	r12,6(r7)
    1644:	20bfffc3 	ldbu	r2,-1(r4)
    1648:	27c00043 	ldbu	ra,1(r4)
    164c:	3a000207 	ldb	r8,8(r7)
    1650:	398001c7 	ldb	r6,7(r7)
    1654:	23c00003 	ldbu	r15,0(r4)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1658:	a39d383a 	mul	r14,r20,r14
    165c:	9ad7383a 	mul	r11,r19,r11
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1660:	1b5b383a 	mul	r13,r3,r13
    1664:	9295383a 	mul	r10,r18,r10
    1668:	8149383a 	mul	r4,r16,r5
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    166c:	8a53383a 	mul	r9,r17,r9
   }
   return result;
    1670:	1319383a 	mul	r12,r2,r12
    1674:	fa0f383a 	mul	r7,ra,r8
    1678:	798b383a 	mul	r5,r15,r6
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    167c:	6a87883a 	add	r3,r13,r10
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1680:	72cd883a 	add	r6,r14,r11
    1684:	324d883a 	add	r6,r6,r9
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1688:	1907883a 	add	r3,r3,r4
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
   }
   return result;
    168c:	61c5883a 	add	r2,r12,r7
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1690:	30c7883a 	add	r3,r6,r3
   }
   return result;
    1694:	1145883a 	add	r2,r2,r5
}
    1698:	1885883a 	add	r2,r3,r2
    169c:	dfc00517 	ldw	ra,20(sp)
    16a0:	dd000417 	ldw	r20,16(sp)
    16a4:	dcc00317 	ldw	r19,12(sp)
    16a8:	dc800217 	ldw	r18,8(sp)
    16ac:	dc400117 	ldw	r17,4(sp)
    16b0:	dc000017 	ldw	r16,0(sp)
    16b4:	dec00604 	addi	sp,sp,24
    16b8:	f800283a 	ret

000016bc <sobel_mac_unroll>:

short sobel_mac_unroll( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    16bc:	da800017 	ldw	r10,0(sp)
   short result = 0;

   // dy = -1, dx from -1 to 1

   result += filter[0] * pixels[(y-1)*width+(x-1)];
    16c0:	31bfffc4 	addi	r6,r6,-1

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16c4:	38c00047 	ldb	r3,1(r7)
                 unsigned int width ) {
   short result = 0;

   // dy = -1, dx from -1 to 1

   result += filter[0] * pixels[(y-1)*width+(x-1)];
    16c8:	328d383a 	mul	r6,r6,r10

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16cc:	3b8000c7 	ldb	r14,3(r7)
    16d0:	3a000107 	ldb	r8,4(r7)

   result += filter[0] * pixels[(y-1)*width+(x-1)];
   result += filter[1] * pixels[(y-1)*width+(x+0)];
   result += filter[2] * pixels[(y-1)*width+(x+1)];

   result += filter[3] * pixels[(y)*width+(x-1)];
    16d4:	5185883a 	add	r2,r10,r6
    16d8:	2893883a 	add	r9,r5,r2
                 unsigned int width ) {
   short result = 0;

   // dy = -1, dx from -1 to 1

   result += filter[0] * pixels[(y-1)*width+(x-1)];
    16dc:	314d883a 	add	r6,r6,r5
   result += filter[1] * pixels[(y-1)*width+(x+0)];
    16e0:	218d883a 	add	r6,r4,r6
   result += filter[2] * pixels[(y-1)*width+(x+1)];

   result += filter[3] * pixels[(y)*width+(x-1)];
    16e4:	2253883a 	add	r9,r4,r9

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16e8:	33000003 	ldbu	r12,0(r6)

   result += filter[3] * pixels[(y)*width+(x-1)];
   result += filter[4] * pixels[(y)*width+(x+0)];
   result += filter[5] * pixels[(y)*width+(x+1)];

   result += filter[6] * pixels[(y+1)*width+(x-1)];
    16ec:	5095883a 	add	r10,r10,r2
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16f0:	48bfffc3 	ldbu	r2,-1(r9)

   result += filter[3] * pixels[(y)*width+(x-1)];
   result += filter[4] * pixels[(y)*width+(x+0)];
   result += filter[5] * pixels[(y)*width+(x+1)];

   result += filter[6] * pixels[(y+1)*width+(x-1)];
    16f4:	5155883a 	add	r10,r10,r5
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16f8:	4ac00003 	ldbu	r11,0(r9)
   result += filter[3] * pixels[(y)*width+(x-1)];
   result += filter[4] * pixels[(y)*width+(x+0)];
   result += filter[5] * pixels[(y)*width+(x+1)];

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
    16fc:	229b883a 	add	r13,r4,r10
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    1700:	49000043 	ldbu	r4,1(r9)
    1704:	3a800147 	ldb	r10,5(r7)
    1708:	139d383a 	mul	r14,r2,r14
    170c:	60d9383a 	mul	r12,r12,r3
    1710:	68800003 	ldbu	r2,0(r13)
    1714:	38c001c7 	ldb	r3,7(r7)
    1718:	5a17383a 	mul	r11,r11,r8
    171c:	33ffffc3 	ldbu	r15,-1(r6)
    1720:	3a000007 	ldb	r8,0(r7)
    1724:	2295383a 	mul	r10,r4,r10
    1728:	31000043 	ldbu	r4,1(r6)
    172c:	39800087 	ldb	r6,2(r7)
    1730:	730b883a 	add	r5,r14,r12
    1734:	10d3383a 	mul	r9,r2,r3
    1738:	6b3fffc3 	ldbu	r12,-1(r13)
    173c:	38c00187 	ldb	r3,6(r7)
    1740:	2acb883a 	add	r5,r5,r11
    1744:	7a11383a 	mul	r8,r15,r8
    1748:	6ac00043 	ldbu	r11,1(r13)
    174c:	39c00207 	ldb	r7,8(r7)
    1750:	2a8b883a 	add	r5,r5,r10
    1754:	2189383a 	mul	r4,r4,r6
    1758:	2a45883a 	add	r2,r5,r9
    175c:	60c7383a 	mul	r3,r12,r3
    1760:	1205883a 	add	r2,r2,r8
    1764:	59cb383a 	mul	r5,r11,r7
    1768:	1105883a 	add	r2,r2,r4
    176c:	10c5883a 	add	r2,r2,r3
}
    1770:	1145883a 	add	r2,r2,r5
    1774:	f800283a 	ret

00001778 <sobel_x>:


void sobel_x( unsigned char *source ) {
    1778:	defff704 	addi	sp,sp,-36
    177c:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1780:	d466d117 	ldw	r17,-25788(gp)

   return result;
}


void sobel_x( unsigned char *source ) {
    1784:	dfc00815 	stw	ra,32(sp)
    1788:	ddc00715 	stw	r23,28(sp)
    178c:	dd800615 	stw	r22,24(sp)
    1790:	dd400515 	stw	r21,20(sp)
    1794:	dd000415 	stw	r20,16(sp)
    1798:	dcc00315 	stw	r19,12(sp)
    179c:	dc800215 	stw	r18,8(sp)
    17a0:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17a4:	8c7fffc4 	addi	r17,r17,-1
    17a8:	00800044 	movi	r2,1
    17ac:	14402e0e 	bge	r2,r17,1868 <sobel_x+0xf0>
    17b0:	d366cf17 	ldw	r13,-25796(gp)
    17b4:	d3e6d217 	ldw	r15,-25784(gp)
    17b8:	03800084 	movi	r14,2
    17bc:	6b65883a 	add	r18,r13,r13
    17c0:	9385883a 	add	r2,r18,r14
    17c4:	2359883a 	add	r12,r4,r13
    17c8:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17cc:	7027883a 	mov	r19,r14
    17d0:	736bc83a 	sub	r21,r14,r13
    17d4:	6ba9883a 	add	r20,r13,r14
    17d8:	9b402e0e 	bge	r19,r13,1894 <sobel_x+0x11c>
    17dc:	637f883a 	add	ra,r12,r13
    17e0:	7021883a 	mov	r16,r14
    17e4:	6357c83a 	sub	r11,r12,r13
    17e8:	ab0b883a 	add	r5,r21,r12
    17ec:	62800084 	addi	r10,r12,2
    17f0:	f813883a 	mov	r9,ra
    17f4:	a311883a 	add	r8,r20,r12
    17f8:	780f883a 	mov	r7,r15
    17fc:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1800:	2d800003 	ldbu	r22,0(r5)
    1804:	40c00003 	ldbu	r3,0(r8)
    1808:	31000003 	ldbu	r4,0(r6)
    180c:	50800003 	ldbu	r2,0(r10)
    1810:	b0c7883a 	add	r3,r22,r3
    1814:	5dc00003 	ldbu	r23,0(r11)
    1818:	1907c83a 	sub	r3,r3,r4
    181c:	4d800003 	ldbu	r22,0(r9)
    1820:	1909c83a 	sub	r4,r3,r4
    1824:	1087883a 	add	r3,r2,r2
    1828:	20c7883a 	add	r3,r4,r3
    182c:	1dc5c83a 	sub	r2,r3,r23
    1830:	1585c83a 	sub	r2,r2,r22
    1834:	3880000d 	sth	r2,0(r7)
    1838:	29400044 	addi	r5,r5,1
    183c:	5ac00044 	addi	r11,r11,1
    1840:	31800044 	addi	r6,r6,1
    1844:	52800044 	addi	r10,r10,1
    1848:	4a400044 	addi	r9,r9,1
    184c:	42000044 	addi	r8,r8,1
    1850:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1854:	617fea1e 	bne	r12,r5,1800 <sobel_x+0x88>
    1858:	73800044 	addi	r14,r14,1
    185c:	f819883a 	mov	r12,ra
    1860:	7c9f883a 	add	r15,r15,r18


void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1864:	847fdc16 	blt	r16,r17,17d8 <sobel_x+0x60>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1868:	dfc00817 	ldw	ra,32(sp)
    186c:	ddc00717 	ldw	r23,28(sp)
    1870:	dd800617 	ldw	r22,24(sp)
    1874:	dd400517 	ldw	r21,20(sp)
    1878:	dd000417 	ldw	r20,16(sp)
    187c:	dcc00317 	ldw	r19,12(sp)
    1880:	dc800217 	ldw	r18,8(sp)
    1884:	dc400117 	ldw	r17,4(sp)
    1888:	dc000017 	ldw	r16,0(sp)
    188c:	dec00904 	addi	sp,sp,36
    1890:	f800283a 	ret
    1894:	7021883a 	mov	r16,r14
    1898:	637f883a 	add	ra,r12,r13
    189c:	73800044 	addi	r14,r14,1
    18a0:	f819883a 	mov	r12,ra
    18a4:	7c9f883a 	add	r15,r15,r18


void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18a8:	847fcb16 	blt	r16,r17,17d8 <sobel_x+0x60>
    18ac:	003fee06 	br	1868 <sobel_x+0xf0>

000018b0 <sobel_x_inline>:
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18b0:	d0a6d117 	ldw	r2,-25788(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_inline(unsigned char *source){
    18b4:	deffe904 	addi	sp,sp,-92
    18b8:	dfc01615 	stw	ra,88(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18bc:	10bfffc4 	addi	r2,r2,-1
    18c0:	d8800c15 	stw	r2,48(sp)
    18c4:	d8c00c17 	ldw	r3,48(sp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_inline(unsigned char *source){
    18c8:	df001515 	stw	fp,84(sp)
    18cc:	ddc01415 	stw	r23,80(sp)
    18d0:	dd801315 	stw	r22,76(sp)
    18d4:	dd401215 	stw	r21,72(sp)
    18d8:	dd001115 	stw	r20,68(sp)
    18dc:	dcc01015 	stw	r19,64(sp)
    18e0:	dc800f15 	stw	r18,60(sp)
    18e4:	dc400e15 	stw	r17,56(sp)
    18e8:	dc000d15 	stw	r16,52(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18ec:	00800044 	movi	r2,1
    18f0:	10c0850e 	bge	r2,r3,1b08 <sobel_x_inline+0x258>
    18f4:	d0a6cf17 	ldw	r2,-25796(gp)
    18f8:	05000074 	movhi	r20,1
    18fc:	a506f4c4 	addi	r20,r20,7123
    1900:	1087883a 	add	r3,r2,r2
    1904:	2017883a 	mov	r11,r4
    1908:	a24000c4 	addi	r9,r20,3
    190c:	01000084 	movi	r4,2
    1910:	a2000184 	addi	r8,r20,6
    1914:	a1c00244 	addi	r7,r20,9
    1918:	a1800304 	addi	r6,r20,12
    191c:	d3a6d217 	ldw	r14,-25784(gp)
    1920:	1a800084 	addi	r10,r3,2
    1924:	a14003c4 	addi	r5,r20,15
    1928:	d8800415 	stw	r2,16(sp)
    192c:	d8c00b15 	stw	r3,44(sp)
    1930:	a0800604 	addi	r2,r20,24
    1934:	a0c00544 	addi	r3,r20,21
    1938:	d9000815 	stw	r4,32(sp)
    193c:	4a403fcc 	andi	r9,r9,255
    1940:	a1000484 	addi	r4,r20,18
    1944:	42003fcc 	andi	r8,r8,255
    1948:	39c03fcc 	andi	r7,r7,255
    194c:	31803fcc 	andi	r6,r6,255
    1950:	a5003fcc 	andi	r20,r20,255
    1954:	4a40201c 	xori	r9,r9,128
    1958:	4200201c 	xori	r8,r8,128
    195c:	39c0201c 	xori	r7,r7,128
    1960:	3180201c 	xori	r6,r6,128
    1964:	2dc03fcc 	andi	r23,r5,255
    1968:	25803fcc 	andi	r22,r4,255
    196c:	1d403fcc 	andi	r21,r3,255
    1970:	17003fcc 	andi	fp,r2,255
    1974:	5b000084 	addi	r12,r11,2
    1978:	729d883a 	add	r14,r14,r10
    197c:	5b400044 	addi	r13,r11,1
    1980:	a500201c 	xori	r20,r20,128
    1984:	4a7fe004 	addi	r9,r9,-128
    1988:	423fe004 	addi	r8,r8,-128
    198c:	39ffe004 	addi	r7,r7,-128
    1990:	31bfe004 	addi	r6,r6,-128
    1994:	bdc0201c 	xori	r23,r23,128
    1998:	b580201c 	xori	r22,r22,128
    199c:	ad40201c 	xori	r21,r21,128
    19a0:	e700201c 	xori	fp,fp,128
    19a4:	db800915 	stw	r14,36(sp)
    19a8:	a53fe004 	addi	r20,r20,-128
    19ac:	601d883a 	mov	r14,r12
    19b0:	da40000d 	sth	r9,0(sp)
    19b4:	da00010d 	sth	r8,4(sp)
    19b8:	d9c0020d 	sth	r7,8(sp)
    19bc:	d980030d 	sth	r6,12(sp)
    19c0:	bdffe004 	addi	r23,r23,-128
    19c4:	b5bfe004 	addi	r22,r22,-128
    19c8:	ad7fe004 	addi	r21,r21,-128
    19cc:	e73fe004 	addi	fp,fp,-128
    19d0:	6819883a 	mov	r12,r13
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    19d4:	d9000417 	ldw	r4,16(sp)
    19d8:	00c00084 	movi	r3,2
    19dc:	1900560e 	bge	r3,r4,1b38 <sobel_x_inline+0x288>
    19e0:	5907883a 	add	r3,r11,r4
    19e4:	2005883a 	mov	r2,r4
    19e8:	d9000417 	ldw	r4,16(sp)
    19ec:	1385883a 	add	r2,r2,r14
    19f0:	d8800615 	stw	r2,24(sp)
    19f4:	6109883a 	add	r4,r12,r4
    19f8:	d9000715 	stw	r4,28(sp)
    19fc:	d9000417 	ldw	r4,16(sp)
    1a00:	d8800817 	ldw	r2,32(sp)
    1a04:	dcc00717 	ldw	r19,28(sp)
    1a08:	da800617 	ldw	r10,24(sp)
    1a0c:	dc000917 	ldw	r16,36(sp)
    1a10:	191b883a 	add	r13,r3,r4
    1a14:	d8c00515 	stw	r3,20(sp)
    1a18:	d8800a15 	stw	r2,40(sp)
    1a1c:	183f883a 	mov	ra,r3
    1a20:	9925883a 	add	r18,r19,r4
    1a24:	5123883a 	add	r17,r10,r4
    1a28:	681f883a 	mov	r15,r13
		    	  maskValue = gx_array[(dy+1)*3+(dx+1)];
		         result += source[(y+dy)*sobel_width+(x+dx)] * maskValue;
		      }
		   }

		 sobel_x_result[y*sobel_width+x] = result;
    1a2c:	60c00003 	ldbu	r3,0(r12)
    1a30:	d900000b 	ldhu	r4,0(sp)
    1a34:	58800003 	ldbu	r2,0(r11)
    1a38:	72400003 	ldbu	r9,0(r14)
    1a3c:	1907383a 	mul	r3,r3,r4
    1a40:	d900010b 	ldhu	r4,4(sp)
    1a44:	1505383a 	mul	r2,r2,r20
    1a48:	fa000003 	ldbu	r8,0(ra)
    1a4c:	4913383a 	mul	r9,r9,r4
    1a50:	d900020b 	ldhu	r4,8(sp)
    1a54:	99c00003 	ldbu	r7,0(r19)
    1a58:	10c5883a 	add	r2,r2,r3
    1a5c:	d8c0030b 	ldhu	r3,12(sp)
    1a60:	51800003 	ldbu	r6,0(r10)
    1a64:	79400003 	ldbu	r5,0(r15)
    1a68:	4111383a 	mul	r8,r8,r4
    1a6c:	38cf383a 	mul	r7,r7,r3
    1a70:	91000003 	ldbu	r4,0(r18)
    1a74:	88c00003 	ldbu	r3,0(r17)
    1a78:	1245883a 	add	r2,r2,r9
    1a7c:	35cd383a 	mul	r6,r6,r23
    1a80:	1205883a 	add	r2,r2,r8
    1a84:	2d8b383a 	mul	r5,r5,r22
    1a88:	11c5883a 	add	r2,r2,r7
    1a8c:	2549383a 	mul	r4,r4,r21
    1a90:	1185883a 	add	r2,r2,r6
    1a94:	1f07383a 	mul	r3,r3,fp
    1a98:	1145883a 	add	r2,r2,r5
    1a9c:	1109883a 	add	r4,r2,r4
    1aa0:	20c9883a 	add	r4,r4,r3
    1aa4:	8100000d 	sth	r4,0(r16)
    1aa8:	52800044 	addi	r10,r10,1
    1aac:	5ac00044 	addi	r11,r11,1
    1ab0:	63000044 	addi	r12,r12,1
    1ab4:	73800044 	addi	r14,r14,1
    1ab8:	ffc00044 	addi	ra,ra,1
    1abc:	9cc00044 	addi	r19,r19,1
    1ac0:	7bc00044 	addi	r15,r15,1
    1ac4:	94800044 	addi	r18,r18,1
    1ac8:	8c400044 	addi	r17,r17,1
    1acc:	84000084 	addi	r16,r16,2
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ad0:	6abfd61e 	bne	r13,r10,1a2c <sobel_x_inline+0x17c>
    1ad4:	d9000817 	ldw	r4,32(sp)
    1ad8:	d8800917 	ldw	r2,36(sp)
    1adc:	d8c00b17 	ldw	r3,44(sp)
    1ae0:	21000044 	addi	r4,r4,1
    1ae4:	d9000815 	stw	r4,32(sp)
    1ae8:	10c5883a 	add	r2,r2,r3
    1aec:	d8800915 	stw	r2,36(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1af0:	d9000a17 	ldw	r4,40(sp)
    1af4:	d8800c17 	ldw	r2,48(sp)
    1af8:	dac00517 	ldw	r11,20(sp)
    1afc:	db000717 	ldw	r12,28(sp)
    1b00:	db800617 	ldw	r14,24(sp)
    1b04:	20bfb316 	blt	r4,r2,19d4 <sobel_x_inline+0x124>
		   }

		 sobel_x_result[y*sobel_width+x] = result;
	  }
   }
}
    1b08:	dfc01617 	ldw	ra,88(sp)
    1b0c:	df001517 	ldw	fp,84(sp)
    1b10:	ddc01417 	ldw	r23,80(sp)
    1b14:	dd801317 	ldw	r22,76(sp)
    1b18:	dd401217 	ldw	r21,72(sp)
    1b1c:	dd001117 	ldw	r20,68(sp)
    1b20:	dcc01017 	ldw	r19,64(sp)
    1b24:	dc800f17 	ldw	r18,60(sp)
    1b28:	dc400e17 	ldw	r17,56(sp)
    1b2c:	dc000d17 	ldw	r16,52(sp)
    1b30:	dec01704 	addi	sp,sp,92
    1b34:	f800283a 	ret
    1b38:	d8800817 	ldw	r2,32(sp)
    1b3c:	5917883a 	add	r11,r11,r4
    1b40:	6119883a 	add	r12,r12,r4
    1b44:	711d883a 	add	r14,r14,r4
    1b48:	d8800a15 	stw	r2,40(sp)
    1b4c:	dac00515 	stw	r11,20(sp)
    1b50:	db000715 	stw	r12,28(sp)
    1b54:	db800615 	stw	r14,24(sp)
    1b58:	003fde06 	br	1ad4 <sobel_x_inline+0x224>

00001b5c <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1b5c:	defff604 	addi	sp,sp,-40
    1b60:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b64:	d4e6d117 	ldw	r19,-25788(gp)
		 sobel_x_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1b68:	dfc00915 	stw	ra,36(sp)
    1b6c:	df000815 	stw	fp,32(sp)
    1b70:	ddc00715 	stw	r23,28(sp)
    1b74:	dd800615 	stw	r22,24(sp)
    1b78:	dd400515 	stw	r21,20(sp)
    1b7c:	dd000415 	stw	r20,16(sp)
    1b80:	dc800215 	stw	r18,8(sp)
    1b84:	dc400115 	stw	r17,4(sp)
    1b88:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b8c:	00800084 	movi	r2,2
    1b90:	14c03b0e 	bge	r2,r19,1c80 <sobel_x_with_rgb+0x124>
    1b94:	2025883a 	mov	r18,r4
    1b98:	d126cf17 	ldw	r4,-25796(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1b9c:	d566d217 	ldw	r21,-25784(gp)
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ba0:	d526d417 	ldw	r20,-25776(gp)
    1ba4:	23ffffc4 	addi	r15,r4,-1
    1ba8:	908f883a 	add	r7,r18,r2
    1bac:	9cffffc4 	addi	r19,r19,-1
    1bb0:	200d883a 	mov	r6,r4
    1bb4:	04000044 	movi	r16,1
    1bb8:	31400044 	addi	r5,r6,1
    1bbc:	294b883a 	add	r5,r5,r5
    1bc0:	393f883a 	add	ra,r7,r4
    1bc4:	a15b883a 	add	r13,r20,r5
    1bc8:	3123883a 	add	r17,r6,r4
		 sobel_x_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1bcc:	02000044 	movi	r8,1
    1bd0:	84000044 	addi	r16,r16,1
    1bd4:	3b3fff84 	addi	r12,r7,-2
    1bd8:	918d883a 	add	r6,r18,r6
    1bdc:	9457883a 	add	r11,r18,r17
    1be0:	27d5883a 	add	r10,r4,ra
    1be4:	a94b883a 	add	r5,r21,r5
    1be8:	f813883a 	mov	r9,ra
    1bec:	681d883a 	mov	r14,r13
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bf0:	43c0200e 	bge	r8,r15,1c74 <sobel_x_with_rgb+0x118>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1bf4:	50800003 	ldbu	r2,0(r10)
    1bf8:	3dc00003 	ldbu	r23,0(r7)
    1bfc:	37000003 	ldbu	fp,0(r6)
    1c00:	48c00003 	ldbu	r3,0(r9)
    1c04:	b8af883a 	add	r23,r23,r2
    1c08:	65800003 	ldbu	r22,0(r12)
    1c0c:	bf2fc83a 	sub	r23,r23,fp
    1c10:	58800003 	ldbu	r2,0(r11)
    1c14:	bf2fc83a 	sub	r23,r23,fp
    1c18:	18c7883a 	add	r3,r3,r3
    1c1c:	b8c7883a 	add	r3,r23,r3
    1c20:	1d87c83a 	sub	r3,r3,r22
    1c24:	1885c83a 	sub	r2,r3,r2
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1c28:	2880000d 	sth	r2,0(r5)
          if (result < 0) {
    1c2c:	10bfffcc 	andi	r2,r2,65535
    1c30:	10a0001c 	xori	r2,r2,32768
    1c34:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c38:	1007d0fa 	srai	r3,r2,3
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1c3c:	42000044 	addi	r8,r8,1

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1c40:	10001b16 	blt	r2,zero,1cb0 <sobel_x_with_rgb+0x154>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c44:	180692fa 	slli	r3,r3,11
    1c48:	68c0000d 	sth	r3,0(r13)
    1c4c:	73800084 	addi	r14,r14,2
    1c50:	6b400084 	addi	r13,r13,2
    1c54:	63000044 	addi	r12,r12,1
    1c58:	39c00044 	addi	r7,r7,1
    1c5c:	31800044 	addi	r6,r6,1
    1c60:	4a400044 	addi	r9,r9,1
    1c64:	5ac00044 	addi	r11,r11,1
    1c68:	52800044 	addi	r10,r10,1
    1c6c:	29400084 	addi	r5,r5,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c70:	43ffe016 	blt	r8,r15,1bf4 <sobel_x_with_rgb+0x98>
    1c74:	880d883a 	mov	r6,r17
    1c78:	f80f883a 	mov	r7,ra

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c7c:	9c3fce1e 	bne	r19,r16,1bb8 <sobel_x_with_rgb+0x5c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1c80:	dfc00917 	ldw	ra,36(sp)
    1c84:	df000817 	ldw	fp,32(sp)
    1c88:	ddc00717 	ldw	r23,28(sp)
    1c8c:	dd800617 	ldw	r22,24(sp)
    1c90:	dd400517 	ldw	r21,20(sp)
    1c94:	dd000417 	ldw	r20,16(sp)
    1c98:	dcc00317 	ldw	r19,12(sp)
    1c9c:	dc800217 	ldw	r18,8(sp)
    1ca0:	dc400117 	ldw	r17,4(sp)
    1ca4:	dc000017 	ldw	r16,0(sp)
    1ca8:	dec00a04 	addi	sp,sp,40
    1cac:	f800283a 	ret
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1cb0:	0085c83a 	sub	r2,zero,r2
    1cb4:	1005d0ba 	srai	r2,r2,2
    1cb8:	1004917a 	slli	r2,r2,5
    1cbc:	7080000d 	sth	r2,0(r14)
    1cc0:	003fe206 	br	1c4c <sobel_x_with_rgb+0xf0>

00001cc4 <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1cc4:	defff704 	addi	sp,sp,-36
    1cc8:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ccc:	d466d117 	ldw	r17,-25788(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1cd0:	dfc00815 	stw	ra,32(sp)
    1cd4:	ddc00715 	stw	r23,28(sp)
    1cd8:	dd800615 	stw	r22,24(sp)
    1cdc:	dd400515 	stw	r21,20(sp)
    1ce0:	dd000415 	stw	r20,16(sp)
    1ce4:	dcc00315 	stw	r19,12(sp)
    1ce8:	dc800215 	stw	r18,8(sp)
    1cec:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1cf0:	8c7fffc4 	addi	r17,r17,-1
    1cf4:	00800044 	movi	r2,1
    1cf8:	14402e0e 	bge	r2,r17,1db4 <sobel_y+0xf0>
    1cfc:	d3e6cf17 	ldw	r15,-25796(gp)
    1d00:	d3a6d317 	ldw	r14,-25780(gp)
    1d04:	03400084 	movi	r13,2
    1d08:	7bff883a 	add	ra,r15,r15
    1d0c:	fb67883a 	add	r19,ra,r13
    1d10:	2019883a 	mov	r12,r4
    1d14:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d18:	6825883a 	mov	r18,r13
    1d1c:	f8a9883a 	add	r20,ra,r2
    1d20:	6821883a 	mov	r16,r13
    1d24:	93c01f0e 	bge	r18,r15,1da4 <sobel_y+0xe0>
    1d28:	67cb883a 	add	r5,r12,ra
    1d2c:	6821883a 	mov	r16,r13
    1d30:	62800044 	addi	r10,r12,1
    1d34:	61000084 	addi	r4,r12,2
    1d38:	a313883a 	add	r9,r20,r12
    1d3c:	9b11883a 	add	r8,r19,r12
    1d40:	2bd7c83a 	sub	r11,r5,r15
    1d44:	700f883a 	mov	r7,r14
    1d48:	600d883a 	mov	r6,r12
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1d4c:	35800003 	ldbu	r22,0(r6)
    1d50:	20c00003 	ldbu	r3,0(r4)
    1d54:	50800003 	ldbu	r2,0(r10)
    1d58:	4d400003 	ldbu	r21,0(r9)
    1d5c:	b0c7883a 	add	r3,r22,r3
    1d60:	1085883a 	add	r2,r2,r2
    1d64:	2dc00003 	ldbu	r23,0(r5)
    1d68:	1887883a 	add	r3,r3,r2
    1d6c:	45800003 	ldbu	r22,0(r8)
    1d70:	1d47c83a 	sub	r3,r3,r21
    1d74:	1d47c83a 	sub	r3,r3,r21
    1d78:	1dc5c83a 	sub	r2,r3,r23
    1d7c:	1585c83a 	sub	r2,r2,r22
    1d80:	3880000d 	sth	r2,0(r7)
    1d84:	21000044 	addi	r4,r4,1
    1d88:	31800044 	addi	r6,r6,1
    1d8c:	52800044 	addi	r10,r10,1
    1d90:	29400044 	addi	r5,r5,1
    1d94:	4a400044 	addi	r9,r9,1
    1d98:	42000044 	addi	r8,r8,1
    1d9c:	39c00084 	addi	r7,r7,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1da0:	593fea1e 	bne	r11,r4,1d4c <sobel_y+0x88>
    1da4:	6b400044 	addi	r13,r13,1
    1da8:	63d9883a 	add	r12,r12,r15
    1dac:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1db0:	847fdb16 	blt	r16,r17,1d20 <sobel_y+0x5c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1db4:	dfc00817 	ldw	ra,32(sp)
    1db8:	ddc00717 	ldw	r23,28(sp)
    1dbc:	dd800617 	ldw	r22,24(sp)
    1dc0:	dd400517 	ldw	r21,20(sp)
    1dc4:	dd000417 	ldw	r20,16(sp)
    1dc8:	dcc00317 	ldw	r19,12(sp)
    1dcc:	dc800217 	ldw	r18,8(sp)
    1dd0:	dc400117 	ldw	r17,4(sp)
    1dd4:	dc000017 	ldw	r16,0(sp)
    1dd8:	dec00904 	addi	sp,sp,36
    1ddc:	f800283a 	ret

00001de0 <sobel_y_inline>:
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1de0:	d0a6d117 	ldw	r2,-25788(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_inline(unsigned char *source){
    1de4:	deffe904 	addi	sp,sp,-92
    1de8:	dfc01615 	stw	ra,88(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1dec:	10bfffc4 	addi	r2,r2,-1
    1df0:	d8800c15 	stw	r2,48(sp)
    1df4:	d8c00c17 	ldw	r3,48(sp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_inline(unsigned char *source){
    1df8:	df001515 	stw	fp,84(sp)
    1dfc:	ddc01415 	stw	r23,80(sp)
    1e00:	dd801315 	stw	r22,76(sp)
    1e04:	dd401215 	stw	r21,72(sp)
    1e08:	dd001115 	stw	r20,68(sp)
    1e0c:	dcc01015 	stw	r19,64(sp)
    1e10:	dc800f15 	stw	r18,60(sp)
    1e14:	dc400e15 	stw	r17,56(sp)
    1e18:	dc000d15 	stw	r16,52(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e1c:	00800044 	movi	r2,1
    1e20:	10c0850e 	bge	r2,r3,2038 <sobel_y_inline+0x258>
    1e24:	d0a6cf17 	ldw	r2,-25796(gp)
    1e28:	05000074 	movhi	r20,1
    1e2c:	a506f284 	addi	r20,r20,7114
    1e30:	1087883a 	add	r3,r2,r2
    1e34:	2017883a 	mov	r11,r4
    1e38:	a24000c4 	addi	r9,r20,3
    1e3c:	01000084 	movi	r4,2
    1e40:	a2000184 	addi	r8,r20,6
    1e44:	a1c00244 	addi	r7,r20,9
    1e48:	a1800304 	addi	r6,r20,12
    1e4c:	d3a6d317 	ldw	r14,-25780(gp)
    1e50:	1a800084 	addi	r10,r3,2
    1e54:	a14003c4 	addi	r5,r20,15
    1e58:	d8800415 	stw	r2,16(sp)
    1e5c:	d8c00b15 	stw	r3,44(sp)
    1e60:	a0800604 	addi	r2,r20,24
    1e64:	a0c00544 	addi	r3,r20,21
    1e68:	d9000815 	stw	r4,32(sp)
    1e6c:	4a403fcc 	andi	r9,r9,255
    1e70:	a1000484 	addi	r4,r20,18
    1e74:	42003fcc 	andi	r8,r8,255
    1e78:	39c03fcc 	andi	r7,r7,255
    1e7c:	31803fcc 	andi	r6,r6,255
    1e80:	a5003fcc 	andi	r20,r20,255
    1e84:	4a40201c 	xori	r9,r9,128
    1e88:	4200201c 	xori	r8,r8,128
    1e8c:	39c0201c 	xori	r7,r7,128
    1e90:	3180201c 	xori	r6,r6,128
    1e94:	2dc03fcc 	andi	r23,r5,255
    1e98:	25803fcc 	andi	r22,r4,255
    1e9c:	1d403fcc 	andi	r21,r3,255
    1ea0:	17003fcc 	andi	fp,r2,255
    1ea4:	5b000084 	addi	r12,r11,2
    1ea8:	729d883a 	add	r14,r14,r10
    1eac:	5b400044 	addi	r13,r11,1
    1eb0:	a500201c 	xori	r20,r20,128
    1eb4:	4a7fe004 	addi	r9,r9,-128
    1eb8:	423fe004 	addi	r8,r8,-128
    1ebc:	39ffe004 	addi	r7,r7,-128
    1ec0:	31bfe004 	addi	r6,r6,-128
    1ec4:	bdc0201c 	xori	r23,r23,128
    1ec8:	b580201c 	xori	r22,r22,128
    1ecc:	ad40201c 	xori	r21,r21,128
    1ed0:	e700201c 	xori	fp,fp,128
    1ed4:	db800915 	stw	r14,36(sp)
    1ed8:	a53fe004 	addi	r20,r20,-128
    1edc:	601d883a 	mov	r14,r12
    1ee0:	da40000d 	sth	r9,0(sp)
    1ee4:	da00010d 	sth	r8,4(sp)
    1ee8:	d9c0020d 	sth	r7,8(sp)
    1eec:	d980030d 	sth	r6,12(sp)
    1ef0:	bdffe004 	addi	r23,r23,-128
    1ef4:	b5bfe004 	addi	r22,r22,-128
    1ef8:	ad7fe004 	addi	r21,r21,-128
    1efc:	e73fe004 	addi	fp,fp,-128
    1f00:	6819883a 	mov	r12,r13
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f04:	d9000417 	ldw	r4,16(sp)
    1f08:	00c00084 	movi	r3,2
    1f0c:	1900560e 	bge	r3,r4,2068 <sobel_y_inline+0x288>
    1f10:	5907883a 	add	r3,r11,r4
    1f14:	2005883a 	mov	r2,r4
    1f18:	d9000417 	ldw	r4,16(sp)
    1f1c:	1385883a 	add	r2,r2,r14
    1f20:	d8800615 	stw	r2,24(sp)
    1f24:	6109883a 	add	r4,r12,r4
    1f28:	d9000715 	stw	r4,28(sp)
    1f2c:	d9000417 	ldw	r4,16(sp)
    1f30:	d8800817 	ldw	r2,32(sp)
    1f34:	dcc00717 	ldw	r19,28(sp)
    1f38:	da800617 	ldw	r10,24(sp)
    1f3c:	dc000917 	ldw	r16,36(sp)
    1f40:	191b883a 	add	r13,r3,r4
    1f44:	d8c00515 	stw	r3,20(sp)
    1f48:	d8800a15 	stw	r2,40(sp)
    1f4c:	183f883a 	mov	ra,r3
    1f50:	9925883a 	add	r18,r19,r4
    1f54:	5123883a 	add	r17,r10,r4
    1f58:	681f883a 	mov	r15,r13
		    	  maskValue = gy_array[(dy+1)*3+(dx+1)];
		         result += source[(y+dy)*sobel_width+(x+dx)] * maskValue;
		      }
		   }

		 sobel_y_result[y*sobel_width+x] = result;
    1f5c:	60c00003 	ldbu	r3,0(r12)
    1f60:	d900000b 	ldhu	r4,0(sp)
    1f64:	58800003 	ldbu	r2,0(r11)
    1f68:	72400003 	ldbu	r9,0(r14)
    1f6c:	1907383a 	mul	r3,r3,r4
    1f70:	d900010b 	ldhu	r4,4(sp)
    1f74:	1505383a 	mul	r2,r2,r20
    1f78:	fa000003 	ldbu	r8,0(ra)
    1f7c:	4913383a 	mul	r9,r9,r4
    1f80:	d900020b 	ldhu	r4,8(sp)
    1f84:	99c00003 	ldbu	r7,0(r19)
    1f88:	10c5883a 	add	r2,r2,r3
    1f8c:	d8c0030b 	ldhu	r3,12(sp)
    1f90:	51800003 	ldbu	r6,0(r10)
    1f94:	79400003 	ldbu	r5,0(r15)
    1f98:	4111383a 	mul	r8,r8,r4
    1f9c:	38cf383a 	mul	r7,r7,r3
    1fa0:	91000003 	ldbu	r4,0(r18)
    1fa4:	88c00003 	ldbu	r3,0(r17)
    1fa8:	1245883a 	add	r2,r2,r9
    1fac:	35cd383a 	mul	r6,r6,r23
    1fb0:	1205883a 	add	r2,r2,r8
    1fb4:	2d8b383a 	mul	r5,r5,r22
    1fb8:	11c5883a 	add	r2,r2,r7
    1fbc:	2549383a 	mul	r4,r4,r21
    1fc0:	1185883a 	add	r2,r2,r6
    1fc4:	1f07383a 	mul	r3,r3,fp
    1fc8:	1145883a 	add	r2,r2,r5
    1fcc:	1109883a 	add	r4,r2,r4
    1fd0:	20c9883a 	add	r4,r4,r3
    1fd4:	8100000d 	sth	r4,0(r16)
    1fd8:	52800044 	addi	r10,r10,1
    1fdc:	5ac00044 	addi	r11,r11,1
    1fe0:	63000044 	addi	r12,r12,1
    1fe4:	73800044 	addi	r14,r14,1
    1fe8:	ffc00044 	addi	ra,ra,1
    1fec:	9cc00044 	addi	r19,r19,1
    1ff0:	7bc00044 	addi	r15,r15,1
    1ff4:	94800044 	addi	r18,r18,1
    1ff8:	8c400044 	addi	r17,r17,1
    1ffc:	84000084 	addi	r16,r16,2
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    2000:	6abfd61e 	bne	r13,r10,1f5c <sobel_y_inline+0x17c>
    2004:	d9000817 	ldw	r4,32(sp)
    2008:	d8800917 	ldw	r2,36(sp)
    200c:	d8c00b17 	ldw	r3,44(sp)
    2010:	21000044 	addi	r4,r4,1
    2014:	d9000815 	stw	r4,32(sp)
    2018:	10c5883a 	add	r2,r2,r3
    201c:	d8800915 	stw	r2,36(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2020:	d9000a17 	ldw	r4,40(sp)
    2024:	d8800c17 	ldw	r2,48(sp)
    2028:	dac00517 	ldw	r11,20(sp)
    202c:	db000717 	ldw	r12,28(sp)
    2030:	db800617 	ldw	r14,24(sp)
    2034:	20bfb316 	blt	r4,r2,1f04 <sobel_y_inline+0x124>
		   }

		 sobel_y_result[y*sobel_width+x] = result;
	  }
   }
}
    2038:	dfc01617 	ldw	ra,88(sp)
    203c:	df001517 	ldw	fp,84(sp)
    2040:	ddc01417 	ldw	r23,80(sp)
    2044:	dd801317 	ldw	r22,76(sp)
    2048:	dd401217 	ldw	r21,72(sp)
    204c:	dd001117 	ldw	r20,68(sp)
    2050:	dcc01017 	ldw	r19,64(sp)
    2054:	dc800f17 	ldw	r18,60(sp)
    2058:	dc400e17 	ldw	r17,56(sp)
    205c:	dc000d17 	ldw	r16,52(sp)
    2060:	dec01704 	addi	sp,sp,92
    2064:	f800283a 	ret
    2068:	d8800817 	ldw	r2,32(sp)
    206c:	5917883a 	add	r11,r11,r4
    2070:	6119883a 	add	r12,r12,r4
    2074:	711d883a 	add	r14,r14,r4
    2078:	d8800a15 	stw	r2,40(sp)
    207c:	dac00515 	stw	r11,20(sp)
    2080:	db000715 	stw	r12,28(sp)
    2084:	db800615 	stw	r14,24(sp)
    2088:	003fde06 	br	2004 <sobel_y_inline+0x224>

0000208c <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    208c:	defff504 	addi	sp,sp,-44
    2090:	dd400615 	stw	r21,24(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2094:	d566d117 	ldw	r21,-25788(gp)
		 sobel_y_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    2098:	dfc00a15 	stw	ra,40(sp)
    209c:	df000915 	stw	fp,36(sp)
    20a0:	ddc00815 	stw	r23,32(sp)
    20a4:	dd800715 	stw	r22,28(sp)
    20a8:	dd000515 	stw	r20,20(sp)
    20ac:	dcc00415 	stw	r19,16(sp)
    20b0:	dc800315 	stw	r18,12(sp)
    20b4:	dc400215 	stw	r17,8(sp)
    20b8:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    20bc:	00800084 	movi	r2,2
    20c0:	1540470e 	bge	r2,r21,21e0 <sobel_y_with_rgb+0x154>
    20c4:	d426cf17 	ldw	r16,-25796(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    20c8:	d726d317 	ldw	fp,-25780(gp)
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    20cc:	d5e6d417 	ldw	r23,-25776(gp)
    20d0:	842d883a 	add	r22,r16,r16
    20d4:	2029883a 	mov	r20,r4
    20d8:	25bf883a 	add	ra,r4,r22
    20dc:	80c00084 	addi	r3,r16,2
    20e0:	813fffc4 	addi	r4,r16,-1
    20e4:	a2800044 	addi	r10,r20,1
    20e8:	07ffc83a 	sub	ra,zero,ra
    20ec:	ad7fffc4 	addi	r21,r21,-1
    20f0:	8005883a 	mov	r2,r16
    20f4:	04400044 	movi	r17,1
    20f8:	d8c00015 	stw	r3,0(sp)
    20fc:	d8c00017 	ldw	r3,0(sp)
    2100:	12000044 	addi	r8,r2,1
    2104:	4211883a 	add	r8,r8,r8
    2108:	ba1d883a 	add	r14,r23,r8
    210c:	1427883a 	add	r19,r2,r16
    2110:	55a5883a 	add	r18,r10,r22
    2114:	1885883a 	add	r2,r3,r2
    2118:	8c400044 	addi	r17,r17,1
    211c:	537fffc4 	addi	r13,r10,-1
    2120:	53000044 	addi	r12,r10,1
    2124:	a4d7883a 	add	r11,r20,r19
    2128:	a093883a 	add	r9,r20,r2
    212c:	e211883a 	add	r8,fp,r8
		 sobel_y_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    2130:	900f883a 	mov	r7,r18
    2134:	701f883a 	mov	r15,r14
    2138:	00000b06 	br	2168 <sobel_y_with_rgb+0xdc>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    213c:	180692fa 	slli	r3,r3,11
    2140:	70c0000d 	sth	r3,0(r14)
    2144:	7bc00084 	addi	r15,r15,2
    2148:	73800084 	addi	r14,r14,2
    214c:	6b400044 	addi	r13,r13,1
    2150:	52800044 	addi	r10,r10,1
    2154:	63000044 	addi	r12,r12,1
    2158:	5ac00044 	addi	r11,r11,1
    215c:	39c00044 	addi	r7,r7,1
    2160:	4a400044 	addi	r9,r9,1
    2164:	42000084 	addi	r8,r8,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2168:	3fc5883a 	add	r2,r7,ra
    216c:	1100180e 	bge	r2,r4,21d0 <sobel_y_with_rgb+0x144>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    2170:	60800003 	ldbu	r2,0(r12)
    2174:	69800003 	ldbu	r6,0(r13)
    2178:	50c00003 	ldbu	r3,0(r10)
    217c:	39400003 	ldbu	r5,0(r7)
    2180:	308d883a 	add	r6,r6,r2
    2184:	18c7883a 	add	r3,r3,r3
    2188:	58800003 	ldbu	r2,0(r11)
    218c:	30c7883a 	add	r3,r6,r3
    2190:	1947c83a 	sub	r3,r3,r5
    2194:	49800003 	ldbu	r6,0(r9)
    2198:	1947c83a 	sub	r3,r3,r5
    219c:	1885c83a 	sub	r2,r3,r2
    21a0:	1185c83a 	sub	r2,r2,r6
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    21a4:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    21a8:	10bfffcc 	andi	r2,r2,65535
    21ac:	10a0001c 	xori	r2,r2,32768
    21b0:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    21b4:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    21b8:	103fe00e 	bge	r2,zero,213c <sobel_y_with_rgb+0xb0>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    21bc:	0085c83a 	sub	r2,zero,r2
    21c0:	1005d0ba 	srai	r2,r2,2
    21c4:	1004917a 	slli	r2,r2,5
    21c8:	7880000d 	sth	r2,0(r15)
    21cc:	003fdd06 	br	2144 <sobel_y_with_rgb+0xb8>
    21d0:	9415c83a 	sub	r10,r18,r16
    21d4:	fc3fc83a 	sub	ra,ra,r16
    21d8:	9805883a 	mov	r2,r19

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    21dc:	ac7fc71e 	bne	r21,r17,20fc <sobel_y_with_rgb+0x70>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    21e0:	dfc00a17 	ldw	ra,40(sp)
    21e4:	df000917 	ldw	fp,36(sp)
    21e8:	ddc00817 	ldw	r23,32(sp)
    21ec:	dd800717 	ldw	r22,28(sp)
    21f0:	dd400617 	ldw	r21,24(sp)
    21f4:	dd000517 	ldw	r20,20(sp)
    21f8:	dcc00417 	ldw	r19,16(sp)
    21fc:	dc800317 	ldw	r18,12(sp)
    2200:	dc400217 	ldw	r17,8(sp)
    2204:	dc000117 	ldw	r16,4(sp)
    2208:	dec00b04 	addi	sp,sp,44
    220c:	f800283a 	ret

00002210 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2210:	d0a6d117 	ldw	r2,-25788(gp)
    2214:	02400084 	movi	r9,2
    2218:	4880290e 	bge	r9,r2,22c0 <sobel_threshold+0xb0>
    221c:	223fffcc 	andi	r8,r4,65535
    2220:	d0e6cf17 	ldw	r3,-25796(gp)
    2224:	4220001c 	xori	r8,r8,32768
    2228:	01c00044 	movi	r7,1
    222c:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2230:	48c0200e 	bge	r9,r3,22b4 <sobel_threshold+0xa4>
    2234:	01400044 	movi	r5,1
    2238:	00000c06 	br	226c <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    223c:	2080000f 	ldh	r2,0(r4)
    2240:	10001916 	blt	r2,zero,22a8 <sobel_threshold+0x98>
    2244:	3085883a 	add	r2,r6,r2
    2248:	10bfffcc 	andi	r2,r2,65535
    224c:	10a0001c 	xori	r2,r2,32768
    2250:	10a00004 	addi	r2,r2,-32768
    2254:	4084803a 	cmplt	r2,r8,r2
    2258:	0085c83a 	sub	r2,zero,r2
    225c:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2260:	d0e6cf17 	ldw	r3,-25796(gp)
    2264:	18bfffc4 	addi	r2,r3,-1
    2268:	2880110e 	bge	r5,r2,22b0 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    226c:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    2270:	d1a6d317 	ldw	r6,-25780(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    2274:	d126d217 	ldw	r4,-25784(gp)
    2278:	1947883a 	add	r3,r3,r5
    227c:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    2280:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    2284:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2288:	3180000f 	ldh	r6,0(r6)
    228c:	d0a6d017 	ldw	r2,-25792(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2290:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2294:	10c7883a 	add	r3,r2,r3
    2298:	303fe80e 	bge	r6,zero,223c <sobel_threshold+0x2c>
    229c:	2080000f 	ldh	r2,0(r4)
    22a0:	018dc83a 	sub	r6,zero,r6
    22a4:	103fe70e 	bge	r2,zero,2244 <sobel_threshold+0x34>
    22a8:	0085c83a 	sub	r2,zero,r2
    22ac:	003fe506 	br	2244 <sobel_threshold+0x34>
    22b0:	d0a6d117 	ldw	r2,-25788(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    22b4:	39c00044 	addi	r7,r7,1
    22b8:	113fffc4 	addi	r4,r2,-1
    22bc:	393fdc16 	blt	r7,r4,2230 <sobel_threshold+0x20>
    22c0:	f800283a 	ret

000022c4 <sobel_threshold128>:


void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    22c4:	d0a6d117 	ldw	r2,-25788(gp)
    22c8:	02000084 	movi	r8,2
    22cc:	4080270e 	bge	r8,r2,236c <sobel_threshold128+0xa8>
    22d0:	d0e6cf17 	ldw	r3,-25796(gp)
    22d4:	01c00044 	movi	r7,1
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    22d8:	40c0210e 	bge	r8,r3,2360 <sobel_threshold128+0x9c>
    22dc:	01400044 	movi	r5,1
    22e0:	00000d06 	br	2318 <sobel_threshold128+0x54>

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);

			// If sum is greater than 128
			sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    22e4:	2080000f 	ldh	r2,0(r4)
    22e8:	10001a16 	blt	r2,zero,2354 <sobel_threshold128+0x90>
    22ec:	3085883a 	add	r2,r6,r2
    22f0:	10bfffcc 	andi	r2,r2,65535
    22f4:	10a0001c 	xori	r2,r2,32768
    22f8:	10a00004 	addi	r2,r2,-32768
    22fc:	1005d1fa 	srai	r2,r2,7
    2300:	1004c03a 	cmpne	r2,r2,zero
    2304:	0085c83a 	sub	r2,zero,r2
    2308:	18800005 	stb	r2,0(r3)

void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    230c:	d0e6cf17 	ldw	r3,-25796(gp)
    2310:	18bfffc4 	addi	r2,r3,-1
    2314:	2880110e 	bge	r5,r2,235c <sobel_threshold128+0x98>
			arrayindex = (y*sobel_width)+x;

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
    2318:	38c7383a 	mul	r3,r7,r3
    231c:	d1a6d217 	ldw	r6,-25784(gp)
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);
    2320:	d126d317 	ldw	r4,-25780(gp)
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
    2324:	1947883a 	add	r3,r3,r5
    2328:	18c5883a 	add	r2,r3,r3
    232c:	308d883a 	add	r6,r6,r2
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);
    2330:	2089883a 	add	r4,r4,r2

			// If sum is greater than 128
			sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    2334:	3180000f 	ldh	r6,0(r6)
    2338:	d0a6d017 	ldw	r2,-25792(gp)

void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    233c:	29400044 	addi	r5,r5,1

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);

			// If sum is greater than 128
			sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    2340:	10c7883a 	add	r3,r2,r3
    2344:	303fe70e 	bge	r6,zero,22e4 <sobel_threshold128+0x20>
    2348:	2080000f 	ldh	r2,0(r4)
    234c:	018dc83a 	sub	r6,zero,r6
    2350:	103fe60e 	bge	r2,zero,22ec <sobel_threshold128+0x28>
    2354:	0085c83a 	sub	r2,zero,r2
    2358:	003fe406 	br	22ec <sobel_threshold128+0x28>
    235c:	d0a6d117 	ldw	r2,-25788(gp)


void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2360:	39c00044 	addi	r7,r7,1
    2364:	113fffc4 	addi	r4,r2,-1
    2368:	393fdb16 	blt	r7,r4,22d8 <sobel_threshold128+0x14>
    236c:	f800283a 	ret

00002370 <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    2370:	d0a6d417 	ldw	r2,-25776(gp)
    2374:	f800283a 	ret

00002378 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    2378:	d0a6d017 	ldw	r2,-25792(gp)
    237c:	f800283a 	ret

00002380 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2380:	00804034 	movhi	r2,256
    2384:	10883404 	addi	r2,r2,8400
    2388:	11000035 	stwio	r4,0(r2)
    238c:	f800283a 	ret

00002390 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2390:	00804034 	movhi	r2,256
    2394:	10883504 	addi	r2,r2,8404
    2398:	11000025 	stbio	r4,0(r2)
    239c:	f800283a 	ret

000023a0 <malloc>:
    23a0:	00800074 	movhi	r2,1
    23a4:	108e6204 	addi	r2,r2,14728
    23a8:	200b883a 	mov	r5,r4
    23ac:	11000017 	ldw	r4,0(r2)
    23b0:	00023c81 	jmpi	23c8 <_malloc_r>

000023b4 <free>:
    23b4:	00800074 	movhi	r2,1
    23b8:	108e6204 	addi	r2,r2,14728
    23bc:	200b883a 	mov	r5,r4
    23c0:	11000017 	ldw	r4,0(r2)
    23c4:	00072181 	jmpi	7218 <_free_r>

000023c8 <_malloc_r>:
    23c8:	defff504 	addi	sp,sp,-44
    23cc:	dc800315 	stw	r18,12(sp)
    23d0:	dfc00a15 	stw	ra,40(sp)
    23d4:	df000915 	stw	fp,36(sp)
    23d8:	ddc00815 	stw	r23,32(sp)
    23dc:	dd800715 	stw	r22,28(sp)
    23e0:	dd400615 	stw	r21,24(sp)
    23e4:	dd000515 	stw	r20,20(sp)
    23e8:	dcc00415 	stw	r19,16(sp)
    23ec:	dc400215 	stw	r17,8(sp)
    23f0:	dc000115 	stw	r16,4(sp)
    23f4:	288002c4 	addi	r2,r5,11
    23f8:	00c00584 	movi	r3,22
    23fc:	2025883a 	mov	r18,r4
    2400:	18807f2e 	bgeu	r3,r2,2600 <_malloc_r+0x238>
    2404:	047ffe04 	movi	r17,-8
    2408:	1462703a 	and	r17,r2,r17
    240c:	8800a316 	blt	r17,zero,269c <_malloc_r+0x2d4>
    2410:	8940a236 	bltu	r17,r5,269c <_malloc_r+0x2d4>
    2414:	000f2640 	call	f264 <__malloc_lock>
    2418:	00807dc4 	movi	r2,503
    241c:	1441e92e 	bgeu	r2,r17,2bc4 <_malloc_r+0x7fc>
    2420:	8804d27a 	srli	r2,r17,9
    2424:	1000a126 	beq	r2,zero,26ac <_malloc_r+0x2e4>
    2428:	00c00104 	movi	r3,4
    242c:	18811e36 	bltu	r3,r2,28a8 <_malloc_r+0x4e0>
    2430:	8804d1ba 	srli	r2,r17,6
    2434:	12000e44 	addi	r8,r2,57
    2438:	11c00e04 	addi	r7,r2,56
    243c:	4209883a 	add	r4,r8,r8
    2440:	04c00074 	movhi	r19,1
    2444:	2109883a 	add	r4,r4,r4
    2448:	9cc7b404 	addi	r19,r19,7888
    244c:	2109883a 	add	r4,r4,r4
    2450:	9909883a 	add	r4,r19,r4
    2454:	24000117 	ldw	r16,4(r4)
    2458:	213ffe04 	addi	r4,r4,-8
    245c:	24009726 	beq	r4,r16,26bc <_malloc_r+0x2f4>
    2460:	80800117 	ldw	r2,4(r16)
    2464:	01bfff04 	movi	r6,-4
    2468:	014003c4 	movi	r5,15
    246c:	1184703a 	and	r2,r2,r6
    2470:	1447c83a 	sub	r3,r2,r17
    2474:	28c00716 	blt	r5,r3,2494 <_malloc_r+0xcc>
    2478:	1800920e 	bge	r3,zero,26c4 <_malloc_r+0x2fc>
    247c:	84000317 	ldw	r16,12(r16)
    2480:	24008e26 	beq	r4,r16,26bc <_malloc_r+0x2f4>
    2484:	80800117 	ldw	r2,4(r16)
    2488:	1184703a 	and	r2,r2,r6
    248c:	1447c83a 	sub	r3,r2,r17
    2490:	28fff90e 	bge	r5,r3,2478 <_malloc_r+0xb0>
    2494:	3809883a 	mov	r4,r7
    2498:	01800074 	movhi	r6,1
    249c:	9c000417 	ldw	r16,16(r19)
    24a0:	3187b404 	addi	r6,r6,7888
    24a4:	32000204 	addi	r8,r6,8
    24a8:	82013426 	beq	r16,r8,297c <_malloc_r+0x5b4>
    24ac:	80c00117 	ldw	r3,4(r16)
    24b0:	00bfff04 	movi	r2,-4
    24b4:	188e703a 	and	r7,r3,r2
    24b8:	3c45c83a 	sub	r2,r7,r17
    24bc:	00c003c4 	movi	r3,15
    24c0:	18811f16 	blt	r3,r2,2940 <_malloc_r+0x578>
    24c4:	32000515 	stw	r8,20(r6)
    24c8:	32000415 	stw	r8,16(r6)
    24cc:	10007f0e 	bge	r2,zero,26cc <_malloc_r+0x304>
    24d0:	00807fc4 	movi	r2,511
    24d4:	11c0fd36 	bltu	r2,r7,28cc <_malloc_r+0x504>
    24d8:	3806d0fa 	srli	r3,r7,3
    24dc:	01c00044 	movi	r7,1
    24e0:	30800117 	ldw	r2,4(r6)
    24e4:	19400044 	addi	r5,r3,1
    24e8:	294b883a 	add	r5,r5,r5
    24ec:	1807d0ba 	srai	r3,r3,2
    24f0:	294b883a 	add	r5,r5,r5
    24f4:	294b883a 	add	r5,r5,r5
    24f8:	298b883a 	add	r5,r5,r6
    24fc:	38c6983a 	sll	r3,r7,r3
    2500:	29c00017 	ldw	r7,0(r5)
    2504:	2a7ffe04 	addi	r9,r5,-8
    2508:	1886b03a 	or	r3,r3,r2
    250c:	82400315 	stw	r9,12(r16)
    2510:	81c00215 	stw	r7,8(r16)
    2514:	30c00115 	stw	r3,4(r6)
    2518:	2c000015 	stw	r16,0(r5)
    251c:	3c000315 	stw	r16,12(r7)
    2520:	2005d0ba 	srai	r2,r4,2
    2524:	01400044 	movi	r5,1
    2528:	288a983a 	sll	r5,r5,r2
    252c:	19406f36 	bltu	r3,r5,26ec <_malloc_r+0x324>
    2530:	28c4703a 	and	r2,r5,r3
    2534:	10000a1e 	bne	r2,zero,2560 <_malloc_r+0x198>
    2538:	00bfff04 	movi	r2,-4
    253c:	294b883a 	add	r5,r5,r5
    2540:	2088703a 	and	r4,r4,r2
    2544:	28c4703a 	and	r2,r5,r3
    2548:	21000104 	addi	r4,r4,4
    254c:	1000041e 	bne	r2,zero,2560 <_malloc_r+0x198>
    2550:	294b883a 	add	r5,r5,r5
    2554:	28c4703a 	and	r2,r5,r3
    2558:	21000104 	addi	r4,r4,4
    255c:	103ffc26 	beq	r2,zero,2550 <_malloc_r+0x188>
    2560:	02bfff04 	movi	r10,-4
    2564:	024003c4 	movi	r9,15
    2568:	21800044 	addi	r6,r4,1
    256c:	318d883a 	add	r6,r6,r6
    2570:	318d883a 	add	r6,r6,r6
    2574:	318d883a 	add	r6,r6,r6
    2578:	998d883a 	add	r6,r19,r6
    257c:	333ffe04 	addi	r12,r6,-8
    2580:	2017883a 	mov	r11,r4
    2584:	31800104 	addi	r6,r6,4
    2588:	34000017 	ldw	r16,0(r6)
    258c:	31fffd04 	addi	r7,r6,-12
    2590:	81c0041e 	bne	r16,r7,25a4 <_malloc_r+0x1dc>
    2594:	0000fb06 	br	2984 <_malloc_r+0x5bc>
    2598:	1801030e 	bge	r3,zero,29a8 <_malloc_r+0x5e0>
    259c:	84000317 	ldw	r16,12(r16)
    25a0:	81c0f826 	beq	r16,r7,2984 <_malloc_r+0x5bc>
    25a4:	80800117 	ldw	r2,4(r16)
    25a8:	1284703a 	and	r2,r2,r10
    25ac:	1447c83a 	sub	r3,r2,r17
    25b0:	48fff90e 	bge	r9,r3,2598 <_malloc_r+0x1d0>
    25b4:	80800317 	ldw	r2,12(r16)
    25b8:	81000217 	ldw	r4,8(r16)
    25bc:	89400054 	ori	r5,r17,1
    25c0:	81400115 	stw	r5,4(r16)
    25c4:	20800315 	stw	r2,12(r4)
    25c8:	11000215 	stw	r4,8(r2)
    25cc:	8463883a 	add	r17,r16,r17
    25d0:	9c400515 	stw	r17,20(r19)
    25d4:	9c400415 	stw	r17,16(r19)
    25d8:	18800054 	ori	r2,r3,1
    25dc:	88800115 	stw	r2,4(r17)
    25e0:	8a000315 	stw	r8,12(r17)
    25e4:	8a000215 	stw	r8,8(r17)
    25e8:	88e3883a 	add	r17,r17,r3
    25ec:	88c00015 	stw	r3,0(r17)
    25f0:	9009883a 	mov	r4,r18
    25f4:	000f2880 	call	f288 <__malloc_unlock>
    25f8:	80800204 	addi	r2,r16,8
    25fc:	00001b06 	br	266c <_malloc_r+0x2a4>
    2600:	04400404 	movi	r17,16
    2604:	89402536 	bltu	r17,r5,269c <_malloc_r+0x2d4>
    2608:	000f2640 	call	f264 <__malloc_lock>
    260c:	00800184 	movi	r2,6
    2610:	01000084 	movi	r4,2
    2614:	04c00074 	movhi	r19,1
    2618:	1085883a 	add	r2,r2,r2
    261c:	9cc7b404 	addi	r19,r19,7888
    2620:	1085883a 	add	r2,r2,r2
    2624:	9885883a 	add	r2,r19,r2
    2628:	14000117 	ldw	r16,4(r2)
    262c:	10fffe04 	addi	r3,r2,-8
    2630:	80c0d926 	beq	r16,r3,2998 <_malloc_r+0x5d0>
    2634:	80c00117 	ldw	r3,4(r16)
    2638:	81000317 	ldw	r4,12(r16)
    263c:	00bfff04 	movi	r2,-4
    2640:	1884703a 	and	r2,r3,r2
    2644:	81400217 	ldw	r5,8(r16)
    2648:	8085883a 	add	r2,r16,r2
    264c:	10c00117 	ldw	r3,4(r2)
    2650:	29000315 	stw	r4,12(r5)
    2654:	21400215 	stw	r5,8(r4)
    2658:	18c00054 	ori	r3,r3,1
    265c:	10c00115 	stw	r3,4(r2)
    2660:	9009883a 	mov	r4,r18
    2664:	000f2880 	call	f288 <__malloc_unlock>
    2668:	80800204 	addi	r2,r16,8
    266c:	dfc00a17 	ldw	ra,40(sp)
    2670:	df000917 	ldw	fp,36(sp)
    2674:	ddc00817 	ldw	r23,32(sp)
    2678:	dd800717 	ldw	r22,28(sp)
    267c:	dd400617 	ldw	r21,24(sp)
    2680:	dd000517 	ldw	r20,20(sp)
    2684:	dcc00417 	ldw	r19,16(sp)
    2688:	dc800317 	ldw	r18,12(sp)
    268c:	dc400217 	ldw	r17,8(sp)
    2690:	dc000117 	ldw	r16,4(sp)
    2694:	dec00b04 	addi	sp,sp,44
    2698:	f800283a 	ret
    269c:	00800304 	movi	r2,12
    26a0:	90800015 	stw	r2,0(r18)
    26a4:	0005883a 	mov	r2,zero
    26a8:	003ff006 	br	266c <_malloc_r+0x2a4>
    26ac:	01002004 	movi	r4,128
    26b0:	02001004 	movi	r8,64
    26b4:	01c00fc4 	movi	r7,63
    26b8:	003f6106 	br	2440 <_malloc_r+0x78>
    26bc:	4009883a 	mov	r4,r8
    26c0:	003f7506 	br	2498 <_malloc_r+0xd0>
    26c4:	81000317 	ldw	r4,12(r16)
    26c8:	003fde06 	br	2644 <_malloc_r+0x27c>
    26cc:	81c5883a 	add	r2,r16,r7
    26d0:	11400117 	ldw	r5,4(r2)
    26d4:	9009883a 	mov	r4,r18
    26d8:	29400054 	ori	r5,r5,1
    26dc:	11400115 	stw	r5,4(r2)
    26e0:	000f2880 	call	f288 <__malloc_unlock>
    26e4:	80800204 	addi	r2,r16,8
    26e8:	003fe006 	br	266c <_malloc_r+0x2a4>
    26ec:	9c000217 	ldw	r16,8(r19)
    26f0:	00bfff04 	movi	r2,-4
    26f4:	85800117 	ldw	r22,4(r16)
    26f8:	b0ac703a 	and	r22,r22,r2
    26fc:	b4400336 	bltu	r22,r17,270c <_malloc_r+0x344>
    2700:	b445c83a 	sub	r2,r22,r17
    2704:	00c003c4 	movi	r3,15
    2708:	18805d16 	blt	r3,r2,2880 <_malloc_r+0x4b8>
    270c:	05c00074 	movhi	r23,1
    2710:	00800074 	movhi	r2,1
    2714:	10953604 	addi	r2,r2,21720
    2718:	bdce5f04 	addi	r23,r23,14716
    271c:	15400017 	ldw	r21,0(r2)
    2720:	b8c00017 	ldw	r3,0(r23)
    2724:	00bfffc4 	movi	r2,-1
    2728:	858d883a 	add	r6,r16,r22
    272c:	8d6b883a 	add	r21,r17,r21
    2730:	1880ea26 	beq	r3,r2,2adc <_malloc_r+0x714>
    2734:	ad4403c4 	addi	r21,r21,4111
    2738:	00bc0004 	movi	r2,-4096
    273c:	a8aa703a 	and	r21,r21,r2
    2740:	a80b883a 	mov	r5,r21
    2744:	9009883a 	mov	r4,r18
    2748:	d9800015 	stw	r6,0(sp)
    274c:	0002d140 	call	2d14 <_sbrk_r>
    2750:	1029883a 	mov	r20,r2
    2754:	00bfffc4 	movi	r2,-1
    2758:	d9800017 	ldw	r6,0(sp)
    275c:	a080e826 	beq	r20,r2,2b00 <_malloc_r+0x738>
    2760:	a180a636 	bltu	r20,r6,29fc <_malloc_r+0x634>
    2764:	07000074 	movhi	fp,1
    2768:	e7154404 	addi	fp,fp,21776
    276c:	e0800017 	ldw	r2,0(fp)
    2770:	a887883a 	add	r3,r21,r2
    2774:	e0c00015 	stw	r3,0(fp)
    2778:	3500e626 	beq	r6,r20,2b14 <_malloc_r+0x74c>
    277c:	b9000017 	ldw	r4,0(r23)
    2780:	00bfffc4 	movi	r2,-1
    2784:	2080ee26 	beq	r4,r2,2b40 <_malloc_r+0x778>
    2788:	a185c83a 	sub	r2,r20,r6
    278c:	10c5883a 	add	r2,r2,r3
    2790:	e0800015 	stw	r2,0(fp)
    2794:	a0c001cc 	andi	r3,r20,7
    2798:	1800bc26 	beq	r3,zero,2a8c <_malloc_r+0x6c4>
    279c:	a0e9c83a 	sub	r20,r20,r3
    27a0:	00840204 	movi	r2,4104
    27a4:	a5000204 	addi	r20,r20,8
    27a8:	10c7c83a 	sub	r3,r2,r3
    27ac:	a545883a 	add	r2,r20,r21
    27b0:	1083ffcc 	andi	r2,r2,4095
    27b4:	18abc83a 	sub	r21,r3,r2
    27b8:	a80b883a 	mov	r5,r21
    27bc:	9009883a 	mov	r4,r18
    27c0:	0002d140 	call	2d14 <_sbrk_r>
    27c4:	00ffffc4 	movi	r3,-1
    27c8:	10c0e126 	beq	r2,r3,2b50 <_malloc_r+0x788>
    27cc:	1505c83a 	sub	r2,r2,r20
    27d0:	1545883a 	add	r2,r2,r21
    27d4:	10800054 	ori	r2,r2,1
    27d8:	e0c00017 	ldw	r3,0(fp)
    27dc:	9d000215 	stw	r20,8(r19)
    27e0:	a0800115 	stw	r2,4(r20)
    27e4:	a8c7883a 	add	r3,r21,r3
    27e8:	e0c00015 	stw	r3,0(fp)
    27ec:	84c00e26 	beq	r16,r19,2828 <_malloc_r+0x460>
    27f0:	018003c4 	movi	r6,15
    27f4:	3580a72e 	bgeu	r6,r22,2a94 <_malloc_r+0x6cc>
    27f8:	81400117 	ldw	r5,4(r16)
    27fc:	013ffe04 	movi	r4,-8
    2800:	b0bffd04 	addi	r2,r22,-12
    2804:	1104703a 	and	r2,r2,r4
    2808:	2900004c 	andi	r4,r5,1
    280c:	2088b03a 	or	r4,r4,r2
    2810:	81000115 	stw	r4,4(r16)
    2814:	01400144 	movi	r5,5
    2818:	8089883a 	add	r4,r16,r2
    281c:	21400115 	stw	r5,4(r4)
    2820:	21400215 	stw	r5,8(r4)
    2824:	3080cd36 	bltu	r6,r2,2b5c <_malloc_r+0x794>
    2828:	00800074 	movhi	r2,1
    282c:	10953504 	addi	r2,r2,21716
    2830:	11000017 	ldw	r4,0(r2)
    2834:	20c0012e 	bgeu	r4,r3,283c <_malloc_r+0x474>
    2838:	10c00015 	stw	r3,0(r2)
    283c:	00800074 	movhi	r2,1
    2840:	10953404 	addi	r2,r2,21712
    2844:	11000017 	ldw	r4,0(r2)
    2848:	9c000217 	ldw	r16,8(r19)
    284c:	20c0012e 	bgeu	r4,r3,2854 <_malloc_r+0x48c>
    2850:	10c00015 	stw	r3,0(r2)
    2854:	80c00117 	ldw	r3,4(r16)
    2858:	00bfff04 	movi	r2,-4
    285c:	1886703a 	and	r3,r3,r2
    2860:	1c45c83a 	sub	r2,r3,r17
    2864:	1c400236 	bltu	r3,r17,2870 <_malloc_r+0x4a8>
    2868:	00c003c4 	movi	r3,15
    286c:	18800416 	blt	r3,r2,2880 <_malloc_r+0x4b8>
    2870:	9009883a 	mov	r4,r18
    2874:	000f2880 	call	f288 <__malloc_unlock>
    2878:	0005883a 	mov	r2,zero
    287c:	003f7b06 	br	266c <_malloc_r+0x2a4>
    2880:	88c00054 	ori	r3,r17,1
    2884:	80c00115 	stw	r3,4(r16)
    2888:	8463883a 	add	r17,r16,r17
    288c:	10800054 	ori	r2,r2,1
    2890:	9c400215 	stw	r17,8(r19)
    2894:	88800115 	stw	r2,4(r17)
    2898:	9009883a 	mov	r4,r18
    289c:	000f2880 	call	f288 <__malloc_unlock>
    28a0:	80800204 	addi	r2,r16,8
    28a4:	003f7106 	br	266c <_malloc_r+0x2a4>
    28a8:	00c00504 	movi	r3,20
    28ac:	18804a2e 	bgeu	r3,r2,29d8 <_malloc_r+0x610>
    28b0:	00c01504 	movi	r3,84
    28b4:	18806e36 	bltu	r3,r2,2a70 <_malloc_r+0x6a8>
    28b8:	8804d33a 	srli	r2,r17,12
    28bc:	12001bc4 	addi	r8,r2,111
    28c0:	11c01b84 	addi	r7,r2,110
    28c4:	4209883a 	add	r4,r8,r8
    28c8:	003edd06 	br	2440 <_malloc_r+0x78>
    28cc:	3804d27a 	srli	r2,r7,9
    28d0:	00c00104 	movi	r3,4
    28d4:	1880442e 	bgeu	r3,r2,29e8 <_malloc_r+0x620>
    28d8:	00c00504 	movi	r3,20
    28dc:	18808136 	bltu	r3,r2,2ae4 <_malloc_r+0x71c>
    28e0:	11401704 	addi	r5,r2,92
    28e4:	10c016c4 	addi	r3,r2,91
    28e8:	294b883a 	add	r5,r5,r5
    28ec:	294b883a 	add	r5,r5,r5
    28f0:	294b883a 	add	r5,r5,r5
    28f4:	994b883a 	add	r5,r19,r5
    28f8:	28800017 	ldw	r2,0(r5)
    28fc:	01800074 	movhi	r6,1
    2900:	297ffe04 	addi	r5,r5,-8
    2904:	3187b404 	addi	r6,r6,7888
    2908:	28806526 	beq	r5,r2,2aa0 <_malloc_r+0x6d8>
    290c:	01bfff04 	movi	r6,-4
    2910:	10c00117 	ldw	r3,4(r2)
    2914:	1986703a 	and	r3,r3,r6
    2918:	38c0022e 	bgeu	r7,r3,2924 <_malloc_r+0x55c>
    291c:	10800217 	ldw	r2,8(r2)
    2920:	28bffb1e 	bne	r5,r2,2910 <_malloc_r+0x548>
    2924:	11400317 	ldw	r5,12(r2)
    2928:	98c00117 	ldw	r3,4(r19)
    292c:	81400315 	stw	r5,12(r16)
    2930:	80800215 	stw	r2,8(r16)
    2934:	2c000215 	stw	r16,8(r5)
    2938:	14000315 	stw	r16,12(r2)
    293c:	003ef806 	br	2520 <_malloc_r+0x158>
    2940:	88c00054 	ori	r3,r17,1
    2944:	80c00115 	stw	r3,4(r16)
    2948:	8463883a 	add	r17,r16,r17
    294c:	34400515 	stw	r17,20(r6)
    2950:	34400415 	stw	r17,16(r6)
    2954:	10c00054 	ori	r3,r2,1
    2958:	8a000315 	stw	r8,12(r17)
    295c:	8a000215 	stw	r8,8(r17)
    2960:	88c00115 	stw	r3,4(r17)
    2964:	88a3883a 	add	r17,r17,r2
    2968:	88800015 	stw	r2,0(r17)
    296c:	9009883a 	mov	r4,r18
    2970:	000f2880 	call	f288 <__malloc_unlock>
    2974:	80800204 	addi	r2,r16,8
    2978:	003f3c06 	br	266c <_malloc_r+0x2a4>
    297c:	30c00117 	ldw	r3,4(r6)
    2980:	003ee706 	br	2520 <_malloc_r+0x158>
    2984:	5ac00044 	addi	r11,r11,1
    2988:	588000cc 	andi	r2,r11,3
    298c:	31800204 	addi	r6,r6,8
    2990:	103efd1e 	bne	r2,zero,2588 <_malloc_r+0x1c0>
    2994:	00002406 	br	2a28 <_malloc_r+0x660>
    2998:	14000317 	ldw	r16,12(r2)
    299c:	143f251e 	bne	r2,r16,2634 <_malloc_r+0x26c>
    29a0:	21000084 	addi	r4,r4,2
    29a4:	003ebc06 	br	2498 <_malloc_r+0xd0>
    29a8:	8085883a 	add	r2,r16,r2
    29ac:	10c00117 	ldw	r3,4(r2)
    29b0:	81000317 	ldw	r4,12(r16)
    29b4:	81400217 	ldw	r5,8(r16)
    29b8:	18c00054 	ori	r3,r3,1
    29bc:	10c00115 	stw	r3,4(r2)
    29c0:	29000315 	stw	r4,12(r5)
    29c4:	21400215 	stw	r5,8(r4)
    29c8:	9009883a 	mov	r4,r18
    29cc:	000f2880 	call	f288 <__malloc_unlock>
    29d0:	80800204 	addi	r2,r16,8
    29d4:	003f2506 	br	266c <_malloc_r+0x2a4>
    29d8:	12001704 	addi	r8,r2,92
    29dc:	11c016c4 	addi	r7,r2,91
    29e0:	4209883a 	add	r4,r8,r8
    29e4:	003e9606 	br	2440 <_malloc_r+0x78>
    29e8:	3804d1ba 	srli	r2,r7,6
    29ec:	11400e44 	addi	r5,r2,57
    29f0:	10c00e04 	addi	r3,r2,56
    29f4:	294b883a 	add	r5,r5,r5
    29f8:	003fbc06 	br	28ec <_malloc_r+0x524>
    29fc:	84ff5926 	beq	r16,r19,2764 <_malloc_r+0x39c>
    2a00:	00800074 	movhi	r2,1
    2a04:	1087b404 	addi	r2,r2,7888
    2a08:	14000217 	ldw	r16,8(r2)
    2a0c:	00bfff04 	movi	r2,-4
    2a10:	80c00117 	ldw	r3,4(r16)
    2a14:	1886703a 	and	r3,r3,r2
    2a18:	003f9106 	br	2860 <_malloc_r+0x498>
    2a1c:	60800217 	ldw	r2,8(r12)
    2a20:	213fffc4 	addi	r4,r4,-1
    2a24:	1300651e 	bne	r2,r12,2bbc <_malloc_r+0x7f4>
    2a28:	208000cc 	andi	r2,r4,3
    2a2c:	633ffe04 	addi	r12,r12,-8
    2a30:	103ffa1e 	bne	r2,zero,2a1c <_malloc_r+0x654>
    2a34:	98800117 	ldw	r2,4(r19)
    2a38:	0146303a 	nor	r3,zero,r5
    2a3c:	1884703a 	and	r2,r3,r2
    2a40:	98800115 	stw	r2,4(r19)
    2a44:	294b883a 	add	r5,r5,r5
    2a48:	117f2836 	bltu	r2,r5,26ec <_malloc_r+0x324>
    2a4c:	283f2726 	beq	r5,zero,26ec <_malloc_r+0x324>
    2a50:	2886703a 	and	r3,r5,r2
    2a54:	5809883a 	mov	r4,r11
    2a58:	183ec31e 	bne	r3,zero,2568 <_malloc_r+0x1a0>
    2a5c:	294b883a 	add	r5,r5,r5
    2a60:	2886703a 	and	r3,r5,r2
    2a64:	21000104 	addi	r4,r4,4
    2a68:	183ffc26 	beq	r3,zero,2a5c <_malloc_r+0x694>
    2a6c:	003ebe06 	br	2568 <_malloc_r+0x1a0>
    2a70:	00c05504 	movi	r3,340
    2a74:	18801236 	bltu	r3,r2,2ac0 <_malloc_r+0x6f8>
    2a78:	8804d3fa 	srli	r2,r17,15
    2a7c:	12001e04 	addi	r8,r2,120
    2a80:	11c01dc4 	addi	r7,r2,119
    2a84:	4209883a 	add	r4,r8,r8
    2a88:	003e6d06 	br	2440 <_malloc_r+0x78>
    2a8c:	00c40004 	movi	r3,4096
    2a90:	003f4606 	br	27ac <_malloc_r+0x3e4>
    2a94:	00800044 	movi	r2,1
    2a98:	a0800115 	stw	r2,4(r20)
    2a9c:	003f7406 	br	2870 <_malloc_r+0x4a8>
    2aa0:	1805d0ba 	srai	r2,r3,2
    2aa4:	01c00044 	movi	r7,1
    2aa8:	30c00117 	ldw	r3,4(r6)
    2aac:	388e983a 	sll	r7,r7,r2
    2ab0:	2805883a 	mov	r2,r5
    2ab4:	38c6b03a 	or	r3,r7,r3
    2ab8:	30c00115 	stw	r3,4(r6)
    2abc:	003f9b06 	br	292c <_malloc_r+0x564>
    2ac0:	00c15504 	movi	r3,1364
    2ac4:	18801a36 	bltu	r3,r2,2b30 <_malloc_r+0x768>
    2ac8:	8804d4ba 	srli	r2,r17,18
    2acc:	12001f44 	addi	r8,r2,125
    2ad0:	11c01f04 	addi	r7,r2,124
    2ad4:	4209883a 	add	r4,r8,r8
    2ad8:	003e5906 	br	2440 <_malloc_r+0x78>
    2adc:	ad400404 	addi	r21,r21,16
    2ae0:	003f1706 	br	2740 <_malloc_r+0x378>
    2ae4:	00c01504 	movi	r3,84
    2ae8:	18802336 	bltu	r3,r2,2b78 <_malloc_r+0x7b0>
    2aec:	3804d33a 	srli	r2,r7,12
    2af0:	11401bc4 	addi	r5,r2,111
    2af4:	10c01b84 	addi	r3,r2,110
    2af8:	294b883a 	add	r5,r5,r5
    2afc:	003f7b06 	br	28ec <_malloc_r+0x524>
    2b00:	9c000217 	ldw	r16,8(r19)
    2b04:	00bfff04 	movi	r2,-4
    2b08:	80c00117 	ldw	r3,4(r16)
    2b0c:	1886703a 	and	r3,r3,r2
    2b10:	003f5306 	br	2860 <_malloc_r+0x498>
    2b14:	3083ffcc 	andi	r2,r6,4095
    2b18:	103f181e 	bne	r2,zero,277c <_malloc_r+0x3b4>
    2b1c:	99000217 	ldw	r4,8(r19)
    2b20:	b545883a 	add	r2,r22,r21
    2b24:	10800054 	ori	r2,r2,1
    2b28:	20800115 	stw	r2,4(r4)
    2b2c:	003f3e06 	br	2828 <_malloc_r+0x460>
    2b30:	01003f84 	movi	r4,254
    2b34:	02001fc4 	movi	r8,127
    2b38:	01c01f84 	movi	r7,126
    2b3c:	003e4006 	br	2440 <_malloc_r+0x78>
    2b40:	00800074 	movhi	r2,1
    2b44:	108e5f04 	addi	r2,r2,14716
    2b48:	15000015 	stw	r20,0(r2)
    2b4c:	003f1106 	br	2794 <_malloc_r+0x3cc>
    2b50:	00800044 	movi	r2,1
    2b54:	002b883a 	mov	r21,zero
    2b58:	003f1f06 	br	27d8 <_malloc_r+0x410>
    2b5c:	81400204 	addi	r5,r16,8
    2b60:	9009883a 	mov	r4,r18
    2b64:	00072180 	call	7218 <_free_r>
    2b68:	00800074 	movhi	r2,1
    2b6c:	10954404 	addi	r2,r2,21776
    2b70:	10c00017 	ldw	r3,0(r2)
    2b74:	003f2c06 	br	2828 <_malloc_r+0x460>
    2b78:	00c05504 	movi	r3,340
    2b7c:	18800536 	bltu	r3,r2,2b94 <_malloc_r+0x7cc>
    2b80:	3804d3fa 	srli	r2,r7,15
    2b84:	11401e04 	addi	r5,r2,120
    2b88:	10c01dc4 	addi	r3,r2,119
    2b8c:	294b883a 	add	r5,r5,r5
    2b90:	003f5606 	br	28ec <_malloc_r+0x524>
    2b94:	00c15504 	movi	r3,1364
    2b98:	18800536 	bltu	r3,r2,2bb0 <_malloc_r+0x7e8>
    2b9c:	3804d4ba 	srli	r2,r7,18
    2ba0:	11401f44 	addi	r5,r2,125
    2ba4:	10c01f04 	addi	r3,r2,124
    2ba8:	294b883a 	add	r5,r5,r5
    2bac:	003f4f06 	br	28ec <_malloc_r+0x524>
    2bb0:	01403f84 	movi	r5,254
    2bb4:	00c01f84 	movi	r3,126
    2bb8:	003f4c06 	br	28ec <_malloc_r+0x524>
    2bbc:	98800117 	ldw	r2,4(r19)
    2bc0:	003fa006 	br	2a44 <_malloc_r+0x67c>
    2bc4:	8808d0fa 	srli	r4,r17,3
    2bc8:	20800044 	addi	r2,r4,1
    2bcc:	1085883a 	add	r2,r2,r2
    2bd0:	003e9006 	br	2614 <_malloc_r+0x24c>

00002bd4 <_printf_r>:
    2bd4:	defffd04 	addi	sp,sp,-12
    2bd8:	2805883a 	mov	r2,r5
    2bdc:	dfc00015 	stw	ra,0(sp)
    2be0:	d9800115 	stw	r6,4(sp)
    2be4:	d9c00215 	stw	r7,8(sp)
    2be8:	21400217 	ldw	r5,8(r4)
    2bec:	d9c00104 	addi	r7,sp,4
    2bf0:	100d883a 	mov	r6,r2
    2bf4:	0002e000 	call	2e00 <___vfprintf_internal_r>
    2bf8:	dfc00017 	ldw	ra,0(sp)
    2bfc:	dec00304 	addi	sp,sp,12
    2c00:	f800283a 	ret

00002c04 <printf>:
    2c04:	defffc04 	addi	sp,sp,-16
    2c08:	dfc00015 	stw	ra,0(sp)
    2c0c:	d9400115 	stw	r5,4(sp)
    2c10:	d9800215 	stw	r6,8(sp)
    2c14:	d9c00315 	stw	r7,12(sp)
    2c18:	00800074 	movhi	r2,1
    2c1c:	108e6204 	addi	r2,r2,14728
    2c20:	10800017 	ldw	r2,0(r2)
    2c24:	200b883a 	mov	r5,r4
    2c28:	d9800104 	addi	r6,sp,4
    2c2c:	11000217 	ldw	r4,8(r2)
    2c30:	0004ff80 	call	4ff8 <__vfprintf_internal>
    2c34:	dfc00017 	ldw	ra,0(sp)
    2c38:	dec00404 	addi	sp,sp,16
    2c3c:	f800283a 	ret

00002c40 <_puts_r>:
    2c40:	defff604 	addi	sp,sp,-40
    2c44:	dc000715 	stw	r16,28(sp)
    2c48:	2021883a 	mov	r16,r4
    2c4c:	2809883a 	mov	r4,r5
    2c50:	dc400815 	stw	r17,32(sp)
    2c54:	dfc00915 	stw	ra,36(sp)
    2c58:	2823883a 	mov	r17,r5
    2c5c:	0002d680 	call	2d68 <strlen>
    2c60:	10c00044 	addi	r3,r2,1
    2c64:	d8800115 	stw	r2,4(sp)
    2c68:	00800074 	movhi	r2,1
    2c6c:	1086ea04 	addi	r2,r2,7080
    2c70:	d8800215 	stw	r2,8(sp)
    2c74:	00800044 	movi	r2,1
    2c78:	d8800315 	stw	r2,12(sp)
    2c7c:	00800084 	movi	r2,2
    2c80:	dc400015 	stw	r17,0(sp)
    2c84:	d8c00615 	stw	r3,24(sp)
    2c88:	dec00415 	stw	sp,16(sp)
    2c8c:	d8800515 	stw	r2,20(sp)
    2c90:	80000226 	beq	r16,zero,2c9c <_puts_r+0x5c>
    2c94:	80800e17 	ldw	r2,56(r16)
    2c98:	10001426 	beq	r2,zero,2cec <_puts_r+0xac>
    2c9c:	81400217 	ldw	r5,8(r16)
    2ca0:	2880030b 	ldhu	r2,12(r5)
    2ca4:	10c8000c 	andi	r3,r2,8192
    2ca8:	1800061e 	bne	r3,zero,2cc4 <_puts_r+0x84>
    2cac:	29001917 	ldw	r4,100(r5)
    2cb0:	00f7ffc4 	movi	r3,-8193
    2cb4:	10880014 	ori	r2,r2,8192
    2cb8:	20c6703a 	and	r3,r4,r3
    2cbc:	2880030d 	sth	r2,12(r5)
    2cc0:	28c01915 	stw	r3,100(r5)
    2cc4:	d9800404 	addi	r6,sp,16
    2cc8:	8009883a 	mov	r4,r16
    2ccc:	00075280 	call	7528 <__sfvwrite_r>
    2cd0:	1000091e 	bne	r2,zero,2cf8 <_puts_r+0xb8>
    2cd4:	00800284 	movi	r2,10
    2cd8:	dfc00917 	ldw	ra,36(sp)
    2cdc:	dc400817 	ldw	r17,32(sp)
    2ce0:	dc000717 	ldw	r16,28(sp)
    2ce4:	dec00a04 	addi	sp,sp,40
    2ce8:	f800283a 	ret
    2cec:	8009883a 	mov	r4,r16
    2cf0:	00070a40 	call	70a4 <__sinit>
    2cf4:	003fe906 	br	2c9c <_puts_r+0x5c>
    2cf8:	00bfffc4 	movi	r2,-1
    2cfc:	003ff606 	br	2cd8 <_puts_r+0x98>

00002d00 <puts>:
    2d00:	00800074 	movhi	r2,1
    2d04:	108e6204 	addi	r2,r2,14728
    2d08:	200b883a 	mov	r5,r4
    2d0c:	11000017 	ldw	r4,0(r2)
    2d10:	0002c401 	jmpi	2c40 <_puts_r>

00002d14 <_sbrk_r>:
    2d14:	defffd04 	addi	sp,sp,-12
    2d18:	dc000015 	stw	r16,0(sp)
    2d1c:	04000074 	movhi	r16,1
    2d20:	dc400115 	stw	r17,4(sp)
    2d24:	84153704 	addi	r16,r16,21724
    2d28:	2023883a 	mov	r17,r4
    2d2c:	2809883a 	mov	r4,r5
    2d30:	dfc00215 	stw	ra,8(sp)
    2d34:	80000015 	stw	zero,0(r16)
    2d38:	000f4480 	call	f448 <sbrk>
    2d3c:	00ffffc4 	movi	r3,-1
    2d40:	10c00526 	beq	r2,r3,2d58 <_sbrk_r+0x44>
    2d44:	dfc00217 	ldw	ra,8(sp)
    2d48:	dc400117 	ldw	r17,4(sp)
    2d4c:	dc000017 	ldw	r16,0(sp)
    2d50:	dec00304 	addi	sp,sp,12
    2d54:	f800283a 	ret
    2d58:	80c00017 	ldw	r3,0(r16)
    2d5c:	183ff926 	beq	r3,zero,2d44 <_sbrk_r+0x30>
    2d60:	88c00015 	stw	r3,0(r17)
    2d64:	003ff706 	br	2d44 <_sbrk_r+0x30>

00002d68 <strlen>:
    2d68:	208000cc 	andi	r2,r4,3
    2d6c:	10002026 	beq	r2,zero,2df0 <strlen+0x88>
    2d70:	20800007 	ldb	r2,0(r4)
    2d74:	10002026 	beq	r2,zero,2df8 <strlen+0x90>
    2d78:	2005883a 	mov	r2,r4
    2d7c:	00000206 	br	2d88 <strlen+0x20>
    2d80:	10c00007 	ldb	r3,0(r2)
    2d84:	18001826 	beq	r3,zero,2de8 <strlen+0x80>
    2d88:	10800044 	addi	r2,r2,1
    2d8c:	10c000cc 	andi	r3,r2,3
    2d90:	183ffb1e 	bne	r3,zero,2d80 <strlen+0x18>
    2d94:	10c00017 	ldw	r3,0(r2)
    2d98:	01ffbff4 	movhi	r7,65279
    2d9c:	39ffbfc4 	addi	r7,r7,-257
    2da0:	00ca303a 	nor	r5,zero,r3
    2da4:	01a02074 	movhi	r6,32897
    2da8:	19c7883a 	add	r3,r3,r7
    2dac:	31a02004 	addi	r6,r6,-32640
    2db0:	1946703a 	and	r3,r3,r5
    2db4:	1986703a 	and	r3,r3,r6
    2db8:	1800091e 	bne	r3,zero,2de0 <strlen+0x78>
    2dbc:	10800104 	addi	r2,r2,4
    2dc0:	10c00017 	ldw	r3,0(r2)
    2dc4:	19cb883a 	add	r5,r3,r7
    2dc8:	00c6303a 	nor	r3,zero,r3
    2dcc:	28c6703a 	and	r3,r5,r3
    2dd0:	1986703a 	and	r3,r3,r6
    2dd4:	183ff926 	beq	r3,zero,2dbc <strlen+0x54>
    2dd8:	00000106 	br	2de0 <strlen+0x78>
    2ddc:	10800044 	addi	r2,r2,1
    2de0:	10c00007 	ldb	r3,0(r2)
    2de4:	183ffd1e 	bne	r3,zero,2ddc <strlen+0x74>
    2de8:	1105c83a 	sub	r2,r2,r4
    2dec:	f800283a 	ret
    2df0:	2005883a 	mov	r2,r4
    2df4:	003fe706 	br	2d94 <strlen+0x2c>
    2df8:	0005883a 	mov	r2,zero
    2dfc:	f800283a 	ret

00002e00 <___vfprintf_internal_r>:
    2e00:	deffb804 	addi	sp,sp,-288
    2e04:	dfc04715 	stw	ra,284(sp)
    2e08:	ddc04515 	stw	r23,276(sp)
    2e0c:	dd404315 	stw	r21,268(sp)
    2e10:	d9002c15 	stw	r4,176(sp)
    2e14:	282f883a 	mov	r23,r5
    2e18:	302b883a 	mov	r21,r6
    2e1c:	d9c02d15 	stw	r7,180(sp)
    2e20:	df004615 	stw	fp,280(sp)
    2e24:	dd804415 	stw	r22,272(sp)
    2e28:	dd004215 	stw	r20,264(sp)
    2e2c:	dcc04115 	stw	r19,260(sp)
    2e30:	dc804015 	stw	r18,256(sp)
    2e34:	dc403f15 	stw	r17,252(sp)
    2e38:	dc003e15 	stw	r16,248(sp)
    2e3c:	0007c180 	call	7c18 <_localeconv_r>
    2e40:	10800017 	ldw	r2,0(r2)
    2e44:	1009883a 	mov	r4,r2
    2e48:	d8803415 	stw	r2,208(sp)
    2e4c:	0002d680 	call	2d68 <strlen>
    2e50:	d8803715 	stw	r2,220(sp)
    2e54:	d8802c17 	ldw	r2,176(sp)
    2e58:	10000226 	beq	r2,zero,2e64 <___vfprintf_internal_r+0x64>
    2e5c:	10800e17 	ldw	r2,56(r2)
    2e60:	1000f926 	beq	r2,zero,3248 <___vfprintf_internal_r+0x448>
    2e64:	b880030b 	ldhu	r2,12(r23)
    2e68:	10c8000c 	andi	r3,r2,8192
    2e6c:	1800061e 	bne	r3,zero,2e88 <___vfprintf_internal_r+0x88>
    2e70:	b9001917 	ldw	r4,100(r23)
    2e74:	00f7ffc4 	movi	r3,-8193
    2e78:	10880014 	ori	r2,r2,8192
    2e7c:	20c6703a 	and	r3,r4,r3
    2e80:	b880030d 	sth	r2,12(r23)
    2e84:	b8c01915 	stw	r3,100(r23)
    2e88:	10c0020c 	andi	r3,r2,8
    2e8c:	1800c126 	beq	r3,zero,3194 <___vfprintf_internal_r+0x394>
    2e90:	b8c00417 	ldw	r3,16(r23)
    2e94:	1800bf26 	beq	r3,zero,3194 <___vfprintf_internal_r+0x394>
    2e98:	1080068c 	andi	r2,r2,26
    2e9c:	00c00284 	movi	r3,10
    2ea0:	10c0c426 	beq	r2,r3,31b4 <___vfprintf_internal_r+0x3b4>
    2ea4:	d8c00404 	addi	r3,sp,16
    2ea8:	05000074 	movhi	r20,1
    2eac:	d9001e04 	addi	r4,sp,120
    2eb0:	a5070784 	addi	r20,r20,7198
    2eb4:	d8c01e15 	stw	r3,120(sp)
    2eb8:	d8002015 	stw	zero,128(sp)
    2ebc:	d8001f15 	stw	zero,124(sp)
    2ec0:	d8003315 	stw	zero,204(sp)
    2ec4:	d8003615 	stw	zero,216(sp)
    2ec8:	d8003815 	stw	zero,224(sp)
    2ecc:	1811883a 	mov	r8,r3
    2ed0:	d8003915 	stw	zero,228(sp)
    2ed4:	d8003a15 	stw	zero,232(sp)
    2ed8:	d8002f15 	stw	zero,188(sp)
    2edc:	d9002815 	stw	r4,160(sp)
    2ee0:	a8800007 	ldb	r2,0(r21)
    2ee4:	10027b26 	beq	r2,zero,38d4 <___vfprintf_internal_r+0xad4>
    2ee8:	00c00944 	movi	r3,37
    2eec:	a821883a 	mov	r16,r21
    2ef0:	10c0021e 	bne	r2,r3,2efc <___vfprintf_internal_r+0xfc>
    2ef4:	00001406 	br	2f48 <___vfprintf_internal_r+0x148>
    2ef8:	10c00326 	beq	r2,r3,2f08 <___vfprintf_internal_r+0x108>
    2efc:	84000044 	addi	r16,r16,1
    2f00:	80800007 	ldb	r2,0(r16)
    2f04:	103ffc1e 	bne	r2,zero,2ef8 <___vfprintf_internal_r+0xf8>
    2f08:	8563c83a 	sub	r17,r16,r21
    2f0c:	88000e26 	beq	r17,zero,2f48 <___vfprintf_internal_r+0x148>
    2f10:	d8c02017 	ldw	r3,128(sp)
    2f14:	d8801f17 	ldw	r2,124(sp)
    2f18:	45400015 	stw	r21,0(r8)
    2f1c:	1c47883a 	add	r3,r3,r17
    2f20:	10800044 	addi	r2,r2,1
    2f24:	d8c02015 	stw	r3,128(sp)
    2f28:	44400115 	stw	r17,4(r8)
    2f2c:	d8801f15 	stw	r2,124(sp)
    2f30:	00c001c4 	movi	r3,7
    2f34:	1880a716 	blt	r3,r2,31d4 <___vfprintf_internal_r+0x3d4>
    2f38:	42000204 	addi	r8,r8,8
    2f3c:	d9402f17 	ldw	r5,188(sp)
    2f40:	2c4b883a 	add	r5,r5,r17
    2f44:	d9402f15 	stw	r5,188(sp)
    2f48:	80800007 	ldb	r2,0(r16)
    2f4c:	1000a826 	beq	r2,zero,31f0 <___vfprintf_internal_r+0x3f0>
    2f50:	84400047 	ldb	r17,1(r16)
    2f54:	00bfffc4 	movi	r2,-1
    2f58:	85400044 	addi	r21,r16,1
    2f5c:	d8002785 	stb	zero,158(sp)
    2f60:	0007883a 	mov	r3,zero
    2f64:	000f883a 	mov	r7,zero
    2f68:	d8802915 	stw	r2,164(sp)
    2f6c:	d8003115 	stw	zero,196(sp)
    2f70:	0025883a 	mov	r18,zero
    2f74:	01401604 	movi	r5,88
    2f78:	01800244 	movi	r6,9
    2f7c:	02800a84 	movi	r10,42
    2f80:	02401b04 	movi	r9,108
    2f84:	ad400044 	addi	r21,r21,1
    2f88:	88bff804 	addi	r2,r17,-32
    2f8c:	28830436 	bltu	r5,r2,3ba0 <___vfprintf_internal_r+0xda0>
    2f90:	100490ba 	slli	r2,r2,2
    2f94:	01000034 	movhi	r4,0
    2f98:	210bea04 	addi	r4,r4,12200
    2f9c:	1105883a 	add	r2,r2,r4
    2fa0:	10800017 	ldw	r2,0(r2)
    2fa4:	1000683a 	jmp	r2
    2fa8:	00003ac0 	call	3ac <init_camera+0x11c>
    2fac:	00003ba0 	cmpeqi	zero,zero,238
    2fb0:	00003ba0 	cmpeqi	zero,zero,238
    2fb4:	00003ae0 	cmpeqi	zero,zero,235
    2fb8:	00003ba0 	cmpeqi	zero,zero,238
    2fbc:	00003ba0 	cmpeqi	zero,zero,238
    2fc0:	00003ba0 	cmpeqi	zero,zero,238
    2fc4:	00003ba0 	cmpeqi	zero,zero,238
    2fc8:	00003ba0 	cmpeqi	zero,zero,238
    2fcc:	00003ba0 	cmpeqi	zero,zero,238
    2fd0:	00003254 	movui	zero,201
    2fd4:	000039fc 	xorhi	zero,zero,231
    2fd8:	00003ba0 	cmpeqi	zero,zero,238
    2fdc:	0000311c 	xori	zero,zero,196
    2fe0:	0000327c 	xorhi	zero,zero,201
    2fe4:	00003ba0 	cmpeqi	zero,zero,238
    2fe8:	000032bc 	xorhi	zero,zero,202
    2fec:	000032c8 	cmpgei	zero,zero,203
    2ff0:	000032c8 	cmpgei	zero,zero,203
    2ff4:	000032c8 	cmpgei	zero,zero,203
    2ff8:	000032c8 	cmpgei	zero,zero,203
    2ffc:	000032c8 	cmpgei	zero,zero,203
    3000:	000032c8 	cmpgei	zero,zero,203
    3004:	000032c8 	cmpgei	zero,zero,203
    3008:	000032c8 	cmpgei	zero,zero,203
    300c:	000032c8 	cmpgei	zero,zero,203
    3010:	00003ba0 	cmpeqi	zero,zero,238
    3014:	00003ba0 	cmpeqi	zero,zero,238
    3018:	00003ba0 	cmpeqi	zero,zero,238
    301c:	00003ba0 	cmpeqi	zero,zero,238
    3020:	00003ba0 	cmpeqi	zero,zero,238
    3024:	00003ba0 	cmpeqi	zero,zero,238
    3028:	00003ba0 	cmpeqi	zero,zero,238
    302c:	00003ba0 	cmpeqi	zero,zero,238
    3030:	00003ba0 	cmpeqi	zero,zero,238
    3034:	00003ba0 	cmpeqi	zero,zero,238
    3038:	000032fc 	xorhi	zero,zero,203
    303c:	000033b8 	rdprs	zero,zero,206
    3040:	00003ba0 	cmpeqi	zero,zero,238
    3044:	000033b8 	rdprs	zero,zero,206
    3048:	00003ba0 	cmpeqi	zero,zero,238
    304c:	00003ba0 	cmpeqi	zero,zero,238
    3050:	00003ba0 	cmpeqi	zero,zero,238
    3054:	00003ba0 	cmpeqi	zero,zero,238
    3058:	00003458 	cmpnei	zero,zero,209
    305c:	00003ba0 	cmpeqi	zero,zero,238
    3060:	00003ba0 	cmpeqi	zero,zero,238
    3064:	00003464 	muli	zero,zero,209
    3068:	00003ba0 	cmpeqi	zero,zero,238
    306c:	00003ba0 	cmpeqi	zero,zero,238
    3070:	00003ba0 	cmpeqi	zero,zero,238
    3074:	00003ba0 	cmpeqi	zero,zero,238
    3078:	00003ba0 	cmpeqi	zero,zero,238
    307c:	000038dc 	xori	zero,zero,227
    3080:	00003ba0 	cmpeqi	zero,zero,238
    3084:	00003ba0 	cmpeqi	zero,zero,238
    3088:	0000393c 	xorhi	zero,zero,228
    308c:	00003ba0 	cmpeqi	zero,zero,238
    3090:	00003ba0 	cmpeqi	zero,zero,238
    3094:	00003ba0 	cmpeqi	zero,zero,238
    3098:	00003ba0 	cmpeqi	zero,zero,238
    309c:	00003ba0 	cmpeqi	zero,zero,238
    30a0:	00003ba0 	cmpeqi	zero,zero,238
    30a4:	00003ba0 	cmpeqi	zero,zero,238
    30a8:	00003ba0 	cmpeqi	zero,zero,238
    30ac:	00003ba0 	cmpeqi	zero,zero,238
    30b0:	00003ba0 	cmpeqi	zero,zero,238
    30b4:	00003b4c 	andi	zero,zero,237
    30b8:	00003aec 	andhi	zero,zero,235
    30bc:	000033b8 	rdprs	zero,zero,206
    30c0:	000033b8 	rdprs	zero,zero,206
    30c4:	000033b8 	rdprs	zero,zero,206
    30c8:	00003afc 	xorhi	zero,zero,235
    30cc:	00003aec 	andhi	zero,zero,235
    30d0:	00003ba0 	cmpeqi	zero,zero,238
    30d4:	00003ba0 	cmpeqi	zero,zero,238
    30d8:	00003b08 	cmpgei	zero,zero,236
    30dc:	00003ba0 	cmpeqi	zero,zero,238
    30e0:	00003b18 	cmpnei	zero,zero,236
    30e4:	000039ec 	andhi	zero,zero,231
    30e8:	00003128 	cmpgeui	zero,zero,196
    30ec:	00003a0c 	andi	zero,zero,232
    30f0:	00003ba0 	cmpeqi	zero,zero,238
    30f4:	00003a18 	cmpnei	zero,zero,232
    30f8:	00003ba0 	cmpeqi	zero,zero,238
    30fc:	00003a74 	movhi	zero,233
    3100:	00003ba0 	cmpeqi	zero,zero,238
    3104:	00003ba0 	cmpeqi	zero,zero,238
    3108:	00003a84 	movi	zero,234
    310c:	d9003117 	ldw	r4,196(sp)
    3110:	d8802d15 	stw	r2,180(sp)
    3114:	0109c83a 	sub	r4,zero,r4
    3118:	d9003115 	stw	r4,196(sp)
    311c:	94800114 	ori	r18,r18,4
    3120:	ac400007 	ldb	r17,0(r21)
    3124:	003f9706 	br	2f84 <___vfprintf_internal_r+0x184>
    3128:	00800c04 	movi	r2,48
    312c:	d9002d17 	ldw	r4,180(sp)
    3130:	d9402917 	ldw	r5,164(sp)
    3134:	d8802705 	stb	r2,156(sp)
    3138:	00801e04 	movi	r2,120
    313c:	d8802745 	stb	r2,157(sp)
    3140:	d8002785 	stb	zero,158(sp)
    3144:	20c00104 	addi	r3,r4,4
    3148:	24c00017 	ldw	r19,0(r4)
    314c:	002d883a 	mov	r22,zero
    3150:	90800094 	ori	r2,r18,2
    3154:	28029a16 	blt	r5,zero,3bc0 <___vfprintf_internal_r+0xdc0>
    3158:	00bfdfc4 	movi	r2,-129
    315c:	90a4703a 	and	r18,r18,r2
    3160:	d8c02d15 	stw	r3,180(sp)
    3164:	94800094 	ori	r18,r18,2
    3168:	9802871e 	bne	r19,zero,3b88 <___vfprintf_internal_r+0xd88>
    316c:	00800074 	movhi	r2,1
    3170:	10870004 	addi	r2,r2,7168
    3174:	d8803915 	stw	r2,228(sp)
    3178:	04401e04 	movi	r17,120
    317c:	d8802917 	ldw	r2,164(sp)
    3180:	0039883a 	mov	fp,zero
    3184:	1001e926 	beq	r2,zero,392c <___vfprintf_internal_r+0xb2c>
    3188:	0027883a 	mov	r19,zero
    318c:	002d883a 	mov	r22,zero
    3190:	00020506 	br	39a8 <___vfprintf_internal_r+0xba8>
    3194:	d9002c17 	ldw	r4,176(sp)
    3198:	b80b883a 	mov	r5,r23
    319c:	00050d00 	call	50d0 <__swsetup_r>
    31a0:	1005ac1e 	bne	r2,zero,4854 <___vfprintf_internal_r+0x1a54>
    31a4:	b880030b 	ldhu	r2,12(r23)
    31a8:	00c00284 	movi	r3,10
    31ac:	1080068c 	andi	r2,r2,26
    31b0:	10ff3c1e 	bne	r2,r3,2ea4 <___vfprintf_internal_r+0xa4>
    31b4:	b880038f 	ldh	r2,14(r23)
    31b8:	103f3a16 	blt	r2,zero,2ea4 <___vfprintf_internal_r+0xa4>
    31bc:	d9c02d17 	ldw	r7,180(sp)
    31c0:	d9002c17 	ldw	r4,176(sp)
    31c4:	a80d883a 	mov	r6,r21
    31c8:	b80b883a 	mov	r5,r23
    31cc:	00050140 	call	5014 <__sbprintf>
    31d0:	00001106 	br	3218 <___vfprintf_internal_r+0x418>
    31d4:	d9002c17 	ldw	r4,176(sp)
    31d8:	d9801e04 	addi	r6,sp,120
    31dc:	b80b883a 	mov	r5,r23
    31e0:	0009b9c0 	call	9b9c <__sprint_r>
    31e4:	1000081e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    31e8:	da000404 	addi	r8,sp,16
    31ec:	003f5306 	br	2f3c <___vfprintf_internal_r+0x13c>
    31f0:	d8802017 	ldw	r2,128(sp)
    31f4:	10000426 	beq	r2,zero,3208 <___vfprintf_internal_r+0x408>
    31f8:	d9002c17 	ldw	r4,176(sp)
    31fc:	d9801e04 	addi	r6,sp,120
    3200:	b80b883a 	mov	r5,r23
    3204:	0009b9c0 	call	9b9c <__sprint_r>
    3208:	b880030b 	ldhu	r2,12(r23)
    320c:	1080100c 	andi	r2,r2,64
    3210:	1005901e 	bne	r2,zero,4854 <___vfprintf_internal_r+0x1a54>
    3214:	d8802f17 	ldw	r2,188(sp)
    3218:	dfc04717 	ldw	ra,284(sp)
    321c:	df004617 	ldw	fp,280(sp)
    3220:	ddc04517 	ldw	r23,276(sp)
    3224:	dd804417 	ldw	r22,272(sp)
    3228:	dd404317 	ldw	r21,268(sp)
    322c:	dd004217 	ldw	r20,264(sp)
    3230:	dcc04117 	ldw	r19,260(sp)
    3234:	dc804017 	ldw	r18,256(sp)
    3238:	dc403f17 	ldw	r17,252(sp)
    323c:	dc003e17 	ldw	r16,248(sp)
    3240:	dec04804 	addi	sp,sp,288
    3244:	f800283a 	ret
    3248:	d9002c17 	ldw	r4,176(sp)
    324c:	00070a40 	call	70a4 <__sinit>
    3250:	003f0406 	br	2e64 <___vfprintf_internal_r+0x64>
    3254:	d8802d17 	ldw	r2,180(sp)
    3258:	d9002d17 	ldw	r4,180(sp)
    325c:	10800017 	ldw	r2,0(r2)
    3260:	d8803115 	stw	r2,196(sp)
    3264:	20800104 	addi	r2,r4,4
    3268:	d9003117 	ldw	r4,196(sp)
    326c:	203fa716 	blt	r4,zero,310c <___vfprintf_internal_r+0x30c>
    3270:	d8802d15 	stw	r2,180(sp)
    3274:	ac400007 	ldb	r17,0(r21)
    3278:	003f4206 	br	2f84 <___vfprintf_internal_r+0x184>
    327c:	ac400007 	ldb	r17,0(r21)
    3280:	aac00044 	addi	r11,r21,1
    3284:	8a872826 	beq	r17,r10,4f28 <___vfprintf_internal_r+0x2128>
    3288:	88bff404 	addi	r2,r17,-48
    328c:	0009883a 	mov	r4,zero
    3290:	30867d36 	bltu	r6,r2,4c88 <___vfprintf_internal_r+0x1e88>
    3294:	5c400007 	ldb	r17,0(r11)
    3298:	210002a4 	muli	r4,r4,10
    329c:	5d400044 	addi	r21,r11,1
    32a0:	a817883a 	mov	r11,r21
    32a4:	2089883a 	add	r4,r4,r2
    32a8:	88bff404 	addi	r2,r17,-48
    32ac:	30bff92e 	bgeu	r6,r2,3294 <___vfprintf_internal_r+0x494>
    32b0:	2005c916 	blt	r4,zero,49d8 <___vfprintf_internal_r+0x1bd8>
    32b4:	d9002915 	stw	r4,164(sp)
    32b8:	003f3306 	br	2f88 <___vfprintf_internal_r+0x188>
    32bc:	94802014 	ori	r18,r18,128
    32c0:	ac400007 	ldb	r17,0(r21)
    32c4:	003f2f06 	br	2f84 <___vfprintf_internal_r+0x184>
    32c8:	a809883a 	mov	r4,r21
    32cc:	d8003115 	stw	zero,196(sp)
    32d0:	88bff404 	addi	r2,r17,-48
    32d4:	0017883a 	mov	r11,zero
    32d8:	24400007 	ldb	r17,0(r4)
    32dc:	5ac002a4 	muli	r11,r11,10
    32e0:	ad400044 	addi	r21,r21,1
    32e4:	a809883a 	mov	r4,r21
    32e8:	12d7883a 	add	r11,r2,r11
    32ec:	88bff404 	addi	r2,r17,-48
    32f0:	30bff92e 	bgeu	r6,r2,32d8 <___vfprintf_internal_r+0x4d8>
    32f4:	dac03115 	stw	r11,196(sp)
    32f8:	003f2306 	br	2f88 <___vfprintf_internal_r+0x188>
    32fc:	18c03fcc 	andi	r3,r3,255
    3300:	18072b1e 	bne	r3,zero,4fb0 <___vfprintf_internal_r+0x21b0>
    3304:	94800414 	ori	r18,r18,16
    3308:	9080080c 	andi	r2,r18,32
    330c:	10037b26 	beq	r2,zero,40fc <___vfprintf_internal_r+0x12fc>
    3310:	d9402d17 	ldw	r5,180(sp)
    3314:	28800117 	ldw	r2,4(r5)
    3318:	2cc00017 	ldw	r19,0(r5)
    331c:	29400204 	addi	r5,r5,8
    3320:	d9402d15 	stw	r5,180(sp)
    3324:	102d883a 	mov	r22,r2
    3328:	10044b16 	blt	r2,zero,4458 <___vfprintf_internal_r+0x1658>
    332c:	d9402917 	ldw	r5,164(sp)
    3330:	df002783 	ldbu	fp,158(sp)
    3334:	2803bc16 	blt	r5,zero,4228 <___vfprintf_internal_r+0x1428>
    3338:	00ffdfc4 	movi	r3,-129
    333c:	9d84b03a 	or	r2,r19,r22
    3340:	90e4703a 	and	r18,r18,r3
    3344:	10017726 	beq	r2,zero,3924 <___vfprintf_internal_r+0xb24>
    3348:	b0038326 	beq	r22,zero,4158 <___vfprintf_internal_r+0x1358>
    334c:	dc402a15 	stw	r17,168(sp)
    3350:	dc001e04 	addi	r16,sp,120
    3354:	b023883a 	mov	r17,r22
    3358:	402d883a 	mov	r22,r8
    335c:	9809883a 	mov	r4,r19
    3360:	880b883a 	mov	r5,r17
    3364:	01800284 	movi	r6,10
    3368:	000f883a 	mov	r7,zero
    336c:	000bf940 	call	bf94 <__umoddi3>
    3370:	10800c04 	addi	r2,r2,48
    3374:	843fffc4 	addi	r16,r16,-1
    3378:	9809883a 	mov	r4,r19
    337c:	880b883a 	mov	r5,r17
    3380:	80800005 	stb	r2,0(r16)
    3384:	01800284 	movi	r6,10
    3388:	000f883a 	mov	r7,zero
    338c:	000ba1c0 	call	ba1c <__udivdi3>
    3390:	1027883a 	mov	r19,r2
    3394:	10c4b03a 	or	r2,r2,r3
    3398:	1823883a 	mov	r17,r3
    339c:	103fef1e 	bne	r2,zero,335c <___vfprintf_internal_r+0x55c>
    33a0:	d8c02817 	ldw	r3,160(sp)
    33a4:	dc402a17 	ldw	r17,168(sp)
    33a8:	b011883a 	mov	r8,r22
    33ac:	1c07c83a 	sub	r3,r3,r16
    33b0:	d8c02e15 	stw	r3,184(sp)
    33b4:	00005906 	br	351c <___vfprintf_internal_r+0x71c>
    33b8:	18c03fcc 	andi	r3,r3,255
    33bc:	1806fa1e 	bne	r3,zero,4fa8 <___vfprintf_internal_r+0x21a8>
    33c0:	9080020c 	andi	r2,r18,8
    33c4:	10048a26 	beq	r2,zero,45f0 <___vfprintf_internal_r+0x17f0>
    33c8:	d8c02d17 	ldw	r3,180(sp)
    33cc:	d9002d17 	ldw	r4,180(sp)
    33d0:	d9402d17 	ldw	r5,180(sp)
    33d4:	18c00017 	ldw	r3,0(r3)
    33d8:	21000117 	ldw	r4,4(r4)
    33dc:	29400204 	addi	r5,r5,8
    33e0:	d8c03615 	stw	r3,216(sp)
    33e4:	d9003815 	stw	r4,224(sp)
    33e8:	d9402d15 	stw	r5,180(sp)
    33ec:	d9003617 	ldw	r4,216(sp)
    33f0:	d9403817 	ldw	r5,224(sp)
    33f4:	da003d15 	stw	r8,244(sp)
    33f8:	04000044 	movi	r16,1
    33fc:	00098140 	call	9814 <__fpclassifyd>
    3400:	da003d17 	ldw	r8,244(sp)
    3404:	14041f1e 	bne	r2,r16,4484 <___vfprintf_internal_r+0x1684>
    3408:	d9003617 	ldw	r4,216(sp)
    340c:	d9403817 	ldw	r5,224(sp)
    3410:	000d883a 	mov	r6,zero
    3414:	000f883a 	mov	r7,zero
    3418:	000d9780 	call	d978 <__ledf2>
    341c:	da003d17 	ldw	r8,244(sp)
    3420:	1005be16 	blt	r2,zero,4b1c <___vfprintf_internal_r+0x1d1c>
    3424:	df002783 	ldbu	fp,158(sp)
    3428:	008011c4 	movi	r2,71
    342c:	1445330e 	bge	r2,r17,48fc <___vfprintf_internal_r+0x1afc>
    3430:	04000074 	movhi	r16,1
    3434:	8406f804 	addi	r16,r16,7136
    3438:	00c000c4 	movi	r3,3
    343c:	00bfdfc4 	movi	r2,-129
    3440:	d8c02a15 	stw	r3,168(sp)
    3444:	90a4703a 	and	r18,r18,r2
    3448:	d8c02e15 	stw	r3,184(sp)
    344c:	d8002915 	stw	zero,164(sp)
    3450:	d8003215 	stw	zero,200(sp)
    3454:	00003706 	br	3534 <___vfprintf_internal_r+0x734>
    3458:	94800214 	ori	r18,r18,8
    345c:	ac400007 	ldb	r17,0(r21)
    3460:	003ec806 	br	2f84 <___vfprintf_internal_r+0x184>
    3464:	18c03fcc 	andi	r3,r3,255
    3468:	1806db1e 	bne	r3,zero,4fd8 <___vfprintf_internal_r+0x21d8>
    346c:	94800414 	ori	r18,r18,16
    3470:	9080080c 	andi	r2,r18,32
    3474:	1002d826 	beq	r2,zero,3fd8 <___vfprintf_internal_r+0x11d8>
    3478:	d9402d17 	ldw	r5,180(sp)
    347c:	d8c02917 	ldw	r3,164(sp)
    3480:	d8002785 	stb	zero,158(sp)
    3484:	28800204 	addi	r2,r5,8
    3488:	2cc00017 	ldw	r19,0(r5)
    348c:	2d800117 	ldw	r22,4(r5)
    3490:	18048f16 	blt	r3,zero,46d0 <___vfprintf_internal_r+0x18d0>
    3494:	013fdfc4 	movi	r4,-129
    3498:	9d86b03a 	or	r3,r19,r22
    349c:	d8802d15 	stw	r2,180(sp)
    34a0:	9124703a 	and	r18,r18,r4
    34a4:	1802d91e 	bne	r3,zero,400c <___vfprintf_internal_r+0x120c>
    34a8:	d8c02917 	ldw	r3,164(sp)
    34ac:	0039883a 	mov	fp,zero
    34b0:	1805c326 	beq	r3,zero,4bc0 <___vfprintf_internal_r+0x1dc0>
    34b4:	0027883a 	mov	r19,zero
    34b8:	002d883a 	mov	r22,zero
    34bc:	dc001e04 	addi	r16,sp,120
    34c0:	9806d0fa 	srli	r3,r19,3
    34c4:	b008977a 	slli	r4,r22,29
    34c8:	b02cd0fa 	srli	r22,r22,3
    34cc:	9cc001cc 	andi	r19,r19,7
    34d0:	98800c04 	addi	r2,r19,48
    34d4:	843fffc4 	addi	r16,r16,-1
    34d8:	20e6b03a 	or	r19,r4,r3
    34dc:	80800005 	stb	r2,0(r16)
    34e0:	9d86b03a 	or	r3,r19,r22
    34e4:	183ff61e 	bne	r3,zero,34c0 <___vfprintf_internal_r+0x6c0>
    34e8:	90c0004c 	andi	r3,r18,1
    34ec:	18013b26 	beq	r3,zero,39dc <___vfprintf_internal_r+0xbdc>
    34f0:	10803fcc 	andi	r2,r2,255
    34f4:	1080201c 	xori	r2,r2,128
    34f8:	10bfe004 	addi	r2,r2,-128
    34fc:	00c00c04 	movi	r3,48
    3500:	10c13626 	beq	r2,r3,39dc <___vfprintf_internal_r+0xbdc>
    3504:	80ffffc5 	stb	r3,-1(r16)
    3508:	d8c02817 	ldw	r3,160(sp)
    350c:	80bfffc4 	addi	r2,r16,-1
    3510:	1021883a 	mov	r16,r2
    3514:	1887c83a 	sub	r3,r3,r2
    3518:	d8c02e15 	stw	r3,184(sp)
    351c:	d8802e17 	ldw	r2,184(sp)
    3520:	d9002917 	ldw	r4,164(sp)
    3524:	1100010e 	bge	r2,r4,352c <___vfprintf_internal_r+0x72c>
    3528:	2005883a 	mov	r2,r4
    352c:	d8802a15 	stw	r2,168(sp)
    3530:	d8003215 	stw	zero,200(sp)
    3534:	e7003fcc 	andi	fp,fp,255
    3538:	e700201c 	xori	fp,fp,128
    353c:	e73fe004 	addi	fp,fp,-128
    3540:	e0000326 	beq	fp,zero,3550 <___vfprintf_internal_r+0x750>
    3544:	d8c02a17 	ldw	r3,168(sp)
    3548:	18c00044 	addi	r3,r3,1
    354c:	d8c02a15 	stw	r3,168(sp)
    3550:	90c0008c 	andi	r3,r18,2
    3554:	d8c02b15 	stw	r3,172(sp)
    3558:	18000326 	beq	r3,zero,3568 <___vfprintf_internal_r+0x768>
    355c:	d8c02a17 	ldw	r3,168(sp)
    3560:	18c00084 	addi	r3,r3,2
    3564:	d8c02a15 	stw	r3,168(sp)
    3568:	90c0210c 	andi	r3,r18,132
    356c:	d8c03015 	stw	r3,192(sp)
    3570:	1801a31e 	bne	r3,zero,3c00 <___vfprintf_internal_r+0xe00>
    3574:	d9003117 	ldw	r4,196(sp)
    3578:	d8c02a17 	ldw	r3,168(sp)
    357c:	20e7c83a 	sub	r19,r4,r3
    3580:	04c19f0e 	bge	zero,r19,3c00 <___vfprintf_internal_r+0xe00>
    3584:	02400404 	movi	r9,16
    3588:	d8c02017 	ldw	r3,128(sp)
    358c:	d8801f17 	ldw	r2,124(sp)
    3590:	4cc50d0e 	bge	r9,r19,49c8 <___vfprintf_internal_r+0x1bc8>
    3594:	01400074 	movhi	r5,1
    3598:	29470b84 	addi	r5,r5,7214
    359c:	dc403b15 	stw	r17,236(sp)
    35a0:	d9403515 	stw	r5,212(sp)
    35a4:	9823883a 	mov	r17,r19
    35a8:	482d883a 	mov	r22,r9
    35ac:	9027883a 	mov	r19,r18
    35b0:	070001c4 	movi	fp,7
    35b4:	8025883a 	mov	r18,r16
    35b8:	dc002c17 	ldw	r16,176(sp)
    35bc:	00000306 	br	35cc <___vfprintf_internal_r+0x7cc>
    35c0:	8c7ffc04 	addi	r17,r17,-16
    35c4:	42000204 	addi	r8,r8,8
    35c8:	b440130e 	bge	r22,r17,3618 <___vfprintf_internal_r+0x818>
    35cc:	01000074 	movhi	r4,1
    35d0:	18c00404 	addi	r3,r3,16
    35d4:	10800044 	addi	r2,r2,1
    35d8:	21070b84 	addi	r4,r4,7214
    35dc:	41000015 	stw	r4,0(r8)
    35e0:	45800115 	stw	r22,4(r8)
    35e4:	d8c02015 	stw	r3,128(sp)
    35e8:	d8801f15 	stw	r2,124(sp)
    35ec:	e0bff40e 	bge	fp,r2,35c0 <___vfprintf_internal_r+0x7c0>
    35f0:	d9801e04 	addi	r6,sp,120
    35f4:	b80b883a 	mov	r5,r23
    35f8:	8009883a 	mov	r4,r16
    35fc:	0009b9c0 	call	9b9c <__sprint_r>
    3600:	103f011e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3604:	8c7ffc04 	addi	r17,r17,-16
    3608:	d8c02017 	ldw	r3,128(sp)
    360c:	d8801f17 	ldw	r2,124(sp)
    3610:	da000404 	addi	r8,sp,16
    3614:	b47fed16 	blt	r22,r17,35cc <___vfprintf_internal_r+0x7cc>
    3618:	9021883a 	mov	r16,r18
    361c:	9825883a 	mov	r18,r19
    3620:	8827883a 	mov	r19,r17
    3624:	dc403b17 	ldw	r17,236(sp)
    3628:	d9403517 	ldw	r5,212(sp)
    362c:	98c7883a 	add	r3,r19,r3
    3630:	10800044 	addi	r2,r2,1
    3634:	41400015 	stw	r5,0(r8)
    3638:	44c00115 	stw	r19,4(r8)
    363c:	d8c02015 	stw	r3,128(sp)
    3640:	d8801f15 	stw	r2,124(sp)
    3644:	010001c4 	movi	r4,7
    3648:	2082a316 	blt	r4,r2,40d8 <___vfprintf_internal_r+0x12d8>
    364c:	df002787 	ldb	fp,158(sp)
    3650:	42000204 	addi	r8,r8,8
    3654:	e0000c26 	beq	fp,zero,3688 <___vfprintf_internal_r+0x888>
    3658:	d8801f17 	ldw	r2,124(sp)
    365c:	d9002784 	addi	r4,sp,158
    3660:	18c00044 	addi	r3,r3,1
    3664:	10800044 	addi	r2,r2,1
    3668:	41000015 	stw	r4,0(r8)
    366c:	01000044 	movi	r4,1
    3670:	41000115 	stw	r4,4(r8)
    3674:	d8c02015 	stw	r3,128(sp)
    3678:	d8801f15 	stw	r2,124(sp)
    367c:	010001c4 	movi	r4,7
    3680:	20823c16 	blt	r4,r2,3f74 <___vfprintf_internal_r+0x1174>
    3684:	42000204 	addi	r8,r8,8
    3688:	d8802b17 	ldw	r2,172(sp)
    368c:	10000c26 	beq	r2,zero,36c0 <___vfprintf_internal_r+0x8c0>
    3690:	d8801f17 	ldw	r2,124(sp)
    3694:	d9002704 	addi	r4,sp,156
    3698:	18c00084 	addi	r3,r3,2
    369c:	10800044 	addi	r2,r2,1
    36a0:	41000015 	stw	r4,0(r8)
    36a4:	01000084 	movi	r4,2
    36a8:	41000115 	stw	r4,4(r8)
    36ac:	d8c02015 	stw	r3,128(sp)
    36b0:	d8801f15 	stw	r2,124(sp)
    36b4:	010001c4 	movi	r4,7
    36b8:	20823616 	blt	r4,r2,3f94 <___vfprintf_internal_r+0x1194>
    36bc:	42000204 	addi	r8,r8,8
    36c0:	d9003017 	ldw	r4,192(sp)
    36c4:	00802004 	movi	r2,128
    36c8:	20819926 	beq	r4,r2,3d30 <___vfprintf_internal_r+0xf30>
    36cc:	d9402917 	ldw	r5,164(sp)
    36d0:	d8802e17 	ldw	r2,184(sp)
    36d4:	28adc83a 	sub	r22,r5,r2
    36d8:	0580310e 	bge	zero,r22,37a0 <___vfprintf_internal_r+0x9a0>
    36dc:	07000404 	movi	fp,16
    36e0:	d8801f17 	ldw	r2,124(sp)
    36e4:	e584140e 	bge	fp,r22,4738 <___vfprintf_internal_r+0x1938>
    36e8:	01400074 	movhi	r5,1
    36ec:	29470784 	addi	r5,r5,7198
    36f0:	dc402915 	stw	r17,164(sp)
    36f4:	d9402b15 	stw	r5,172(sp)
    36f8:	b023883a 	mov	r17,r22
    36fc:	04c001c4 	movi	r19,7
    3700:	a82d883a 	mov	r22,r21
    3704:	902b883a 	mov	r21,r18
    3708:	8025883a 	mov	r18,r16
    370c:	dc002c17 	ldw	r16,176(sp)
    3710:	00000306 	br	3720 <___vfprintf_internal_r+0x920>
    3714:	8c7ffc04 	addi	r17,r17,-16
    3718:	42000204 	addi	r8,r8,8
    371c:	e440110e 	bge	fp,r17,3764 <___vfprintf_internal_r+0x964>
    3720:	18c00404 	addi	r3,r3,16
    3724:	10800044 	addi	r2,r2,1
    3728:	45000015 	stw	r20,0(r8)
    372c:	47000115 	stw	fp,4(r8)
    3730:	d8c02015 	stw	r3,128(sp)
    3734:	d8801f15 	stw	r2,124(sp)
    3738:	98bff60e 	bge	r19,r2,3714 <___vfprintf_internal_r+0x914>
    373c:	d9801e04 	addi	r6,sp,120
    3740:	b80b883a 	mov	r5,r23
    3744:	8009883a 	mov	r4,r16
    3748:	0009b9c0 	call	9b9c <__sprint_r>
    374c:	103eae1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3750:	8c7ffc04 	addi	r17,r17,-16
    3754:	d8c02017 	ldw	r3,128(sp)
    3758:	d8801f17 	ldw	r2,124(sp)
    375c:	da000404 	addi	r8,sp,16
    3760:	e47fef16 	blt	fp,r17,3720 <___vfprintf_internal_r+0x920>
    3764:	9021883a 	mov	r16,r18
    3768:	a825883a 	mov	r18,r21
    376c:	b02b883a 	mov	r21,r22
    3770:	882d883a 	mov	r22,r17
    3774:	dc402917 	ldw	r17,164(sp)
    3778:	d9002b17 	ldw	r4,172(sp)
    377c:	1d87883a 	add	r3,r3,r22
    3780:	10800044 	addi	r2,r2,1
    3784:	41000015 	stw	r4,0(r8)
    3788:	45800115 	stw	r22,4(r8)
    378c:	d8c02015 	stw	r3,128(sp)
    3790:	d8801f15 	stw	r2,124(sp)
    3794:	010001c4 	movi	r4,7
    3798:	2081ee16 	blt	r4,r2,3f54 <___vfprintf_internal_r+0x1154>
    379c:	42000204 	addi	r8,r8,8
    37a0:	9080400c 	andi	r2,r18,256
    37a4:	1001181e 	bne	r2,zero,3c08 <___vfprintf_internal_r+0xe08>
    37a8:	d9402e17 	ldw	r5,184(sp)
    37ac:	d8801f17 	ldw	r2,124(sp)
    37b0:	44000015 	stw	r16,0(r8)
    37b4:	1947883a 	add	r3,r3,r5
    37b8:	10800044 	addi	r2,r2,1
    37bc:	41400115 	stw	r5,4(r8)
    37c0:	d8c02015 	stw	r3,128(sp)
    37c4:	d8801f15 	stw	r2,124(sp)
    37c8:	010001c4 	movi	r4,7
    37cc:	2081d316 	blt	r4,r2,3f1c <___vfprintf_internal_r+0x111c>
    37d0:	42000204 	addi	r8,r8,8
    37d4:	9480010c 	andi	r18,r18,4
    37d8:	90003226 	beq	r18,zero,38a4 <___vfprintf_internal_r+0xaa4>
    37dc:	d9403117 	ldw	r5,196(sp)
    37e0:	d8802a17 	ldw	r2,168(sp)
    37e4:	28a1c83a 	sub	r16,r5,r2
    37e8:	04002e0e 	bge	zero,r16,38a4 <___vfprintf_internal_r+0xaa4>
    37ec:	04400404 	movi	r17,16
    37f0:	d8801f17 	ldw	r2,124(sp)
    37f4:	8c04a20e 	bge	r17,r16,4a80 <___vfprintf_internal_r+0x1c80>
    37f8:	01400074 	movhi	r5,1
    37fc:	29470b84 	addi	r5,r5,7214
    3800:	d9403515 	stw	r5,212(sp)
    3804:	048001c4 	movi	r18,7
    3808:	dcc02c17 	ldw	r19,176(sp)
    380c:	00000306 	br	381c <___vfprintf_internal_r+0xa1c>
    3810:	843ffc04 	addi	r16,r16,-16
    3814:	42000204 	addi	r8,r8,8
    3818:	8c00130e 	bge	r17,r16,3868 <___vfprintf_internal_r+0xa68>
    381c:	01000074 	movhi	r4,1
    3820:	18c00404 	addi	r3,r3,16
    3824:	10800044 	addi	r2,r2,1
    3828:	21070b84 	addi	r4,r4,7214
    382c:	41000015 	stw	r4,0(r8)
    3830:	44400115 	stw	r17,4(r8)
    3834:	d8c02015 	stw	r3,128(sp)
    3838:	d8801f15 	stw	r2,124(sp)
    383c:	90bff40e 	bge	r18,r2,3810 <___vfprintf_internal_r+0xa10>
    3840:	d9801e04 	addi	r6,sp,120
    3844:	b80b883a 	mov	r5,r23
    3848:	9809883a 	mov	r4,r19
    384c:	0009b9c0 	call	9b9c <__sprint_r>
    3850:	103e6d1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3854:	843ffc04 	addi	r16,r16,-16
    3858:	d8c02017 	ldw	r3,128(sp)
    385c:	d8801f17 	ldw	r2,124(sp)
    3860:	da000404 	addi	r8,sp,16
    3864:	8c3fed16 	blt	r17,r16,381c <___vfprintf_internal_r+0xa1c>
    3868:	d9403517 	ldw	r5,212(sp)
    386c:	1c07883a 	add	r3,r3,r16
    3870:	10800044 	addi	r2,r2,1
    3874:	41400015 	stw	r5,0(r8)
    3878:	44000115 	stw	r16,4(r8)
    387c:	d8c02015 	stw	r3,128(sp)
    3880:	d8801f15 	stw	r2,124(sp)
    3884:	010001c4 	movi	r4,7
    3888:	2080060e 	bge	r4,r2,38a4 <___vfprintf_internal_r+0xaa4>
    388c:	d9002c17 	ldw	r4,176(sp)
    3890:	d9801e04 	addi	r6,sp,120
    3894:	b80b883a 	mov	r5,r23
    3898:	0009b9c0 	call	9b9c <__sprint_r>
    389c:	103e5a1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    38a0:	d8c02017 	ldw	r3,128(sp)
    38a4:	d8803117 	ldw	r2,196(sp)
    38a8:	d9002a17 	ldw	r4,168(sp)
    38ac:	1100010e 	bge	r2,r4,38b4 <___vfprintf_internal_r+0xab4>
    38b0:	2005883a 	mov	r2,r4
    38b4:	d9402f17 	ldw	r5,188(sp)
    38b8:	288b883a 	add	r5,r5,r2
    38bc:	d9402f15 	stw	r5,188(sp)
    38c0:	18019e1e 	bne	r3,zero,3f3c <___vfprintf_internal_r+0x113c>
    38c4:	a8800007 	ldb	r2,0(r21)
    38c8:	d8001f15 	stw	zero,124(sp)
    38cc:	da000404 	addi	r8,sp,16
    38d0:	103d851e 	bne	r2,zero,2ee8 <___vfprintf_internal_r+0xe8>
    38d4:	a821883a 	mov	r16,r21
    38d8:	003d9b06 	br	2f48 <___vfprintf_internal_r+0x148>
    38dc:	18c03fcc 	andi	r3,r3,255
    38e0:	1805c11e 	bne	r3,zero,4fe8 <___vfprintf_internal_r+0x21e8>
    38e4:	94800414 	ori	r18,r18,16
    38e8:	9080080c 	andi	r2,r18,32
    38ec:	10020c26 	beq	r2,zero,4120 <___vfprintf_internal_r+0x1320>
    38f0:	d8802d17 	ldw	r2,180(sp)
    38f4:	d9002917 	ldw	r4,164(sp)
    38f8:	d8002785 	stb	zero,158(sp)
    38fc:	10c00204 	addi	r3,r2,8
    3900:	14c00017 	ldw	r19,0(r2)
    3904:	15800117 	ldw	r22,4(r2)
    3908:	20040f16 	blt	r4,zero,4948 <___vfprintf_internal_r+0x1b48>
    390c:	013fdfc4 	movi	r4,-129
    3910:	9d84b03a 	or	r2,r19,r22
    3914:	d8c02d15 	stw	r3,180(sp)
    3918:	9124703a 	and	r18,r18,r4
    391c:	0039883a 	mov	fp,zero
    3920:	103e891e 	bne	r2,zero,3348 <___vfprintf_internal_r+0x548>
    3924:	d9002917 	ldw	r4,164(sp)
    3928:	2002c11e 	bne	r4,zero,4430 <___vfprintf_internal_r+0x1630>
    392c:	d8002915 	stw	zero,164(sp)
    3930:	d8002e15 	stw	zero,184(sp)
    3934:	dc001e04 	addi	r16,sp,120
    3938:	003ef806 	br	351c <___vfprintf_internal_r+0x71c>
    393c:	18c03fcc 	andi	r3,r3,255
    3940:	18059d1e 	bne	r3,zero,4fb8 <___vfprintf_internal_r+0x21b8>
    3944:	01400074 	movhi	r5,1
    3948:	2946fb04 	addi	r5,r5,7148
    394c:	d9403915 	stw	r5,228(sp)
    3950:	9080080c 	andi	r2,r18,32
    3954:	10005226 	beq	r2,zero,3aa0 <___vfprintf_internal_r+0xca0>
    3958:	d8802d17 	ldw	r2,180(sp)
    395c:	14c00017 	ldw	r19,0(r2)
    3960:	15800117 	ldw	r22,4(r2)
    3964:	10800204 	addi	r2,r2,8
    3968:	d8802d15 	stw	r2,180(sp)
    396c:	9080004c 	andi	r2,r18,1
    3970:	10019026 	beq	r2,zero,3fb4 <___vfprintf_internal_r+0x11b4>
    3974:	9d84b03a 	or	r2,r19,r22
    3978:	10036926 	beq	r2,zero,4720 <___vfprintf_internal_r+0x1920>
    397c:	d8c02917 	ldw	r3,164(sp)
    3980:	00800c04 	movi	r2,48
    3984:	d8802705 	stb	r2,156(sp)
    3988:	dc402745 	stb	r17,157(sp)
    398c:	d8002785 	stb	zero,158(sp)
    3990:	90800094 	ori	r2,r18,2
    3994:	18045d16 	blt	r3,zero,4b0c <___vfprintf_internal_r+0x1d0c>
    3998:	00bfdfc4 	movi	r2,-129
    399c:	90a4703a 	and	r18,r18,r2
    39a0:	94800094 	ori	r18,r18,2
    39a4:	0039883a 	mov	fp,zero
    39a8:	d9003917 	ldw	r4,228(sp)
    39ac:	dc001e04 	addi	r16,sp,120
    39b0:	988003cc 	andi	r2,r19,15
    39b4:	b006973a 	slli	r3,r22,28
    39b8:	2085883a 	add	r2,r4,r2
    39bc:	9826d13a 	srli	r19,r19,4
    39c0:	10800003 	ldbu	r2,0(r2)
    39c4:	b02cd13a 	srli	r22,r22,4
    39c8:	843fffc4 	addi	r16,r16,-1
    39cc:	1ce6b03a 	or	r19,r3,r19
    39d0:	80800005 	stb	r2,0(r16)
    39d4:	9d84b03a 	or	r2,r19,r22
    39d8:	103ff51e 	bne	r2,zero,39b0 <___vfprintf_internal_r+0xbb0>
    39dc:	d8c02817 	ldw	r3,160(sp)
    39e0:	1c07c83a 	sub	r3,r3,r16
    39e4:	d8c02e15 	stw	r3,184(sp)
    39e8:	003ecc06 	br	351c <___vfprintf_internal_r+0x71c>
    39ec:	18c03fcc 	andi	r3,r3,255
    39f0:	183e9f26 	beq	r3,zero,3470 <___vfprintf_internal_r+0x670>
    39f4:	d9c02785 	stb	r7,158(sp)
    39f8:	003e9d06 	br	3470 <___vfprintf_internal_r+0x670>
    39fc:	00c00044 	movi	r3,1
    3a00:	01c00ac4 	movi	r7,43
    3a04:	ac400007 	ldb	r17,0(r21)
    3a08:	003d5e06 	br	2f84 <___vfprintf_internal_r+0x184>
    3a0c:	94800814 	ori	r18,r18,32
    3a10:	ac400007 	ldb	r17,0(r21)
    3a14:	003d5b06 	br	2f84 <___vfprintf_internal_r+0x184>
    3a18:	d8c02d17 	ldw	r3,180(sp)
    3a1c:	d8002785 	stb	zero,158(sp)
    3a20:	1c000017 	ldw	r16,0(r3)
    3a24:	1cc00104 	addi	r19,r3,4
    3a28:	80041926 	beq	r16,zero,4a90 <___vfprintf_internal_r+0x1c90>
    3a2c:	d9002917 	ldw	r4,164(sp)
    3a30:	2003d016 	blt	r4,zero,4974 <___vfprintf_internal_r+0x1b74>
    3a34:	200d883a 	mov	r6,r4
    3a38:	000b883a 	mov	r5,zero
    3a3c:	8009883a 	mov	r4,r16
    3a40:	da003d15 	stw	r8,244(sp)
    3a44:	0007e040 	call	7e04 <memchr>
    3a48:	da003d17 	ldw	r8,244(sp)
    3a4c:	10045426 	beq	r2,zero,4ba0 <___vfprintf_internal_r+0x1da0>
    3a50:	1405c83a 	sub	r2,r2,r16
    3a54:	d8802e15 	stw	r2,184(sp)
    3a58:	1003cc16 	blt	r2,zero,498c <___vfprintf_internal_r+0x1b8c>
    3a5c:	df002783 	ldbu	fp,158(sp)
    3a60:	d8802a15 	stw	r2,168(sp)
    3a64:	dcc02d15 	stw	r19,180(sp)
    3a68:	d8002915 	stw	zero,164(sp)
    3a6c:	d8003215 	stw	zero,200(sp)
    3a70:	003eb006 	br	3534 <___vfprintf_internal_r+0x734>
    3a74:	18c03fcc 	andi	r3,r3,255
    3a78:	183f9b26 	beq	r3,zero,38e8 <___vfprintf_internal_r+0xae8>
    3a7c:	d9c02785 	stb	r7,158(sp)
    3a80:	003f9906 	br	38e8 <___vfprintf_internal_r+0xae8>
    3a84:	18c03fcc 	andi	r3,r3,255
    3a88:	1805551e 	bne	r3,zero,4fe0 <___vfprintf_internal_r+0x21e0>
    3a8c:	01400074 	movhi	r5,1
    3a90:	29470004 	addi	r5,r5,7168
    3a94:	d9403915 	stw	r5,228(sp)
    3a98:	9080080c 	andi	r2,r18,32
    3a9c:	103fae1e 	bne	r2,zero,3958 <___vfprintf_internal_r+0xb58>
    3aa0:	9080040c 	andi	r2,r18,16
    3aa4:	1002de26 	beq	r2,zero,4620 <___vfprintf_internal_r+0x1820>
    3aa8:	d8c02d17 	ldw	r3,180(sp)
    3aac:	002d883a 	mov	r22,zero
    3ab0:	1cc00017 	ldw	r19,0(r3)
    3ab4:	18c00104 	addi	r3,r3,4
    3ab8:	d8c02d15 	stw	r3,180(sp)
    3abc:	003fab06 	br	396c <___vfprintf_internal_r+0xb6c>
    3ac0:	38803fcc 	andi	r2,r7,255
    3ac4:	1080201c 	xori	r2,r2,128
    3ac8:	10bfe004 	addi	r2,r2,-128
    3acc:	1002d21e 	bne	r2,zero,4618 <___vfprintf_internal_r+0x1818>
    3ad0:	00c00044 	movi	r3,1
    3ad4:	01c00804 	movi	r7,32
    3ad8:	ac400007 	ldb	r17,0(r21)
    3adc:	003d2906 	br	2f84 <___vfprintf_internal_r+0x184>
    3ae0:	94800054 	ori	r18,r18,1
    3ae4:	ac400007 	ldb	r17,0(r21)
    3ae8:	003d2606 	br	2f84 <___vfprintf_internal_r+0x184>
    3aec:	18c03fcc 	andi	r3,r3,255
    3af0:	183e0526 	beq	r3,zero,3308 <___vfprintf_internal_r+0x508>
    3af4:	d9c02785 	stb	r7,158(sp)
    3af8:	003e0306 	br	3308 <___vfprintf_internal_r+0x508>
    3afc:	94801014 	ori	r18,r18,64
    3b00:	ac400007 	ldb	r17,0(r21)
    3b04:	003d1f06 	br	2f84 <___vfprintf_internal_r+0x184>
    3b08:	ac400007 	ldb	r17,0(r21)
    3b0c:	8a438726 	beq	r17,r9,492c <___vfprintf_internal_r+0x1b2c>
    3b10:	94800414 	ori	r18,r18,16
    3b14:	003d1b06 	br	2f84 <___vfprintf_internal_r+0x184>
    3b18:	18c03fcc 	andi	r3,r3,255
    3b1c:	1805341e 	bne	r3,zero,4ff0 <___vfprintf_internal_r+0x21f0>
    3b20:	9080080c 	andi	r2,r18,32
    3b24:	1002cd26 	beq	r2,zero,465c <___vfprintf_internal_r+0x185c>
    3b28:	d9402d17 	ldw	r5,180(sp)
    3b2c:	d9002f17 	ldw	r4,188(sp)
    3b30:	28800017 	ldw	r2,0(r5)
    3b34:	2007d7fa 	srai	r3,r4,31
    3b38:	29400104 	addi	r5,r5,4
    3b3c:	d9402d15 	stw	r5,180(sp)
    3b40:	11000015 	stw	r4,0(r2)
    3b44:	10c00115 	stw	r3,4(r2)
    3b48:	003ce506 	br	2ee0 <___vfprintf_internal_r+0xe0>
    3b4c:	d8c02d17 	ldw	r3,180(sp)
    3b50:	d9002d17 	ldw	r4,180(sp)
    3b54:	d8002785 	stb	zero,158(sp)
    3b58:	18800017 	ldw	r2,0(r3)
    3b5c:	21000104 	addi	r4,r4,4
    3b60:	00c00044 	movi	r3,1
    3b64:	d8c02a15 	stw	r3,168(sp)
    3b68:	d8801405 	stb	r2,80(sp)
    3b6c:	d9002d15 	stw	r4,180(sp)
    3b70:	d8c02e15 	stw	r3,184(sp)
    3b74:	d8002915 	stw	zero,164(sp)
    3b78:	d8003215 	stw	zero,200(sp)
    3b7c:	dc001404 	addi	r16,sp,80
    3b80:	0039883a 	mov	fp,zero
    3b84:	003e7206 	br	3550 <___vfprintf_internal_r+0x750>
    3b88:	01000074 	movhi	r4,1
    3b8c:	21070004 	addi	r4,r4,7168
    3b90:	0039883a 	mov	fp,zero
    3b94:	d9003915 	stw	r4,228(sp)
    3b98:	04401e04 	movi	r17,120
    3b9c:	003f8206 	br	39a8 <___vfprintf_internal_r+0xba8>
    3ba0:	18c03fcc 	andi	r3,r3,255
    3ba4:	1805061e 	bne	r3,zero,4fc0 <___vfprintf_internal_r+0x21c0>
    3ba8:	883d9126 	beq	r17,zero,31f0 <___vfprintf_internal_r+0x3f0>
    3bac:	00c00044 	movi	r3,1
    3bb0:	d8c02a15 	stw	r3,168(sp)
    3bb4:	dc401405 	stb	r17,80(sp)
    3bb8:	d8002785 	stb	zero,158(sp)
    3bbc:	003fec06 	br	3b70 <___vfprintf_internal_r+0xd70>
    3bc0:	01400074 	movhi	r5,1
    3bc4:	29470004 	addi	r5,r5,7168
    3bc8:	d9403915 	stw	r5,228(sp)
    3bcc:	d8c02d15 	stw	r3,180(sp)
    3bd0:	1025883a 	mov	r18,r2
    3bd4:	04401e04 	movi	r17,120
    3bd8:	9d84b03a 	or	r2,r19,r22
    3bdc:	1000fc1e 	bne	r2,zero,3fd0 <___vfprintf_internal_r+0x11d0>
    3be0:	0039883a 	mov	fp,zero
    3be4:	00800084 	movi	r2,2
    3be8:	10803fcc 	andi	r2,r2,255
    3bec:	00c00044 	movi	r3,1
    3bf0:	10c20f26 	beq	r2,r3,4430 <___vfprintf_internal_r+0x1630>
    3bf4:	00c00084 	movi	r3,2
    3bf8:	10fd6326 	beq	r2,r3,3188 <___vfprintf_internal_r+0x388>
    3bfc:	003e2d06 	br	34b4 <___vfprintf_internal_r+0x6b4>
    3c00:	d8c02017 	ldw	r3,128(sp)
    3c04:	003e9306 	br	3654 <___vfprintf_internal_r+0x854>
    3c08:	00801944 	movi	r2,101
    3c0c:	14407e0e 	bge	r2,r17,3e08 <___vfprintf_internal_r+0x1008>
    3c10:	d9003617 	ldw	r4,216(sp)
    3c14:	d9403817 	ldw	r5,224(sp)
    3c18:	000d883a 	mov	r6,zero
    3c1c:	000f883a 	mov	r7,zero
    3c20:	d8c03c15 	stw	r3,240(sp)
    3c24:	da003d15 	stw	r8,244(sp)
    3c28:	000d8140 	call	d814 <__eqdf2>
    3c2c:	d8c03c17 	ldw	r3,240(sp)
    3c30:	da003d17 	ldw	r8,244(sp)
    3c34:	1000f71e 	bne	r2,zero,4014 <___vfprintf_internal_r+0x1214>
    3c38:	d8801f17 	ldw	r2,124(sp)
    3c3c:	01000074 	movhi	r4,1
    3c40:	21070704 	addi	r4,r4,7196
    3c44:	18c00044 	addi	r3,r3,1
    3c48:	10800044 	addi	r2,r2,1
    3c4c:	41000015 	stw	r4,0(r8)
    3c50:	01000044 	movi	r4,1
    3c54:	41000115 	stw	r4,4(r8)
    3c58:	d8c02015 	stw	r3,128(sp)
    3c5c:	d8801f15 	stw	r2,124(sp)
    3c60:	010001c4 	movi	r4,7
    3c64:	2082b816 	blt	r4,r2,4748 <___vfprintf_internal_r+0x1948>
    3c68:	42000204 	addi	r8,r8,8
    3c6c:	d8802617 	ldw	r2,152(sp)
    3c70:	d9403317 	ldw	r5,204(sp)
    3c74:	11400216 	blt	r2,r5,3c80 <___vfprintf_internal_r+0xe80>
    3c78:	9080004c 	andi	r2,r18,1
    3c7c:	103ed526 	beq	r2,zero,37d4 <___vfprintf_internal_r+0x9d4>
    3c80:	d8803717 	ldw	r2,220(sp)
    3c84:	d9003417 	ldw	r4,208(sp)
    3c88:	d9403717 	ldw	r5,220(sp)
    3c8c:	1887883a 	add	r3,r3,r2
    3c90:	d8801f17 	ldw	r2,124(sp)
    3c94:	41000015 	stw	r4,0(r8)
    3c98:	41400115 	stw	r5,4(r8)
    3c9c:	10800044 	addi	r2,r2,1
    3ca0:	d8c02015 	stw	r3,128(sp)
    3ca4:	d8801f15 	stw	r2,124(sp)
    3ca8:	010001c4 	movi	r4,7
    3cac:	20832916 	blt	r4,r2,4954 <___vfprintf_internal_r+0x1b54>
    3cb0:	42000204 	addi	r8,r8,8
    3cb4:	d8803317 	ldw	r2,204(sp)
    3cb8:	143fffc4 	addi	r16,r2,-1
    3cbc:	043ec50e 	bge	zero,r16,37d4 <___vfprintf_internal_r+0x9d4>
    3cc0:	04400404 	movi	r17,16
    3cc4:	d8801f17 	ldw	r2,124(sp)
    3cc8:	8c00880e 	bge	r17,r16,3eec <___vfprintf_internal_r+0x10ec>
    3ccc:	01400074 	movhi	r5,1
    3cd0:	29470784 	addi	r5,r5,7198
    3cd4:	d9402b15 	stw	r5,172(sp)
    3cd8:	058001c4 	movi	r22,7
    3cdc:	dcc02c17 	ldw	r19,176(sp)
    3ce0:	00000306 	br	3cf0 <___vfprintf_internal_r+0xef0>
    3ce4:	42000204 	addi	r8,r8,8
    3ce8:	843ffc04 	addi	r16,r16,-16
    3cec:	8c00820e 	bge	r17,r16,3ef8 <___vfprintf_internal_r+0x10f8>
    3cf0:	18c00404 	addi	r3,r3,16
    3cf4:	10800044 	addi	r2,r2,1
    3cf8:	45000015 	stw	r20,0(r8)
    3cfc:	44400115 	stw	r17,4(r8)
    3d00:	d8c02015 	stw	r3,128(sp)
    3d04:	d8801f15 	stw	r2,124(sp)
    3d08:	b0bff60e 	bge	r22,r2,3ce4 <___vfprintf_internal_r+0xee4>
    3d0c:	d9801e04 	addi	r6,sp,120
    3d10:	b80b883a 	mov	r5,r23
    3d14:	9809883a 	mov	r4,r19
    3d18:	0009b9c0 	call	9b9c <__sprint_r>
    3d1c:	103d3a1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3d20:	d8c02017 	ldw	r3,128(sp)
    3d24:	d8801f17 	ldw	r2,124(sp)
    3d28:	da000404 	addi	r8,sp,16
    3d2c:	003fee06 	br	3ce8 <___vfprintf_internal_r+0xee8>
    3d30:	d9403117 	ldw	r5,196(sp)
    3d34:	d8802a17 	ldw	r2,168(sp)
    3d38:	28adc83a 	sub	r22,r5,r2
    3d3c:	05be630e 	bge	zero,r22,36cc <___vfprintf_internal_r+0x8cc>
    3d40:	07000404 	movi	fp,16
    3d44:	d8801f17 	ldw	r2,124(sp)
    3d48:	e5838f0e 	bge	fp,r22,4b88 <___vfprintf_internal_r+0x1d88>
    3d4c:	01400074 	movhi	r5,1
    3d50:	29470784 	addi	r5,r5,7198
    3d54:	dc403015 	stw	r17,192(sp)
    3d58:	d9402b15 	stw	r5,172(sp)
    3d5c:	b023883a 	mov	r17,r22
    3d60:	04c001c4 	movi	r19,7
    3d64:	a82d883a 	mov	r22,r21
    3d68:	902b883a 	mov	r21,r18
    3d6c:	8025883a 	mov	r18,r16
    3d70:	dc002c17 	ldw	r16,176(sp)
    3d74:	00000306 	br	3d84 <___vfprintf_internal_r+0xf84>
    3d78:	8c7ffc04 	addi	r17,r17,-16
    3d7c:	42000204 	addi	r8,r8,8
    3d80:	e440110e 	bge	fp,r17,3dc8 <___vfprintf_internal_r+0xfc8>
    3d84:	18c00404 	addi	r3,r3,16
    3d88:	10800044 	addi	r2,r2,1
    3d8c:	45000015 	stw	r20,0(r8)
    3d90:	47000115 	stw	fp,4(r8)
    3d94:	d8c02015 	stw	r3,128(sp)
    3d98:	d8801f15 	stw	r2,124(sp)
    3d9c:	98bff60e 	bge	r19,r2,3d78 <___vfprintf_internal_r+0xf78>
    3da0:	d9801e04 	addi	r6,sp,120
    3da4:	b80b883a 	mov	r5,r23
    3da8:	8009883a 	mov	r4,r16
    3dac:	0009b9c0 	call	9b9c <__sprint_r>
    3db0:	103d151e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3db4:	8c7ffc04 	addi	r17,r17,-16
    3db8:	d8c02017 	ldw	r3,128(sp)
    3dbc:	d8801f17 	ldw	r2,124(sp)
    3dc0:	da000404 	addi	r8,sp,16
    3dc4:	e47fef16 	blt	fp,r17,3d84 <___vfprintf_internal_r+0xf84>
    3dc8:	9021883a 	mov	r16,r18
    3dcc:	a825883a 	mov	r18,r21
    3dd0:	b02b883a 	mov	r21,r22
    3dd4:	882d883a 	mov	r22,r17
    3dd8:	dc403017 	ldw	r17,192(sp)
    3ddc:	d9002b17 	ldw	r4,172(sp)
    3de0:	1d87883a 	add	r3,r3,r22
    3de4:	10800044 	addi	r2,r2,1
    3de8:	41000015 	stw	r4,0(r8)
    3dec:	45800115 	stw	r22,4(r8)
    3df0:	d8c02015 	stw	r3,128(sp)
    3df4:	d8801f15 	stw	r2,124(sp)
    3df8:	010001c4 	movi	r4,7
    3dfc:	20818e16 	blt	r4,r2,4438 <___vfprintf_internal_r+0x1638>
    3e00:	42000204 	addi	r8,r8,8
    3e04:	003e3106 	br	36cc <___vfprintf_internal_r+0x8cc>
    3e08:	d9403317 	ldw	r5,204(sp)
    3e0c:	00800044 	movi	r2,1
    3e10:	18c00044 	addi	r3,r3,1
    3e14:	1141530e 	bge	r2,r5,4364 <___vfprintf_internal_r+0x1564>
    3e18:	dc401f17 	ldw	r17,124(sp)
    3e1c:	00800044 	movi	r2,1
    3e20:	40800115 	stw	r2,4(r8)
    3e24:	8c400044 	addi	r17,r17,1
    3e28:	44000015 	stw	r16,0(r8)
    3e2c:	d8c02015 	stw	r3,128(sp)
    3e30:	dc401f15 	stw	r17,124(sp)
    3e34:	008001c4 	movi	r2,7
    3e38:	14416b16 	blt	r2,r17,43e8 <___vfprintf_internal_r+0x15e8>
    3e3c:	42000204 	addi	r8,r8,8
    3e40:	d8803717 	ldw	r2,220(sp)
    3e44:	d9003417 	ldw	r4,208(sp)
    3e48:	8c400044 	addi	r17,r17,1
    3e4c:	10c7883a 	add	r3,r2,r3
    3e50:	40800115 	stw	r2,4(r8)
    3e54:	41000015 	stw	r4,0(r8)
    3e58:	d8c02015 	stw	r3,128(sp)
    3e5c:	dc401f15 	stw	r17,124(sp)
    3e60:	008001c4 	movi	r2,7
    3e64:	14416916 	blt	r2,r17,440c <___vfprintf_internal_r+0x160c>
    3e68:	45800204 	addi	r22,r8,8
    3e6c:	d9003617 	ldw	r4,216(sp)
    3e70:	d9403817 	ldw	r5,224(sp)
    3e74:	000d883a 	mov	r6,zero
    3e78:	000f883a 	mov	r7,zero
    3e7c:	d8c03c15 	stw	r3,240(sp)
    3e80:	000d8140 	call	d814 <__eqdf2>
    3e84:	d8c03c17 	ldw	r3,240(sp)
    3e88:	1000bc26 	beq	r2,zero,417c <___vfprintf_internal_r+0x137c>
    3e8c:	d9403317 	ldw	r5,204(sp)
    3e90:	84000044 	addi	r16,r16,1
    3e94:	8c400044 	addi	r17,r17,1
    3e98:	28bfffc4 	addi	r2,r5,-1
    3e9c:	1887883a 	add	r3,r3,r2
    3ea0:	b0800115 	stw	r2,4(r22)
    3ea4:	b4000015 	stw	r16,0(r22)
    3ea8:	d8c02015 	stw	r3,128(sp)
    3eac:	dc401f15 	stw	r17,124(sp)
    3eb0:	008001c4 	movi	r2,7
    3eb4:	14414316 	blt	r2,r17,43c4 <___vfprintf_internal_r+0x15c4>
    3eb8:	b5800204 	addi	r22,r22,8
    3ebc:	d9003a17 	ldw	r4,232(sp)
    3ec0:	df0022c4 	addi	fp,sp,139
    3ec4:	8c400044 	addi	r17,r17,1
    3ec8:	20c7883a 	add	r3,r4,r3
    3ecc:	b7000015 	stw	fp,0(r22)
    3ed0:	b1000115 	stw	r4,4(r22)
    3ed4:	d8c02015 	stw	r3,128(sp)
    3ed8:	dc401f15 	stw	r17,124(sp)
    3edc:	008001c4 	movi	r2,7
    3ee0:	14400e16 	blt	r2,r17,3f1c <___vfprintf_internal_r+0x111c>
    3ee4:	b2000204 	addi	r8,r22,8
    3ee8:	003e3a06 	br	37d4 <___vfprintf_internal_r+0x9d4>
    3eec:	01000074 	movhi	r4,1
    3ef0:	21070784 	addi	r4,r4,7198
    3ef4:	d9002b15 	stw	r4,172(sp)
    3ef8:	d9002b17 	ldw	r4,172(sp)
    3efc:	1c07883a 	add	r3,r3,r16
    3f00:	44000115 	stw	r16,4(r8)
    3f04:	41000015 	stw	r4,0(r8)
    3f08:	10800044 	addi	r2,r2,1
    3f0c:	d8c02015 	stw	r3,128(sp)
    3f10:	d8801f15 	stw	r2,124(sp)
    3f14:	010001c4 	movi	r4,7
    3f18:	20be2d0e 	bge	r4,r2,37d0 <___vfprintf_internal_r+0x9d0>
    3f1c:	d9002c17 	ldw	r4,176(sp)
    3f20:	d9801e04 	addi	r6,sp,120
    3f24:	b80b883a 	mov	r5,r23
    3f28:	0009b9c0 	call	9b9c <__sprint_r>
    3f2c:	103cb61e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3f30:	d8c02017 	ldw	r3,128(sp)
    3f34:	da000404 	addi	r8,sp,16
    3f38:	003e2606 	br	37d4 <___vfprintf_internal_r+0x9d4>
    3f3c:	d9002c17 	ldw	r4,176(sp)
    3f40:	d9801e04 	addi	r6,sp,120
    3f44:	b80b883a 	mov	r5,r23
    3f48:	0009b9c0 	call	9b9c <__sprint_r>
    3f4c:	103e5d26 	beq	r2,zero,38c4 <___vfprintf_internal_r+0xac4>
    3f50:	003cad06 	br	3208 <___vfprintf_internal_r+0x408>
    3f54:	d9002c17 	ldw	r4,176(sp)
    3f58:	d9801e04 	addi	r6,sp,120
    3f5c:	b80b883a 	mov	r5,r23
    3f60:	0009b9c0 	call	9b9c <__sprint_r>
    3f64:	103ca81e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3f68:	d8c02017 	ldw	r3,128(sp)
    3f6c:	da000404 	addi	r8,sp,16
    3f70:	003e0b06 	br	37a0 <___vfprintf_internal_r+0x9a0>
    3f74:	d9002c17 	ldw	r4,176(sp)
    3f78:	d9801e04 	addi	r6,sp,120
    3f7c:	b80b883a 	mov	r5,r23
    3f80:	0009b9c0 	call	9b9c <__sprint_r>
    3f84:	103ca01e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3f88:	d8c02017 	ldw	r3,128(sp)
    3f8c:	da000404 	addi	r8,sp,16
    3f90:	003dbd06 	br	3688 <___vfprintf_internal_r+0x888>
    3f94:	d9002c17 	ldw	r4,176(sp)
    3f98:	d9801e04 	addi	r6,sp,120
    3f9c:	b80b883a 	mov	r5,r23
    3fa0:	0009b9c0 	call	9b9c <__sprint_r>
    3fa4:	103c981e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    3fa8:	d8c02017 	ldw	r3,128(sp)
    3fac:	da000404 	addi	r8,sp,16
    3fb0:	003dc306 	br	36c0 <___vfprintf_internal_r+0x8c0>
    3fb4:	d8802917 	ldw	r2,164(sp)
    3fb8:	d8002785 	stb	zero,158(sp)
    3fbc:	103f0616 	blt	r2,zero,3bd8 <___vfprintf_internal_r+0xdd8>
    3fc0:	00ffdfc4 	movi	r3,-129
    3fc4:	9d84b03a 	or	r2,r19,r22
    3fc8:	90e4703a 	and	r18,r18,r3
    3fcc:	103c6b26 	beq	r2,zero,317c <___vfprintf_internal_r+0x37c>
    3fd0:	0039883a 	mov	fp,zero
    3fd4:	003e7406 	br	39a8 <___vfprintf_internal_r+0xba8>
    3fd8:	9080040c 	andi	r2,r18,16
    3fdc:	1001b326 	beq	r2,zero,46ac <___vfprintf_internal_r+0x18ac>
    3fe0:	d9002d17 	ldw	r4,180(sp)
    3fe4:	d9402917 	ldw	r5,164(sp)
    3fe8:	d8002785 	stb	zero,158(sp)
    3fec:	20800104 	addi	r2,r4,4
    3ff0:	24c00017 	ldw	r19,0(r4)
    3ff4:	002d883a 	mov	r22,zero
    3ff8:	2801b516 	blt	r5,zero,46d0 <___vfprintf_internal_r+0x18d0>
    3ffc:	00ffdfc4 	movi	r3,-129
    4000:	d8802d15 	stw	r2,180(sp)
    4004:	90e4703a 	and	r18,r18,r3
    4008:	983d2726 	beq	r19,zero,34a8 <___vfprintf_internal_r+0x6a8>
    400c:	0039883a 	mov	fp,zero
    4010:	003d2a06 	br	34bc <___vfprintf_internal_r+0x6bc>
    4014:	dc402617 	ldw	r17,152(sp)
    4018:	0441d30e 	bge	zero,r17,4768 <___vfprintf_internal_r+0x1968>
    401c:	dc403217 	ldw	r17,200(sp)
    4020:	d8803317 	ldw	r2,204(sp)
    4024:	1440010e 	bge	r2,r17,402c <___vfprintf_internal_r+0x122c>
    4028:	1023883a 	mov	r17,r2
    402c:	04400a0e 	bge	zero,r17,4058 <___vfprintf_internal_r+0x1258>
    4030:	d8801f17 	ldw	r2,124(sp)
    4034:	1c47883a 	add	r3,r3,r17
    4038:	44000015 	stw	r16,0(r8)
    403c:	10800044 	addi	r2,r2,1
    4040:	44400115 	stw	r17,4(r8)
    4044:	d8c02015 	stw	r3,128(sp)
    4048:	d8801f15 	stw	r2,124(sp)
    404c:	010001c4 	movi	r4,7
    4050:	20826516 	blt	r4,r2,49e8 <___vfprintf_internal_r+0x1be8>
    4054:	42000204 	addi	r8,r8,8
    4058:	88026116 	blt	r17,zero,49e0 <___vfprintf_internal_r+0x1be0>
    405c:	d9003217 	ldw	r4,200(sp)
    4060:	2463c83a 	sub	r17,r4,r17
    4064:	04407b0e 	bge	zero,r17,4254 <___vfprintf_internal_r+0x1454>
    4068:	05800404 	movi	r22,16
    406c:	d8801f17 	ldw	r2,124(sp)
    4070:	b4419d0e 	bge	r22,r17,46e8 <___vfprintf_internal_r+0x18e8>
    4074:	01000074 	movhi	r4,1
    4078:	21070784 	addi	r4,r4,7198
    407c:	d9002b15 	stw	r4,172(sp)
    4080:	070001c4 	movi	fp,7
    4084:	dcc02c17 	ldw	r19,176(sp)
    4088:	00000306 	br	4098 <___vfprintf_internal_r+0x1298>
    408c:	42000204 	addi	r8,r8,8
    4090:	8c7ffc04 	addi	r17,r17,-16
    4094:	b441970e 	bge	r22,r17,46f4 <___vfprintf_internal_r+0x18f4>
    4098:	18c00404 	addi	r3,r3,16
    409c:	10800044 	addi	r2,r2,1
    40a0:	45000015 	stw	r20,0(r8)
    40a4:	45800115 	stw	r22,4(r8)
    40a8:	d8c02015 	stw	r3,128(sp)
    40ac:	d8801f15 	stw	r2,124(sp)
    40b0:	e0bff60e 	bge	fp,r2,408c <___vfprintf_internal_r+0x128c>
    40b4:	d9801e04 	addi	r6,sp,120
    40b8:	b80b883a 	mov	r5,r23
    40bc:	9809883a 	mov	r4,r19
    40c0:	0009b9c0 	call	9b9c <__sprint_r>
    40c4:	103c501e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    40c8:	d8c02017 	ldw	r3,128(sp)
    40cc:	d8801f17 	ldw	r2,124(sp)
    40d0:	da000404 	addi	r8,sp,16
    40d4:	003fee06 	br	4090 <___vfprintf_internal_r+0x1290>
    40d8:	d9002c17 	ldw	r4,176(sp)
    40dc:	d9801e04 	addi	r6,sp,120
    40e0:	b80b883a 	mov	r5,r23
    40e4:	0009b9c0 	call	9b9c <__sprint_r>
    40e8:	103c471e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    40ec:	d8c02017 	ldw	r3,128(sp)
    40f0:	df002787 	ldb	fp,158(sp)
    40f4:	da000404 	addi	r8,sp,16
    40f8:	003d5606 	br	3654 <___vfprintf_internal_r+0x854>
    40fc:	9080040c 	andi	r2,r18,16
    4100:	10016126 	beq	r2,zero,4688 <___vfprintf_internal_r+0x1888>
    4104:	d8802d17 	ldw	r2,180(sp)
    4108:	14c00017 	ldw	r19,0(r2)
    410c:	10800104 	addi	r2,r2,4
    4110:	d8802d15 	stw	r2,180(sp)
    4114:	982dd7fa 	srai	r22,r19,31
    4118:	b005883a 	mov	r2,r22
    411c:	003c8206 	br	3328 <___vfprintf_internal_r+0x528>
    4120:	9080040c 	andi	r2,r18,16
    4124:	10003526 	beq	r2,zero,41fc <___vfprintf_internal_r+0x13fc>
    4128:	d9402d17 	ldw	r5,180(sp)
    412c:	d8c02917 	ldw	r3,164(sp)
    4130:	d8002785 	stb	zero,158(sp)
    4134:	28800104 	addi	r2,r5,4
    4138:	2cc00017 	ldw	r19,0(r5)
    413c:	002d883a 	mov	r22,zero
    4140:	18003716 	blt	r3,zero,4220 <___vfprintf_internal_r+0x1420>
    4144:	00ffdfc4 	movi	r3,-129
    4148:	d8802d15 	stw	r2,180(sp)
    414c:	90e4703a 	and	r18,r18,r3
    4150:	0039883a 	mov	fp,zero
    4154:	983df326 	beq	r19,zero,3924 <___vfprintf_internal_r+0xb24>
    4158:	00800244 	movi	r2,9
    415c:	14fc7b36 	bltu	r2,r19,334c <___vfprintf_internal_r+0x54c>
    4160:	d8c02817 	ldw	r3,160(sp)
    4164:	dc001dc4 	addi	r16,sp,119
    4168:	9cc00c04 	addi	r19,r19,48
    416c:	1c07c83a 	sub	r3,r3,r16
    4170:	dcc01dc5 	stb	r19,119(sp)
    4174:	d8c02e15 	stw	r3,184(sp)
    4178:	003ce806 	br	351c <___vfprintf_internal_r+0x71c>
    417c:	d8803317 	ldw	r2,204(sp)
    4180:	143fffc4 	addi	r16,r2,-1
    4184:	043f4d0e 	bge	zero,r16,3ebc <___vfprintf_internal_r+0x10bc>
    4188:	07000404 	movi	fp,16
    418c:	e400810e 	bge	fp,r16,4394 <___vfprintf_internal_r+0x1594>
    4190:	01400074 	movhi	r5,1
    4194:	29470784 	addi	r5,r5,7198
    4198:	d9402b15 	stw	r5,172(sp)
    419c:	01c001c4 	movi	r7,7
    41a0:	dcc02c17 	ldw	r19,176(sp)
    41a4:	00000306 	br	41b4 <___vfprintf_internal_r+0x13b4>
    41a8:	b5800204 	addi	r22,r22,8
    41ac:	843ffc04 	addi	r16,r16,-16
    41b0:	e4007b0e 	bge	fp,r16,43a0 <___vfprintf_internal_r+0x15a0>
    41b4:	18c00404 	addi	r3,r3,16
    41b8:	8c400044 	addi	r17,r17,1
    41bc:	b5000015 	stw	r20,0(r22)
    41c0:	b7000115 	stw	fp,4(r22)
    41c4:	d8c02015 	stw	r3,128(sp)
    41c8:	dc401f15 	stw	r17,124(sp)
    41cc:	3c7ff60e 	bge	r7,r17,41a8 <___vfprintf_internal_r+0x13a8>
    41d0:	d9801e04 	addi	r6,sp,120
    41d4:	b80b883a 	mov	r5,r23
    41d8:	9809883a 	mov	r4,r19
    41dc:	d9c03c15 	stw	r7,240(sp)
    41e0:	0009b9c0 	call	9b9c <__sprint_r>
    41e4:	d9c03c17 	ldw	r7,240(sp)
    41e8:	103c071e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    41ec:	d8c02017 	ldw	r3,128(sp)
    41f0:	dc401f17 	ldw	r17,124(sp)
    41f4:	dd800404 	addi	r22,sp,16
    41f8:	003fec06 	br	41ac <___vfprintf_internal_r+0x13ac>
    41fc:	9080100c 	andi	r2,r18,64
    4200:	d8002785 	stb	zero,158(sp)
    4204:	10010e26 	beq	r2,zero,4640 <___vfprintf_internal_r+0x1840>
    4208:	d9002d17 	ldw	r4,180(sp)
    420c:	d9402917 	ldw	r5,164(sp)
    4210:	002d883a 	mov	r22,zero
    4214:	20800104 	addi	r2,r4,4
    4218:	24c0000b 	ldhu	r19,0(r4)
    421c:	283fc90e 	bge	r5,zero,4144 <___vfprintf_internal_r+0x1344>
    4220:	d8802d15 	stw	r2,180(sp)
    4224:	0039883a 	mov	fp,zero
    4228:	9d84b03a 	or	r2,r19,r22
    422c:	103c461e 	bne	r2,zero,3348 <___vfprintf_internal_r+0x548>
    4230:	00800044 	movi	r2,1
    4234:	003e6c06 	br	3be8 <___vfprintf_internal_r+0xde8>
    4238:	d9002c17 	ldw	r4,176(sp)
    423c:	d9801e04 	addi	r6,sp,120
    4240:	b80b883a 	mov	r5,r23
    4244:	0009b9c0 	call	9b9c <__sprint_r>
    4248:	103bef1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    424c:	d8c02017 	ldw	r3,128(sp)
    4250:	da000404 	addi	r8,sp,16
    4254:	d9003217 	ldw	r4,200(sp)
    4258:	d8802617 	ldw	r2,152(sp)
    425c:	d9403317 	ldw	r5,204(sp)
    4260:	8123883a 	add	r17,r16,r4
    4264:	11400216 	blt	r2,r5,4270 <___vfprintf_internal_r+0x1470>
    4268:	9100004c 	andi	r4,r18,1
    426c:	20000d26 	beq	r4,zero,42a4 <___vfprintf_internal_r+0x14a4>
    4270:	d9003717 	ldw	r4,220(sp)
    4274:	d9403417 	ldw	r5,208(sp)
    4278:	1907883a 	add	r3,r3,r4
    427c:	d9001f17 	ldw	r4,124(sp)
    4280:	41400015 	stw	r5,0(r8)
    4284:	d9403717 	ldw	r5,220(sp)
    4288:	21000044 	addi	r4,r4,1
    428c:	d8c02015 	stw	r3,128(sp)
    4290:	41400115 	stw	r5,4(r8)
    4294:	d9001f15 	stw	r4,124(sp)
    4298:	014001c4 	movi	r5,7
    429c:	2901e816 	blt	r5,r4,4a40 <___vfprintf_internal_r+0x1c40>
    42a0:	42000204 	addi	r8,r8,8
    42a4:	d9003317 	ldw	r4,204(sp)
    42a8:	8121883a 	add	r16,r16,r4
    42ac:	2085c83a 	sub	r2,r4,r2
    42b0:	8461c83a 	sub	r16,r16,r17
    42b4:	1400010e 	bge	r2,r16,42bc <___vfprintf_internal_r+0x14bc>
    42b8:	1021883a 	mov	r16,r2
    42bc:	04000a0e 	bge	zero,r16,42e8 <___vfprintf_internal_r+0x14e8>
    42c0:	d9001f17 	ldw	r4,124(sp)
    42c4:	1c07883a 	add	r3,r3,r16
    42c8:	44400015 	stw	r17,0(r8)
    42cc:	21000044 	addi	r4,r4,1
    42d0:	44000115 	stw	r16,4(r8)
    42d4:	d8c02015 	stw	r3,128(sp)
    42d8:	d9001f15 	stw	r4,124(sp)
    42dc:	014001c4 	movi	r5,7
    42e0:	2901fb16 	blt	r5,r4,4ad0 <___vfprintf_internal_r+0x1cd0>
    42e4:	42000204 	addi	r8,r8,8
    42e8:	8001f716 	blt	r16,zero,4ac8 <___vfprintf_internal_r+0x1cc8>
    42ec:	1421c83a 	sub	r16,r2,r16
    42f0:	043d380e 	bge	zero,r16,37d4 <___vfprintf_internal_r+0x9d4>
    42f4:	04400404 	movi	r17,16
    42f8:	d8801f17 	ldw	r2,124(sp)
    42fc:	8c3efb0e 	bge	r17,r16,3eec <___vfprintf_internal_r+0x10ec>
    4300:	01400074 	movhi	r5,1
    4304:	29470784 	addi	r5,r5,7198
    4308:	d9402b15 	stw	r5,172(sp)
    430c:	058001c4 	movi	r22,7
    4310:	dcc02c17 	ldw	r19,176(sp)
    4314:	00000306 	br	4324 <___vfprintf_internal_r+0x1524>
    4318:	42000204 	addi	r8,r8,8
    431c:	843ffc04 	addi	r16,r16,-16
    4320:	8c3ef50e 	bge	r17,r16,3ef8 <___vfprintf_internal_r+0x10f8>
    4324:	18c00404 	addi	r3,r3,16
    4328:	10800044 	addi	r2,r2,1
    432c:	45000015 	stw	r20,0(r8)
    4330:	44400115 	stw	r17,4(r8)
    4334:	d8c02015 	stw	r3,128(sp)
    4338:	d8801f15 	stw	r2,124(sp)
    433c:	b0bff60e 	bge	r22,r2,4318 <___vfprintf_internal_r+0x1518>
    4340:	d9801e04 	addi	r6,sp,120
    4344:	b80b883a 	mov	r5,r23
    4348:	9809883a 	mov	r4,r19
    434c:	0009b9c0 	call	9b9c <__sprint_r>
    4350:	103bad1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4354:	d8c02017 	ldw	r3,128(sp)
    4358:	d8801f17 	ldw	r2,124(sp)
    435c:	da000404 	addi	r8,sp,16
    4360:	003fee06 	br	431c <___vfprintf_internal_r+0x151c>
    4364:	9088703a 	and	r4,r18,r2
    4368:	203eab1e 	bne	r4,zero,3e18 <___vfprintf_internal_r+0x1018>
    436c:	dc401f17 	ldw	r17,124(sp)
    4370:	40800115 	stw	r2,4(r8)
    4374:	44000015 	stw	r16,0(r8)
    4378:	8c400044 	addi	r17,r17,1
    437c:	d8c02015 	stw	r3,128(sp)
    4380:	dc401f15 	stw	r17,124(sp)
    4384:	008001c4 	movi	r2,7
    4388:	14400e16 	blt	r2,r17,43c4 <___vfprintf_internal_r+0x15c4>
    438c:	45800204 	addi	r22,r8,8
    4390:	003eca06 	br	3ebc <___vfprintf_internal_r+0x10bc>
    4394:	01000074 	movhi	r4,1
    4398:	21070784 	addi	r4,r4,7198
    439c:	d9002b15 	stw	r4,172(sp)
    43a0:	d8802b17 	ldw	r2,172(sp)
    43a4:	1c07883a 	add	r3,r3,r16
    43a8:	8c400044 	addi	r17,r17,1
    43ac:	b0800015 	stw	r2,0(r22)
    43b0:	b4000115 	stw	r16,4(r22)
    43b4:	d8c02015 	stw	r3,128(sp)
    43b8:	dc401f15 	stw	r17,124(sp)
    43bc:	008001c4 	movi	r2,7
    43c0:	147ebd0e 	bge	r2,r17,3eb8 <___vfprintf_internal_r+0x10b8>
    43c4:	d9002c17 	ldw	r4,176(sp)
    43c8:	d9801e04 	addi	r6,sp,120
    43cc:	b80b883a 	mov	r5,r23
    43d0:	0009b9c0 	call	9b9c <__sprint_r>
    43d4:	103b8c1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    43d8:	d8c02017 	ldw	r3,128(sp)
    43dc:	dc401f17 	ldw	r17,124(sp)
    43e0:	dd800404 	addi	r22,sp,16
    43e4:	003eb506 	br	3ebc <___vfprintf_internal_r+0x10bc>
    43e8:	d9002c17 	ldw	r4,176(sp)
    43ec:	d9801e04 	addi	r6,sp,120
    43f0:	b80b883a 	mov	r5,r23
    43f4:	0009b9c0 	call	9b9c <__sprint_r>
    43f8:	103b831e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    43fc:	d8c02017 	ldw	r3,128(sp)
    4400:	dc401f17 	ldw	r17,124(sp)
    4404:	da000404 	addi	r8,sp,16
    4408:	003e8d06 	br	3e40 <___vfprintf_internal_r+0x1040>
    440c:	d9002c17 	ldw	r4,176(sp)
    4410:	d9801e04 	addi	r6,sp,120
    4414:	b80b883a 	mov	r5,r23
    4418:	0009b9c0 	call	9b9c <__sprint_r>
    441c:	103b7a1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4420:	d8c02017 	ldw	r3,128(sp)
    4424:	dc401f17 	ldw	r17,124(sp)
    4428:	dd800404 	addi	r22,sp,16
    442c:	003e8f06 	br	3e6c <___vfprintf_internal_r+0x106c>
    4430:	0027883a 	mov	r19,zero
    4434:	003f4a06 	br	4160 <___vfprintf_internal_r+0x1360>
    4438:	d9002c17 	ldw	r4,176(sp)
    443c:	d9801e04 	addi	r6,sp,120
    4440:	b80b883a 	mov	r5,r23
    4444:	0009b9c0 	call	9b9c <__sprint_r>
    4448:	103b6f1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    444c:	d8c02017 	ldw	r3,128(sp)
    4450:	da000404 	addi	r8,sp,16
    4454:	003c9d06 	br	36cc <___vfprintf_internal_r+0x8cc>
    4458:	04e7c83a 	sub	r19,zero,r19
    445c:	9804c03a 	cmpne	r2,r19,zero
    4460:	05adc83a 	sub	r22,zero,r22
    4464:	b0adc83a 	sub	r22,r22,r2
    4468:	d8802917 	ldw	r2,164(sp)
    446c:	07000b44 	movi	fp,45
    4470:	df002785 	stb	fp,158(sp)
    4474:	10017b16 	blt	r2,zero,4a64 <___vfprintf_internal_r+0x1c64>
    4478:	00bfdfc4 	movi	r2,-129
    447c:	90a4703a 	and	r18,r18,r2
    4480:	003bb106 	br	3348 <___vfprintf_internal_r+0x548>
    4484:	d9003617 	ldw	r4,216(sp)
    4488:	d9403817 	ldw	r5,224(sp)
    448c:	da003d15 	stw	r8,244(sp)
    4490:	00098140 	call	9814 <__fpclassifyd>
    4494:	da003d17 	ldw	r8,244(sp)
    4498:	1000f026 	beq	r2,zero,485c <___vfprintf_internal_r+0x1a5c>
    449c:	d9002917 	ldw	r4,164(sp)
    44a0:	05bff7c4 	movi	r22,-33
    44a4:	00bfffc4 	movi	r2,-1
    44a8:	8dac703a 	and	r22,r17,r22
    44ac:	20820026 	beq	r4,r2,4cb0 <___vfprintf_internal_r+0x1eb0>
    44b0:	008011c4 	movi	r2,71
    44b4:	b081f726 	beq	r22,r2,4c94 <___vfprintf_internal_r+0x1e94>
    44b8:	d9003817 	ldw	r4,224(sp)
    44bc:	90c04014 	ori	r3,r18,256
    44c0:	d8c02b15 	stw	r3,172(sp)
    44c4:	20021516 	blt	r4,zero,4d1c <___vfprintf_internal_r+0x1f1c>
    44c8:	dcc03817 	ldw	r19,224(sp)
    44cc:	d8002a05 	stb	zero,168(sp)
    44d0:	00801984 	movi	r2,102
    44d4:	8881f926 	beq	r17,r2,4cbc <___vfprintf_internal_r+0x1ebc>
    44d8:	00801184 	movi	r2,70
    44dc:	88821c26 	beq	r17,r2,4d50 <___vfprintf_internal_r+0x1f50>
    44e0:	00801144 	movi	r2,69
    44e4:	b081ef26 	beq	r22,r2,4ca4 <___vfprintf_internal_r+0x1ea4>
    44e8:	d8c02917 	ldw	r3,164(sp)
    44ec:	d8802104 	addi	r2,sp,132
    44f0:	d8800315 	stw	r2,12(sp)
    44f4:	d9403617 	ldw	r5,216(sp)
    44f8:	d8802504 	addi	r2,sp,148
    44fc:	d9002c17 	ldw	r4,176(sp)
    4500:	d8800215 	stw	r2,8(sp)
    4504:	d8802604 	addi	r2,sp,152
    4508:	d8c00015 	stw	r3,0(sp)
    450c:	d8800115 	stw	r2,4(sp)
    4510:	01c00084 	movi	r7,2
    4514:	980d883a 	mov	r6,r19
    4518:	d8c03c15 	stw	r3,240(sp)
    451c:	da003d15 	stw	r8,244(sp)
    4520:	00054240 	call	5424 <_dtoa_r>
    4524:	1021883a 	mov	r16,r2
    4528:	008019c4 	movi	r2,103
    452c:	d8c03c17 	ldw	r3,240(sp)
    4530:	da003d17 	ldw	r8,244(sp)
    4534:	88817126 	beq	r17,r2,4afc <___vfprintf_internal_r+0x1cfc>
    4538:	008011c4 	movi	r2,71
    453c:	88829226 	beq	r17,r2,4f88 <___vfprintf_internal_r+0x2188>
    4540:	80f9883a 	add	fp,r16,r3
    4544:	d9003617 	ldw	r4,216(sp)
    4548:	000d883a 	mov	r6,zero
    454c:	000f883a 	mov	r7,zero
    4550:	980b883a 	mov	r5,r19
    4554:	da003d15 	stw	r8,244(sp)
    4558:	000d8140 	call	d814 <__eqdf2>
    455c:	da003d17 	ldw	r8,244(sp)
    4560:	10018d26 	beq	r2,zero,4b98 <___vfprintf_internal_r+0x1d98>
    4564:	d8802117 	ldw	r2,132(sp)
    4568:	1700062e 	bgeu	r2,fp,4584 <___vfprintf_internal_r+0x1784>
    456c:	01000c04 	movi	r4,48
    4570:	10c00044 	addi	r3,r2,1
    4574:	d8c02115 	stw	r3,132(sp)
    4578:	11000005 	stb	r4,0(r2)
    457c:	d8802117 	ldw	r2,132(sp)
    4580:	173ffb36 	bltu	r2,fp,4570 <___vfprintf_internal_r+0x1770>
    4584:	1405c83a 	sub	r2,r2,r16
    4588:	d8803315 	stw	r2,204(sp)
    458c:	008011c4 	movi	r2,71
    4590:	b0817626 	beq	r22,r2,4b6c <___vfprintf_internal_r+0x1d6c>
    4594:	00801944 	movi	r2,101
    4598:	1442810e 	bge	r2,r17,4fa0 <___vfprintf_internal_r+0x21a0>
    459c:	d8c02617 	ldw	r3,152(sp)
    45a0:	00801984 	movi	r2,102
    45a4:	d8c03215 	stw	r3,200(sp)
    45a8:	8881fe26 	beq	r17,r2,4da4 <___vfprintf_internal_r+0x1fa4>
    45ac:	d8c03217 	ldw	r3,200(sp)
    45b0:	d9003317 	ldw	r4,204(sp)
    45b4:	1901dd16 	blt	r3,r4,4d2c <___vfprintf_internal_r+0x1f2c>
    45b8:	9480004c 	andi	r18,r18,1
    45bc:	90022b1e 	bne	r18,zero,4e6c <___vfprintf_internal_r+0x206c>
    45c0:	1805883a 	mov	r2,r3
    45c4:	18028016 	blt	r3,zero,4fc8 <___vfprintf_internal_r+0x21c8>
    45c8:	d8c03217 	ldw	r3,200(sp)
    45cc:	044019c4 	movi	r17,103
    45d0:	d8c02e15 	stw	r3,184(sp)
    45d4:	df002a07 	ldb	fp,168(sp)
    45d8:	e001531e 	bne	fp,zero,4b28 <___vfprintf_internal_r+0x1d28>
    45dc:	df002783 	ldbu	fp,158(sp)
    45e0:	d8802a15 	stw	r2,168(sp)
    45e4:	dc802b17 	ldw	r18,172(sp)
    45e8:	d8002915 	stw	zero,164(sp)
    45ec:	003bd106 	br	3534 <___vfprintf_internal_r+0x734>
    45f0:	d8802d17 	ldw	r2,180(sp)
    45f4:	d8c02d17 	ldw	r3,180(sp)
    45f8:	d9002d17 	ldw	r4,180(sp)
    45fc:	10800017 	ldw	r2,0(r2)
    4600:	18c00117 	ldw	r3,4(r3)
    4604:	21000204 	addi	r4,r4,8
    4608:	d8803615 	stw	r2,216(sp)
    460c:	d8c03815 	stw	r3,224(sp)
    4610:	d9002d15 	stw	r4,180(sp)
    4614:	003b7506 	br	33ec <___vfprintf_internal_r+0x5ec>
    4618:	ac400007 	ldb	r17,0(r21)
    461c:	003a5906 	br	2f84 <___vfprintf_internal_r+0x184>
    4620:	9080100c 	andi	r2,r18,64
    4624:	1000a826 	beq	r2,zero,48c8 <___vfprintf_internal_r+0x1ac8>
    4628:	d9002d17 	ldw	r4,180(sp)
    462c:	002d883a 	mov	r22,zero
    4630:	24c0000b 	ldhu	r19,0(r4)
    4634:	21000104 	addi	r4,r4,4
    4638:	d9002d15 	stw	r4,180(sp)
    463c:	003ccb06 	br	396c <___vfprintf_internal_r+0xb6c>
    4640:	d8c02d17 	ldw	r3,180(sp)
    4644:	d9002917 	ldw	r4,164(sp)
    4648:	002d883a 	mov	r22,zero
    464c:	18800104 	addi	r2,r3,4
    4650:	1cc00017 	ldw	r19,0(r3)
    4654:	203ebb0e 	bge	r4,zero,4144 <___vfprintf_internal_r+0x1344>
    4658:	003ef106 	br	4220 <___vfprintf_internal_r+0x1420>
    465c:	9080040c 	andi	r2,r18,16
    4660:	1000921e 	bne	r2,zero,48ac <___vfprintf_internal_r+0x1aac>
    4664:	9480100c 	andi	r18,r18,64
    4668:	90013926 	beq	r18,zero,4b50 <___vfprintf_internal_r+0x1d50>
    466c:	d9002d17 	ldw	r4,180(sp)
    4670:	d9402f17 	ldw	r5,188(sp)
    4674:	20800017 	ldw	r2,0(r4)
    4678:	21000104 	addi	r4,r4,4
    467c:	d9002d15 	stw	r4,180(sp)
    4680:	1140000d 	sth	r5,0(r2)
    4684:	003a1606 	br	2ee0 <___vfprintf_internal_r+0xe0>
    4688:	9080100c 	andi	r2,r18,64
    468c:	10008026 	beq	r2,zero,4890 <___vfprintf_internal_r+0x1a90>
    4690:	d8c02d17 	ldw	r3,180(sp)
    4694:	1cc0000f 	ldh	r19,0(r3)
    4698:	18c00104 	addi	r3,r3,4
    469c:	d8c02d15 	stw	r3,180(sp)
    46a0:	982dd7fa 	srai	r22,r19,31
    46a4:	b005883a 	mov	r2,r22
    46a8:	003b1f06 	br	3328 <___vfprintf_internal_r+0x528>
    46ac:	9080100c 	andi	r2,r18,64
    46b0:	d8002785 	stb	zero,158(sp)
    46b4:	10008a1e 	bne	r2,zero,48e0 <___vfprintf_internal_r+0x1ae0>
    46b8:	d9402d17 	ldw	r5,180(sp)
    46bc:	d8c02917 	ldw	r3,164(sp)
    46c0:	002d883a 	mov	r22,zero
    46c4:	28800104 	addi	r2,r5,4
    46c8:	2cc00017 	ldw	r19,0(r5)
    46cc:	183e4b0e 	bge	r3,zero,3ffc <___vfprintf_internal_r+0x11fc>
    46d0:	9d86b03a 	or	r3,r19,r22
    46d4:	d8802d15 	stw	r2,180(sp)
    46d8:	183e4c1e 	bne	r3,zero,400c <___vfprintf_internal_r+0x120c>
    46dc:	0039883a 	mov	fp,zero
    46e0:	0005883a 	mov	r2,zero
    46e4:	003d4006 	br	3be8 <___vfprintf_internal_r+0xde8>
    46e8:	01400074 	movhi	r5,1
    46ec:	29470784 	addi	r5,r5,7198
    46f0:	d9402b15 	stw	r5,172(sp)
    46f4:	d9402b17 	ldw	r5,172(sp)
    46f8:	1c47883a 	add	r3,r3,r17
    46fc:	10800044 	addi	r2,r2,1
    4700:	41400015 	stw	r5,0(r8)
    4704:	44400115 	stw	r17,4(r8)
    4708:	d8c02015 	stw	r3,128(sp)
    470c:	d8801f15 	stw	r2,124(sp)
    4710:	010001c4 	movi	r4,7
    4714:	20bec816 	blt	r4,r2,4238 <___vfprintf_internal_r+0x1438>
    4718:	42000204 	addi	r8,r8,8
    471c:	003ecd06 	br	4254 <___vfprintf_internal_r+0x1454>
    4720:	d9002917 	ldw	r4,164(sp)
    4724:	d8002785 	stb	zero,158(sp)
    4728:	203d2d16 	blt	r4,zero,3be0 <___vfprintf_internal_r+0xde0>
    472c:	00bfdfc4 	movi	r2,-129
    4730:	90a4703a 	and	r18,r18,r2
    4734:	003a9106 	br	317c <___vfprintf_internal_r+0x37c>
    4738:	01000074 	movhi	r4,1
    473c:	21070784 	addi	r4,r4,7198
    4740:	d9002b15 	stw	r4,172(sp)
    4744:	003c0c06 	br	3778 <___vfprintf_internal_r+0x978>
    4748:	d9002c17 	ldw	r4,176(sp)
    474c:	d9801e04 	addi	r6,sp,120
    4750:	b80b883a 	mov	r5,r23
    4754:	0009b9c0 	call	9b9c <__sprint_r>
    4758:	103aab1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    475c:	d8c02017 	ldw	r3,128(sp)
    4760:	da000404 	addi	r8,sp,16
    4764:	003d4106 	br	3c6c <___vfprintf_internal_r+0xe6c>
    4768:	d8801f17 	ldw	r2,124(sp)
    476c:	01400074 	movhi	r5,1
    4770:	01000044 	movi	r4,1
    4774:	18c00044 	addi	r3,r3,1
    4778:	10800044 	addi	r2,r2,1
    477c:	29470704 	addi	r5,r5,7196
    4780:	41000115 	stw	r4,4(r8)
    4784:	41400015 	stw	r5,0(r8)
    4788:	d8c02015 	stw	r3,128(sp)
    478c:	d8801f15 	stw	r2,124(sp)
    4790:	010001c4 	movi	r4,7
    4794:	20805c16 	blt	r4,r2,4908 <___vfprintf_internal_r+0x1b08>
    4798:	42000204 	addi	r8,r8,8
    479c:	8800041e 	bne	r17,zero,47b0 <___vfprintf_internal_r+0x19b0>
    47a0:	d8803317 	ldw	r2,204(sp)
    47a4:	1000021e 	bne	r2,zero,47b0 <___vfprintf_internal_r+0x19b0>
    47a8:	9080004c 	andi	r2,r18,1
    47ac:	103c0926 	beq	r2,zero,37d4 <___vfprintf_internal_r+0x9d4>
    47b0:	d9003717 	ldw	r4,220(sp)
    47b4:	d8801f17 	ldw	r2,124(sp)
    47b8:	d9403417 	ldw	r5,208(sp)
    47bc:	20c7883a 	add	r3,r4,r3
    47c0:	10800044 	addi	r2,r2,1
    47c4:	41000115 	stw	r4,4(r8)
    47c8:	41400015 	stw	r5,0(r8)
    47cc:	d8c02015 	stw	r3,128(sp)
    47d0:	d8801f15 	stw	r2,124(sp)
    47d4:	010001c4 	movi	r4,7
    47d8:	20812116 	blt	r4,r2,4c60 <___vfprintf_internal_r+0x1e60>
    47dc:	42000204 	addi	r8,r8,8
    47e0:	0463c83a 	sub	r17,zero,r17
    47e4:	0440730e 	bge	zero,r17,49b4 <___vfprintf_internal_r+0x1bb4>
    47e8:	05800404 	movi	r22,16
    47ec:	b440860e 	bge	r22,r17,4a08 <___vfprintf_internal_r+0x1c08>
    47f0:	01400074 	movhi	r5,1
    47f4:	29470784 	addi	r5,r5,7198
    47f8:	d9402b15 	stw	r5,172(sp)
    47fc:	070001c4 	movi	fp,7
    4800:	dcc02c17 	ldw	r19,176(sp)
    4804:	00000306 	br	4814 <___vfprintf_internal_r+0x1a14>
    4808:	42000204 	addi	r8,r8,8
    480c:	8c7ffc04 	addi	r17,r17,-16
    4810:	b440800e 	bge	r22,r17,4a14 <___vfprintf_internal_r+0x1c14>
    4814:	18c00404 	addi	r3,r3,16
    4818:	10800044 	addi	r2,r2,1
    481c:	45000015 	stw	r20,0(r8)
    4820:	45800115 	stw	r22,4(r8)
    4824:	d8c02015 	stw	r3,128(sp)
    4828:	d8801f15 	stw	r2,124(sp)
    482c:	e0bff60e 	bge	fp,r2,4808 <___vfprintf_internal_r+0x1a08>
    4830:	d9801e04 	addi	r6,sp,120
    4834:	b80b883a 	mov	r5,r23
    4838:	9809883a 	mov	r4,r19
    483c:	0009b9c0 	call	9b9c <__sprint_r>
    4840:	103a711e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4844:	d8c02017 	ldw	r3,128(sp)
    4848:	d8801f17 	ldw	r2,124(sp)
    484c:	da000404 	addi	r8,sp,16
    4850:	003fee06 	br	480c <___vfprintf_internal_r+0x1a0c>
    4854:	00bfffc4 	movi	r2,-1
    4858:	003a6f06 	br	3218 <___vfprintf_internal_r+0x418>
    485c:	008011c4 	movi	r2,71
    4860:	1440b816 	blt	r2,r17,4b44 <___vfprintf_internal_r+0x1d44>
    4864:	04000074 	movhi	r16,1
    4868:	8406f904 	addi	r16,r16,7140
    486c:	00c000c4 	movi	r3,3
    4870:	00bfdfc4 	movi	r2,-129
    4874:	d8c02a15 	stw	r3,168(sp)
    4878:	90a4703a 	and	r18,r18,r2
    487c:	df002783 	ldbu	fp,158(sp)
    4880:	d8c02e15 	stw	r3,184(sp)
    4884:	d8002915 	stw	zero,164(sp)
    4888:	d8003215 	stw	zero,200(sp)
    488c:	003b2906 	br	3534 <___vfprintf_internal_r+0x734>
    4890:	d9002d17 	ldw	r4,180(sp)
    4894:	24c00017 	ldw	r19,0(r4)
    4898:	21000104 	addi	r4,r4,4
    489c:	d9002d15 	stw	r4,180(sp)
    48a0:	982dd7fa 	srai	r22,r19,31
    48a4:	b005883a 	mov	r2,r22
    48a8:	003a9f06 	br	3328 <___vfprintf_internal_r+0x528>
    48ac:	d9402d17 	ldw	r5,180(sp)
    48b0:	d8c02f17 	ldw	r3,188(sp)
    48b4:	28800017 	ldw	r2,0(r5)
    48b8:	29400104 	addi	r5,r5,4
    48bc:	d9402d15 	stw	r5,180(sp)
    48c0:	10c00015 	stw	r3,0(r2)
    48c4:	00398606 	br	2ee0 <___vfprintf_internal_r+0xe0>
    48c8:	d9402d17 	ldw	r5,180(sp)
    48cc:	002d883a 	mov	r22,zero
    48d0:	2cc00017 	ldw	r19,0(r5)
    48d4:	29400104 	addi	r5,r5,4
    48d8:	d9402d15 	stw	r5,180(sp)
    48dc:	003c2306 	br	396c <___vfprintf_internal_r+0xb6c>
    48e0:	d8c02d17 	ldw	r3,180(sp)
    48e4:	d9002917 	ldw	r4,164(sp)
    48e8:	002d883a 	mov	r22,zero
    48ec:	18800104 	addi	r2,r3,4
    48f0:	1cc0000b 	ldhu	r19,0(r3)
    48f4:	203dc10e 	bge	r4,zero,3ffc <___vfprintf_internal_r+0x11fc>
    48f8:	003f7506 	br	46d0 <___vfprintf_internal_r+0x18d0>
    48fc:	04000074 	movhi	r16,1
    4900:	8406f704 	addi	r16,r16,7132
    4904:	003acc06 	br	3438 <___vfprintf_internal_r+0x638>
    4908:	d9002c17 	ldw	r4,176(sp)
    490c:	d9801e04 	addi	r6,sp,120
    4910:	b80b883a 	mov	r5,r23
    4914:	0009b9c0 	call	9b9c <__sprint_r>
    4918:	103a3b1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    491c:	dc402617 	ldw	r17,152(sp)
    4920:	d8c02017 	ldw	r3,128(sp)
    4924:	da000404 	addi	r8,sp,16
    4928:	003f9c06 	br	479c <___vfprintf_internal_r+0x199c>
    492c:	ac400043 	ldbu	r17,1(r21)
    4930:	94800814 	ori	r18,r18,32
    4934:	ad400044 	addi	r21,r21,1
    4938:	8c403fcc 	andi	r17,r17,255
    493c:	8c40201c 	xori	r17,r17,128
    4940:	8c7fe004 	addi	r17,r17,-128
    4944:	00398f06 	br	2f84 <___vfprintf_internal_r+0x184>
    4948:	d8c02d15 	stw	r3,180(sp)
    494c:	0039883a 	mov	fp,zero
    4950:	003e3506 	br	4228 <___vfprintf_internal_r+0x1428>
    4954:	d9002c17 	ldw	r4,176(sp)
    4958:	d9801e04 	addi	r6,sp,120
    495c:	b80b883a 	mov	r5,r23
    4960:	0009b9c0 	call	9b9c <__sprint_r>
    4964:	103a281e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4968:	d8c02017 	ldw	r3,128(sp)
    496c:	da000404 	addi	r8,sp,16
    4970:	003cd006 	br	3cb4 <___vfprintf_internal_r+0xeb4>
    4974:	8009883a 	mov	r4,r16
    4978:	da003d15 	stw	r8,244(sp)
    497c:	0002d680 	call	2d68 <strlen>
    4980:	d8802e15 	stw	r2,184(sp)
    4984:	da003d17 	ldw	r8,244(sp)
    4988:	103c340e 	bge	r2,zero,3a5c <___vfprintf_internal_r+0xc5c>
    498c:	0005883a 	mov	r2,zero
    4990:	003c3206 	br	3a5c <___vfprintf_internal_r+0xc5c>
    4994:	d9002c17 	ldw	r4,176(sp)
    4998:	d9801e04 	addi	r6,sp,120
    499c:	b80b883a 	mov	r5,r23
    49a0:	0009b9c0 	call	9b9c <__sprint_r>
    49a4:	103a181e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    49a8:	d8c02017 	ldw	r3,128(sp)
    49ac:	d8801f17 	ldw	r2,124(sp)
    49b0:	da000404 	addi	r8,sp,16
    49b4:	d9403317 	ldw	r5,204(sp)
    49b8:	10800044 	addi	r2,r2,1
    49bc:	44000015 	stw	r16,0(r8)
    49c0:	28c7883a 	add	r3,r5,r3
    49c4:	003b7d06 	br	37bc <___vfprintf_internal_r+0x9bc>
    49c8:	01000074 	movhi	r4,1
    49cc:	21070b84 	addi	r4,r4,7214
    49d0:	d9003515 	stw	r4,212(sp)
    49d4:	003b1406 	br	3628 <___vfprintf_internal_r+0x828>
    49d8:	013fffc4 	movi	r4,-1
    49dc:	003a3506 	br	32b4 <___vfprintf_internal_r+0x4b4>
    49e0:	0023883a 	mov	r17,zero
    49e4:	003d9d06 	br	405c <___vfprintf_internal_r+0x125c>
    49e8:	d9002c17 	ldw	r4,176(sp)
    49ec:	d9801e04 	addi	r6,sp,120
    49f0:	b80b883a 	mov	r5,r23
    49f4:	0009b9c0 	call	9b9c <__sprint_r>
    49f8:	103a031e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    49fc:	d8c02017 	ldw	r3,128(sp)
    4a00:	da000404 	addi	r8,sp,16
    4a04:	003d9406 	br	4058 <___vfprintf_internal_r+0x1258>
    4a08:	01000074 	movhi	r4,1
    4a0c:	21070784 	addi	r4,r4,7198
    4a10:	d9002b15 	stw	r4,172(sp)
    4a14:	d9002b17 	ldw	r4,172(sp)
    4a18:	1c47883a 	add	r3,r3,r17
    4a1c:	10800044 	addi	r2,r2,1
    4a20:	41000015 	stw	r4,0(r8)
    4a24:	44400115 	stw	r17,4(r8)
    4a28:	d8c02015 	stw	r3,128(sp)
    4a2c:	d8801f15 	stw	r2,124(sp)
    4a30:	010001c4 	movi	r4,7
    4a34:	20bfd716 	blt	r4,r2,4994 <___vfprintf_internal_r+0x1b94>
    4a38:	42000204 	addi	r8,r8,8
    4a3c:	003fdd06 	br	49b4 <___vfprintf_internal_r+0x1bb4>
    4a40:	d9002c17 	ldw	r4,176(sp)
    4a44:	d9801e04 	addi	r6,sp,120
    4a48:	b80b883a 	mov	r5,r23
    4a4c:	0009b9c0 	call	9b9c <__sprint_r>
    4a50:	1039ed1e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4a54:	d8802617 	ldw	r2,152(sp)
    4a58:	d8c02017 	ldw	r3,128(sp)
    4a5c:	da000404 	addi	r8,sp,16
    4a60:	003e1006 	br	42a4 <___vfprintf_internal_r+0x14a4>
    4a64:	00800044 	movi	r2,1
    4a68:	10803fcc 	andi	r2,r2,255
    4a6c:	00c00044 	movi	r3,1
    4a70:	10fa3526 	beq	r2,r3,3348 <___vfprintf_internal_r+0x548>
    4a74:	00c00084 	movi	r3,2
    4a78:	10fbcb26 	beq	r2,r3,39a8 <___vfprintf_internal_r+0xba8>
    4a7c:	003a8f06 	br	34bc <___vfprintf_internal_r+0x6bc>
    4a80:	01000074 	movhi	r4,1
    4a84:	21070b84 	addi	r4,r4,7214
    4a88:	d9003515 	stw	r4,212(sp)
    4a8c:	003b7606 	br	3868 <___vfprintf_internal_r+0xa68>
    4a90:	d8802917 	ldw	r2,164(sp)
    4a94:	00c00184 	movi	r3,6
    4a98:	1880012e 	bgeu	r3,r2,4aa0 <___vfprintf_internal_r+0x1ca0>
    4a9c:	1805883a 	mov	r2,r3
    4aa0:	d8802e15 	stw	r2,184(sp)
    4aa4:	1000ef16 	blt	r2,zero,4e64 <___vfprintf_internal_r+0x2064>
    4aa8:	04000074 	movhi	r16,1
    4aac:	d8802a15 	stw	r2,168(sp)
    4ab0:	dcc02d15 	stw	r19,180(sp)
    4ab4:	d8002915 	stw	zero,164(sp)
    4ab8:	d8003215 	stw	zero,200(sp)
    4abc:	84070504 	addi	r16,r16,7188
    4ac0:	0039883a 	mov	fp,zero
    4ac4:	003aa206 	br	3550 <___vfprintf_internal_r+0x750>
    4ac8:	0021883a 	mov	r16,zero
    4acc:	003e0706 	br	42ec <___vfprintf_internal_r+0x14ec>
    4ad0:	d9002c17 	ldw	r4,176(sp)
    4ad4:	d9801e04 	addi	r6,sp,120
    4ad8:	b80b883a 	mov	r5,r23
    4adc:	0009b9c0 	call	9b9c <__sprint_r>
    4ae0:	1039c91e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4ae4:	d8802617 	ldw	r2,152(sp)
    4ae8:	d9403317 	ldw	r5,204(sp)
    4aec:	d8c02017 	ldw	r3,128(sp)
    4af0:	da000404 	addi	r8,sp,16
    4af4:	2885c83a 	sub	r2,r5,r2
    4af8:	003dfb06 	br	42e8 <___vfprintf_internal_r+0x14e8>
    4afc:	9080004c 	andi	r2,r18,1
    4b00:	103e8f1e 	bne	r2,zero,4540 <___vfprintf_internal_r+0x1740>
    4b04:	d8802117 	ldw	r2,132(sp)
    4b08:	003e9e06 	br	4584 <___vfprintf_internal_r+0x1784>
    4b0c:	1025883a 	mov	r18,r2
    4b10:	0039883a 	mov	fp,zero
    4b14:	00800084 	movi	r2,2
    4b18:	003fd306 	br	4a68 <___vfprintf_internal_r+0x1c68>
    4b1c:	07000b44 	movi	fp,45
    4b20:	df002785 	stb	fp,158(sp)
    4b24:	003a4006 	br	3428 <___vfprintf_internal_r+0x628>
    4b28:	00c00b44 	movi	r3,45
    4b2c:	d8c02785 	stb	r3,158(sp)
    4b30:	d8802a15 	stw	r2,168(sp)
    4b34:	dc802b17 	ldw	r18,172(sp)
    4b38:	d8002915 	stw	zero,164(sp)
    4b3c:	07000b44 	movi	fp,45
    4b40:	003a8006 	br	3544 <___vfprintf_internal_r+0x744>
    4b44:	04000074 	movhi	r16,1
    4b48:	8406fa04 	addi	r16,r16,7144
    4b4c:	003f4706 	br	486c <___vfprintf_internal_r+0x1a6c>
    4b50:	d8c02d17 	ldw	r3,180(sp)
    4b54:	d9002f17 	ldw	r4,188(sp)
    4b58:	18800017 	ldw	r2,0(r3)
    4b5c:	18c00104 	addi	r3,r3,4
    4b60:	d8c02d15 	stw	r3,180(sp)
    4b64:	11000015 	stw	r4,0(r2)
    4b68:	0038dd06 	br	2ee0 <___vfprintf_internal_r+0xe0>
    4b6c:	dd802617 	ldw	r22,152(sp)
    4b70:	00bfff44 	movi	r2,-3
    4b74:	b0801c16 	blt	r22,r2,4be8 <___vfprintf_internal_r+0x1de8>
    4b78:	d9402917 	ldw	r5,164(sp)
    4b7c:	2d801a16 	blt	r5,r22,4be8 <___vfprintf_internal_r+0x1de8>
    4b80:	dd803215 	stw	r22,200(sp)
    4b84:	003e8906 	br	45ac <___vfprintf_internal_r+0x17ac>
    4b88:	01000074 	movhi	r4,1
    4b8c:	21070784 	addi	r4,r4,7198
    4b90:	d9002b15 	stw	r4,172(sp)
    4b94:	003c9106 	br	3ddc <___vfprintf_internal_r+0xfdc>
    4b98:	e005883a 	mov	r2,fp
    4b9c:	003e7906 	br	4584 <___vfprintf_internal_r+0x1784>
    4ba0:	d9402917 	ldw	r5,164(sp)
    4ba4:	df002783 	ldbu	fp,158(sp)
    4ba8:	dcc02d15 	stw	r19,180(sp)
    4bac:	d9402a15 	stw	r5,168(sp)
    4bb0:	d9402e15 	stw	r5,184(sp)
    4bb4:	d8002915 	stw	zero,164(sp)
    4bb8:	d8003215 	stw	zero,200(sp)
    4bbc:	003a5d06 	br	3534 <___vfprintf_internal_r+0x734>
    4bc0:	9080004c 	andi	r2,r18,1
    4bc4:	0039883a 	mov	fp,zero
    4bc8:	10000426 	beq	r2,zero,4bdc <___vfprintf_internal_r+0x1ddc>
    4bcc:	00800c04 	movi	r2,48
    4bd0:	dc001dc4 	addi	r16,sp,119
    4bd4:	d8801dc5 	stb	r2,119(sp)
    4bd8:	003b8006 	br	39dc <___vfprintf_internal_r+0xbdc>
    4bdc:	d8002e15 	stw	zero,184(sp)
    4be0:	dc001e04 	addi	r16,sp,120
    4be4:	003a4d06 	br	351c <___vfprintf_internal_r+0x71c>
    4be8:	8c7fff84 	addi	r17,r17,-2
    4bec:	b5bfffc4 	addi	r22,r22,-1
    4bf0:	dd802615 	stw	r22,152(sp)
    4bf4:	dc4022c5 	stb	r17,139(sp)
    4bf8:	b000bf16 	blt	r22,zero,4ef8 <___vfprintf_internal_r+0x20f8>
    4bfc:	00800ac4 	movi	r2,43
    4c00:	d8802305 	stb	r2,140(sp)
    4c04:	00800244 	movi	r2,9
    4c08:	15807016 	blt	r2,r22,4dcc <___vfprintf_internal_r+0x1fcc>
    4c0c:	00800c04 	movi	r2,48
    4c10:	b5800c04 	addi	r22,r22,48
    4c14:	d8802345 	stb	r2,141(sp)
    4c18:	dd802385 	stb	r22,142(sp)
    4c1c:	d88023c4 	addi	r2,sp,143
    4c20:	df0022c4 	addi	fp,sp,139
    4c24:	d8c03317 	ldw	r3,204(sp)
    4c28:	1739c83a 	sub	fp,r2,fp
    4c2c:	d9003317 	ldw	r4,204(sp)
    4c30:	e0c7883a 	add	r3,fp,r3
    4c34:	df003a15 	stw	fp,232(sp)
    4c38:	d8c02e15 	stw	r3,184(sp)
    4c3c:	00800044 	movi	r2,1
    4c40:	1100b30e 	bge	r2,r4,4f10 <___vfprintf_internal_r+0x2110>
    4c44:	d8c02e17 	ldw	r3,184(sp)
    4c48:	18c00044 	addi	r3,r3,1
    4c4c:	d8c02e15 	stw	r3,184(sp)
    4c50:	1805883a 	mov	r2,r3
    4c54:	1800ac16 	blt	r3,zero,4f08 <___vfprintf_internal_r+0x2108>
    4c58:	d8003215 	stw	zero,200(sp)
    4c5c:	003e5d06 	br	45d4 <___vfprintf_internal_r+0x17d4>
    4c60:	d9002c17 	ldw	r4,176(sp)
    4c64:	d9801e04 	addi	r6,sp,120
    4c68:	b80b883a 	mov	r5,r23
    4c6c:	0009b9c0 	call	9b9c <__sprint_r>
    4c70:	1039651e 	bne	r2,zero,3208 <___vfprintf_internal_r+0x408>
    4c74:	dc402617 	ldw	r17,152(sp)
    4c78:	d8c02017 	ldw	r3,128(sp)
    4c7c:	d8801f17 	ldw	r2,124(sp)
    4c80:	da000404 	addi	r8,sp,16
    4c84:	003ed606 	br	47e0 <___vfprintf_internal_r+0x19e0>
    4c88:	582b883a 	mov	r21,r11
    4c8c:	d8002915 	stw	zero,164(sp)
    4c90:	0038bd06 	br	2f88 <___vfprintf_internal_r+0x188>
    4c94:	d8802917 	ldw	r2,164(sp)
    4c98:	103e071e 	bne	r2,zero,44b8 <___vfprintf_internal_r+0x16b8>
    4c9c:	dc002915 	stw	r16,164(sp)
    4ca0:	003e0506 	br	44b8 <___vfprintf_internal_r+0x16b8>
    4ca4:	d9002917 	ldw	r4,164(sp)
    4ca8:	20c00044 	addi	r3,r4,1
    4cac:	003e0f06 	br	44ec <___vfprintf_internal_r+0x16ec>
    4cb0:	01400184 	movi	r5,6
    4cb4:	d9402915 	stw	r5,164(sp)
    4cb8:	003dff06 	br	44b8 <___vfprintf_internal_r+0x16b8>
    4cbc:	d8802104 	addi	r2,sp,132
    4cc0:	d8800315 	stw	r2,12(sp)
    4cc4:	d8802504 	addi	r2,sp,148
    4cc8:	d8800215 	stw	r2,8(sp)
    4ccc:	d8802604 	addi	r2,sp,152
    4cd0:	d8800115 	stw	r2,4(sp)
    4cd4:	d8802917 	ldw	r2,164(sp)
    4cd8:	d9403617 	ldw	r5,216(sp)
    4cdc:	d9002c17 	ldw	r4,176(sp)
    4ce0:	d8800015 	stw	r2,0(sp)
    4ce4:	01c000c4 	movi	r7,3
    4ce8:	980d883a 	mov	r6,r19
    4cec:	da003d15 	stw	r8,244(sp)
    4cf0:	00054240 	call	5424 <_dtoa_r>
    4cf4:	d8c02917 	ldw	r3,164(sp)
    4cf8:	da003d17 	ldw	r8,244(sp)
    4cfc:	1021883a 	mov	r16,r2
    4d00:	10f9883a 	add	fp,r2,r3
    4d04:	81000007 	ldb	r4,0(r16)
    4d08:	00800c04 	movi	r2,48
    4d0c:	20805e26 	beq	r4,r2,4e88 <___vfprintf_internal_r+0x2088>
    4d10:	d8c02617 	ldw	r3,152(sp)
    4d14:	e0f9883a 	add	fp,fp,r3
    4d18:	003e0a06 	br	4544 <___vfprintf_internal_r+0x1744>
    4d1c:	00c00b44 	movi	r3,45
    4d20:	24e0003c 	xorhi	r19,r4,32768
    4d24:	d8c02a05 	stb	r3,168(sp)
    4d28:	003de906 	br	44d0 <___vfprintf_internal_r+0x16d0>
    4d2c:	d8c03217 	ldw	r3,200(sp)
    4d30:	00c07a0e 	bge	zero,r3,4f1c <___vfprintf_internal_r+0x211c>
    4d34:	00800044 	movi	r2,1
    4d38:	d9003317 	ldw	r4,204(sp)
    4d3c:	1105883a 	add	r2,r2,r4
    4d40:	d8802e15 	stw	r2,184(sp)
    4d44:	10004e16 	blt	r2,zero,4e80 <___vfprintf_internal_r+0x2080>
    4d48:	044019c4 	movi	r17,103
    4d4c:	003e2106 	br	45d4 <___vfprintf_internal_r+0x17d4>
    4d50:	d9002917 	ldw	r4,164(sp)
    4d54:	d8802104 	addi	r2,sp,132
    4d58:	d8800315 	stw	r2,12(sp)
    4d5c:	d9000015 	stw	r4,0(sp)
    4d60:	d8802504 	addi	r2,sp,148
    4d64:	d9403617 	ldw	r5,216(sp)
    4d68:	d9002c17 	ldw	r4,176(sp)
    4d6c:	d8800215 	stw	r2,8(sp)
    4d70:	d8802604 	addi	r2,sp,152
    4d74:	d8800115 	stw	r2,4(sp)
    4d78:	01c000c4 	movi	r7,3
    4d7c:	980d883a 	mov	r6,r19
    4d80:	da003d15 	stw	r8,244(sp)
    4d84:	00054240 	call	5424 <_dtoa_r>
    4d88:	d8c02917 	ldw	r3,164(sp)
    4d8c:	da003d17 	ldw	r8,244(sp)
    4d90:	1021883a 	mov	r16,r2
    4d94:	00801184 	movi	r2,70
    4d98:	80f9883a 	add	fp,r16,r3
    4d9c:	88bfd926 	beq	r17,r2,4d04 <___vfprintf_internal_r+0x1f04>
    4da0:	003de806 	br	4544 <___vfprintf_internal_r+0x1744>
    4da4:	d9002917 	ldw	r4,164(sp)
    4da8:	00c04d0e 	bge	zero,r3,4ee0 <___vfprintf_internal_r+0x20e0>
    4dac:	2000441e 	bne	r4,zero,4ec0 <___vfprintf_internal_r+0x20c0>
    4db0:	9480004c 	andi	r18,r18,1
    4db4:	9000421e 	bne	r18,zero,4ec0 <___vfprintf_internal_r+0x20c0>
    4db8:	1805883a 	mov	r2,r3
    4dbc:	18007016 	blt	r3,zero,4f80 <___vfprintf_internal_r+0x2180>
    4dc0:	d8c03217 	ldw	r3,200(sp)
    4dc4:	d8c02e15 	stw	r3,184(sp)
    4dc8:	003e0206 	br	45d4 <___vfprintf_internal_r+0x17d4>
    4dcc:	df0022c4 	addi	fp,sp,139
    4dd0:	dc002915 	stw	r16,164(sp)
    4dd4:	4027883a 	mov	r19,r8
    4dd8:	e021883a 	mov	r16,fp
    4ddc:	b009883a 	mov	r4,r22
    4de0:	01400284 	movi	r5,10
    4de4:	000c5500 	call	c550 <__modsi3>
    4de8:	10800c04 	addi	r2,r2,48
    4dec:	843fffc4 	addi	r16,r16,-1
    4df0:	b009883a 	mov	r4,r22
    4df4:	01400284 	movi	r5,10
    4df8:	80800005 	stb	r2,0(r16)
    4dfc:	000c4cc0 	call	c4cc <__divsi3>
    4e00:	102d883a 	mov	r22,r2
    4e04:	00800244 	movi	r2,9
    4e08:	15bff416 	blt	r2,r22,4ddc <___vfprintf_internal_r+0x1fdc>
    4e0c:	9811883a 	mov	r8,r19
    4e10:	b0800c04 	addi	r2,r22,48
    4e14:	8027883a 	mov	r19,r16
    4e18:	997fffc4 	addi	r5,r19,-1
    4e1c:	98bfffc5 	stb	r2,-1(r19)
    4e20:	dc002917 	ldw	r16,164(sp)
    4e24:	2f006a2e 	bgeu	r5,fp,4fd0 <___vfprintf_internal_r+0x21d0>
    4e28:	d9c02384 	addi	r7,sp,142
    4e2c:	3ccfc83a 	sub	r7,r7,r19
    4e30:	d9002344 	addi	r4,sp,141
    4e34:	e1cf883a 	add	r7,fp,r7
    4e38:	00000106 	br	4e40 <___vfprintf_internal_r+0x2040>
    4e3c:	28800003 	ldbu	r2,0(r5)
    4e40:	20800005 	stb	r2,0(r4)
    4e44:	21000044 	addi	r4,r4,1
    4e48:	29400044 	addi	r5,r5,1
    4e4c:	393ffb1e 	bne	r7,r4,4e3c <___vfprintf_internal_r+0x203c>
    4e50:	d8802304 	addi	r2,sp,140
    4e54:	14c5c83a 	sub	r2,r2,r19
    4e58:	d8c02344 	addi	r3,sp,141
    4e5c:	1885883a 	add	r2,r3,r2
    4e60:	003f7006 	br	4c24 <___vfprintf_internal_r+0x1e24>
    4e64:	0005883a 	mov	r2,zero
    4e68:	003f0f06 	br	4aa8 <___vfprintf_internal_r+0x1ca8>
    4e6c:	d8c03217 	ldw	r3,200(sp)
    4e70:	18c00044 	addi	r3,r3,1
    4e74:	d8c02e15 	stw	r3,184(sp)
    4e78:	1805883a 	mov	r2,r3
    4e7c:	183fb20e 	bge	r3,zero,4d48 <___vfprintf_internal_r+0x1f48>
    4e80:	0005883a 	mov	r2,zero
    4e84:	003fb006 	br	4d48 <___vfprintf_internal_r+0x1f48>
    4e88:	d9003617 	ldw	r4,216(sp)
    4e8c:	000d883a 	mov	r6,zero
    4e90:	000f883a 	mov	r7,zero
    4e94:	980b883a 	mov	r5,r19
    4e98:	d8c03c15 	stw	r3,240(sp)
    4e9c:	da003d15 	stw	r8,244(sp)
    4ea0:	000d8140 	call	d814 <__eqdf2>
    4ea4:	d8c03c17 	ldw	r3,240(sp)
    4ea8:	da003d17 	ldw	r8,244(sp)
    4eac:	103f9826 	beq	r2,zero,4d10 <___vfprintf_internal_r+0x1f10>
    4eb0:	00800044 	movi	r2,1
    4eb4:	10c7c83a 	sub	r3,r2,r3
    4eb8:	d8c02615 	stw	r3,152(sp)
    4ebc:	003f9506 	br	4d14 <___vfprintf_internal_r+0x1f14>
    4ec0:	d9002917 	ldw	r4,164(sp)
    4ec4:	d8c03217 	ldw	r3,200(sp)
    4ec8:	20800044 	addi	r2,r4,1
    4ecc:	1885883a 	add	r2,r3,r2
    4ed0:	d8802e15 	stw	r2,184(sp)
    4ed4:	103dbf0e 	bge	r2,zero,45d4 <___vfprintf_internal_r+0x17d4>
    4ed8:	0005883a 	mov	r2,zero
    4edc:	003dbd06 	br	45d4 <___vfprintf_internal_r+0x17d4>
    4ee0:	2000211e 	bne	r4,zero,4f68 <___vfprintf_internal_r+0x2168>
    4ee4:	9480004c 	andi	r18,r18,1
    4ee8:	90001f1e 	bne	r18,zero,4f68 <___vfprintf_internal_r+0x2168>
    4eec:	00800044 	movi	r2,1
    4ef0:	d8802e15 	stw	r2,184(sp)
    4ef4:	003db706 	br	45d4 <___vfprintf_internal_r+0x17d4>
    4ef8:	00800b44 	movi	r2,45
    4efc:	05adc83a 	sub	r22,zero,r22
    4f00:	d8802305 	stb	r2,140(sp)
    4f04:	003f3f06 	br	4c04 <___vfprintf_internal_r+0x1e04>
    4f08:	0005883a 	mov	r2,zero
    4f0c:	003f5206 	br	4c58 <___vfprintf_internal_r+0x1e58>
    4f10:	90a4703a 	and	r18,r18,r2
    4f14:	903f4e26 	beq	r18,zero,4c50 <___vfprintf_internal_r+0x1e50>
    4f18:	003f4a06 	br	4c44 <___vfprintf_internal_r+0x1e44>
    4f1c:	00800084 	movi	r2,2
    4f20:	10c5c83a 	sub	r2,r2,r3
    4f24:	003f8406 	br	4d38 <___vfprintf_internal_r+0x1f38>
    4f28:	d8802d17 	ldw	r2,180(sp)
    4f2c:	d9002d17 	ldw	r4,180(sp)
    4f30:	ac400043 	ldbu	r17,1(r21)
    4f34:	10800017 	ldw	r2,0(r2)
    4f38:	582b883a 	mov	r21,r11
    4f3c:	d8802915 	stw	r2,164(sp)
    4f40:	20800104 	addi	r2,r4,4
    4f44:	d9002917 	ldw	r4,164(sp)
    4f48:	d8802d15 	stw	r2,180(sp)
    4f4c:	203e7a0e 	bge	r4,zero,4938 <___vfprintf_internal_r+0x1b38>
    4f50:	8c403fcc 	andi	r17,r17,255
    4f54:	00bfffc4 	movi	r2,-1
    4f58:	8c40201c 	xori	r17,r17,128
    4f5c:	d8802915 	stw	r2,164(sp)
    4f60:	8c7fe004 	addi	r17,r17,-128
    4f64:	00380706 	br	2f84 <___vfprintf_internal_r+0x184>
    4f68:	d8c02917 	ldw	r3,164(sp)
    4f6c:	18c00084 	addi	r3,r3,2
    4f70:	d8c02e15 	stw	r3,184(sp)
    4f74:	1805883a 	mov	r2,r3
    4f78:	183d960e 	bge	r3,zero,45d4 <___vfprintf_internal_r+0x17d4>
    4f7c:	003fd606 	br	4ed8 <___vfprintf_internal_r+0x20d8>
    4f80:	0005883a 	mov	r2,zero
    4f84:	003f8e06 	br	4dc0 <___vfprintf_internal_r+0x1fc0>
    4f88:	9080004c 	andi	r2,r18,1
    4f8c:	103f811e 	bne	r2,zero,4d94 <___vfprintf_internal_r+0x1f94>
    4f90:	d8802117 	ldw	r2,132(sp)
    4f94:	1405c83a 	sub	r2,r2,r16
    4f98:	d8803315 	stw	r2,204(sp)
    4f9c:	b47ef326 	beq	r22,r17,4b6c <___vfprintf_internal_r+0x1d6c>
    4fa0:	dd802617 	ldw	r22,152(sp)
    4fa4:	003f1106 	br	4bec <___vfprintf_internal_r+0x1dec>
    4fa8:	d9c02785 	stb	r7,158(sp)
    4fac:	00390406 	br	33c0 <___vfprintf_internal_r+0x5c0>
    4fb0:	d9c02785 	stb	r7,158(sp)
    4fb4:	0038d306 	br	3304 <___vfprintf_internal_r+0x504>
    4fb8:	d9c02785 	stb	r7,158(sp)
    4fbc:	003a6106 	br	3944 <___vfprintf_internal_r+0xb44>
    4fc0:	d9c02785 	stb	r7,158(sp)
    4fc4:	003af806 	br	3ba8 <___vfprintf_internal_r+0xda8>
    4fc8:	0005883a 	mov	r2,zero
    4fcc:	003d7e06 	br	45c8 <___vfprintf_internal_r+0x17c8>
    4fd0:	d8802344 	addi	r2,sp,141
    4fd4:	003f1306 	br	4c24 <___vfprintf_internal_r+0x1e24>
    4fd8:	d9c02785 	stb	r7,158(sp)
    4fdc:	00392306 	br	346c <___vfprintf_internal_r+0x66c>
    4fe0:	d9c02785 	stb	r7,158(sp)
    4fe4:	003aa906 	br	3a8c <___vfprintf_internal_r+0xc8c>
    4fe8:	d9c02785 	stb	r7,158(sp)
    4fec:	003a3d06 	br	38e4 <___vfprintf_internal_r+0xae4>
    4ff0:	d9c02785 	stb	r7,158(sp)
    4ff4:	003aca06 	br	3b20 <___vfprintf_internal_r+0xd20>

00004ff8 <__vfprintf_internal>:
    4ff8:	00800074 	movhi	r2,1
    4ffc:	108e6204 	addi	r2,r2,14728
    5000:	300f883a 	mov	r7,r6
    5004:	280d883a 	mov	r6,r5
    5008:	200b883a 	mov	r5,r4
    500c:	11000017 	ldw	r4,0(r2)
    5010:	0002e001 	jmpi	2e00 <___vfprintf_internal_r>

00005014 <__sbprintf>:
    5014:	2880030b 	ldhu	r2,12(r5)
    5018:	2ac01917 	ldw	r11,100(r5)
    501c:	2a80038b 	ldhu	r10,14(r5)
    5020:	2a400717 	ldw	r9,28(r5)
    5024:	2a000917 	ldw	r8,36(r5)
    5028:	defee204 	addi	sp,sp,-1144
    502c:	00c10004 	movi	r3,1024
    5030:	dc011a15 	stw	r16,1128(sp)
    5034:	10bfff4c 	andi	r2,r2,65533
    5038:	2821883a 	mov	r16,r5
    503c:	d8cb883a 	add	r5,sp,r3
    5040:	dc811c15 	stw	r18,1136(sp)
    5044:	dc411b15 	stw	r17,1132(sp)
    5048:	dfc11d15 	stw	ra,1140(sp)
    504c:	2025883a 	mov	r18,r4
    5050:	d881030d 	sth	r2,1036(sp)
    5054:	dac11915 	stw	r11,1124(sp)
    5058:	da81038d 	sth	r10,1038(sp)
    505c:	da410715 	stw	r9,1052(sp)
    5060:	da010915 	stw	r8,1060(sp)
    5064:	dec10015 	stw	sp,1024(sp)
    5068:	dec10415 	stw	sp,1040(sp)
    506c:	d8c10215 	stw	r3,1032(sp)
    5070:	d8c10515 	stw	r3,1044(sp)
    5074:	d8010615 	stw	zero,1048(sp)
    5078:	0002e000 	call	2e00 <___vfprintf_internal_r>
    507c:	1023883a 	mov	r17,r2
    5080:	10000416 	blt	r2,zero,5094 <__sbprintf+0x80>
    5084:	d9410004 	addi	r5,sp,1024
    5088:	9009883a 	mov	r4,r18
    508c:	0006cc80 	call	6cc8 <_fflush_r>
    5090:	10000d1e 	bne	r2,zero,50c8 <__sbprintf+0xb4>
    5094:	d881030b 	ldhu	r2,1036(sp)
    5098:	1080100c 	andi	r2,r2,64
    509c:	10000326 	beq	r2,zero,50ac <__sbprintf+0x98>
    50a0:	8080030b 	ldhu	r2,12(r16)
    50a4:	10801014 	ori	r2,r2,64
    50a8:	8080030d 	sth	r2,12(r16)
    50ac:	8805883a 	mov	r2,r17
    50b0:	dfc11d17 	ldw	ra,1140(sp)
    50b4:	dc811c17 	ldw	r18,1136(sp)
    50b8:	dc411b17 	ldw	r17,1132(sp)
    50bc:	dc011a17 	ldw	r16,1128(sp)
    50c0:	dec11e04 	addi	sp,sp,1144
    50c4:	f800283a 	ret
    50c8:	047fffc4 	movi	r17,-1
    50cc:	003ff106 	br	5094 <__sbprintf+0x80>

000050d0 <__swsetup_r>:
    50d0:	00800074 	movhi	r2,1
    50d4:	defffd04 	addi	sp,sp,-12
    50d8:	108e6204 	addi	r2,r2,14728
    50dc:	dc400115 	stw	r17,4(sp)
    50e0:	2023883a 	mov	r17,r4
    50e4:	11000017 	ldw	r4,0(r2)
    50e8:	dc000015 	stw	r16,0(sp)
    50ec:	dfc00215 	stw	ra,8(sp)
    50f0:	2821883a 	mov	r16,r5
    50f4:	20000226 	beq	r4,zero,5100 <__swsetup_r+0x30>
    50f8:	20800e17 	ldw	r2,56(r4)
    50fc:	10003126 	beq	r2,zero,51c4 <__swsetup_r+0xf4>
    5100:	8080030b 	ldhu	r2,12(r16)
    5104:	10c0020c 	andi	r3,r2,8
    5108:	1009883a 	mov	r4,r2
    510c:	18000f26 	beq	r3,zero,514c <__swsetup_r+0x7c>
    5110:	80c00417 	ldw	r3,16(r16)
    5114:	18001526 	beq	r3,zero,516c <__swsetup_r+0x9c>
    5118:	1100004c 	andi	r4,r2,1
    511c:	20001c1e 	bne	r4,zero,5190 <__swsetup_r+0xc0>
    5120:	1080008c 	andi	r2,r2,2
    5124:	1000291e 	bne	r2,zero,51cc <__swsetup_r+0xfc>
    5128:	80800517 	ldw	r2,20(r16)
    512c:	80800215 	stw	r2,8(r16)
    5130:	18001c26 	beq	r3,zero,51a4 <__swsetup_r+0xd4>
    5134:	0005883a 	mov	r2,zero
    5138:	dfc00217 	ldw	ra,8(sp)
    513c:	dc400117 	ldw	r17,4(sp)
    5140:	dc000017 	ldw	r16,0(sp)
    5144:	dec00304 	addi	sp,sp,12
    5148:	f800283a 	ret
    514c:	2080040c 	andi	r2,r4,16
    5150:	10002e26 	beq	r2,zero,520c <__swsetup_r+0x13c>
    5154:	2080010c 	andi	r2,r4,4
    5158:	10001e1e 	bne	r2,zero,51d4 <__swsetup_r+0x104>
    515c:	80c00417 	ldw	r3,16(r16)
    5160:	20800214 	ori	r2,r4,8
    5164:	8080030d 	sth	r2,12(r16)
    5168:	183feb1e 	bne	r3,zero,5118 <__swsetup_r+0x48>
    516c:	1100a00c 	andi	r4,r2,640
    5170:	01408004 	movi	r5,512
    5174:	217fe826 	beq	r4,r5,5118 <__swsetup_r+0x48>
    5178:	800b883a 	mov	r5,r16
    517c:	8809883a 	mov	r4,r17
    5180:	0007c480 	call	7c48 <__smakebuf_r>
    5184:	8080030b 	ldhu	r2,12(r16)
    5188:	80c00417 	ldw	r3,16(r16)
    518c:	003fe206 	br	5118 <__swsetup_r+0x48>
    5190:	80800517 	ldw	r2,20(r16)
    5194:	80000215 	stw	zero,8(r16)
    5198:	0085c83a 	sub	r2,zero,r2
    519c:	80800615 	stw	r2,24(r16)
    51a0:	183fe41e 	bne	r3,zero,5134 <__swsetup_r+0x64>
    51a4:	80c0030b 	ldhu	r3,12(r16)
    51a8:	0005883a 	mov	r2,zero
    51ac:	1900200c 	andi	r4,r3,128
    51b0:	203fe126 	beq	r4,zero,5138 <__swsetup_r+0x68>
    51b4:	18c01014 	ori	r3,r3,64
    51b8:	80c0030d 	sth	r3,12(r16)
    51bc:	00bfffc4 	movi	r2,-1
    51c0:	003fdd06 	br	5138 <__swsetup_r+0x68>
    51c4:	00070a40 	call	70a4 <__sinit>
    51c8:	003fcd06 	br	5100 <__swsetup_r+0x30>
    51cc:	0005883a 	mov	r2,zero
    51d0:	003fd606 	br	512c <__swsetup_r+0x5c>
    51d4:	81400c17 	ldw	r5,48(r16)
    51d8:	28000626 	beq	r5,zero,51f4 <__swsetup_r+0x124>
    51dc:	80801004 	addi	r2,r16,64
    51e0:	28800326 	beq	r5,r2,51f0 <__swsetup_r+0x120>
    51e4:	8809883a 	mov	r4,r17
    51e8:	00072180 	call	7218 <_free_r>
    51ec:	8100030b 	ldhu	r4,12(r16)
    51f0:	80000c15 	stw	zero,48(r16)
    51f4:	80c00417 	ldw	r3,16(r16)
    51f8:	00bff6c4 	movi	r2,-37
    51fc:	1108703a 	and	r4,r2,r4
    5200:	80000115 	stw	zero,4(r16)
    5204:	80c00015 	stw	r3,0(r16)
    5208:	003fd506 	br	5160 <__swsetup_r+0x90>
    520c:	00800244 	movi	r2,9
    5210:	88800015 	stw	r2,0(r17)
    5214:	20801014 	ori	r2,r4,64
    5218:	8080030d 	sth	r2,12(r16)
    521c:	00bfffc4 	movi	r2,-1
    5220:	003fc506 	br	5138 <__swsetup_r+0x68>

00005224 <quorem>:
    5224:	defff704 	addi	sp,sp,-36
    5228:	dc800215 	stw	r18,8(sp)
    522c:	20800417 	ldw	r2,16(r4)
    5230:	2c800417 	ldw	r18,16(r5)
    5234:	dfc00815 	stw	ra,32(sp)
    5238:	ddc00715 	stw	r23,28(sp)
    523c:	dd800615 	stw	r22,24(sp)
    5240:	dd400515 	stw	r21,20(sp)
    5244:	dd000415 	stw	r20,16(sp)
    5248:	dcc00315 	stw	r19,12(sp)
    524c:	dc400115 	stw	r17,4(sp)
    5250:	dc000015 	stw	r16,0(sp)
    5254:	14807116 	blt	r2,r18,541c <quorem+0x1f8>
    5258:	94bfffc4 	addi	r18,r18,-1
    525c:	94ad883a 	add	r22,r18,r18
    5260:	b5ad883a 	add	r22,r22,r22
    5264:	2c400504 	addi	r17,r5,20
    5268:	8da9883a 	add	r20,r17,r22
    526c:	25400504 	addi	r21,r4,20
    5270:	282f883a 	mov	r23,r5
    5274:	adad883a 	add	r22,r21,r22
    5278:	a1400017 	ldw	r5,0(r20)
    527c:	2021883a 	mov	r16,r4
    5280:	b1000017 	ldw	r4,0(r22)
    5284:	29400044 	addi	r5,r5,1
    5288:	000c5c40 	call	c5c4 <__udivsi3>
    528c:	1027883a 	mov	r19,r2
    5290:	10002c26 	beq	r2,zero,5344 <quorem+0x120>
    5294:	a813883a 	mov	r9,r21
    5298:	880b883a 	mov	r5,r17
    529c:	0009883a 	mov	r4,zero
    52a0:	000d883a 	mov	r6,zero
    52a4:	2a000017 	ldw	r8,0(r5)
    52a8:	49c00017 	ldw	r7,0(r9)
    52ac:	29400104 	addi	r5,r5,4
    52b0:	40bfffcc 	andi	r2,r8,65535
    52b4:	14c5383a 	mul	r2,r2,r19
    52b8:	4010d43a 	srli	r8,r8,16
    52bc:	38ffffcc 	andi	r3,r7,65535
    52c0:	1105883a 	add	r2,r2,r4
    52c4:	1008d43a 	srli	r4,r2,16
    52c8:	44d1383a 	mul	r8,r8,r19
    52cc:	198d883a 	add	r6,r3,r6
    52d0:	10ffffcc 	andi	r3,r2,65535
    52d4:	30c7c83a 	sub	r3,r6,r3
    52d8:	380ed43a 	srli	r7,r7,16
    52dc:	4105883a 	add	r2,r8,r4
    52e0:	180dd43a 	srai	r6,r3,16
    52e4:	113fffcc 	andi	r4,r2,65535
    52e8:	390fc83a 	sub	r7,r7,r4
    52ec:	398d883a 	add	r6,r7,r6
    52f0:	300e943a 	slli	r7,r6,16
    52f4:	18ffffcc 	andi	r3,r3,65535
    52f8:	1008d43a 	srli	r4,r2,16
    52fc:	38ceb03a 	or	r7,r7,r3
    5300:	49c00015 	stw	r7,0(r9)
    5304:	300dd43a 	srai	r6,r6,16
    5308:	4a400104 	addi	r9,r9,4
    530c:	a17fe52e 	bgeu	r20,r5,52a4 <quorem+0x80>
    5310:	b0800017 	ldw	r2,0(r22)
    5314:	10000b1e 	bne	r2,zero,5344 <quorem+0x120>
    5318:	b0bfff04 	addi	r2,r22,-4
    531c:	a880082e 	bgeu	r21,r2,5340 <quorem+0x11c>
    5320:	b0ffff17 	ldw	r3,-4(r22)
    5324:	18000326 	beq	r3,zero,5334 <quorem+0x110>
    5328:	00000506 	br	5340 <quorem+0x11c>
    532c:	10c00017 	ldw	r3,0(r2)
    5330:	1800031e 	bne	r3,zero,5340 <quorem+0x11c>
    5334:	10bfff04 	addi	r2,r2,-4
    5338:	94bfffc4 	addi	r18,r18,-1
    533c:	a8bffb36 	bltu	r21,r2,532c <quorem+0x108>
    5340:	84800415 	stw	r18,16(r16)
    5344:	b80b883a 	mov	r5,r23
    5348:	8009883a 	mov	r4,r16
    534c:	0008b7c0 	call	8b7c <__mcmp>
    5350:	10002616 	blt	r2,zero,53ec <quorem+0x1c8>
    5354:	9cc00044 	addi	r19,r19,1
    5358:	a805883a 	mov	r2,r21
    535c:	000b883a 	mov	r5,zero
    5360:	11000017 	ldw	r4,0(r2)
    5364:	89800017 	ldw	r6,0(r17)
    5368:	10800104 	addi	r2,r2,4
    536c:	20ffffcc 	andi	r3,r4,65535
    5370:	194b883a 	add	r5,r3,r5
    5374:	30ffffcc 	andi	r3,r6,65535
    5378:	28c7c83a 	sub	r3,r5,r3
    537c:	300cd43a 	srli	r6,r6,16
    5380:	2008d43a 	srli	r4,r4,16
    5384:	180bd43a 	srai	r5,r3,16
    5388:	18ffffcc 	andi	r3,r3,65535
    538c:	2189c83a 	sub	r4,r4,r6
    5390:	2149883a 	add	r4,r4,r5
    5394:	200c943a 	slli	r6,r4,16
    5398:	8c400104 	addi	r17,r17,4
    539c:	200bd43a 	srai	r5,r4,16
    53a0:	30c6b03a 	or	r3,r6,r3
    53a4:	10ffff15 	stw	r3,-4(r2)
    53a8:	a47fed2e 	bgeu	r20,r17,5360 <quorem+0x13c>
    53ac:	9485883a 	add	r2,r18,r18
    53b0:	1085883a 	add	r2,r2,r2
    53b4:	a887883a 	add	r3,r21,r2
    53b8:	18800017 	ldw	r2,0(r3)
    53bc:	10000b1e 	bne	r2,zero,53ec <quorem+0x1c8>
    53c0:	18bfff04 	addi	r2,r3,-4
    53c4:	a880082e 	bgeu	r21,r2,53e8 <quorem+0x1c4>
    53c8:	18ffff17 	ldw	r3,-4(r3)
    53cc:	18000326 	beq	r3,zero,53dc <quorem+0x1b8>
    53d0:	00000506 	br	53e8 <quorem+0x1c4>
    53d4:	10c00017 	ldw	r3,0(r2)
    53d8:	1800031e 	bne	r3,zero,53e8 <quorem+0x1c4>
    53dc:	10bfff04 	addi	r2,r2,-4
    53e0:	94bfffc4 	addi	r18,r18,-1
    53e4:	a8bffb36 	bltu	r21,r2,53d4 <quorem+0x1b0>
    53e8:	84800415 	stw	r18,16(r16)
    53ec:	9805883a 	mov	r2,r19
    53f0:	dfc00817 	ldw	ra,32(sp)
    53f4:	ddc00717 	ldw	r23,28(sp)
    53f8:	dd800617 	ldw	r22,24(sp)
    53fc:	dd400517 	ldw	r21,20(sp)
    5400:	dd000417 	ldw	r20,16(sp)
    5404:	dcc00317 	ldw	r19,12(sp)
    5408:	dc800217 	ldw	r18,8(sp)
    540c:	dc400117 	ldw	r17,4(sp)
    5410:	dc000017 	ldw	r16,0(sp)
    5414:	dec00904 	addi	sp,sp,36
    5418:	f800283a 	ret
    541c:	0005883a 	mov	r2,zero
    5420:	003ff306 	br	53f0 <quorem+0x1cc>

00005424 <_dtoa_r>:
    5424:	20801017 	ldw	r2,64(r4)
    5428:	deffde04 	addi	sp,sp,-136
    542c:	df002015 	stw	fp,128(sp)
    5430:	dcc01b15 	stw	r19,108(sp)
    5434:	dc801a15 	stw	r18,104(sp)
    5438:	dc401915 	stw	r17,100(sp)
    543c:	dc001815 	stw	r16,96(sp)
    5440:	dfc02115 	stw	ra,132(sp)
    5444:	ddc01f15 	stw	r23,124(sp)
    5448:	dd801e15 	stw	r22,120(sp)
    544c:	dd401d15 	stw	r21,116(sp)
    5450:	dd001c15 	stw	r20,112(sp)
    5454:	d9c00315 	stw	r7,12(sp)
    5458:	2039883a 	mov	fp,r4
    545c:	3023883a 	mov	r17,r6
    5460:	2825883a 	mov	r18,r5
    5464:	dc002417 	ldw	r16,144(sp)
    5468:	3027883a 	mov	r19,r6
    546c:	10000826 	beq	r2,zero,5490 <_dtoa_r+0x6c>
    5470:	21801117 	ldw	r6,68(r4)
    5474:	00c00044 	movi	r3,1
    5478:	100b883a 	mov	r5,r2
    547c:	1986983a 	sll	r3,r3,r6
    5480:	11800115 	stw	r6,4(r2)
    5484:	10c00215 	stw	r3,8(r2)
    5488:	000835c0 	call	835c <_Bfree>
    548c:	e0001015 	stw	zero,64(fp)
    5490:	88002e16 	blt	r17,zero,554c <_dtoa_r+0x128>
    5494:	80000015 	stw	zero,0(r16)
    5498:	889ffc2c 	andhi	r2,r17,32752
    549c:	00dffc34 	movhi	r3,32752
    54a0:	10c01c26 	beq	r2,r3,5514 <_dtoa_r+0xf0>
    54a4:	000d883a 	mov	r6,zero
    54a8:	000f883a 	mov	r7,zero
    54ac:	9009883a 	mov	r4,r18
    54b0:	980b883a 	mov	r5,r19
    54b4:	000d8140 	call	d814 <__eqdf2>
    54b8:	10002b1e 	bne	r2,zero,5568 <_dtoa_r+0x144>
    54bc:	d9c02317 	ldw	r7,140(sp)
    54c0:	00800044 	movi	r2,1
    54c4:	38800015 	stw	r2,0(r7)
    54c8:	d8802517 	ldw	r2,148(sp)
    54cc:	10019e26 	beq	r2,zero,5b48 <_dtoa_r+0x724>
    54d0:	d8c02517 	ldw	r3,148(sp)
    54d4:	00800074 	movhi	r2,1
    54d8:	10870744 	addi	r2,r2,7197
    54dc:	18800015 	stw	r2,0(r3)
    54e0:	10bfffc4 	addi	r2,r2,-1
    54e4:	dfc02117 	ldw	ra,132(sp)
    54e8:	df002017 	ldw	fp,128(sp)
    54ec:	ddc01f17 	ldw	r23,124(sp)
    54f0:	dd801e17 	ldw	r22,120(sp)
    54f4:	dd401d17 	ldw	r21,116(sp)
    54f8:	dd001c17 	ldw	r20,112(sp)
    54fc:	dcc01b17 	ldw	r19,108(sp)
    5500:	dc801a17 	ldw	r18,104(sp)
    5504:	dc401917 	ldw	r17,100(sp)
    5508:	dc001817 	ldw	r16,96(sp)
    550c:	dec02204 	addi	sp,sp,136
    5510:	f800283a 	ret
    5514:	d8c02317 	ldw	r3,140(sp)
    5518:	0089c3c4 	movi	r2,9999
    551c:	18800015 	stw	r2,0(r3)
    5520:	90017726 	beq	r18,zero,5b00 <_dtoa_r+0x6dc>
    5524:	00800074 	movhi	r2,1
    5528:	10871304 	addi	r2,r2,7244
    552c:	d9002517 	ldw	r4,148(sp)
    5530:	203fec26 	beq	r4,zero,54e4 <_dtoa_r+0xc0>
    5534:	10c000c7 	ldb	r3,3(r2)
    5538:	1801781e 	bne	r3,zero,5b1c <_dtoa_r+0x6f8>
    553c:	10c000c4 	addi	r3,r2,3
    5540:	d9802517 	ldw	r6,148(sp)
    5544:	30c00015 	stw	r3,0(r6)
    5548:	003fe606 	br	54e4 <_dtoa_r+0xc0>
    554c:	04e00034 	movhi	r19,32768
    5550:	9cffffc4 	addi	r19,r19,-1
    5554:	00800044 	movi	r2,1
    5558:	8ce6703a 	and	r19,r17,r19
    555c:	80800015 	stw	r2,0(r16)
    5560:	9823883a 	mov	r17,r19
    5564:	003fcc06 	br	5498 <_dtoa_r+0x74>
    5568:	d8800204 	addi	r2,sp,8
    556c:	d8800015 	stw	r2,0(sp)
    5570:	d9c00104 	addi	r7,sp,4
    5574:	900b883a 	mov	r5,r18
    5578:	980d883a 	mov	r6,r19
    557c:	e009883a 	mov	r4,fp
    5580:	8820d53a 	srli	r16,r17,20
    5584:	0008f480 	call	8f48 <__d2b>
    5588:	d8800915 	stw	r2,36(sp)
    558c:	8001651e 	bne	r16,zero,5b24 <_dtoa_r+0x700>
    5590:	dd800217 	ldw	r22,8(sp)
    5594:	dc000117 	ldw	r16,4(sp)
    5598:	00800804 	movi	r2,32
    559c:	b421883a 	add	r16,r22,r16
    55a0:	80c10c84 	addi	r3,r16,1074
    55a4:	10c2d10e 	bge	r2,r3,60ec <_dtoa_r+0xcc8>
    55a8:	00801004 	movi	r2,64
    55ac:	81010484 	addi	r4,r16,1042
    55b0:	10c7c83a 	sub	r3,r2,r3
    55b4:	9108d83a 	srl	r4,r18,r4
    55b8:	88e2983a 	sll	r17,r17,r3
    55bc:	2448b03a 	or	r4,r4,r17
    55c0:	000ebdc0 	call	ebdc <__floatunsidf>
    55c4:	017f8434 	movhi	r5,65040
    55c8:	01800044 	movi	r6,1
    55cc:	1009883a 	mov	r4,r2
    55d0:	194b883a 	add	r5,r3,r5
    55d4:	843fffc4 	addi	r16,r16,-1
    55d8:	d9801115 	stw	r6,68(sp)
    55dc:	000d883a 	mov	r6,zero
    55e0:	01cffe34 	movhi	r7,16376
    55e4:	000e1840 	call	e184 <__subdf3>
    55e8:	0198dbf4 	movhi	r6,25455
    55ec:	01cff4f4 	movhi	r7,16339
    55f0:	3190d844 	addi	r6,r6,17249
    55f4:	39e1e9c4 	addi	r7,r7,-30809
    55f8:	1009883a 	mov	r4,r2
    55fc:	180b883a 	mov	r5,r3
    5600:	000da6c0 	call	da6c <__muldf3>
    5604:	01a2d874 	movhi	r6,35681
    5608:	01cff1f4 	movhi	r7,16327
    560c:	31b22cc4 	addi	r6,r6,-14157
    5610:	39e28a04 	addi	r7,r7,-30168
    5614:	180b883a 	mov	r5,r3
    5618:	1009883a 	mov	r4,r2
    561c:	000c6800 	call	c680 <__adddf3>
    5620:	8009883a 	mov	r4,r16
    5624:	1029883a 	mov	r20,r2
    5628:	1823883a 	mov	r17,r3
    562c:	000eb000 	call	eb00 <__floatsidf>
    5630:	019427f4 	movhi	r6,20639
    5634:	01cff4f4 	movhi	r7,16339
    5638:	319e7ec4 	addi	r6,r6,31227
    563c:	39d104c4 	addi	r7,r7,17427
    5640:	1009883a 	mov	r4,r2
    5644:	180b883a 	mov	r5,r3
    5648:	000da6c0 	call	da6c <__muldf3>
    564c:	100d883a 	mov	r6,r2
    5650:	180f883a 	mov	r7,r3
    5654:	a009883a 	mov	r4,r20
    5658:	880b883a 	mov	r5,r17
    565c:	000c6800 	call	c680 <__adddf3>
    5660:	1009883a 	mov	r4,r2
    5664:	180b883a 	mov	r5,r3
    5668:	1029883a 	mov	r20,r2
    566c:	1823883a 	mov	r17,r3
    5670:	000ea800 	call	ea80 <__fixdfsi>
    5674:	000d883a 	mov	r6,zero
    5678:	000f883a 	mov	r7,zero
    567c:	a009883a 	mov	r4,r20
    5680:	880b883a 	mov	r5,r17
    5684:	d8800515 	stw	r2,20(sp)
    5688:	000d9780 	call	d978 <__ledf2>
    568c:	10028716 	blt	r2,zero,60ac <_dtoa_r+0xc88>
    5690:	d8c00517 	ldw	r3,20(sp)
    5694:	00800584 	movi	r2,22
    5698:	10c27536 	bltu	r2,r3,6070 <_dtoa_r+0xc4c>
    569c:	180490fa 	slli	r2,r3,3
    56a0:	00c00074 	movhi	r3,1
    56a4:	18c72f04 	addi	r3,r3,7356
    56a8:	1885883a 	add	r2,r3,r2
    56ac:	11000017 	ldw	r4,0(r2)
    56b0:	11400117 	ldw	r5,4(r2)
    56b4:	900d883a 	mov	r6,r18
    56b8:	980f883a 	mov	r7,r19
    56bc:	000d89c0 	call	d89c <__gedf2>
    56c0:	00828d0e 	bge	zero,r2,60f8 <_dtoa_r+0xcd4>
    56c4:	d9000517 	ldw	r4,20(sp)
    56c8:	d8000e15 	stw	zero,56(sp)
    56cc:	213fffc4 	addi	r4,r4,-1
    56d0:	d9000515 	stw	r4,20(sp)
    56d4:	b42dc83a 	sub	r22,r22,r16
    56d8:	b5bfffc4 	addi	r22,r22,-1
    56dc:	b0026f16 	blt	r22,zero,609c <_dtoa_r+0xc78>
    56e0:	d8000815 	stw	zero,32(sp)
    56e4:	d9c00517 	ldw	r7,20(sp)
    56e8:	38026416 	blt	r7,zero,607c <_dtoa_r+0xc58>
    56ec:	b1ed883a 	add	r22,r22,r7
    56f0:	d9c00d15 	stw	r7,52(sp)
    56f4:	d8000a15 	stw	zero,40(sp)
    56f8:	d9800317 	ldw	r6,12(sp)
    56fc:	00800244 	movi	r2,9
    5700:	11811436 	bltu	r2,r6,5b54 <_dtoa_r+0x730>
    5704:	00800144 	movi	r2,5
    5708:	1184e10e 	bge	r2,r6,6a90 <_dtoa_r+0x166c>
    570c:	31bfff04 	addi	r6,r6,-4
    5710:	d9800315 	stw	r6,12(sp)
    5714:	0023883a 	mov	r17,zero
    5718:	d9800317 	ldw	r6,12(sp)
    571c:	008000c4 	movi	r2,3
    5720:	30836726 	beq	r6,r2,64c0 <_dtoa_r+0x109c>
    5724:	1183410e 	bge	r2,r6,642c <_dtoa_r+0x1008>
    5728:	d9c00317 	ldw	r7,12(sp)
    572c:	00800104 	movi	r2,4
    5730:	38827c26 	beq	r7,r2,6124 <_dtoa_r+0xd00>
    5734:	00800144 	movi	r2,5
    5738:	3884c41e 	bne	r7,r2,6a4c <_dtoa_r+0x1628>
    573c:	00800044 	movi	r2,1
    5740:	d8800b15 	stw	r2,44(sp)
    5744:	d8c00517 	ldw	r3,20(sp)
    5748:	d9002217 	ldw	r4,136(sp)
    574c:	1907883a 	add	r3,r3,r4
    5750:	19800044 	addi	r6,r3,1
    5754:	d8c00c15 	stw	r3,48(sp)
    5758:	d9800615 	stw	r6,24(sp)
    575c:	0183a40e 	bge	zero,r6,65f0 <_dtoa_r+0x11cc>
    5760:	d9800617 	ldw	r6,24(sp)
    5764:	3021883a 	mov	r16,r6
    5768:	e0001115 	stw	zero,68(fp)
    576c:	008005c4 	movi	r2,23
    5770:	1184c92e 	bgeu	r2,r6,6a98 <_dtoa_r+0x1674>
    5774:	00c00044 	movi	r3,1
    5778:	00800104 	movi	r2,4
    577c:	1085883a 	add	r2,r2,r2
    5780:	11000504 	addi	r4,r2,20
    5784:	180b883a 	mov	r5,r3
    5788:	18c00044 	addi	r3,r3,1
    578c:	313ffb2e 	bgeu	r6,r4,577c <_dtoa_r+0x358>
    5790:	e1401115 	stw	r5,68(fp)
    5794:	e009883a 	mov	r4,fp
    5798:	00082b40 	call	82b4 <_Balloc>
    579c:	d8800715 	stw	r2,28(sp)
    57a0:	e0801015 	stw	r2,64(fp)
    57a4:	00800384 	movi	r2,14
    57a8:	1400f736 	bltu	r2,r16,5b88 <_dtoa_r+0x764>
    57ac:	8800f626 	beq	r17,zero,5b88 <_dtoa_r+0x764>
    57b0:	d9c00517 	ldw	r7,20(sp)
    57b4:	01c39a0e 	bge	zero,r7,6620 <_dtoa_r+0x11fc>
    57b8:	388003cc 	andi	r2,r7,15
    57bc:	100490fa 	slli	r2,r2,3
    57c0:	382bd13a 	srai	r21,r7,4
    57c4:	00c00074 	movhi	r3,1
    57c8:	18c72f04 	addi	r3,r3,7356
    57cc:	1885883a 	add	r2,r3,r2
    57d0:	a8c0040c 	andi	r3,r21,16
    57d4:	12400017 	ldw	r9,0(r2)
    57d8:	12000117 	ldw	r8,4(r2)
    57dc:	18037926 	beq	r3,zero,65c4 <_dtoa_r+0x11a0>
    57e0:	00800074 	movhi	r2,1
    57e4:	10872504 	addi	r2,r2,7316
    57e8:	11800817 	ldw	r6,32(r2)
    57ec:	11c00917 	ldw	r7,36(r2)
    57f0:	9009883a 	mov	r4,r18
    57f4:	980b883a 	mov	r5,r19
    57f8:	da001715 	stw	r8,92(sp)
    57fc:	da401615 	stw	r9,88(sp)
    5800:	000cf2c0 	call	cf2c <__divdf3>
    5804:	da001717 	ldw	r8,92(sp)
    5808:	da401617 	ldw	r9,88(sp)
    580c:	ad4003cc 	andi	r21,r21,15
    5810:	040000c4 	movi	r16,3
    5814:	1023883a 	mov	r17,r2
    5818:	1829883a 	mov	r20,r3
    581c:	a8001126 	beq	r21,zero,5864 <_dtoa_r+0x440>
    5820:	05c00074 	movhi	r23,1
    5824:	bdc72504 	addi	r23,r23,7316
    5828:	4805883a 	mov	r2,r9
    582c:	4007883a 	mov	r3,r8
    5830:	a980004c 	andi	r6,r21,1
    5834:	1009883a 	mov	r4,r2
    5838:	a82bd07a 	srai	r21,r21,1
    583c:	180b883a 	mov	r5,r3
    5840:	30000426 	beq	r6,zero,5854 <_dtoa_r+0x430>
    5844:	b9800017 	ldw	r6,0(r23)
    5848:	b9c00117 	ldw	r7,4(r23)
    584c:	84000044 	addi	r16,r16,1
    5850:	000da6c0 	call	da6c <__muldf3>
    5854:	bdc00204 	addi	r23,r23,8
    5858:	a83ff51e 	bne	r21,zero,5830 <_dtoa_r+0x40c>
    585c:	1013883a 	mov	r9,r2
    5860:	1811883a 	mov	r8,r3
    5864:	480d883a 	mov	r6,r9
    5868:	400f883a 	mov	r7,r8
    586c:	8809883a 	mov	r4,r17
    5870:	a00b883a 	mov	r5,r20
    5874:	000cf2c0 	call	cf2c <__divdf3>
    5878:	d8800f15 	stw	r2,60(sp)
    587c:	d8c01015 	stw	r3,64(sp)
    5880:	d8c00e17 	ldw	r3,56(sp)
    5884:	18000626 	beq	r3,zero,58a0 <_dtoa_r+0x47c>
    5888:	d9000f17 	ldw	r4,60(sp)
    588c:	d9401017 	ldw	r5,64(sp)
    5890:	000d883a 	mov	r6,zero
    5894:	01cffc34 	movhi	r7,16368
    5898:	000d9780 	call	d978 <__ledf2>
    589c:	10040b16 	blt	r2,zero,68cc <_dtoa_r+0x14a8>
    58a0:	8009883a 	mov	r4,r16
    58a4:	000eb000 	call	eb00 <__floatsidf>
    58a8:	d9800f17 	ldw	r6,60(sp)
    58ac:	d9c01017 	ldw	r7,64(sp)
    58b0:	1009883a 	mov	r4,r2
    58b4:	180b883a 	mov	r5,r3
    58b8:	000da6c0 	call	da6c <__muldf3>
    58bc:	000d883a 	mov	r6,zero
    58c0:	01d00734 	movhi	r7,16412
    58c4:	1009883a 	mov	r4,r2
    58c8:	180b883a 	mov	r5,r3
    58cc:	000c6800 	call	c680 <__adddf3>
    58d0:	1021883a 	mov	r16,r2
    58d4:	d8800617 	ldw	r2,24(sp)
    58d8:	047f3034 	movhi	r17,64704
    58dc:	1c63883a 	add	r17,r3,r17
    58e0:	10031826 	beq	r2,zero,6544 <_dtoa_r+0x1120>
    58e4:	d8c00517 	ldw	r3,20(sp)
    58e8:	db000617 	ldw	r12,24(sp)
    58ec:	d8c01315 	stw	r3,76(sp)
    58f0:	d9000b17 	ldw	r4,44(sp)
    58f4:	20038f26 	beq	r4,zero,6734 <_dtoa_r+0x1310>
    58f8:	60bfffc4 	addi	r2,r12,-1
    58fc:	100490fa 	slli	r2,r2,3
    5900:	00c00074 	movhi	r3,1
    5904:	18c72f04 	addi	r3,r3,7356
    5908:	1885883a 	add	r2,r3,r2
    590c:	11800017 	ldw	r6,0(r2)
    5910:	11c00117 	ldw	r7,4(r2)
    5914:	d8800717 	ldw	r2,28(sp)
    5918:	0009883a 	mov	r4,zero
    591c:	014ff834 	movhi	r5,16352
    5920:	db001615 	stw	r12,88(sp)
    5924:	15c00044 	addi	r23,r2,1
    5928:	000cf2c0 	call	cf2c <__divdf3>
    592c:	800d883a 	mov	r6,r16
    5930:	880f883a 	mov	r7,r17
    5934:	1009883a 	mov	r4,r2
    5938:	180b883a 	mov	r5,r3
    593c:	000e1840 	call	e184 <__subdf3>
    5940:	d9401017 	ldw	r5,64(sp)
    5944:	d9000f17 	ldw	r4,60(sp)
    5948:	102b883a 	mov	r21,r2
    594c:	d8c01215 	stw	r3,72(sp)
    5950:	000ea800 	call	ea80 <__fixdfsi>
    5954:	1009883a 	mov	r4,r2
    5958:	1029883a 	mov	r20,r2
    595c:	000eb000 	call	eb00 <__floatsidf>
    5960:	d9000f17 	ldw	r4,60(sp)
    5964:	d9401017 	ldw	r5,64(sp)
    5968:	100d883a 	mov	r6,r2
    596c:	180f883a 	mov	r7,r3
    5970:	000e1840 	call	e184 <__subdf3>
    5974:	1823883a 	mov	r17,r3
    5978:	d8c00717 	ldw	r3,28(sp)
    597c:	d9401217 	ldw	r5,72(sp)
    5980:	a2000c04 	addi	r8,r20,48
    5984:	1021883a 	mov	r16,r2
    5988:	1a000005 	stb	r8,0(r3)
    598c:	800d883a 	mov	r6,r16
    5990:	880f883a 	mov	r7,r17
    5994:	a809883a 	mov	r4,r21
    5998:	4029883a 	mov	r20,r8
    599c:	000d89c0 	call	d89c <__gedf2>
    59a0:	00841d16 	blt	zero,r2,6a18 <_dtoa_r+0x15f4>
    59a4:	800d883a 	mov	r6,r16
    59a8:	880f883a 	mov	r7,r17
    59ac:	0009883a 	mov	r4,zero
    59b0:	014ffc34 	movhi	r5,16368
    59b4:	000e1840 	call	e184 <__subdf3>
    59b8:	d9401217 	ldw	r5,72(sp)
    59bc:	100d883a 	mov	r6,r2
    59c0:	180f883a 	mov	r7,r3
    59c4:	a809883a 	mov	r4,r21
    59c8:	000d89c0 	call	d89c <__gedf2>
    59cc:	db001617 	ldw	r12,88(sp)
    59d0:	00840e16 	blt	zero,r2,6a0c <_dtoa_r+0x15e8>
    59d4:	00800044 	movi	r2,1
    59d8:	13006b0e 	bge	r2,r12,5b88 <_dtoa_r+0x764>
    59dc:	d9000717 	ldw	r4,28(sp)
    59e0:	dd800f15 	stw	r22,60(sp)
    59e4:	dcc01015 	stw	r19,64(sp)
    59e8:	2319883a 	add	r12,r4,r12
    59ec:	dcc01217 	ldw	r19,72(sp)
    59f0:	602d883a 	mov	r22,r12
    59f4:	dc801215 	stw	r18,72(sp)
    59f8:	b825883a 	mov	r18,r23
    59fc:	00000906 	br	5a24 <_dtoa_r+0x600>
    5a00:	000e1840 	call	e184 <__subdf3>
    5a04:	a80d883a 	mov	r6,r21
    5a08:	980f883a 	mov	r7,r19
    5a0c:	1009883a 	mov	r4,r2
    5a10:	180b883a 	mov	r5,r3
    5a14:	000d9780 	call	d978 <__ledf2>
    5a18:	1003e816 	blt	r2,zero,69bc <_dtoa_r+0x1598>
    5a1c:	b825883a 	mov	r18,r23
    5a20:	bd83e926 	beq	r23,r22,69c8 <_dtoa_r+0x15a4>
    5a24:	a809883a 	mov	r4,r21
    5a28:	980b883a 	mov	r5,r19
    5a2c:	000d883a 	mov	r6,zero
    5a30:	01d00934 	movhi	r7,16420
    5a34:	000da6c0 	call	da6c <__muldf3>
    5a38:	000d883a 	mov	r6,zero
    5a3c:	01d00934 	movhi	r7,16420
    5a40:	8009883a 	mov	r4,r16
    5a44:	880b883a 	mov	r5,r17
    5a48:	102b883a 	mov	r21,r2
    5a4c:	1827883a 	mov	r19,r3
    5a50:	000da6c0 	call	da6c <__muldf3>
    5a54:	180b883a 	mov	r5,r3
    5a58:	1009883a 	mov	r4,r2
    5a5c:	1821883a 	mov	r16,r3
    5a60:	1023883a 	mov	r17,r2
    5a64:	000ea800 	call	ea80 <__fixdfsi>
    5a68:	1009883a 	mov	r4,r2
    5a6c:	1029883a 	mov	r20,r2
    5a70:	000eb000 	call	eb00 <__floatsidf>
    5a74:	8809883a 	mov	r4,r17
    5a78:	800b883a 	mov	r5,r16
    5a7c:	100d883a 	mov	r6,r2
    5a80:	180f883a 	mov	r7,r3
    5a84:	000e1840 	call	e184 <__subdf3>
    5a88:	a5000c04 	addi	r20,r20,48
    5a8c:	a80d883a 	mov	r6,r21
    5a90:	980f883a 	mov	r7,r19
    5a94:	1009883a 	mov	r4,r2
    5a98:	180b883a 	mov	r5,r3
    5a9c:	95000005 	stb	r20,0(r18)
    5aa0:	1021883a 	mov	r16,r2
    5aa4:	1823883a 	mov	r17,r3
    5aa8:	000d9780 	call	d978 <__ledf2>
    5aac:	bdc00044 	addi	r23,r23,1
    5ab0:	800d883a 	mov	r6,r16
    5ab4:	880f883a 	mov	r7,r17
    5ab8:	0009883a 	mov	r4,zero
    5abc:	014ffc34 	movhi	r5,16368
    5ac0:	103fcf0e 	bge	r2,zero,5a00 <_dtoa_r+0x5dc>
    5ac4:	d8c01317 	ldw	r3,76(sp)
    5ac8:	d8c00515 	stw	r3,20(sp)
    5acc:	d9400917 	ldw	r5,36(sp)
    5ad0:	e009883a 	mov	r4,fp
    5ad4:	000835c0 	call	835c <_Bfree>
    5ad8:	d9000517 	ldw	r4,20(sp)
    5adc:	d9802317 	ldw	r6,140(sp)
    5ae0:	d9c02517 	ldw	r7,148(sp)
    5ae4:	b8000005 	stb	zero,0(r23)
    5ae8:	20800044 	addi	r2,r4,1
    5aec:	30800015 	stw	r2,0(r6)
    5af0:	3802aa26 	beq	r7,zero,659c <_dtoa_r+0x1178>
    5af4:	3dc00015 	stw	r23,0(r7)
    5af8:	d8800717 	ldw	r2,28(sp)
    5afc:	003e7906 	br	54e4 <_dtoa_r+0xc0>
    5b00:	00800434 	movhi	r2,16
    5b04:	10bfffc4 	addi	r2,r2,-1
    5b08:	88a2703a 	and	r17,r17,r2
    5b0c:	883e851e 	bne	r17,zero,5524 <_dtoa_r+0x100>
    5b10:	00800074 	movhi	r2,1
    5b14:	10871004 	addi	r2,r2,7232
    5b18:	003e8406 	br	552c <_dtoa_r+0x108>
    5b1c:	10c00204 	addi	r3,r2,8
    5b20:	003e8706 	br	5540 <_dtoa_r+0x11c>
    5b24:	01400434 	movhi	r5,16
    5b28:	297fffc4 	addi	r5,r5,-1
    5b2c:	994a703a 	and	r5,r19,r5
    5b30:	9009883a 	mov	r4,r18
    5b34:	843f0044 	addi	r16,r16,-1023
    5b38:	294ffc34 	orhi	r5,r5,16368
    5b3c:	dd800217 	ldw	r22,8(sp)
    5b40:	d8001115 	stw	zero,68(sp)
    5b44:	003ea506 	br	55dc <_dtoa_r+0x1b8>
    5b48:	00800074 	movhi	r2,1
    5b4c:	10870704 	addi	r2,r2,7196
    5b50:	003e6406 	br	54e4 <_dtoa_r+0xc0>
    5b54:	e0001115 	stw	zero,68(fp)
    5b58:	000b883a 	mov	r5,zero
    5b5c:	e009883a 	mov	r4,fp
    5b60:	00082b40 	call	82b4 <_Balloc>
    5b64:	01bfffc4 	movi	r6,-1
    5b68:	01c00044 	movi	r7,1
    5b6c:	d8800715 	stw	r2,28(sp)
    5b70:	d9800c15 	stw	r6,48(sp)
    5b74:	e0801015 	stw	r2,64(fp)
    5b78:	d8000315 	stw	zero,12(sp)
    5b7c:	d9c00b15 	stw	r7,44(sp)
    5b80:	d9800615 	stw	r6,24(sp)
    5b84:	d8002215 	stw	zero,136(sp)
    5b88:	d8800117 	ldw	r2,4(sp)
    5b8c:	10008916 	blt	r2,zero,5db4 <_dtoa_r+0x990>
    5b90:	d9000517 	ldw	r4,20(sp)
    5b94:	00c00384 	movi	r3,14
    5b98:	19008616 	blt	r3,r4,5db4 <_dtoa_r+0x990>
    5b9c:	200490fa 	slli	r2,r4,3
    5ba0:	00c00074 	movhi	r3,1
    5ba4:	d9802217 	ldw	r6,136(sp)
    5ba8:	18c72f04 	addi	r3,r3,7356
    5bac:	1885883a 	add	r2,r3,r2
    5bb0:	14000017 	ldw	r16,0(r2)
    5bb4:	14400117 	ldw	r17,4(r2)
    5bb8:	30016316 	blt	r6,zero,6148 <_dtoa_r+0xd24>
    5bbc:	800d883a 	mov	r6,r16
    5bc0:	880f883a 	mov	r7,r17
    5bc4:	9009883a 	mov	r4,r18
    5bc8:	980b883a 	mov	r5,r19
    5bcc:	000cf2c0 	call	cf2c <__divdf3>
    5bd0:	180b883a 	mov	r5,r3
    5bd4:	1009883a 	mov	r4,r2
    5bd8:	000ea800 	call	ea80 <__fixdfsi>
    5bdc:	1009883a 	mov	r4,r2
    5be0:	102b883a 	mov	r21,r2
    5be4:	000eb000 	call	eb00 <__floatsidf>
    5be8:	800d883a 	mov	r6,r16
    5bec:	880f883a 	mov	r7,r17
    5bf0:	1009883a 	mov	r4,r2
    5bf4:	180b883a 	mov	r5,r3
    5bf8:	000da6c0 	call	da6c <__muldf3>
    5bfc:	100d883a 	mov	r6,r2
    5c00:	180f883a 	mov	r7,r3
    5c04:	9009883a 	mov	r4,r18
    5c08:	980b883a 	mov	r5,r19
    5c0c:	000e1840 	call	e184 <__subdf3>
    5c10:	d9c00717 	ldw	r7,28(sp)
    5c14:	1009883a 	mov	r4,r2
    5c18:	a8800c04 	addi	r2,r21,48
    5c1c:	38800005 	stb	r2,0(r7)
    5c20:	3dc00044 	addi	r23,r7,1
    5c24:	d9c00617 	ldw	r7,24(sp)
    5c28:	01800044 	movi	r6,1
    5c2c:	180b883a 	mov	r5,r3
    5c30:	2005883a 	mov	r2,r4
    5c34:	39803826 	beq	r7,r6,5d18 <_dtoa_r+0x8f4>
    5c38:	000d883a 	mov	r6,zero
    5c3c:	01d00934 	movhi	r7,16420
    5c40:	000da6c0 	call	da6c <__muldf3>
    5c44:	000d883a 	mov	r6,zero
    5c48:	000f883a 	mov	r7,zero
    5c4c:	1009883a 	mov	r4,r2
    5c50:	180b883a 	mov	r5,r3
    5c54:	1025883a 	mov	r18,r2
    5c58:	1827883a 	mov	r19,r3
    5c5c:	000d8140 	call	d814 <__eqdf2>
    5c60:	103f9a26 	beq	r2,zero,5acc <_dtoa_r+0x6a8>
    5c64:	d9c00617 	ldw	r7,24(sp)
    5c68:	d8c00717 	ldw	r3,28(sp)
    5c6c:	b829883a 	mov	r20,r23
    5c70:	38bfffc4 	addi	r2,r7,-1
    5c74:	18ad883a 	add	r22,r3,r2
    5c78:	00000a06 	br	5ca4 <_dtoa_r+0x880>
    5c7c:	000da6c0 	call	da6c <__muldf3>
    5c80:	000d883a 	mov	r6,zero
    5c84:	000f883a 	mov	r7,zero
    5c88:	1009883a 	mov	r4,r2
    5c8c:	180b883a 	mov	r5,r3
    5c90:	1025883a 	mov	r18,r2
    5c94:	1827883a 	mov	r19,r3
    5c98:	b829883a 	mov	r20,r23
    5c9c:	000d8140 	call	d814 <__eqdf2>
    5ca0:	103f8a26 	beq	r2,zero,5acc <_dtoa_r+0x6a8>
    5ca4:	800d883a 	mov	r6,r16
    5ca8:	880f883a 	mov	r7,r17
    5cac:	9009883a 	mov	r4,r18
    5cb0:	980b883a 	mov	r5,r19
    5cb4:	000cf2c0 	call	cf2c <__divdf3>
    5cb8:	180b883a 	mov	r5,r3
    5cbc:	1009883a 	mov	r4,r2
    5cc0:	000ea800 	call	ea80 <__fixdfsi>
    5cc4:	1009883a 	mov	r4,r2
    5cc8:	102b883a 	mov	r21,r2
    5ccc:	000eb000 	call	eb00 <__floatsidf>
    5cd0:	800d883a 	mov	r6,r16
    5cd4:	880f883a 	mov	r7,r17
    5cd8:	1009883a 	mov	r4,r2
    5cdc:	180b883a 	mov	r5,r3
    5ce0:	000da6c0 	call	da6c <__muldf3>
    5ce4:	100d883a 	mov	r6,r2
    5ce8:	180f883a 	mov	r7,r3
    5cec:	9009883a 	mov	r4,r18
    5cf0:	980b883a 	mov	r5,r19
    5cf4:	000e1840 	call	e184 <__subdf3>
    5cf8:	aa000c04 	addi	r8,r21,48
    5cfc:	a2000005 	stb	r8,0(r20)
    5d00:	000d883a 	mov	r6,zero
    5d04:	01d00934 	movhi	r7,16420
    5d08:	1009883a 	mov	r4,r2
    5d0c:	180b883a 	mov	r5,r3
    5d10:	a5c00044 	addi	r23,r20,1
    5d14:	b53fd91e 	bne	r22,r20,5c7c <_dtoa_r+0x858>
    5d18:	100d883a 	mov	r6,r2
    5d1c:	180f883a 	mov	r7,r3
    5d20:	1009883a 	mov	r4,r2
    5d24:	180b883a 	mov	r5,r3
    5d28:	000c6800 	call	c680 <__adddf3>
    5d2c:	100d883a 	mov	r6,r2
    5d30:	180f883a 	mov	r7,r3
    5d34:	8009883a 	mov	r4,r16
    5d38:	880b883a 	mov	r5,r17
    5d3c:	1027883a 	mov	r19,r2
    5d40:	1825883a 	mov	r18,r3
    5d44:	000d9780 	call	d978 <__ledf2>
    5d48:	10000816 	blt	r2,zero,5d6c <_dtoa_r+0x948>
    5d4c:	980d883a 	mov	r6,r19
    5d50:	900f883a 	mov	r7,r18
    5d54:	8009883a 	mov	r4,r16
    5d58:	880b883a 	mov	r5,r17
    5d5c:	000d8140 	call	d814 <__eqdf2>
    5d60:	103f5a1e 	bne	r2,zero,5acc <_dtoa_r+0x6a8>
    5d64:	ad40004c 	andi	r21,r21,1
    5d68:	a83f5826 	beq	r21,zero,5acc <_dtoa_r+0x6a8>
    5d6c:	bd3fffc3 	ldbu	r20,-1(r23)
    5d70:	b8bfffc4 	addi	r2,r23,-1
    5d74:	1007883a 	mov	r3,r2
    5d78:	01400e44 	movi	r5,57
    5d7c:	d9800717 	ldw	r6,28(sp)
    5d80:	00000506 	br	5d98 <_dtoa_r+0x974>
    5d84:	18ffffc4 	addi	r3,r3,-1
    5d88:	11824726 	beq	r2,r6,66a8 <_dtoa_r+0x1284>
    5d8c:	1d000003 	ldbu	r20,0(r3)
    5d90:	102f883a 	mov	r23,r2
    5d94:	10bfffc4 	addi	r2,r2,-1
    5d98:	a1003fcc 	andi	r4,r20,255
    5d9c:	2100201c 	xori	r4,r4,128
    5da0:	213fe004 	addi	r4,r4,-128
    5da4:	217ff726 	beq	r4,r5,5d84 <_dtoa_r+0x960>
    5da8:	a2000044 	addi	r8,r20,1
    5dac:	12000005 	stb	r8,0(r2)
    5db0:	003f4606 	br	5acc <_dtoa_r+0x6a8>
    5db4:	d9000b17 	ldw	r4,44(sp)
    5db8:	2000c826 	beq	r4,zero,60dc <_dtoa_r+0xcb8>
    5dbc:	d9800317 	ldw	r6,12(sp)
    5dc0:	00c00044 	movi	r3,1
    5dc4:	1980f90e 	bge	r3,r6,61ac <_dtoa_r+0xd88>
    5dc8:	d8800617 	ldw	r2,24(sp)
    5dcc:	d8c00a17 	ldw	r3,40(sp)
    5dd0:	157fffc4 	addi	r21,r2,-1
    5dd4:	1d41f316 	blt	r3,r21,65a4 <_dtoa_r+0x1180>
    5dd8:	1d6bc83a 	sub	r21,r3,r21
    5ddc:	d9c00617 	ldw	r7,24(sp)
    5de0:	3802aa16 	blt	r7,zero,688c <_dtoa_r+0x1468>
    5de4:	dd000817 	ldw	r20,32(sp)
    5de8:	d8800617 	ldw	r2,24(sp)
    5dec:	d8c00817 	ldw	r3,32(sp)
    5df0:	01400044 	movi	r5,1
    5df4:	e009883a 	mov	r4,fp
    5df8:	1887883a 	add	r3,r3,r2
    5dfc:	d8c00815 	stw	r3,32(sp)
    5e00:	b0ad883a 	add	r22,r22,r2
    5e04:	00086c00 	call	86c0 <__i2b>
    5e08:	1023883a 	mov	r17,r2
    5e0c:	a0000826 	beq	r20,zero,5e30 <_dtoa_r+0xa0c>
    5e10:	0580070e 	bge	zero,r22,5e30 <_dtoa_r+0xa0c>
    5e14:	a005883a 	mov	r2,r20
    5e18:	b500b916 	blt	r22,r20,6100 <_dtoa_r+0xcdc>
    5e1c:	d9000817 	ldw	r4,32(sp)
    5e20:	a0a9c83a 	sub	r20,r20,r2
    5e24:	b0adc83a 	sub	r22,r22,r2
    5e28:	2089c83a 	sub	r4,r4,r2
    5e2c:	d9000815 	stw	r4,32(sp)
    5e30:	d9800a17 	ldw	r6,40(sp)
    5e34:	0181810e 	bge	zero,r6,643c <_dtoa_r+0x1018>
    5e38:	d9c00b17 	ldw	r7,44(sp)
    5e3c:	3800b326 	beq	r7,zero,610c <_dtoa_r+0xce8>
    5e40:	a800b226 	beq	r21,zero,610c <_dtoa_r+0xce8>
    5e44:	880b883a 	mov	r5,r17
    5e48:	a80d883a 	mov	r6,r21
    5e4c:	e009883a 	mov	r4,fp
    5e50:	00088f40 	call	88f4 <__pow5mult>
    5e54:	d9800917 	ldw	r6,36(sp)
    5e58:	100b883a 	mov	r5,r2
    5e5c:	e009883a 	mov	r4,fp
    5e60:	1023883a 	mov	r17,r2
    5e64:	00086fc0 	call	86fc <__multiply>
    5e68:	1021883a 	mov	r16,r2
    5e6c:	d8800a17 	ldw	r2,40(sp)
    5e70:	d9400917 	ldw	r5,36(sp)
    5e74:	e009883a 	mov	r4,fp
    5e78:	1545c83a 	sub	r2,r2,r21
    5e7c:	d8800a15 	stw	r2,40(sp)
    5e80:	000835c0 	call	835c <_Bfree>
    5e84:	d8c00a17 	ldw	r3,40(sp)
    5e88:	18009f1e 	bne	r3,zero,6108 <_dtoa_r+0xce4>
    5e8c:	05c00044 	movi	r23,1
    5e90:	e009883a 	mov	r4,fp
    5e94:	b80b883a 	mov	r5,r23
    5e98:	00086c00 	call	86c0 <__i2b>
    5e9c:	d9000d17 	ldw	r4,52(sp)
    5ea0:	102b883a 	mov	r21,r2
    5ea4:	2000ce26 	beq	r4,zero,61e0 <_dtoa_r+0xdbc>
    5ea8:	200d883a 	mov	r6,r4
    5eac:	100b883a 	mov	r5,r2
    5eb0:	e009883a 	mov	r4,fp
    5eb4:	00088f40 	call	88f4 <__pow5mult>
    5eb8:	d9800317 	ldw	r6,12(sp)
    5ebc:	102b883a 	mov	r21,r2
    5ec0:	b981810e 	bge	r23,r6,64c8 <_dtoa_r+0x10a4>
    5ec4:	0027883a 	mov	r19,zero
    5ec8:	a8800417 	ldw	r2,16(r21)
    5ecc:	05c00804 	movi	r23,32
    5ed0:	10800104 	addi	r2,r2,4
    5ed4:	1085883a 	add	r2,r2,r2
    5ed8:	1085883a 	add	r2,r2,r2
    5edc:	a885883a 	add	r2,r21,r2
    5ee0:	11000017 	ldw	r4,0(r2)
    5ee4:	00085a80 	call	85a8 <__hi0bits>
    5ee8:	b885c83a 	sub	r2,r23,r2
    5eec:	1585883a 	add	r2,r2,r22
    5ef0:	108007cc 	andi	r2,r2,31
    5ef4:	1000b326 	beq	r2,zero,61c4 <_dtoa_r+0xda0>
    5ef8:	00c00804 	movi	r3,32
    5efc:	1887c83a 	sub	r3,r3,r2
    5f00:	01000104 	movi	r4,4
    5f04:	20c2cd0e 	bge	r4,r3,6a3c <_dtoa_r+0x1618>
    5f08:	00c00704 	movi	r3,28
    5f0c:	1885c83a 	sub	r2,r3,r2
    5f10:	d8c00817 	ldw	r3,32(sp)
    5f14:	a0a9883a 	add	r20,r20,r2
    5f18:	b0ad883a 	add	r22,r22,r2
    5f1c:	1887883a 	add	r3,r3,r2
    5f20:	d8c00815 	stw	r3,32(sp)
    5f24:	d9800817 	ldw	r6,32(sp)
    5f28:	0180040e 	bge	zero,r6,5f3c <_dtoa_r+0xb18>
    5f2c:	800b883a 	mov	r5,r16
    5f30:	e009883a 	mov	r4,fp
    5f34:	0008a340 	call	8a34 <__lshift>
    5f38:	1021883a 	mov	r16,r2
    5f3c:	0580050e 	bge	zero,r22,5f54 <_dtoa_r+0xb30>
    5f40:	a80b883a 	mov	r5,r21
    5f44:	b00d883a 	mov	r6,r22
    5f48:	e009883a 	mov	r4,fp
    5f4c:	0008a340 	call	8a34 <__lshift>
    5f50:	102b883a 	mov	r21,r2
    5f54:	d9c00e17 	ldw	r7,56(sp)
    5f58:	3801211e 	bne	r7,zero,63e0 <_dtoa_r+0xfbc>
    5f5c:	d9800617 	ldw	r6,24(sp)
    5f60:	0181380e 	bge	zero,r6,6444 <_dtoa_r+0x1020>
    5f64:	d8c00b17 	ldw	r3,44(sp)
    5f68:	1800ab1e 	bne	r3,zero,6218 <_dtoa_r+0xdf4>
    5f6c:	dc800717 	ldw	r18,28(sp)
    5f70:	dcc00617 	ldw	r19,24(sp)
    5f74:	9029883a 	mov	r20,r18
    5f78:	00000206 	br	5f84 <_dtoa_r+0xb60>
    5f7c:	00083840 	call	8384 <__multadd>
    5f80:	1021883a 	mov	r16,r2
    5f84:	a80b883a 	mov	r5,r21
    5f88:	8009883a 	mov	r4,r16
    5f8c:	00052240 	call	5224 <quorem>
    5f90:	10800c04 	addi	r2,r2,48
    5f94:	90800005 	stb	r2,0(r18)
    5f98:	94800044 	addi	r18,r18,1
    5f9c:	9507c83a 	sub	r3,r18,r20
    5fa0:	000f883a 	mov	r7,zero
    5fa4:	01800284 	movi	r6,10
    5fa8:	800b883a 	mov	r5,r16
    5fac:	e009883a 	mov	r4,fp
    5fb0:	1cfff216 	blt	r3,r19,5f7c <_dtoa_r+0xb58>
    5fb4:	1011883a 	mov	r8,r2
    5fb8:	d8800617 	ldw	r2,24(sp)
    5fbc:	0082370e 	bge	zero,r2,689c <_dtoa_r+0x1478>
    5fc0:	d9000717 	ldw	r4,28(sp)
    5fc4:	0025883a 	mov	r18,zero
    5fc8:	20af883a 	add	r23,r4,r2
    5fcc:	01800044 	movi	r6,1
    5fd0:	800b883a 	mov	r5,r16
    5fd4:	e009883a 	mov	r4,fp
    5fd8:	da001715 	stw	r8,92(sp)
    5fdc:	0008a340 	call	8a34 <__lshift>
    5fe0:	a80b883a 	mov	r5,r21
    5fe4:	1009883a 	mov	r4,r2
    5fe8:	d8800915 	stw	r2,36(sp)
    5fec:	0008b7c0 	call	8b7c <__mcmp>
    5ff0:	da001717 	ldw	r8,92(sp)
    5ff4:	0081800e 	bge	zero,r2,65f8 <_dtoa_r+0x11d4>
    5ff8:	b93fffc3 	ldbu	r4,-1(r23)
    5ffc:	b8bfffc4 	addi	r2,r23,-1
    6000:	1007883a 	mov	r3,r2
    6004:	01800e44 	movi	r6,57
    6008:	d9c00717 	ldw	r7,28(sp)
    600c:	00000506 	br	6024 <_dtoa_r+0xc00>
    6010:	18ffffc4 	addi	r3,r3,-1
    6014:	11c12326 	beq	r2,r7,64a4 <_dtoa_r+0x1080>
    6018:	19000003 	ldbu	r4,0(r3)
    601c:	102f883a 	mov	r23,r2
    6020:	10bfffc4 	addi	r2,r2,-1
    6024:	21403fcc 	andi	r5,r4,255
    6028:	2940201c 	xori	r5,r5,128
    602c:	297fe004 	addi	r5,r5,-128
    6030:	29bff726 	beq	r5,r6,6010 <_dtoa_r+0xbec>
    6034:	21000044 	addi	r4,r4,1
    6038:	11000005 	stb	r4,0(r2)
    603c:	a80b883a 	mov	r5,r21
    6040:	e009883a 	mov	r4,fp
    6044:	000835c0 	call	835c <_Bfree>
    6048:	883ea026 	beq	r17,zero,5acc <_dtoa_r+0x6a8>
    604c:	90000426 	beq	r18,zero,6060 <_dtoa_r+0xc3c>
    6050:	94400326 	beq	r18,r17,6060 <_dtoa_r+0xc3c>
    6054:	900b883a 	mov	r5,r18
    6058:	e009883a 	mov	r4,fp
    605c:	000835c0 	call	835c <_Bfree>
    6060:	880b883a 	mov	r5,r17
    6064:	e009883a 	mov	r4,fp
    6068:	000835c0 	call	835c <_Bfree>
    606c:	003e9706 	br	5acc <_dtoa_r+0x6a8>
    6070:	01800044 	movi	r6,1
    6074:	d9800e15 	stw	r6,56(sp)
    6078:	003d9606 	br	56d4 <_dtoa_r+0x2b0>
    607c:	d8800817 	ldw	r2,32(sp)
    6080:	d8c00517 	ldw	r3,20(sp)
    6084:	d8000d15 	stw	zero,52(sp)
    6088:	10c5c83a 	sub	r2,r2,r3
    608c:	00c9c83a 	sub	r4,zero,r3
    6090:	d8800815 	stw	r2,32(sp)
    6094:	d9000a15 	stw	r4,40(sp)
    6098:	003d9706 	br	56f8 <_dtoa_r+0x2d4>
    609c:	05adc83a 	sub	r22,zero,r22
    60a0:	dd800815 	stw	r22,32(sp)
    60a4:	002d883a 	mov	r22,zero
    60a8:	003d8e06 	br	56e4 <_dtoa_r+0x2c0>
    60ac:	d9000517 	ldw	r4,20(sp)
    60b0:	000eb000 	call	eb00 <__floatsidf>
    60b4:	100d883a 	mov	r6,r2
    60b8:	180f883a 	mov	r7,r3
    60bc:	a009883a 	mov	r4,r20
    60c0:	880b883a 	mov	r5,r17
    60c4:	000d8140 	call	d814 <__eqdf2>
    60c8:	103d7126 	beq	r2,zero,5690 <_dtoa_r+0x26c>
    60cc:	d9c00517 	ldw	r7,20(sp)
    60d0:	39ffffc4 	addi	r7,r7,-1
    60d4:	d9c00515 	stw	r7,20(sp)
    60d8:	003d6d06 	br	5690 <_dtoa_r+0x26c>
    60dc:	dd400a17 	ldw	r21,40(sp)
    60e0:	dd000817 	ldw	r20,32(sp)
    60e4:	0023883a 	mov	r17,zero
    60e8:	003f4806 	br	5e0c <_dtoa_r+0x9e8>
    60ec:	10e3c83a 	sub	r17,r2,r3
    60f0:	9448983a 	sll	r4,r18,r17
    60f4:	003d3206 	br	55c0 <_dtoa_r+0x19c>
    60f8:	d8000e15 	stw	zero,56(sp)
    60fc:	003d7506 	br	56d4 <_dtoa_r+0x2b0>
    6100:	b005883a 	mov	r2,r22
    6104:	003f4506 	br	5e1c <_dtoa_r+0x9f8>
    6108:	dc000915 	stw	r16,36(sp)
    610c:	d9800a17 	ldw	r6,40(sp)
    6110:	d9400917 	ldw	r5,36(sp)
    6114:	e009883a 	mov	r4,fp
    6118:	00088f40 	call	88f4 <__pow5mult>
    611c:	1021883a 	mov	r16,r2
    6120:	003f5a06 	br	5e8c <_dtoa_r+0xa68>
    6124:	01c00044 	movi	r7,1
    6128:	d9c00b15 	stw	r7,44(sp)
    612c:	d8802217 	ldw	r2,136(sp)
    6130:	0081280e 	bge	zero,r2,65d4 <_dtoa_r+0x11b0>
    6134:	100d883a 	mov	r6,r2
    6138:	1021883a 	mov	r16,r2
    613c:	d8800c15 	stw	r2,48(sp)
    6140:	d8800615 	stw	r2,24(sp)
    6144:	003d8806 	br	5768 <_dtoa_r+0x344>
    6148:	d8800617 	ldw	r2,24(sp)
    614c:	00be9b16 	blt	zero,r2,5bbc <_dtoa_r+0x798>
    6150:	10010f1e 	bne	r2,zero,6590 <_dtoa_r+0x116c>
    6154:	880b883a 	mov	r5,r17
    6158:	000d883a 	mov	r6,zero
    615c:	01d00534 	movhi	r7,16404
    6160:	8009883a 	mov	r4,r16
    6164:	000da6c0 	call	da6c <__muldf3>
    6168:	900d883a 	mov	r6,r18
    616c:	980f883a 	mov	r7,r19
    6170:	1009883a 	mov	r4,r2
    6174:	180b883a 	mov	r5,r3
    6178:	000d89c0 	call	d89c <__gedf2>
    617c:	002b883a 	mov	r21,zero
    6180:	0023883a 	mov	r17,zero
    6184:	1000bf16 	blt	r2,zero,6484 <_dtoa_r+0x1060>
    6188:	d9802217 	ldw	r6,136(sp)
    618c:	ddc00717 	ldw	r23,28(sp)
    6190:	018c303a 	nor	r6,zero,r6
    6194:	d9800515 	stw	r6,20(sp)
    6198:	a80b883a 	mov	r5,r21
    619c:	e009883a 	mov	r4,fp
    61a0:	000835c0 	call	835c <_Bfree>
    61a4:	883e4926 	beq	r17,zero,5acc <_dtoa_r+0x6a8>
    61a8:	003fad06 	br	6060 <_dtoa_r+0xc3c>
    61ac:	d9c01117 	ldw	r7,68(sp)
    61b0:	3801bc26 	beq	r7,zero,68a4 <_dtoa_r+0x1480>
    61b4:	10810cc4 	addi	r2,r2,1075
    61b8:	dd400a17 	ldw	r21,40(sp)
    61bc:	dd000817 	ldw	r20,32(sp)
    61c0:	003f0a06 	br	5dec <_dtoa_r+0x9c8>
    61c4:	00800704 	movi	r2,28
    61c8:	d9000817 	ldw	r4,32(sp)
    61cc:	a0a9883a 	add	r20,r20,r2
    61d0:	b0ad883a 	add	r22,r22,r2
    61d4:	2089883a 	add	r4,r4,r2
    61d8:	d9000815 	stw	r4,32(sp)
    61dc:	003f5106 	br	5f24 <_dtoa_r+0xb00>
    61e0:	d8c00317 	ldw	r3,12(sp)
    61e4:	b8c1fc0e 	bge	r23,r3,69d8 <_dtoa_r+0x15b4>
    61e8:	0027883a 	mov	r19,zero
    61ec:	b805883a 	mov	r2,r23
    61f0:	003f3e06 	br	5eec <_dtoa_r+0xac8>
    61f4:	880b883a 	mov	r5,r17
    61f8:	e009883a 	mov	r4,fp
    61fc:	000f883a 	mov	r7,zero
    6200:	01800284 	movi	r6,10
    6204:	00083840 	call	8384 <__multadd>
    6208:	d9000c17 	ldw	r4,48(sp)
    620c:	1023883a 	mov	r17,r2
    6210:	0102040e 	bge	zero,r4,6a24 <_dtoa_r+0x1600>
    6214:	d9000615 	stw	r4,24(sp)
    6218:	0500050e 	bge	zero,r20,6230 <_dtoa_r+0xe0c>
    621c:	880b883a 	mov	r5,r17
    6220:	a00d883a 	mov	r6,r20
    6224:	e009883a 	mov	r4,fp
    6228:	0008a340 	call	8a34 <__lshift>
    622c:	1023883a 	mov	r17,r2
    6230:	9801241e 	bne	r19,zero,66c4 <_dtoa_r+0x12a0>
    6234:	8829883a 	mov	r20,r17
    6238:	d9000617 	ldw	r4,24(sp)
    623c:	dcc00717 	ldw	r19,28(sp)
    6240:	9480004c 	andi	r18,r18,1
    6244:	20bfffc4 	addi	r2,r4,-1
    6248:	9885883a 	add	r2,r19,r2
    624c:	d8800415 	stw	r2,16(sp)
    6250:	dc800615 	stw	r18,24(sp)
    6254:	a80b883a 	mov	r5,r21
    6258:	8009883a 	mov	r4,r16
    625c:	00052240 	call	5224 <quorem>
    6260:	880b883a 	mov	r5,r17
    6264:	8009883a 	mov	r4,r16
    6268:	102f883a 	mov	r23,r2
    626c:	0008b7c0 	call	8b7c <__mcmp>
    6270:	a80b883a 	mov	r5,r21
    6274:	a00d883a 	mov	r6,r20
    6278:	e009883a 	mov	r4,fp
    627c:	102d883a 	mov	r22,r2
    6280:	0008bdc0 	call	8bdc <__mdiff>
    6284:	1007883a 	mov	r3,r2
    6288:	10800317 	ldw	r2,12(r2)
    628c:	bc800c04 	addi	r18,r23,48
    6290:	180b883a 	mov	r5,r3
    6294:	10004e1e 	bne	r2,zero,63d0 <_dtoa_r+0xfac>
    6298:	8009883a 	mov	r4,r16
    629c:	d8c01615 	stw	r3,88(sp)
    62a0:	0008b7c0 	call	8b7c <__mcmp>
    62a4:	d8c01617 	ldw	r3,88(sp)
    62a8:	e009883a 	mov	r4,fp
    62ac:	d8801615 	stw	r2,88(sp)
    62b0:	180b883a 	mov	r5,r3
    62b4:	000835c0 	call	835c <_Bfree>
    62b8:	d8801617 	ldw	r2,88(sp)
    62bc:	1000041e 	bne	r2,zero,62d0 <_dtoa_r+0xeac>
    62c0:	d9800317 	ldw	r6,12(sp)
    62c4:	3000021e 	bne	r6,zero,62d0 <_dtoa_r+0xeac>
    62c8:	d8c00617 	ldw	r3,24(sp)
    62cc:	18003726 	beq	r3,zero,63ac <_dtoa_r+0xf88>
    62d0:	b0002016 	blt	r22,zero,6354 <_dtoa_r+0xf30>
    62d4:	b000041e 	bne	r22,zero,62e8 <_dtoa_r+0xec4>
    62d8:	d9000317 	ldw	r4,12(sp)
    62dc:	2000021e 	bne	r4,zero,62e8 <_dtoa_r+0xec4>
    62e0:	d8c00617 	ldw	r3,24(sp)
    62e4:	18001b26 	beq	r3,zero,6354 <_dtoa_r+0xf30>
    62e8:	00810716 	blt	zero,r2,6708 <_dtoa_r+0x12e4>
    62ec:	d8c00417 	ldw	r3,16(sp)
    62f0:	9d800044 	addi	r22,r19,1
    62f4:	9c800005 	stb	r18,0(r19)
    62f8:	b02f883a 	mov	r23,r22
    62fc:	98c10626 	beq	r19,r3,6718 <_dtoa_r+0x12f4>
    6300:	800b883a 	mov	r5,r16
    6304:	000f883a 	mov	r7,zero
    6308:	01800284 	movi	r6,10
    630c:	e009883a 	mov	r4,fp
    6310:	00083840 	call	8384 <__multadd>
    6314:	1021883a 	mov	r16,r2
    6318:	000f883a 	mov	r7,zero
    631c:	01800284 	movi	r6,10
    6320:	880b883a 	mov	r5,r17
    6324:	e009883a 	mov	r4,fp
    6328:	8d002526 	beq	r17,r20,63c0 <_dtoa_r+0xf9c>
    632c:	00083840 	call	8384 <__multadd>
    6330:	a00b883a 	mov	r5,r20
    6334:	000f883a 	mov	r7,zero
    6338:	01800284 	movi	r6,10
    633c:	e009883a 	mov	r4,fp
    6340:	1023883a 	mov	r17,r2
    6344:	00083840 	call	8384 <__multadd>
    6348:	1029883a 	mov	r20,r2
    634c:	b027883a 	mov	r19,r22
    6350:	003fc006 	br	6254 <_dtoa_r+0xe30>
    6354:	9011883a 	mov	r8,r18
    6358:	00800e0e 	bge	zero,r2,6394 <_dtoa_r+0xf70>
    635c:	800b883a 	mov	r5,r16
    6360:	01800044 	movi	r6,1
    6364:	e009883a 	mov	r4,fp
    6368:	da001715 	stw	r8,92(sp)
    636c:	0008a340 	call	8a34 <__lshift>
    6370:	a80b883a 	mov	r5,r21
    6374:	1009883a 	mov	r4,r2
    6378:	1021883a 	mov	r16,r2
    637c:	0008b7c0 	call	8b7c <__mcmp>
    6380:	da001717 	ldw	r8,92(sp)
    6384:	0081960e 	bge	zero,r2,69e0 <_dtoa_r+0x15bc>
    6388:	00800e44 	movi	r2,57
    638c:	40817026 	beq	r8,r2,6950 <_dtoa_r+0x152c>
    6390:	ba000c44 	addi	r8,r23,49
    6394:	8825883a 	mov	r18,r17
    6398:	9dc00044 	addi	r23,r19,1
    639c:	9a000005 	stb	r8,0(r19)
    63a0:	a023883a 	mov	r17,r20
    63a4:	dc000915 	stw	r16,36(sp)
    63a8:	003f2406 	br	603c <_dtoa_r+0xc18>
    63ac:	00800e44 	movi	r2,57
    63b0:	9011883a 	mov	r8,r18
    63b4:	90816626 	beq	r18,r2,6950 <_dtoa_r+0x152c>
    63b8:	05bff516 	blt	zero,r22,6390 <_dtoa_r+0xf6c>
    63bc:	003ff506 	br	6394 <_dtoa_r+0xf70>
    63c0:	00083840 	call	8384 <__multadd>
    63c4:	1023883a 	mov	r17,r2
    63c8:	1029883a 	mov	r20,r2
    63cc:	003fdf06 	br	634c <_dtoa_r+0xf28>
    63d0:	e009883a 	mov	r4,fp
    63d4:	000835c0 	call	835c <_Bfree>
    63d8:	00800044 	movi	r2,1
    63dc:	003fbc06 	br	62d0 <_dtoa_r+0xeac>
    63e0:	a80b883a 	mov	r5,r21
    63e4:	8009883a 	mov	r4,r16
    63e8:	0008b7c0 	call	8b7c <__mcmp>
    63ec:	103edb0e 	bge	r2,zero,5f5c <_dtoa_r+0xb38>
    63f0:	800b883a 	mov	r5,r16
    63f4:	000f883a 	mov	r7,zero
    63f8:	01800284 	movi	r6,10
    63fc:	e009883a 	mov	r4,fp
    6400:	00083840 	call	8384 <__multadd>
    6404:	1021883a 	mov	r16,r2
    6408:	d8800517 	ldw	r2,20(sp)
    640c:	d8c00b17 	ldw	r3,44(sp)
    6410:	10bfffc4 	addi	r2,r2,-1
    6414:	d8800515 	stw	r2,20(sp)
    6418:	183f761e 	bne	r3,zero,61f4 <_dtoa_r+0xdd0>
    641c:	d9000c17 	ldw	r4,48(sp)
    6420:	0101730e 	bge	zero,r4,69f0 <_dtoa_r+0x15cc>
    6424:	d9000615 	stw	r4,24(sp)
    6428:	003ed006 	br	5f6c <_dtoa_r+0xb48>
    642c:	00800084 	movi	r2,2
    6430:	3081861e 	bne	r6,r2,6a4c <_dtoa_r+0x1628>
    6434:	d8000b15 	stw	zero,44(sp)
    6438:	003f3c06 	br	612c <_dtoa_r+0xd08>
    643c:	dc000917 	ldw	r16,36(sp)
    6440:	003e9206 	br	5e8c <_dtoa_r+0xa68>
    6444:	d9c00317 	ldw	r7,12(sp)
    6448:	00800084 	movi	r2,2
    644c:	11fec50e 	bge	r2,r7,5f64 <_dtoa_r+0xb40>
    6450:	d9000617 	ldw	r4,24(sp)
    6454:	20013c1e 	bne	r4,zero,6948 <_dtoa_r+0x1524>
    6458:	a80b883a 	mov	r5,r21
    645c:	000f883a 	mov	r7,zero
    6460:	01800144 	movi	r6,5
    6464:	e009883a 	mov	r4,fp
    6468:	00083840 	call	8384 <__multadd>
    646c:	100b883a 	mov	r5,r2
    6470:	8009883a 	mov	r4,r16
    6474:	102b883a 	mov	r21,r2
    6478:	0008b7c0 	call	8b7c <__mcmp>
    647c:	dc000915 	stw	r16,36(sp)
    6480:	00bf410e 	bge	zero,r2,6188 <_dtoa_r+0xd64>
    6484:	d9c00717 	ldw	r7,28(sp)
    6488:	00800c44 	movi	r2,49
    648c:	38800005 	stb	r2,0(r7)
    6490:	d8800517 	ldw	r2,20(sp)
    6494:	3dc00044 	addi	r23,r7,1
    6498:	10800044 	addi	r2,r2,1
    649c:	d8800515 	stw	r2,20(sp)
    64a0:	003f3d06 	br	6198 <_dtoa_r+0xd74>
    64a4:	d9800517 	ldw	r6,20(sp)
    64a8:	d9c00717 	ldw	r7,28(sp)
    64ac:	00800c44 	movi	r2,49
    64b0:	31800044 	addi	r6,r6,1
    64b4:	d9800515 	stw	r6,20(sp)
    64b8:	38800005 	stb	r2,0(r7)
    64bc:	003edf06 	br	603c <_dtoa_r+0xc18>
    64c0:	d8000b15 	stw	zero,44(sp)
    64c4:	003c9f06 	br	5744 <_dtoa_r+0x320>
    64c8:	903e7e1e 	bne	r18,zero,5ec4 <_dtoa_r+0xaa0>
    64cc:	00800434 	movhi	r2,16
    64d0:	10bfffc4 	addi	r2,r2,-1
    64d4:	9884703a 	and	r2,r19,r2
    64d8:	1000ea1e 	bne	r2,zero,6884 <_dtoa_r+0x1460>
    64dc:	9cdffc2c 	andhi	r19,r19,32752
    64e0:	9800e826 	beq	r19,zero,6884 <_dtoa_r+0x1460>
    64e4:	d9c00817 	ldw	r7,32(sp)
    64e8:	b5800044 	addi	r22,r22,1
    64ec:	04c00044 	movi	r19,1
    64f0:	39c00044 	addi	r7,r7,1
    64f4:	d9c00815 	stw	r7,32(sp)
    64f8:	d8800d17 	ldw	r2,52(sp)
    64fc:	103e721e 	bne	r2,zero,5ec8 <_dtoa_r+0xaa4>
    6500:	00800044 	movi	r2,1
    6504:	003e7906 	br	5eec <_dtoa_r+0xac8>
    6508:	8009883a 	mov	r4,r16
    650c:	000eb000 	call	eb00 <__floatsidf>
    6510:	d9800f17 	ldw	r6,60(sp)
    6514:	d9c01017 	ldw	r7,64(sp)
    6518:	1009883a 	mov	r4,r2
    651c:	180b883a 	mov	r5,r3
    6520:	000da6c0 	call	da6c <__muldf3>
    6524:	000d883a 	mov	r6,zero
    6528:	01d00734 	movhi	r7,16412
    652c:	1009883a 	mov	r4,r2
    6530:	180b883a 	mov	r5,r3
    6534:	000c6800 	call	c680 <__adddf3>
    6538:	047f3034 	movhi	r17,64704
    653c:	1021883a 	mov	r16,r2
    6540:	1c63883a 	add	r17,r3,r17
    6544:	d9000f17 	ldw	r4,60(sp)
    6548:	d9401017 	ldw	r5,64(sp)
    654c:	000d883a 	mov	r6,zero
    6550:	01d00534 	movhi	r7,16404
    6554:	000e1840 	call	e184 <__subdf3>
    6558:	800d883a 	mov	r6,r16
    655c:	880f883a 	mov	r7,r17
    6560:	1009883a 	mov	r4,r2
    6564:	180b883a 	mov	r5,r3
    6568:	102b883a 	mov	r21,r2
    656c:	1829883a 	mov	r20,r3
    6570:	000d89c0 	call	d89c <__gedf2>
    6574:	00806c16 	blt	zero,r2,6728 <_dtoa_r+0x1304>
    6578:	89e0003c 	xorhi	r7,r17,32768
    657c:	800d883a 	mov	r6,r16
    6580:	a809883a 	mov	r4,r21
    6584:	a00b883a 	mov	r5,r20
    6588:	000d9780 	call	d978 <__ledf2>
    658c:	103d7e0e 	bge	r2,zero,5b88 <_dtoa_r+0x764>
    6590:	002b883a 	mov	r21,zero
    6594:	0023883a 	mov	r17,zero
    6598:	003efb06 	br	6188 <_dtoa_r+0xd64>
    659c:	d8800717 	ldw	r2,28(sp)
    65a0:	003bd006 	br	54e4 <_dtoa_r+0xc0>
    65a4:	d9000a17 	ldw	r4,40(sp)
    65a8:	d9800d17 	ldw	r6,52(sp)
    65ac:	dd400a15 	stw	r21,40(sp)
    65b0:	a905c83a 	sub	r2,r21,r4
    65b4:	308d883a 	add	r6,r6,r2
    65b8:	d9800d15 	stw	r6,52(sp)
    65bc:	002b883a 	mov	r21,zero
    65c0:	003e0606 	br	5ddc <_dtoa_r+0x9b8>
    65c4:	9023883a 	mov	r17,r18
    65c8:	9829883a 	mov	r20,r19
    65cc:	04000084 	movi	r16,2
    65d0:	003c9206 	br	581c <_dtoa_r+0x3f8>
    65d4:	04000044 	movi	r16,1
    65d8:	dc000c15 	stw	r16,48(sp)
    65dc:	dc000615 	stw	r16,24(sp)
    65e0:	dc002215 	stw	r16,136(sp)
    65e4:	e0001115 	stw	zero,68(fp)
    65e8:	000b883a 	mov	r5,zero
    65ec:	003c6906 	br	5794 <_dtoa_r+0x370>
    65f0:	3021883a 	mov	r16,r6
    65f4:	003ffb06 	br	65e4 <_dtoa_r+0x11c0>
    65f8:	1000021e 	bne	r2,zero,6604 <_dtoa_r+0x11e0>
    65fc:	4200004c 	andi	r8,r8,1
    6600:	403e7d1e 	bne	r8,zero,5ff8 <_dtoa_r+0xbd4>
    6604:	01000c04 	movi	r4,48
    6608:	00000106 	br	6610 <_dtoa_r+0x11ec>
    660c:	102f883a 	mov	r23,r2
    6610:	b8bfffc4 	addi	r2,r23,-1
    6614:	10c00007 	ldb	r3,0(r2)
    6618:	193ffc26 	beq	r3,r4,660c <_dtoa_r+0x11e8>
    661c:	003e8706 	br	603c <_dtoa_r+0xc18>
    6620:	d8800517 	ldw	r2,20(sp)
    6624:	00a3c83a 	sub	r17,zero,r2
    6628:	8800a426 	beq	r17,zero,68bc <_dtoa_r+0x1498>
    662c:	888003cc 	andi	r2,r17,15
    6630:	100490fa 	slli	r2,r2,3
    6634:	00c00074 	movhi	r3,1
    6638:	18c72f04 	addi	r3,r3,7356
    663c:	1885883a 	add	r2,r3,r2
    6640:	11800017 	ldw	r6,0(r2)
    6644:	11c00117 	ldw	r7,4(r2)
    6648:	9009883a 	mov	r4,r18
    664c:	980b883a 	mov	r5,r19
    6650:	8823d13a 	srai	r17,r17,4
    6654:	000da6c0 	call	da6c <__muldf3>
    6658:	d8800f15 	stw	r2,60(sp)
    665c:	d8c01015 	stw	r3,64(sp)
    6660:	8800e826 	beq	r17,zero,6a04 <_dtoa_r+0x15e0>
    6664:	05000074 	movhi	r20,1
    6668:	a5072504 	addi	r20,r20,7316
    666c:	04000084 	movi	r16,2
    6670:	8980004c 	andi	r6,r17,1
    6674:	1009883a 	mov	r4,r2
    6678:	8823d07a 	srai	r17,r17,1
    667c:	180b883a 	mov	r5,r3
    6680:	30000426 	beq	r6,zero,6694 <_dtoa_r+0x1270>
    6684:	a1800017 	ldw	r6,0(r20)
    6688:	a1c00117 	ldw	r7,4(r20)
    668c:	84000044 	addi	r16,r16,1
    6690:	000da6c0 	call	da6c <__muldf3>
    6694:	a5000204 	addi	r20,r20,8
    6698:	883ff51e 	bne	r17,zero,6670 <_dtoa_r+0x124c>
    669c:	d8800f15 	stw	r2,60(sp)
    66a0:	d8c01015 	stw	r3,64(sp)
    66a4:	003c7606 	br	5880 <_dtoa_r+0x45c>
    66a8:	00c00c04 	movi	r3,48
    66ac:	10c00005 	stb	r3,0(r2)
    66b0:	d8c00517 	ldw	r3,20(sp)
    66b4:	bd3fffc3 	ldbu	r20,-1(r23)
    66b8:	18c00044 	addi	r3,r3,1
    66bc:	d8c00515 	stw	r3,20(sp)
    66c0:	003db906 	br	5da8 <_dtoa_r+0x984>
    66c4:	89400117 	ldw	r5,4(r17)
    66c8:	e009883a 	mov	r4,fp
    66cc:	00082b40 	call	82b4 <_Balloc>
    66d0:	89800417 	ldw	r6,16(r17)
    66d4:	89400304 	addi	r5,r17,12
    66d8:	11000304 	addi	r4,r2,12
    66dc:	31800084 	addi	r6,r6,2
    66e0:	318d883a 	add	r6,r6,r6
    66e4:	318d883a 	add	r6,r6,r6
    66e8:	1027883a 	mov	r19,r2
    66ec:	0007ee80 	call	7ee8 <memcpy>
    66f0:	01800044 	movi	r6,1
    66f4:	980b883a 	mov	r5,r19
    66f8:	e009883a 	mov	r4,fp
    66fc:	0008a340 	call	8a34 <__lshift>
    6700:	1029883a 	mov	r20,r2
    6704:	003ecc06 	br	6238 <_dtoa_r+0xe14>
    6708:	00800e44 	movi	r2,57
    670c:	90809026 	beq	r18,r2,6950 <_dtoa_r+0x152c>
    6710:	92000044 	addi	r8,r18,1
    6714:	003f1f06 	br	6394 <_dtoa_r+0xf70>
    6718:	9011883a 	mov	r8,r18
    671c:	8825883a 	mov	r18,r17
    6720:	a023883a 	mov	r17,r20
    6724:	003e2906 	br	5fcc <_dtoa_r+0xba8>
    6728:	002b883a 	mov	r21,zero
    672c:	0023883a 	mov	r17,zero
    6730:	003f5406 	br	6484 <_dtoa_r+0x1060>
    6734:	61bfffc4 	addi	r6,r12,-1
    6738:	300490fa 	slli	r2,r6,3
    673c:	00c00074 	movhi	r3,1
    6740:	18c72f04 	addi	r3,r3,7356
    6744:	1885883a 	add	r2,r3,r2
    6748:	11000017 	ldw	r4,0(r2)
    674c:	11400117 	ldw	r5,4(r2)
    6750:	d8800717 	ldw	r2,28(sp)
    6754:	880f883a 	mov	r7,r17
    6758:	d9801215 	stw	r6,72(sp)
    675c:	800d883a 	mov	r6,r16
    6760:	db001615 	stw	r12,88(sp)
    6764:	15c00044 	addi	r23,r2,1
    6768:	000da6c0 	call	da6c <__muldf3>
    676c:	d9401017 	ldw	r5,64(sp)
    6770:	d9000f17 	ldw	r4,60(sp)
    6774:	d8c01515 	stw	r3,84(sp)
    6778:	d8801415 	stw	r2,80(sp)
    677c:	000ea800 	call	ea80 <__fixdfsi>
    6780:	1009883a 	mov	r4,r2
    6784:	1021883a 	mov	r16,r2
    6788:	000eb000 	call	eb00 <__floatsidf>
    678c:	d9000f17 	ldw	r4,60(sp)
    6790:	d9401017 	ldw	r5,64(sp)
    6794:	100d883a 	mov	r6,r2
    6798:	180f883a 	mov	r7,r3
    679c:	000e1840 	call	e184 <__subdf3>
    67a0:	1829883a 	mov	r20,r3
    67a4:	d8c00717 	ldw	r3,28(sp)
    67a8:	84000c04 	addi	r16,r16,48
    67ac:	1023883a 	mov	r17,r2
    67b0:	1c000005 	stb	r16,0(r3)
    67b4:	db001617 	ldw	r12,88(sp)
    67b8:	00800044 	movi	r2,1
    67bc:	60802226 	beq	r12,r2,6848 <_dtoa_r+0x1424>
    67c0:	d9c00717 	ldw	r7,28(sp)
    67c4:	8805883a 	mov	r2,r17
    67c8:	b82b883a 	mov	r21,r23
    67cc:	3b19883a 	add	r12,r7,r12
    67d0:	6023883a 	mov	r17,r12
    67d4:	a007883a 	mov	r3,r20
    67d8:	dc800f15 	stw	r18,60(sp)
    67dc:	000d883a 	mov	r6,zero
    67e0:	01d00934 	movhi	r7,16420
    67e4:	1009883a 	mov	r4,r2
    67e8:	180b883a 	mov	r5,r3
    67ec:	000da6c0 	call	da6c <__muldf3>
    67f0:	180b883a 	mov	r5,r3
    67f4:	1009883a 	mov	r4,r2
    67f8:	1829883a 	mov	r20,r3
    67fc:	1025883a 	mov	r18,r2
    6800:	000ea800 	call	ea80 <__fixdfsi>
    6804:	1009883a 	mov	r4,r2
    6808:	1021883a 	mov	r16,r2
    680c:	000eb000 	call	eb00 <__floatsidf>
    6810:	100d883a 	mov	r6,r2
    6814:	180f883a 	mov	r7,r3
    6818:	9009883a 	mov	r4,r18
    681c:	a00b883a 	mov	r5,r20
    6820:	84000c04 	addi	r16,r16,48
    6824:	000e1840 	call	e184 <__subdf3>
    6828:	ad400044 	addi	r21,r21,1
    682c:	ac3fffc5 	stb	r16,-1(r21)
    6830:	ac7fea1e 	bne	r21,r17,67dc <_dtoa_r+0x13b8>
    6834:	1023883a 	mov	r17,r2
    6838:	d8801217 	ldw	r2,72(sp)
    683c:	dc800f17 	ldw	r18,60(sp)
    6840:	1829883a 	mov	r20,r3
    6844:	b8af883a 	add	r23,r23,r2
    6848:	d9001417 	ldw	r4,80(sp)
    684c:	d9401517 	ldw	r5,84(sp)
    6850:	000d883a 	mov	r6,zero
    6854:	01cff834 	movhi	r7,16352
    6858:	000c6800 	call	c680 <__adddf3>
    685c:	880d883a 	mov	r6,r17
    6860:	a00f883a 	mov	r7,r20
    6864:	1009883a 	mov	r4,r2
    6868:	180b883a 	mov	r5,r3
    686c:	000d9780 	call	d978 <__ledf2>
    6870:	10003e0e 	bge	r2,zero,696c <_dtoa_r+0x1548>
    6874:	d9001317 	ldw	r4,76(sp)
    6878:	bd3fffc3 	ldbu	r20,-1(r23)
    687c:	d9000515 	stw	r4,20(sp)
    6880:	003d3b06 	br	5d70 <_dtoa_r+0x94c>
    6884:	0027883a 	mov	r19,zero
    6888:	003f1b06 	br	64f8 <_dtoa_r+0x10d4>
    688c:	d8800817 	ldw	r2,32(sp)
    6890:	11e9c83a 	sub	r20,r2,r7
    6894:	0005883a 	mov	r2,zero
    6898:	003d5406 	br	5dec <_dtoa_r+0x9c8>
    689c:	00800044 	movi	r2,1
    68a0:	003dc706 	br	5fc0 <_dtoa_r+0xb9c>
    68a4:	d8c00217 	ldw	r3,8(sp)
    68a8:	00800d84 	movi	r2,54
    68ac:	dd400a17 	ldw	r21,40(sp)
    68b0:	10c5c83a 	sub	r2,r2,r3
    68b4:	dd000817 	ldw	r20,32(sp)
    68b8:	003d4c06 	br	5dec <_dtoa_r+0x9c8>
    68bc:	dc800f15 	stw	r18,60(sp)
    68c0:	dcc01015 	stw	r19,64(sp)
    68c4:	04000084 	movi	r16,2
    68c8:	003bed06 	br	5880 <_dtoa_r+0x45c>
    68cc:	d9000617 	ldw	r4,24(sp)
    68d0:	203f0d26 	beq	r4,zero,6508 <_dtoa_r+0x10e4>
    68d4:	d9800c17 	ldw	r6,48(sp)
    68d8:	01bcab0e 	bge	zero,r6,5b88 <_dtoa_r+0x764>
    68dc:	d9401017 	ldw	r5,64(sp)
    68e0:	d9000f17 	ldw	r4,60(sp)
    68e4:	000d883a 	mov	r6,zero
    68e8:	01d00934 	movhi	r7,16420
    68ec:	000da6c0 	call	da6c <__muldf3>
    68f0:	81000044 	addi	r4,r16,1
    68f4:	d8800f15 	stw	r2,60(sp)
    68f8:	d8c01015 	stw	r3,64(sp)
    68fc:	000eb000 	call	eb00 <__floatsidf>
    6900:	d9800f17 	ldw	r6,60(sp)
    6904:	d9c01017 	ldw	r7,64(sp)
    6908:	1009883a 	mov	r4,r2
    690c:	180b883a 	mov	r5,r3
    6910:	000da6c0 	call	da6c <__muldf3>
    6914:	01d00734 	movhi	r7,16412
    6918:	000d883a 	mov	r6,zero
    691c:	1009883a 	mov	r4,r2
    6920:	180b883a 	mov	r5,r3
    6924:	000c6800 	call	c680 <__adddf3>
    6928:	d9c00517 	ldw	r7,20(sp)
    692c:	047f3034 	movhi	r17,64704
    6930:	1021883a 	mov	r16,r2
    6934:	39ffffc4 	addi	r7,r7,-1
    6938:	d9c01315 	stw	r7,76(sp)
    693c:	1c63883a 	add	r17,r3,r17
    6940:	db000c17 	ldw	r12,48(sp)
    6944:	003bea06 	br	58f0 <_dtoa_r+0x4cc>
    6948:	dc000915 	stw	r16,36(sp)
    694c:	003e0e06 	br	6188 <_dtoa_r+0xd64>
    6950:	01000e44 	movi	r4,57
    6954:	8825883a 	mov	r18,r17
    6958:	9dc00044 	addi	r23,r19,1
    695c:	99000005 	stb	r4,0(r19)
    6960:	a023883a 	mov	r17,r20
    6964:	dc000915 	stw	r16,36(sp)
    6968:	003da406 	br	5ffc <_dtoa_r+0xbd8>
    696c:	d9801417 	ldw	r6,80(sp)
    6970:	d9c01517 	ldw	r7,84(sp)
    6974:	0009883a 	mov	r4,zero
    6978:	014ff834 	movhi	r5,16352
    697c:	000e1840 	call	e184 <__subdf3>
    6980:	880d883a 	mov	r6,r17
    6984:	a00f883a 	mov	r7,r20
    6988:	1009883a 	mov	r4,r2
    698c:	180b883a 	mov	r5,r3
    6990:	000d89c0 	call	d89c <__gedf2>
    6994:	00bc7c0e 	bge	zero,r2,5b88 <_dtoa_r+0x764>
    6998:	01000c04 	movi	r4,48
    699c:	00000106 	br	69a4 <_dtoa_r+0x1580>
    69a0:	102f883a 	mov	r23,r2
    69a4:	b8bfffc4 	addi	r2,r23,-1
    69a8:	10c00007 	ldb	r3,0(r2)
    69ac:	193ffc26 	beq	r3,r4,69a0 <_dtoa_r+0x157c>
    69b0:	d9801317 	ldw	r6,76(sp)
    69b4:	d9800515 	stw	r6,20(sp)
    69b8:	003c4406 	br	5acc <_dtoa_r+0x6a8>
    69bc:	d9801317 	ldw	r6,76(sp)
    69c0:	d9800515 	stw	r6,20(sp)
    69c4:	003cea06 	br	5d70 <_dtoa_r+0x94c>
    69c8:	dd800f17 	ldw	r22,60(sp)
    69cc:	dcc01017 	ldw	r19,64(sp)
    69d0:	dc801217 	ldw	r18,72(sp)
    69d4:	003c6c06 	br	5b88 <_dtoa_r+0x764>
    69d8:	903e031e 	bne	r18,zero,61e8 <_dtoa_r+0xdc4>
    69dc:	003ebb06 	br	64cc <_dtoa_r+0x10a8>
    69e0:	103e6c1e 	bne	r2,zero,6394 <_dtoa_r+0xf70>
    69e4:	4080004c 	andi	r2,r8,1
    69e8:	103e6a26 	beq	r2,zero,6394 <_dtoa_r+0xf70>
    69ec:	003e6606 	br	6388 <_dtoa_r+0xf64>
    69f0:	d8c00317 	ldw	r3,12(sp)
    69f4:	00800084 	movi	r2,2
    69f8:	10c02916 	blt	r2,r3,6aa0 <_dtoa_r+0x167c>
    69fc:	d9000c17 	ldw	r4,48(sp)
    6a00:	003e8806 	br	6424 <_dtoa_r+0x1000>
    6a04:	04000084 	movi	r16,2
    6a08:	003b9d06 	br	5880 <_dtoa_r+0x45c>
    6a0c:	d9001317 	ldw	r4,76(sp)
    6a10:	d9000515 	stw	r4,20(sp)
    6a14:	003cd606 	br	5d70 <_dtoa_r+0x94c>
    6a18:	d8801317 	ldw	r2,76(sp)
    6a1c:	d8800515 	stw	r2,20(sp)
    6a20:	003c2a06 	br	5acc <_dtoa_r+0x6a8>
    6a24:	d9800317 	ldw	r6,12(sp)
    6a28:	00800084 	movi	r2,2
    6a2c:	11801516 	blt	r2,r6,6a84 <_dtoa_r+0x1660>
    6a30:	d9c00c17 	ldw	r7,48(sp)
    6a34:	d9c00615 	stw	r7,24(sp)
    6a38:	003df706 	br	6218 <_dtoa_r+0xdf4>
    6a3c:	193d3926 	beq	r3,r4,5f24 <_dtoa_r+0xb00>
    6a40:	00c00f04 	movi	r3,60
    6a44:	1885c83a 	sub	r2,r3,r2
    6a48:	003ddf06 	br	61c8 <_dtoa_r+0xda4>
    6a4c:	e009883a 	mov	r4,fp
    6a50:	e0001115 	stw	zero,68(fp)
    6a54:	000b883a 	mov	r5,zero
    6a58:	00082b40 	call	82b4 <_Balloc>
    6a5c:	d8800715 	stw	r2,28(sp)
    6a60:	d8c00717 	ldw	r3,28(sp)
    6a64:	00bfffc4 	movi	r2,-1
    6a68:	01000044 	movi	r4,1
    6a6c:	d8800c15 	stw	r2,48(sp)
    6a70:	e0c01015 	stw	r3,64(fp)
    6a74:	d9000b15 	stw	r4,44(sp)
    6a78:	d8800615 	stw	r2,24(sp)
    6a7c:	d8002215 	stw	zero,136(sp)
    6a80:	003c4106 	br	5b88 <_dtoa_r+0x764>
    6a84:	d8c00c17 	ldw	r3,48(sp)
    6a88:	d8c00615 	stw	r3,24(sp)
    6a8c:	003e7006 	br	6450 <_dtoa_r+0x102c>
    6a90:	04400044 	movi	r17,1
    6a94:	003b2006 	br	5718 <_dtoa_r+0x2f4>
    6a98:	000b883a 	mov	r5,zero
    6a9c:	003b3d06 	br	5794 <_dtoa_r+0x370>
    6aa0:	d8800c17 	ldw	r2,48(sp)
    6aa4:	d8800615 	stw	r2,24(sp)
    6aa8:	003e6906 	br	6450 <_dtoa_r+0x102c>

00006aac <__sflush_r>:
    6aac:	2880030b 	ldhu	r2,12(r5)
    6ab0:	defffb04 	addi	sp,sp,-20
    6ab4:	dcc00315 	stw	r19,12(sp)
    6ab8:	dc400115 	stw	r17,4(sp)
    6abc:	dfc00415 	stw	ra,16(sp)
    6ac0:	dc800215 	stw	r18,8(sp)
    6ac4:	dc000015 	stw	r16,0(sp)
    6ac8:	10c0020c 	andi	r3,r2,8
    6acc:	2823883a 	mov	r17,r5
    6ad0:	2027883a 	mov	r19,r4
    6ad4:	1800311e 	bne	r3,zero,6b9c <__sflush_r+0xf0>
    6ad8:	28c00117 	ldw	r3,4(r5)
    6adc:	10820014 	ori	r2,r2,2048
    6ae0:	2880030d 	sth	r2,12(r5)
    6ae4:	00c04b0e 	bge	zero,r3,6c14 <__sflush_r+0x168>
    6ae8:	8a000a17 	ldw	r8,40(r17)
    6aec:	40002326 	beq	r8,zero,6b7c <__sflush_r+0xd0>
    6af0:	9c000017 	ldw	r16,0(r19)
    6af4:	10c4000c 	andi	r3,r2,4096
    6af8:	98000015 	stw	zero,0(r19)
    6afc:	18004826 	beq	r3,zero,6c20 <__sflush_r+0x174>
    6b00:	89801417 	ldw	r6,80(r17)
    6b04:	10c0010c 	andi	r3,r2,4
    6b08:	18000626 	beq	r3,zero,6b24 <__sflush_r+0x78>
    6b0c:	88c00117 	ldw	r3,4(r17)
    6b10:	88800c17 	ldw	r2,48(r17)
    6b14:	30cdc83a 	sub	r6,r6,r3
    6b18:	10000226 	beq	r2,zero,6b24 <__sflush_r+0x78>
    6b1c:	88800f17 	ldw	r2,60(r17)
    6b20:	308dc83a 	sub	r6,r6,r2
    6b24:	89400717 	ldw	r5,28(r17)
    6b28:	000f883a 	mov	r7,zero
    6b2c:	9809883a 	mov	r4,r19
    6b30:	403ee83a 	callr	r8
    6b34:	00ffffc4 	movi	r3,-1
    6b38:	10c04426 	beq	r2,r3,6c4c <__sflush_r+0x1a0>
    6b3c:	88c0030b 	ldhu	r3,12(r17)
    6b40:	89000417 	ldw	r4,16(r17)
    6b44:	88000115 	stw	zero,4(r17)
    6b48:	197dffcc 	andi	r5,r3,63487
    6b4c:	8940030d 	sth	r5,12(r17)
    6b50:	89000015 	stw	r4,0(r17)
    6b54:	18c4000c 	andi	r3,r3,4096
    6b58:	18002c1e 	bne	r3,zero,6c0c <__sflush_r+0x160>
    6b5c:	89400c17 	ldw	r5,48(r17)
    6b60:	9c000015 	stw	r16,0(r19)
    6b64:	28000526 	beq	r5,zero,6b7c <__sflush_r+0xd0>
    6b68:	88801004 	addi	r2,r17,64
    6b6c:	28800226 	beq	r5,r2,6b78 <__sflush_r+0xcc>
    6b70:	9809883a 	mov	r4,r19
    6b74:	00072180 	call	7218 <_free_r>
    6b78:	88000c15 	stw	zero,48(r17)
    6b7c:	0005883a 	mov	r2,zero
    6b80:	dfc00417 	ldw	ra,16(sp)
    6b84:	dcc00317 	ldw	r19,12(sp)
    6b88:	dc800217 	ldw	r18,8(sp)
    6b8c:	dc400117 	ldw	r17,4(sp)
    6b90:	dc000017 	ldw	r16,0(sp)
    6b94:	dec00504 	addi	sp,sp,20
    6b98:	f800283a 	ret
    6b9c:	2c800417 	ldw	r18,16(r5)
    6ba0:	903ff626 	beq	r18,zero,6b7c <__sflush_r+0xd0>
    6ba4:	2c000017 	ldw	r16,0(r5)
    6ba8:	108000cc 	andi	r2,r2,3
    6bac:	2c800015 	stw	r18,0(r5)
    6bb0:	84a1c83a 	sub	r16,r16,r18
    6bb4:	1000131e 	bne	r2,zero,6c04 <__sflush_r+0x158>
    6bb8:	28800517 	ldw	r2,20(r5)
    6bbc:	88800215 	stw	r2,8(r17)
    6bc0:	04000316 	blt	zero,r16,6bd0 <__sflush_r+0x124>
    6bc4:	003fed06 	br	6b7c <__sflush_r+0xd0>
    6bc8:	90a5883a 	add	r18,r18,r2
    6bcc:	043feb0e 	bge	zero,r16,6b7c <__sflush_r+0xd0>
    6bd0:	88800917 	ldw	r2,36(r17)
    6bd4:	89400717 	ldw	r5,28(r17)
    6bd8:	800f883a 	mov	r7,r16
    6bdc:	900d883a 	mov	r6,r18
    6be0:	9809883a 	mov	r4,r19
    6be4:	103ee83a 	callr	r2
    6be8:	80a1c83a 	sub	r16,r16,r2
    6bec:	00bff616 	blt	zero,r2,6bc8 <__sflush_r+0x11c>
    6bf0:	88c0030b 	ldhu	r3,12(r17)
    6bf4:	00bfffc4 	movi	r2,-1
    6bf8:	18c01014 	ori	r3,r3,64
    6bfc:	88c0030d 	sth	r3,12(r17)
    6c00:	003fdf06 	br	6b80 <__sflush_r+0xd4>
    6c04:	0005883a 	mov	r2,zero
    6c08:	003fec06 	br	6bbc <__sflush_r+0x110>
    6c0c:	88801415 	stw	r2,80(r17)
    6c10:	003fd206 	br	6b5c <__sflush_r+0xb0>
    6c14:	28c00f17 	ldw	r3,60(r5)
    6c18:	00ffb316 	blt	zero,r3,6ae8 <__sflush_r+0x3c>
    6c1c:	003fd706 	br	6b7c <__sflush_r+0xd0>
    6c20:	89400717 	ldw	r5,28(r17)
    6c24:	000d883a 	mov	r6,zero
    6c28:	01c00044 	movi	r7,1
    6c2c:	9809883a 	mov	r4,r19
    6c30:	403ee83a 	callr	r8
    6c34:	100d883a 	mov	r6,r2
    6c38:	00bfffc4 	movi	r2,-1
    6c3c:	30801426 	beq	r6,r2,6c90 <__sflush_r+0x1e4>
    6c40:	8880030b 	ldhu	r2,12(r17)
    6c44:	8a000a17 	ldw	r8,40(r17)
    6c48:	003fae06 	br	6b04 <__sflush_r+0x58>
    6c4c:	98c00017 	ldw	r3,0(r19)
    6c50:	183fba26 	beq	r3,zero,6b3c <__sflush_r+0x90>
    6c54:	01000744 	movi	r4,29
    6c58:	19000626 	beq	r3,r4,6c74 <__sflush_r+0x1c8>
    6c5c:	01000584 	movi	r4,22
    6c60:	19000426 	beq	r3,r4,6c74 <__sflush_r+0x1c8>
    6c64:	88c0030b 	ldhu	r3,12(r17)
    6c68:	18c01014 	ori	r3,r3,64
    6c6c:	88c0030d 	sth	r3,12(r17)
    6c70:	003fc306 	br	6b80 <__sflush_r+0xd4>
    6c74:	8880030b 	ldhu	r2,12(r17)
    6c78:	88c00417 	ldw	r3,16(r17)
    6c7c:	88000115 	stw	zero,4(r17)
    6c80:	10bdffcc 	andi	r2,r2,63487
    6c84:	8880030d 	sth	r2,12(r17)
    6c88:	88c00015 	stw	r3,0(r17)
    6c8c:	003fb306 	br	6b5c <__sflush_r+0xb0>
    6c90:	98800017 	ldw	r2,0(r19)
    6c94:	103fea26 	beq	r2,zero,6c40 <__sflush_r+0x194>
    6c98:	00c00744 	movi	r3,29
    6c9c:	10c00226 	beq	r2,r3,6ca8 <__sflush_r+0x1fc>
    6ca0:	00c00584 	movi	r3,22
    6ca4:	10c0031e 	bne	r2,r3,6cb4 <__sflush_r+0x208>
    6ca8:	9c000015 	stw	r16,0(r19)
    6cac:	0005883a 	mov	r2,zero
    6cb0:	003fb306 	br	6b80 <__sflush_r+0xd4>
    6cb4:	88c0030b 	ldhu	r3,12(r17)
    6cb8:	3005883a 	mov	r2,r6
    6cbc:	18c01014 	ori	r3,r3,64
    6cc0:	88c0030d 	sth	r3,12(r17)
    6cc4:	003fae06 	br	6b80 <__sflush_r+0xd4>

00006cc8 <_fflush_r>:
    6cc8:	defffd04 	addi	sp,sp,-12
    6ccc:	dc000115 	stw	r16,4(sp)
    6cd0:	dfc00215 	stw	ra,8(sp)
    6cd4:	2021883a 	mov	r16,r4
    6cd8:	20000226 	beq	r4,zero,6ce4 <_fflush_r+0x1c>
    6cdc:	20800e17 	ldw	r2,56(r4)
    6ce0:	10000c26 	beq	r2,zero,6d14 <_fflush_r+0x4c>
    6ce4:	2880030f 	ldh	r2,12(r5)
    6ce8:	1000051e 	bne	r2,zero,6d00 <_fflush_r+0x38>
    6cec:	0005883a 	mov	r2,zero
    6cf0:	dfc00217 	ldw	ra,8(sp)
    6cf4:	dc000117 	ldw	r16,4(sp)
    6cf8:	dec00304 	addi	sp,sp,12
    6cfc:	f800283a 	ret
    6d00:	8009883a 	mov	r4,r16
    6d04:	dfc00217 	ldw	ra,8(sp)
    6d08:	dc000117 	ldw	r16,4(sp)
    6d0c:	dec00304 	addi	sp,sp,12
    6d10:	0006aac1 	jmpi	6aac <__sflush_r>
    6d14:	d9400015 	stw	r5,0(sp)
    6d18:	00070a40 	call	70a4 <__sinit>
    6d1c:	d9400017 	ldw	r5,0(sp)
    6d20:	003ff006 	br	6ce4 <_fflush_r+0x1c>

00006d24 <fflush>:
    6d24:	20000526 	beq	r4,zero,6d3c <fflush+0x18>
    6d28:	00800074 	movhi	r2,1
    6d2c:	108e6204 	addi	r2,r2,14728
    6d30:	200b883a 	mov	r5,r4
    6d34:	11000017 	ldw	r4,0(r2)
    6d38:	0006cc81 	jmpi	6cc8 <_fflush_r>
    6d3c:	00800074 	movhi	r2,1
    6d40:	108e6104 	addi	r2,r2,14724
    6d44:	11000017 	ldw	r4,0(r2)
    6d48:	01400034 	movhi	r5,0
    6d4c:	295b3204 	addi	r5,r5,27848
    6d50:	0007aa81 	jmpi	7aa8 <_fwalk_reent>

00006d54 <__fp_unlock>:
    6d54:	0005883a 	mov	r2,zero
    6d58:	f800283a 	ret

00006d5c <_cleanup_r>:
    6d5c:	01400074 	movhi	r5,1
    6d60:	296c9804 	addi	r5,r5,-19872
    6d64:	0007aa81 	jmpi	7aa8 <_fwalk_reent>

00006d68 <__sinit.part.1>:
    6d68:	defff704 	addi	sp,sp,-36
    6d6c:	00c00034 	movhi	r3,0
    6d70:	dfc00815 	stw	ra,32(sp)
    6d74:	ddc00715 	stw	r23,28(sp)
    6d78:	dd800615 	stw	r22,24(sp)
    6d7c:	dd400515 	stw	r21,20(sp)
    6d80:	dd000415 	stw	r20,16(sp)
    6d84:	dcc00315 	stw	r19,12(sp)
    6d88:	dc800215 	stw	r18,8(sp)
    6d8c:	dc400115 	stw	r17,4(sp)
    6d90:	dc000015 	stw	r16,0(sp)
    6d94:	18db5704 	addi	r3,r3,27996
    6d98:	24000117 	ldw	r16,4(r4)
    6d9c:	20c00f15 	stw	r3,60(r4)
    6da0:	2080bb04 	addi	r2,r4,748
    6da4:	00c000c4 	movi	r3,3
    6da8:	20c0b915 	stw	r3,740(r4)
    6dac:	2080ba15 	stw	r2,744(r4)
    6db0:	2000b815 	stw	zero,736(r4)
    6db4:	05c00204 	movi	r23,8
    6db8:	00800104 	movi	r2,4
    6dbc:	2025883a 	mov	r18,r4
    6dc0:	b80d883a 	mov	r6,r23
    6dc4:	81001704 	addi	r4,r16,92
    6dc8:	000b883a 	mov	r5,zero
    6dcc:	80000015 	stw	zero,0(r16)
    6dd0:	80000115 	stw	zero,4(r16)
    6dd4:	80000215 	stw	zero,8(r16)
    6dd8:	8080030d 	sth	r2,12(r16)
    6ddc:	80001915 	stw	zero,100(r16)
    6de0:	8000038d 	sth	zero,14(r16)
    6de4:	80000415 	stw	zero,16(r16)
    6de8:	80000515 	stw	zero,20(r16)
    6dec:	80000615 	stw	zero,24(r16)
    6df0:	000818c0 	call	818c <memset>
    6df4:	05800074 	movhi	r22,1
    6df8:	94400217 	ldw	r17,8(r18)
    6dfc:	05400074 	movhi	r21,1
    6e00:	05000074 	movhi	r20,1
    6e04:	04c00074 	movhi	r19,1
    6e08:	b5a62204 	addi	r22,r22,-26488
    6e0c:	ad663904 	addi	r21,r21,-26396
    6e10:	a5265804 	addi	r20,r20,-26272
    6e14:	9ce66f04 	addi	r19,r19,-26180
    6e18:	85800815 	stw	r22,32(r16)
    6e1c:	85400915 	stw	r21,36(r16)
    6e20:	85000a15 	stw	r20,40(r16)
    6e24:	84c00b15 	stw	r19,44(r16)
    6e28:	84000715 	stw	r16,28(r16)
    6e2c:	00800284 	movi	r2,10
    6e30:	8880030d 	sth	r2,12(r17)
    6e34:	00800044 	movi	r2,1
    6e38:	b80d883a 	mov	r6,r23
    6e3c:	89001704 	addi	r4,r17,92
    6e40:	000b883a 	mov	r5,zero
    6e44:	88000015 	stw	zero,0(r17)
    6e48:	88000115 	stw	zero,4(r17)
    6e4c:	88000215 	stw	zero,8(r17)
    6e50:	88001915 	stw	zero,100(r17)
    6e54:	8880038d 	sth	r2,14(r17)
    6e58:	88000415 	stw	zero,16(r17)
    6e5c:	88000515 	stw	zero,20(r17)
    6e60:	88000615 	stw	zero,24(r17)
    6e64:	000818c0 	call	818c <memset>
    6e68:	94000317 	ldw	r16,12(r18)
    6e6c:	00800484 	movi	r2,18
    6e70:	8c400715 	stw	r17,28(r17)
    6e74:	8d800815 	stw	r22,32(r17)
    6e78:	8d400915 	stw	r21,36(r17)
    6e7c:	8d000a15 	stw	r20,40(r17)
    6e80:	8cc00b15 	stw	r19,44(r17)
    6e84:	8080030d 	sth	r2,12(r16)
    6e88:	00800084 	movi	r2,2
    6e8c:	80000015 	stw	zero,0(r16)
    6e90:	80000115 	stw	zero,4(r16)
    6e94:	80000215 	stw	zero,8(r16)
    6e98:	80001915 	stw	zero,100(r16)
    6e9c:	8080038d 	sth	r2,14(r16)
    6ea0:	80000415 	stw	zero,16(r16)
    6ea4:	80000515 	stw	zero,20(r16)
    6ea8:	80000615 	stw	zero,24(r16)
    6eac:	b80d883a 	mov	r6,r23
    6eb0:	000b883a 	mov	r5,zero
    6eb4:	81001704 	addi	r4,r16,92
    6eb8:	000818c0 	call	818c <memset>
    6ebc:	00800044 	movi	r2,1
    6ec0:	84000715 	stw	r16,28(r16)
    6ec4:	85800815 	stw	r22,32(r16)
    6ec8:	85400915 	stw	r21,36(r16)
    6ecc:	85000a15 	stw	r20,40(r16)
    6ed0:	84c00b15 	stw	r19,44(r16)
    6ed4:	90800e15 	stw	r2,56(r18)
    6ed8:	dfc00817 	ldw	ra,32(sp)
    6edc:	ddc00717 	ldw	r23,28(sp)
    6ee0:	dd800617 	ldw	r22,24(sp)
    6ee4:	dd400517 	ldw	r21,20(sp)
    6ee8:	dd000417 	ldw	r20,16(sp)
    6eec:	dcc00317 	ldw	r19,12(sp)
    6ef0:	dc800217 	ldw	r18,8(sp)
    6ef4:	dc400117 	ldw	r17,4(sp)
    6ef8:	dc000017 	ldw	r16,0(sp)
    6efc:	dec00904 	addi	sp,sp,36
    6f00:	f800283a 	ret

00006f04 <__fp_lock>:
    6f04:	0005883a 	mov	r2,zero
    6f08:	f800283a 	ret

00006f0c <__sfmoreglue>:
    6f0c:	defffc04 	addi	sp,sp,-16
    6f10:	dc400115 	stw	r17,4(sp)
    6f14:	2c7fffc4 	addi	r17,r5,-1
    6f18:	8c401a24 	muli	r17,r17,104
    6f1c:	dc800215 	stw	r18,8(sp)
    6f20:	2825883a 	mov	r18,r5
    6f24:	89401d04 	addi	r5,r17,116
    6f28:	dc000015 	stw	r16,0(sp)
    6f2c:	dfc00315 	stw	ra,12(sp)
    6f30:	00023c80 	call	23c8 <_malloc_r>
    6f34:	1021883a 	mov	r16,r2
    6f38:	10000726 	beq	r2,zero,6f58 <__sfmoreglue+0x4c>
    6f3c:	11000304 	addi	r4,r2,12
    6f40:	10000015 	stw	zero,0(r2)
    6f44:	14800115 	stw	r18,4(r2)
    6f48:	11000215 	stw	r4,8(r2)
    6f4c:	89801a04 	addi	r6,r17,104
    6f50:	000b883a 	mov	r5,zero
    6f54:	000818c0 	call	818c <memset>
    6f58:	8005883a 	mov	r2,r16
    6f5c:	dfc00317 	ldw	ra,12(sp)
    6f60:	dc800217 	ldw	r18,8(sp)
    6f64:	dc400117 	ldw	r17,4(sp)
    6f68:	dc000017 	ldw	r16,0(sp)
    6f6c:	dec00404 	addi	sp,sp,16
    6f70:	f800283a 	ret

00006f74 <__sfp>:
    6f74:	defffb04 	addi	sp,sp,-20
    6f78:	dc000015 	stw	r16,0(sp)
    6f7c:	04000074 	movhi	r16,1
    6f80:	840e6104 	addi	r16,r16,14724
    6f84:	dcc00315 	stw	r19,12(sp)
    6f88:	2027883a 	mov	r19,r4
    6f8c:	81000017 	ldw	r4,0(r16)
    6f90:	dfc00415 	stw	ra,16(sp)
    6f94:	dc800215 	stw	r18,8(sp)
    6f98:	20800e17 	ldw	r2,56(r4)
    6f9c:	dc400115 	stw	r17,4(sp)
    6fa0:	1000021e 	bne	r2,zero,6fac <__sfp+0x38>
    6fa4:	0006d680 	call	6d68 <__sinit.part.1>
    6fa8:	81000017 	ldw	r4,0(r16)
    6fac:	2480b804 	addi	r18,r4,736
    6fb0:	047fffc4 	movi	r17,-1
    6fb4:	91000117 	ldw	r4,4(r18)
    6fb8:	94000217 	ldw	r16,8(r18)
    6fbc:	213fffc4 	addi	r4,r4,-1
    6fc0:	20000a16 	blt	r4,zero,6fec <__sfp+0x78>
    6fc4:	8080030f 	ldh	r2,12(r16)
    6fc8:	10000c26 	beq	r2,zero,6ffc <__sfp+0x88>
    6fcc:	80c01d04 	addi	r3,r16,116
    6fd0:	00000206 	br	6fdc <__sfp+0x68>
    6fd4:	18bfe60f 	ldh	r2,-104(r3)
    6fd8:	10000826 	beq	r2,zero,6ffc <__sfp+0x88>
    6fdc:	213fffc4 	addi	r4,r4,-1
    6fe0:	1c3ffd04 	addi	r16,r3,-12
    6fe4:	18c01a04 	addi	r3,r3,104
    6fe8:	247ffa1e 	bne	r4,r17,6fd4 <__sfp+0x60>
    6fec:	90800017 	ldw	r2,0(r18)
    6ff0:	10001d26 	beq	r2,zero,7068 <__sfp+0xf4>
    6ff4:	1025883a 	mov	r18,r2
    6ff8:	003fee06 	br	6fb4 <__sfp+0x40>
    6ffc:	00bfffc4 	movi	r2,-1
    7000:	8080038d 	sth	r2,14(r16)
    7004:	00800044 	movi	r2,1
    7008:	8080030d 	sth	r2,12(r16)
    700c:	80001915 	stw	zero,100(r16)
    7010:	80000015 	stw	zero,0(r16)
    7014:	80000215 	stw	zero,8(r16)
    7018:	80000115 	stw	zero,4(r16)
    701c:	80000415 	stw	zero,16(r16)
    7020:	80000515 	stw	zero,20(r16)
    7024:	80000615 	stw	zero,24(r16)
    7028:	01800204 	movi	r6,8
    702c:	000b883a 	mov	r5,zero
    7030:	81001704 	addi	r4,r16,92
    7034:	000818c0 	call	818c <memset>
    7038:	8005883a 	mov	r2,r16
    703c:	80000c15 	stw	zero,48(r16)
    7040:	80000d15 	stw	zero,52(r16)
    7044:	80001115 	stw	zero,68(r16)
    7048:	80001215 	stw	zero,72(r16)
    704c:	dfc00417 	ldw	ra,16(sp)
    7050:	dcc00317 	ldw	r19,12(sp)
    7054:	dc800217 	ldw	r18,8(sp)
    7058:	dc400117 	ldw	r17,4(sp)
    705c:	dc000017 	ldw	r16,0(sp)
    7060:	dec00504 	addi	sp,sp,20
    7064:	f800283a 	ret
    7068:	01400104 	movi	r5,4
    706c:	9809883a 	mov	r4,r19
    7070:	0006f0c0 	call	6f0c <__sfmoreglue>
    7074:	90800015 	stw	r2,0(r18)
    7078:	103fde1e 	bne	r2,zero,6ff4 <__sfp+0x80>
    707c:	00800304 	movi	r2,12
    7080:	98800015 	stw	r2,0(r19)
    7084:	0005883a 	mov	r2,zero
    7088:	003ff006 	br	704c <__sfp+0xd8>

0000708c <_cleanup>:
    708c:	00800074 	movhi	r2,1
    7090:	108e6104 	addi	r2,r2,14724
    7094:	11000017 	ldw	r4,0(r2)
    7098:	01400074 	movhi	r5,1
    709c:	296c9804 	addi	r5,r5,-19872
    70a0:	0007aa81 	jmpi	7aa8 <_fwalk_reent>

000070a4 <__sinit>:
    70a4:	20800e17 	ldw	r2,56(r4)
    70a8:	10000126 	beq	r2,zero,70b0 <__sinit+0xc>
    70ac:	f800283a 	ret
    70b0:	0006d681 	jmpi	6d68 <__sinit.part.1>

000070b4 <__sfp_lock_acquire>:
    70b4:	f800283a 	ret

000070b8 <__sfp_lock_release>:
    70b8:	f800283a 	ret

000070bc <__sinit_lock_acquire>:
    70bc:	f800283a 	ret

000070c0 <__sinit_lock_release>:
    70c0:	f800283a 	ret

000070c4 <__fp_lock_all>:
    70c4:	00800074 	movhi	r2,1
    70c8:	108e6204 	addi	r2,r2,14728
    70cc:	11000017 	ldw	r4,0(r2)
    70d0:	01400034 	movhi	r5,0
    70d4:	295bc104 	addi	r5,r5,28420
    70d8:	00079e41 	jmpi	79e4 <_fwalk>

000070dc <__fp_unlock_all>:
    70dc:	00800074 	movhi	r2,1
    70e0:	108e6204 	addi	r2,r2,14728
    70e4:	11000017 	ldw	r4,0(r2)
    70e8:	01400034 	movhi	r5,0
    70ec:	295b5504 	addi	r5,r5,27988
    70f0:	00079e41 	jmpi	79e4 <_fwalk>

000070f4 <_malloc_trim_r>:
    70f4:	defffb04 	addi	sp,sp,-20
    70f8:	dcc00315 	stw	r19,12(sp)
    70fc:	04c00074 	movhi	r19,1
    7100:	dc800215 	stw	r18,8(sp)
    7104:	dc400115 	stw	r17,4(sp)
    7108:	dc000015 	stw	r16,0(sp)
    710c:	dfc00415 	stw	ra,16(sp)
    7110:	2821883a 	mov	r16,r5
    7114:	9cc7b404 	addi	r19,r19,7888
    7118:	2025883a 	mov	r18,r4
    711c:	000f2640 	call	f264 <__malloc_lock>
    7120:	98800217 	ldw	r2,8(r19)
    7124:	14400117 	ldw	r17,4(r2)
    7128:	00bfff04 	movi	r2,-4
    712c:	88a2703a 	and	r17,r17,r2
    7130:	8c21c83a 	sub	r16,r17,r16
    7134:	8403fbc4 	addi	r16,r16,4079
    7138:	8020d33a 	srli	r16,r16,12
    713c:	0083ffc4 	movi	r2,4095
    7140:	843fffc4 	addi	r16,r16,-1
    7144:	8020933a 	slli	r16,r16,12
    7148:	1400060e 	bge	r2,r16,7164 <_malloc_trim_r+0x70>
    714c:	000b883a 	mov	r5,zero
    7150:	9009883a 	mov	r4,r18
    7154:	0002d140 	call	2d14 <_sbrk_r>
    7158:	98c00217 	ldw	r3,8(r19)
    715c:	1c47883a 	add	r3,r3,r17
    7160:	10c00a26 	beq	r2,r3,718c <_malloc_trim_r+0x98>
    7164:	9009883a 	mov	r4,r18
    7168:	000f2880 	call	f288 <__malloc_unlock>
    716c:	0005883a 	mov	r2,zero
    7170:	dfc00417 	ldw	ra,16(sp)
    7174:	dcc00317 	ldw	r19,12(sp)
    7178:	dc800217 	ldw	r18,8(sp)
    717c:	dc400117 	ldw	r17,4(sp)
    7180:	dc000017 	ldw	r16,0(sp)
    7184:	dec00504 	addi	sp,sp,20
    7188:	f800283a 	ret
    718c:	040bc83a 	sub	r5,zero,r16
    7190:	9009883a 	mov	r4,r18
    7194:	0002d140 	call	2d14 <_sbrk_r>
    7198:	00ffffc4 	movi	r3,-1
    719c:	10c00d26 	beq	r2,r3,71d4 <_malloc_trim_r+0xe0>
    71a0:	00c00074 	movhi	r3,1
    71a4:	18d54404 	addi	r3,r3,21776
    71a8:	18800017 	ldw	r2,0(r3)
    71ac:	99000217 	ldw	r4,8(r19)
    71b0:	8c23c83a 	sub	r17,r17,r16
    71b4:	8c400054 	ori	r17,r17,1
    71b8:	1421c83a 	sub	r16,r2,r16
    71bc:	24400115 	stw	r17,4(r4)
    71c0:	9009883a 	mov	r4,r18
    71c4:	1c000015 	stw	r16,0(r3)
    71c8:	000f2880 	call	f288 <__malloc_unlock>
    71cc:	00800044 	movi	r2,1
    71d0:	003fe706 	br	7170 <_malloc_trim_r+0x7c>
    71d4:	000b883a 	mov	r5,zero
    71d8:	9009883a 	mov	r4,r18
    71dc:	0002d140 	call	2d14 <_sbrk_r>
    71e0:	99000217 	ldw	r4,8(r19)
    71e4:	014003c4 	movi	r5,15
    71e8:	1107c83a 	sub	r3,r2,r4
    71ec:	28ffdd0e 	bge	r5,r3,7164 <_malloc_trim_r+0x70>
    71f0:	01400074 	movhi	r5,1
    71f4:	294e5f04 	addi	r5,r5,14716
    71f8:	29400017 	ldw	r5,0(r5)
    71fc:	18c00054 	ori	r3,r3,1
    7200:	20c00115 	stw	r3,4(r4)
    7204:	00c00074 	movhi	r3,1
    7208:	1145c83a 	sub	r2,r2,r5
    720c:	18d54404 	addi	r3,r3,21776
    7210:	18800015 	stw	r2,0(r3)
    7214:	003fd306 	br	7164 <_malloc_trim_r+0x70>

00007218 <_free_r>:
    7218:	28004126 	beq	r5,zero,7320 <_free_r+0x108>
    721c:	defffd04 	addi	sp,sp,-12
    7220:	dc400115 	stw	r17,4(sp)
    7224:	dc000015 	stw	r16,0(sp)
    7228:	2023883a 	mov	r17,r4
    722c:	2821883a 	mov	r16,r5
    7230:	dfc00215 	stw	ra,8(sp)
    7234:	000f2640 	call	f264 <__malloc_lock>
    7238:	81ffff17 	ldw	r7,-4(r16)
    723c:	00bfff84 	movi	r2,-2
    7240:	01000074 	movhi	r4,1
    7244:	81bffe04 	addi	r6,r16,-8
    7248:	3884703a 	and	r2,r7,r2
    724c:	2107b404 	addi	r4,r4,7888
    7250:	308b883a 	add	r5,r6,r2
    7254:	2a400117 	ldw	r9,4(r5)
    7258:	22000217 	ldw	r8,8(r4)
    725c:	00ffff04 	movi	r3,-4
    7260:	48c6703a 	and	r3,r9,r3
    7264:	2a005726 	beq	r5,r8,73c4 <_free_r+0x1ac>
    7268:	28c00115 	stw	r3,4(r5)
    726c:	39c0004c 	andi	r7,r7,1
    7270:	3800091e 	bne	r7,zero,7298 <_free_r+0x80>
    7274:	823ffe17 	ldw	r8,-8(r16)
    7278:	22400204 	addi	r9,r4,8
    727c:	320dc83a 	sub	r6,r6,r8
    7280:	31c00217 	ldw	r7,8(r6)
    7284:	1205883a 	add	r2,r2,r8
    7288:	3a406526 	beq	r7,r9,7420 <_free_r+0x208>
    728c:	32000317 	ldw	r8,12(r6)
    7290:	3a000315 	stw	r8,12(r7)
    7294:	41c00215 	stw	r7,8(r8)
    7298:	28cf883a 	add	r7,r5,r3
    729c:	39c00117 	ldw	r7,4(r7)
    72a0:	39c0004c 	andi	r7,r7,1
    72a4:	38003a26 	beq	r7,zero,7390 <_free_r+0x178>
    72a8:	10c00054 	ori	r3,r2,1
    72ac:	30c00115 	stw	r3,4(r6)
    72b0:	3087883a 	add	r3,r6,r2
    72b4:	18800015 	stw	r2,0(r3)
    72b8:	00c07fc4 	movi	r3,511
    72bc:	18801936 	bltu	r3,r2,7324 <_free_r+0x10c>
    72c0:	1004d0fa 	srli	r2,r2,3
    72c4:	01c00044 	movi	r7,1
    72c8:	21400117 	ldw	r5,4(r4)
    72cc:	10c00044 	addi	r3,r2,1
    72d0:	18c7883a 	add	r3,r3,r3
    72d4:	1005d0ba 	srai	r2,r2,2
    72d8:	18c7883a 	add	r3,r3,r3
    72dc:	18c7883a 	add	r3,r3,r3
    72e0:	1907883a 	add	r3,r3,r4
    72e4:	3884983a 	sll	r2,r7,r2
    72e8:	19c00017 	ldw	r7,0(r3)
    72ec:	1a3ffe04 	addi	r8,r3,-8
    72f0:	1144b03a 	or	r2,r2,r5
    72f4:	32000315 	stw	r8,12(r6)
    72f8:	31c00215 	stw	r7,8(r6)
    72fc:	20800115 	stw	r2,4(r4)
    7300:	19800015 	stw	r6,0(r3)
    7304:	39800315 	stw	r6,12(r7)
    7308:	8809883a 	mov	r4,r17
    730c:	dfc00217 	ldw	ra,8(sp)
    7310:	dc400117 	ldw	r17,4(sp)
    7314:	dc000017 	ldw	r16,0(sp)
    7318:	dec00304 	addi	sp,sp,12
    731c:	000f2881 	jmpi	f288 <__malloc_unlock>
    7320:	f800283a 	ret
    7324:	100ad27a 	srli	r5,r2,9
    7328:	00c00104 	movi	r3,4
    732c:	19404a36 	bltu	r3,r5,7458 <_free_r+0x240>
    7330:	100ad1ba 	srli	r5,r2,6
    7334:	28c00e44 	addi	r3,r5,57
    7338:	18c7883a 	add	r3,r3,r3
    733c:	29400e04 	addi	r5,r5,56
    7340:	18c7883a 	add	r3,r3,r3
    7344:	18c7883a 	add	r3,r3,r3
    7348:	1909883a 	add	r4,r3,r4
    734c:	20c00017 	ldw	r3,0(r4)
    7350:	01c00074 	movhi	r7,1
    7354:	213ffe04 	addi	r4,r4,-8
    7358:	39c7b404 	addi	r7,r7,7888
    735c:	20c04426 	beq	r4,r3,7470 <_free_r+0x258>
    7360:	01ffff04 	movi	r7,-4
    7364:	19400117 	ldw	r5,4(r3)
    7368:	29ca703a 	and	r5,r5,r7
    736c:	1140022e 	bgeu	r2,r5,7378 <_free_r+0x160>
    7370:	18c00217 	ldw	r3,8(r3)
    7374:	20fffb1e 	bne	r4,r3,7364 <_free_r+0x14c>
    7378:	19000317 	ldw	r4,12(r3)
    737c:	31000315 	stw	r4,12(r6)
    7380:	30c00215 	stw	r3,8(r6)
    7384:	21800215 	stw	r6,8(r4)
    7388:	19800315 	stw	r6,12(r3)
    738c:	003fde06 	br	7308 <_free_r+0xf0>
    7390:	29c00217 	ldw	r7,8(r5)
    7394:	10c5883a 	add	r2,r2,r3
    7398:	00c00074 	movhi	r3,1
    739c:	18c7b604 	addi	r3,r3,7896
    73a0:	38c03b26 	beq	r7,r3,7490 <_free_r+0x278>
    73a4:	2a000317 	ldw	r8,12(r5)
    73a8:	11400054 	ori	r5,r2,1
    73ac:	3087883a 	add	r3,r6,r2
    73b0:	3a000315 	stw	r8,12(r7)
    73b4:	41c00215 	stw	r7,8(r8)
    73b8:	31400115 	stw	r5,4(r6)
    73bc:	18800015 	stw	r2,0(r3)
    73c0:	003fbd06 	br	72b8 <_free_r+0xa0>
    73c4:	39c0004c 	andi	r7,r7,1
    73c8:	10c5883a 	add	r2,r2,r3
    73cc:	3800071e 	bne	r7,zero,73ec <_free_r+0x1d4>
    73d0:	81fffe17 	ldw	r7,-8(r16)
    73d4:	31cdc83a 	sub	r6,r6,r7
    73d8:	30c00317 	ldw	r3,12(r6)
    73dc:	31400217 	ldw	r5,8(r6)
    73e0:	11c5883a 	add	r2,r2,r7
    73e4:	28c00315 	stw	r3,12(r5)
    73e8:	19400215 	stw	r5,8(r3)
    73ec:	10c00054 	ori	r3,r2,1
    73f0:	30c00115 	stw	r3,4(r6)
    73f4:	00c00074 	movhi	r3,1
    73f8:	18ce6004 	addi	r3,r3,14720
    73fc:	18c00017 	ldw	r3,0(r3)
    7400:	21800215 	stw	r6,8(r4)
    7404:	10ffc036 	bltu	r2,r3,7308 <_free_r+0xf0>
    7408:	00800074 	movhi	r2,1
    740c:	10953604 	addi	r2,r2,21720
    7410:	11400017 	ldw	r5,0(r2)
    7414:	8809883a 	mov	r4,r17
    7418:	00070f40 	call	70f4 <_malloc_trim_r>
    741c:	003fba06 	br	7308 <_free_r+0xf0>
    7420:	28c9883a 	add	r4,r5,r3
    7424:	21000117 	ldw	r4,4(r4)
    7428:	2100004c 	andi	r4,r4,1
    742c:	2000391e 	bne	r4,zero,7514 <_free_r+0x2fc>
    7430:	29c00217 	ldw	r7,8(r5)
    7434:	29000317 	ldw	r4,12(r5)
    7438:	1885883a 	add	r2,r3,r2
    743c:	10c00054 	ori	r3,r2,1
    7440:	39000315 	stw	r4,12(r7)
    7444:	21c00215 	stw	r7,8(r4)
    7448:	30c00115 	stw	r3,4(r6)
    744c:	308d883a 	add	r6,r6,r2
    7450:	30800015 	stw	r2,0(r6)
    7454:	003fac06 	br	7308 <_free_r+0xf0>
    7458:	00c00504 	movi	r3,20
    745c:	19401536 	bltu	r3,r5,74b4 <_free_r+0x29c>
    7460:	28c01704 	addi	r3,r5,92
    7464:	18c7883a 	add	r3,r3,r3
    7468:	294016c4 	addi	r5,r5,91
    746c:	003fb406 	br	7340 <_free_r+0x128>
    7470:	280bd0ba 	srai	r5,r5,2
    7474:	00c00044 	movi	r3,1
    7478:	38800117 	ldw	r2,4(r7)
    747c:	194a983a 	sll	r5,r3,r5
    7480:	2007883a 	mov	r3,r4
    7484:	2884b03a 	or	r2,r5,r2
    7488:	38800115 	stw	r2,4(r7)
    748c:	003fbb06 	br	737c <_free_r+0x164>
    7490:	21800515 	stw	r6,20(r4)
    7494:	21800415 	stw	r6,16(r4)
    7498:	10c00054 	ori	r3,r2,1
    749c:	31c00315 	stw	r7,12(r6)
    74a0:	31c00215 	stw	r7,8(r6)
    74a4:	30c00115 	stw	r3,4(r6)
    74a8:	308d883a 	add	r6,r6,r2
    74ac:	30800015 	stw	r2,0(r6)
    74b0:	003f9506 	br	7308 <_free_r+0xf0>
    74b4:	00c01504 	movi	r3,84
    74b8:	19400536 	bltu	r3,r5,74d0 <_free_r+0x2b8>
    74bc:	100ad33a 	srli	r5,r2,12
    74c0:	28c01bc4 	addi	r3,r5,111
    74c4:	18c7883a 	add	r3,r3,r3
    74c8:	29401b84 	addi	r5,r5,110
    74cc:	003f9c06 	br	7340 <_free_r+0x128>
    74d0:	00c05504 	movi	r3,340
    74d4:	19400536 	bltu	r3,r5,74ec <_free_r+0x2d4>
    74d8:	100ad3fa 	srli	r5,r2,15
    74dc:	28c01e04 	addi	r3,r5,120
    74e0:	18c7883a 	add	r3,r3,r3
    74e4:	29401dc4 	addi	r5,r5,119
    74e8:	003f9506 	br	7340 <_free_r+0x128>
    74ec:	00c15504 	movi	r3,1364
    74f0:	19400536 	bltu	r3,r5,7508 <_free_r+0x2f0>
    74f4:	100ad4ba 	srli	r5,r2,18
    74f8:	28c01f44 	addi	r3,r5,125
    74fc:	18c7883a 	add	r3,r3,r3
    7500:	29401f04 	addi	r5,r5,124
    7504:	003f8e06 	br	7340 <_free_r+0x128>
    7508:	00c03f84 	movi	r3,254
    750c:	01401f84 	movi	r5,126
    7510:	003f8b06 	br	7340 <_free_r+0x128>
    7514:	10c00054 	ori	r3,r2,1
    7518:	30c00115 	stw	r3,4(r6)
    751c:	308d883a 	add	r6,r6,r2
    7520:	30800015 	stw	r2,0(r6)
    7524:	003f7806 	br	7308 <_free_r+0xf0>

00007528 <__sfvwrite_r>:
    7528:	30800217 	ldw	r2,8(r6)
    752c:	10006726 	beq	r2,zero,76cc <__sfvwrite_r+0x1a4>
    7530:	28c0030b 	ldhu	r3,12(r5)
    7534:	defff404 	addi	sp,sp,-48
    7538:	dd400715 	stw	r21,28(sp)
    753c:	dd000615 	stw	r20,24(sp)
    7540:	dc000215 	stw	r16,8(sp)
    7544:	dfc00b15 	stw	ra,44(sp)
    7548:	df000a15 	stw	fp,40(sp)
    754c:	ddc00915 	stw	r23,36(sp)
    7550:	dd800815 	stw	r22,32(sp)
    7554:	dcc00515 	stw	r19,20(sp)
    7558:	dc800415 	stw	r18,16(sp)
    755c:	dc400315 	stw	r17,12(sp)
    7560:	1880020c 	andi	r2,r3,8
    7564:	2821883a 	mov	r16,r5
    7568:	202b883a 	mov	r21,r4
    756c:	3029883a 	mov	r20,r6
    7570:	10002726 	beq	r2,zero,7610 <__sfvwrite_r+0xe8>
    7574:	28800417 	ldw	r2,16(r5)
    7578:	10002526 	beq	r2,zero,7610 <__sfvwrite_r+0xe8>
    757c:	1880008c 	andi	r2,r3,2
    7580:	a4400017 	ldw	r17,0(r20)
    7584:	10002a26 	beq	r2,zero,7630 <__sfvwrite_r+0x108>
    7588:	05a00034 	movhi	r22,32768
    758c:	0027883a 	mov	r19,zero
    7590:	0025883a 	mov	r18,zero
    7594:	b5bf0004 	addi	r22,r22,-1024
    7598:	980d883a 	mov	r6,r19
    759c:	a809883a 	mov	r4,r21
    75a0:	90004626 	beq	r18,zero,76bc <__sfvwrite_r+0x194>
    75a4:	900f883a 	mov	r7,r18
    75a8:	b480022e 	bgeu	r22,r18,75b4 <__sfvwrite_r+0x8c>
    75ac:	01e00034 	movhi	r7,32768
    75b0:	39ff0004 	addi	r7,r7,-1024
    75b4:	80800917 	ldw	r2,36(r16)
    75b8:	81400717 	ldw	r5,28(r16)
    75bc:	103ee83a 	callr	r2
    75c0:	0080570e 	bge	zero,r2,7720 <__sfvwrite_r+0x1f8>
    75c4:	a0c00217 	ldw	r3,8(r20)
    75c8:	98a7883a 	add	r19,r19,r2
    75cc:	90a5c83a 	sub	r18,r18,r2
    75d0:	1885c83a 	sub	r2,r3,r2
    75d4:	a0800215 	stw	r2,8(r20)
    75d8:	103fef1e 	bne	r2,zero,7598 <__sfvwrite_r+0x70>
    75dc:	0005883a 	mov	r2,zero
    75e0:	dfc00b17 	ldw	ra,44(sp)
    75e4:	df000a17 	ldw	fp,40(sp)
    75e8:	ddc00917 	ldw	r23,36(sp)
    75ec:	dd800817 	ldw	r22,32(sp)
    75f0:	dd400717 	ldw	r21,28(sp)
    75f4:	dd000617 	ldw	r20,24(sp)
    75f8:	dcc00517 	ldw	r19,20(sp)
    75fc:	dc800417 	ldw	r18,16(sp)
    7600:	dc400317 	ldw	r17,12(sp)
    7604:	dc000217 	ldw	r16,8(sp)
    7608:	dec00c04 	addi	sp,sp,48
    760c:	f800283a 	ret
    7610:	800b883a 	mov	r5,r16
    7614:	a809883a 	mov	r4,r21
    7618:	00050d00 	call	50d0 <__swsetup_r>
    761c:	1000eb1e 	bne	r2,zero,79cc <__sfvwrite_r+0x4a4>
    7620:	80c0030b 	ldhu	r3,12(r16)
    7624:	a4400017 	ldw	r17,0(r20)
    7628:	1880008c 	andi	r2,r3,2
    762c:	103fd61e 	bne	r2,zero,7588 <__sfvwrite_r+0x60>
    7630:	1880004c 	andi	r2,r3,1
    7634:	10003f1e 	bne	r2,zero,7734 <__sfvwrite_r+0x20c>
    7638:	0039883a 	mov	fp,zero
    763c:	0025883a 	mov	r18,zero
    7640:	90001a26 	beq	r18,zero,76ac <__sfvwrite_r+0x184>
    7644:	1880800c 	andi	r2,r3,512
    7648:	84c00217 	ldw	r19,8(r16)
    764c:	10002126 	beq	r2,zero,76d4 <__sfvwrite_r+0x1ac>
    7650:	982f883a 	mov	r23,r19
    7654:	94c09336 	bltu	r18,r19,78a4 <__sfvwrite_r+0x37c>
    7658:	1881200c 	andi	r2,r3,1152
    765c:	10009e1e 	bne	r2,zero,78d8 <__sfvwrite_r+0x3b0>
    7660:	81000017 	ldw	r4,0(r16)
    7664:	b80d883a 	mov	r6,r23
    7668:	e00b883a 	mov	r5,fp
    766c:	00080300 	call	8030 <memmove>
    7670:	80c00217 	ldw	r3,8(r16)
    7674:	81000017 	ldw	r4,0(r16)
    7678:	9005883a 	mov	r2,r18
    767c:	1ce7c83a 	sub	r19,r3,r19
    7680:	25cf883a 	add	r7,r4,r23
    7684:	84c00215 	stw	r19,8(r16)
    7688:	81c00015 	stw	r7,0(r16)
    768c:	a0c00217 	ldw	r3,8(r20)
    7690:	e0b9883a 	add	fp,fp,r2
    7694:	90a5c83a 	sub	r18,r18,r2
    7698:	18a7c83a 	sub	r19,r3,r2
    769c:	a4c00215 	stw	r19,8(r20)
    76a0:	983fce26 	beq	r19,zero,75dc <__sfvwrite_r+0xb4>
    76a4:	80c0030b 	ldhu	r3,12(r16)
    76a8:	903fe61e 	bne	r18,zero,7644 <__sfvwrite_r+0x11c>
    76ac:	8f000017 	ldw	fp,0(r17)
    76b0:	8c800117 	ldw	r18,4(r17)
    76b4:	8c400204 	addi	r17,r17,8
    76b8:	003fe106 	br	7640 <__sfvwrite_r+0x118>
    76bc:	8cc00017 	ldw	r19,0(r17)
    76c0:	8c800117 	ldw	r18,4(r17)
    76c4:	8c400204 	addi	r17,r17,8
    76c8:	003fb306 	br	7598 <__sfvwrite_r+0x70>
    76cc:	0005883a 	mov	r2,zero
    76d0:	f800283a 	ret
    76d4:	81000017 	ldw	r4,0(r16)
    76d8:	80800417 	ldw	r2,16(r16)
    76dc:	11005736 	bltu	r2,r4,783c <__sfvwrite_r+0x314>
    76e0:	85c00517 	ldw	r23,20(r16)
    76e4:	95c05536 	bltu	r18,r23,783c <__sfvwrite_r+0x314>
    76e8:	00a00034 	movhi	r2,32768
    76ec:	10bfffc4 	addi	r2,r2,-1
    76f0:	9009883a 	mov	r4,r18
    76f4:	1480012e 	bgeu	r2,r18,76fc <__sfvwrite_r+0x1d4>
    76f8:	1009883a 	mov	r4,r2
    76fc:	b80b883a 	mov	r5,r23
    7700:	000c4cc0 	call	c4cc <__divsi3>
    7704:	15cf383a 	mul	r7,r2,r23
    7708:	81400717 	ldw	r5,28(r16)
    770c:	80800917 	ldw	r2,36(r16)
    7710:	e00d883a 	mov	r6,fp
    7714:	a809883a 	mov	r4,r21
    7718:	103ee83a 	callr	r2
    771c:	00bfdb16 	blt	zero,r2,768c <__sfvwrite_r+0x164>
    7720:	8080030b 	ldhu	r2,12(r16)
    7724:	10801014 	ori	r2,r2,64
    7728:	8080030d 	sth	r2,12(r16)
    772c:	00bfffc4 	movi	r2,-1
    7730:	003fab06 	br	75e0 <__sfvwrite_r+0xb8>
    7734:	0027883a 	mov	r19,zero
    7738:	0011883a 	mov	r8,zero
    773c:	0039883a 	mov	fp,zero
    7740:	0025883a 	mov	r18,zero
    7744:	90001f26 	beq	r18,zero,77c4 <__sfvwrite_r+0x29c>
    7748:	40005a26 	beq	r8,zero,78b4 <__sfvwrite_r+0x38c>
    774c:	982d883a 	mov	r22,r19
    7750:	94c0012e 	bgeu	r18,r19,7758 <__sfvwrite_r+0x230>
    7754:	902d883a 	mov	r22,r18
    7758:	81000017 	ldw	r4,0(r16)
    775c:	80800417 	ldw	r2,16(r16)
    7760:	b02f883a 	mov	r23,r22
    7764:	81c00517 	ldw	r7,20(r16)
    7768:	1100032e 	bgeu	r2,r4,7778 <__sfvwrite_r+0x250>
    776c:	80c00217 	ldw	r3,8(r16)
    7770:	38c7883a 	add	r3,r7,r3
    7774:	1d801816 	blt	r3,r22,77d8 <__sfvwrite_r+0x2b0>
    7778:	b1c03e16 	blt	r22,r7,7874 <__sfvwrite_r+0x34c>
    777c:	80800917 	ldw	r2,36(r16)
    7780:	81400717 	ldw	r5,28(r16)
    7784:	e00d883a 	mov	r6,fp
    7788:	da000115 	stw	r8,4(sp)
    778c:	a809883a 	mov	r4,r21
    7790:	103ee83a 	callr	r2
    7794:	102f883a 	mov	r23,r2
    7798:	da000117 	ldw	r8,4(sp)
    779c:	00bfe00e 	bge	zero,r2,7720 <__sfvwrite_r+0x1f8>
    77a0:	9de7c83a 	sub	r19,r19,r23
    77a4:	98001f26 	beq	r19,zero,7824 <__sfvwrite_r+0x2fc>
    77a8:	a0800217 	ldw	r2,8(r20)
    77ac:	e5f9883a 	add	fp,fp,r23
    77b0:	95e5c83a 	sub	r18,r18,r23
    77b4:	15efc83a 	sub	r23,r2,r23
    77b8:	a5c00215 	stw	r23,8(r20)
    77bc:	b83f8726 	beq	r23,zero,75dc <__sfvwrite_r+0xb4>
    77c0:	903fe11e 	bne	r18,zero,7748 <__sfvwrite_r+0x220>
    77c4:	8f000017 	ldw	fp,0(r17)
    77c8:	8c800117 	ldw	r18,4(r17)
    77cc:	0011883a 	mov	r8,zero
    77d0:	8c400204 	addi	r17,r17,8
    77d4:	003fdb06 	br	7744 <__sfvwrite_r+0x21c>
    77d8:	180d883a 	mov	r6,r3
    77dc:	e00b883a 	mov	r5,fp
    77e0:	da000115 	stw	r8,4(sp)
    77e4:	d8c00015 	stw	r3,0(sp)
    77e8:	00080300 	call	8030 <memmove>
    77ec:	d8c00017 	ldw	r3,0(sp)
    77f0:	80800017 	ldw	r2,0(r16)
    77f4:	800b883a 	mov	r5,r16
    77f8:	a809883a 	mov	r4,r21
    77fc:	10c5883a 	add	r2,r2,r3
    7800:	80800015 	stw	r2,0(r16)
    7804:	d8c00015 	stw	r3,0(sp)
    7808:	0006cc80 	call	6cc8 <_fflush_r>
    780c:	d8c00017 	ldw	r3,0(sp)
    7810:	da000117 	ldw	r8,4(sp)
    7814:	103fc21e 	bne	r2,zero,7720 <__sfvwrite_r+0x1f8>
    7818:	182f883a 	mov	r23,r3
    781c:	9de7c83a 	sub	r19,r19,r23
    7820:	983fe11e 	bne	r19,zero,77a8 <__sfvwrite_r+0x280>
    7824:	800b883a 	mov	r5,r16
    7828:	a809883a 	mov	r4,r21
    782c:	0006cc80 	call	6cc8 <_fflush_r>
    7830:	103fbb1e 	bne	r2,zero,7720 <__sfvwrite_r+0x1f8>
    7834:	0011883a 	mov	r8,zero
    7838:	003fdb06 	br	77a8 <__sfvwrite_r+0x280>
    783c:	94c0012e 	bgeu	r18,r19,7844 <__sfvwrite_r+0x31c>
    7840:	9027883a 	mov	r19,r18
    7844:	980d883a 	mov	r6,r19
    7848:	e00b883a 	mov	r5,fp
    784c:	00080300 	call	8030 <memmove>
    7850:	80800217 	ldw	r2,8(r16)
    7854:	80c00017 	ldw	r3,0(r16)
    7858:	14c5c83a 	sub	r2,r2,r19
    785c:	1cc7883a 	add	r3,r3,r19
    7860:	80800215 	stw	r2,8(r16)
    7864:	80c00015 	stw	r3,0(r16)
    7868:	10004326 	beq	r2,zero,7978 <__sfvwrite_r+0x450>
    786c:	9805883a 	mov	r2,r19
    7870:	003f8606 	br	768c <__sfvwrite_r+0x164>
    7874:	b00d883a 	mov	r6,r22
    7878:	e00b883a 	mov	r5,fp
    787c:	da000115 	stw	r8,4(sp)
    7880:	00080300 	call	8030 <memmove>
    7884:	80800217 	ldw	r2,8(r16)
    7888:	80c00017 	ldw	r3,0(r16)
    788c:	da000117 	ldw	r8,4(sp)
    7890:	1585c83a 	sub	r2,r2,r22
    7894:	1dad883a 	add	r22,r3,r22
    7898:	80800215 	stw	r2,8(r16)
    789c:	85800015 	stw	r22,0(r16)
    78a0:	003fbf06 	br	77a0 <__sfvwrite_r+0x278>
    78a4:	81000017 	ldw	r4,0(r16)
    78a8:	9027883a 	mov	r19,r18
    78ac:	902f883a 	mov	r23,r18
    78b0:	003f6c06 	br	7664 <__sfvwrite_r+0x13c>
    78b4:	900d883a 	mov	r6,r18
    78b8:	01400284 	movi	r5,10
    78bc:	e009883a 	mov	r4,fp
    78c0:	0007e040 	call	7e04 <memchr>
    78c4:	10003e26 	beq	r2,zero,79c0 <__sfvwrite_r+0x498>
    78c8:	10800044 	addi	r2,r2,1
    78cc:	1727c83a 	sub	r19,r2,fp
    78d0:	02000044 	movi	r8,1
    78d4:	003f9d06 	br	774c <__sfvwrite_r+0x224>
    78d8:	80800517 	ldw	r2,20(r16)
    78dc:	81400417 	ldw	r5,16(r16)
    78e0:	81c00017 	ldw	r7,0(r16)
    78e4:	10a7883a 	add	r19,r2,r2
    78e8:	9885883a 	add	r2,r19,r2
    78ec:	1026d7fa 	srli	r19,r2,31
    78f0:	396dc83a 	sub	r22,r7,r5
    78f4:	b1000044 	addi	r4,r22,1
    78f8:	9885883a 	add	r2,r19,r2
    78fc:	1027d07a 	srai	r19,r2,1
    7900:	2485883a 	add	r2,r4,r18
    7904:	980d883a 	mov	r6,r19
    7908:	9880022e 	bgeu	r19,r2,7914 <__sfvwrite_r+0x3ec>
    790c:	1027883a 	mov	r19,r2
    7910:	100d883a 	mov	r6,r2
    7914:	18c1000c 	andi	r3,r3,1024
    7918:	18001c26 	beq	r3,zero,798c <__sfvwrite_r+0x464>
    791c:	300b883a 	mov	r5,r6
    7920:	a809883a 	mov	r4,r21
    7924:	00023c80 	call	23c8 <_malloc_r>
    7928:	102f883a 	mov	r23,r2
    792c:	10002926 	beq	r2,zero,79d4 <__sfvwrite_r+0x4ac>
    7930:	81400417 	ldw	r5,16(r16)
    7934:	b00d883a 	mov	r6,r22
    7938:	1009883a 	mov	r4,r2
    793c:	0007ee80 	call	7ee8 <memcpy>
    7940:	8080030b 	ldhu	r2,12(r16)
    7944:	00fedfc4 	movi	r3,-1153
    7948:	10c4703a 	and	r2,r2,r3
    794c:	10802014 	ori	r2,r2,128
    7950:	8080030d 	sth	r2,12(r16)
    7954:	bd89883a 	add	r4,r23,r22
    7958:	9d8fc83a 	sub	r7,r19,r22
    795c:	85c00415 	stw	r23,16(r16)
    7960:	84c00515 	stw	r19,20(r16)
    7964:	81000015 	stw	r4,0(r16)
    7968:	9027883a 	mov	r19,r18
    796c:	81c00215 	stw	r7,8(r16)
    7970:	902f883a 	mov	r23,r18
    7974:	003f3b06 	br	7664 <__sfvwrite_r+0x13c>
    7978:	800b883a 	mov	r5,r16
    797c:	a809883a 	mov	r4,r21
    7980:	0006cc80 	call	6cc8 <_fflush_r>
    7984:	103fb926 	beq	r2,zero,786c <__sfvwrite_r+0x344>
    7988:	003f6506 	br	7720 <__sfvwrite_r+0x1f8>
    798c:	a809883a 	mov	r4,r21
    7990:	00092b00 	call	92b0 <_realloc_r>
    7994:	102f883a 	mov	r23,r2
    7998:	103fee1e 	bne	r2,zero,7954 <__sfvwrite_r+0x42c>
    799c:	81400417 	ldw	r5,16(r16)
    79a0:	a809883a 	mov	r4,r21
    79a4:	00072180 	call	7218 <_free_r>
    79a8:	8080030b 	ldhu	r2,12(r16)
    79ac:	00ffdfc4 	movi	r3,-129
    79b0:	1884703a 	and	r2,r3,r2
    79b4:	00c00304 	movi	r3,12
    79b8:	a8c00015 	stw	r3,0(r21)
    79bc:	003f5906 	br	7724 <__sfvwrite_r+0x1fc>
    79c0:	94c00044 	addi	r19,r18,1
    79c4:	02000044 	movi	r8,1
    79c8:	003f6006 	br	774c <__sfvwrite_r+0x224>
    79cc:	00bfffc4 	movi	r2,-1
    79d0:	003f0306 	br	75e0 <__sfvwrite_r+0xb8>
    79d4:	00800304 	movi	r2,12
    79d8:	a8800015 	stw	r2,0(r21)
    79dc:	8080030b 	ldhu	r2,12(r16)
    79e0:	003f5006 	br	7724 <__sfvwrite_r+0x1fc>

000079e4 <_fwalk>:
    79e4:	defff704 	addi	sp,sp,-36
    79e8:	dd000415 	stw	r20,16(sp)
    79ec:	dfc00815 	stw	ra,32(sp)
    79f0:	ddc00715 	stw	r23,28(sp)
    79f4:	dd800615 	stw	r22,24(sp)
    79f8:	dd400515 	stw	r21,20(sp)
    79fc:	dcc00315 	stw	r19,12(sp)
    7a00:	dc800215 	stw	r18,8(sp)
    7a04:	dc400115 	stw	r17,4(sp)
    7a08:	dc000015 	stw	r16,0(sp)
    7a0c:	2500b804 	addi	r20,r4,736
    7a10:	a0002326 	beq	r20,zero,7aa0 <_fwalk+0xbc>
    7a14:	282b883a 	mov	r21,r5
    7a18:	002f883a 	mov	r23,zero
    7a1c:	05800044 	movi	r22,1
    7a20:	04ffffc4 	movi	r19,-1
    7a24:	a4400117 	ldw	r17,4(r20)
    7a28:	a4800217 	ldw	r18,8(r20)
    7a2c:	8c7fffc4 	addi	r17,r17,-1
    7a30:	88000d16 	blt	r17,zero,7a68 <_fwalk+0x84>
    7a34:	94000304 	addi	r16,r18,12
    7a38:	94800384 	addi	r18,r18,14
    7a3c:	8080000b 	ldhu	r2,0(r16)
    7a40:	8c7fffc4 	addi	r17,r17,-1
    7a44:	813ffd04 	addi	r4,r16,-12
    7a48:	b080042e 	bgeu	r22,r2,7a5c <_fwalk+0x78>
    7a4c:	9080000f 	ldh	r2,0(r18)
    7a50:	14c00226 	beq	r2,r19,7a5c <_fwalk+0x78>
    7a54:	a83ee83a 	callr	r21
    7a58:	b8aeb03a 	or	r23,r23,r2
    7a5c:	84001a04 	addi	r16,r16,104
    7a60:	94801a04 	addi	r18,r18,104
    7a64:	8cfff51e 	bne	r17,r19,7a3c <_fwalk+0x58>
    7a68:	a5000017 	ldw	r20,0(r20)
    7a6c:	a03fed1e 	bne	r20,zero,7a24 <_fwalk+0x40>
    7a70:	b805883a 	mov	r2,r23
    7a74:	dfc00817 	ldw	ra,32(sp)
    7a78:	ddc00717 	ldw	r23,28(sp)
    7a7c:	dd800617 	ldw	r22,24(sp)
    7a80:	dd400517 	ldw	r21,20(sp)
    7a84:	dd000417 	ldw	r20,16(sp)
    7a88:	dcc00317 	ldw	r19,12(sp)
    7a8c:	dc800217 	ldw	r18,8(sp)
    7a90:	dc400117 	ldw	r17,4(sp)
    7a94:	dc000017 	ldw	r16,0(sp)
    7a98:	dec00904 	addi	sp,sp,36
    7a9c:	f800283a 	ret
    7aa0:	002f883a 	mov	r23,zero
    7aa4:	003ff206 	br	7a70 <_fwalk+0x8c>

00007aa8 <_fwalk_reent>:
    7aa8:	defff704 	addi	sp,sp,-36
    7aac:	dd000415 	stw	r20,16(sp)
    7ab0:	dfc00815 	stw	ra,32(sp)
    7ab4:	ddc00715 	stw	r23,28(sp)
    7ab8:	dd800615 	stw	r22,24(sp)
    7abc:	dd400515 	stw	r21,20(sp)
    7ac0:	dcc00315 	stw	r19,12(sp)
    7ac4:	dc800215 	stw	r18,8(sp)
    7ac8:	dc400115 	stw	r17,4(sp)
    7acc:	dc000015 	stw	r16,0(sp)
    7ad0:	2500b804 	addi	r20,r4,736
    7ad4:	a0002326 	beq	r20,zero,7b64 <_fwalk_reent+0xbc>
    7ad8:	282b883a 	mov	r21,r5
    7adc:	2027883a 	mov	r19,r4
    7ae0:	002f883a 	mov	r23,zero
    7ae4:	05800044 	movi	r22,1
    7ae8:	04bfffc4 	movi	r18,-1
    7aec:	a4400117 	ldw	r17,4(r20)
    7af0:	a4000217 	ldw	r16,8(r20)
    7af4:	8c7fffc4 	addi	r17,r17,-1
    7af8:	88000c16 	blt	r17,zero,7b2c <_fwalk_reent+0x84>
    7afc:	84000304 	addi	r16,r16,12
    7b00:	8080000b 	ldhu	r2,0(r16)
    7b04:	8c7fffc4 	addi	r17,r17,-1
    7b08:	817ffd04 	addi	r5,r16,-12
    7b0c:	b080052e 	bgeu	r22,r2,7b24 <_fwalk_reent+0x7c>
    7b10:	8080008f 	ldh	r2,2(r16)
    7b14:	9809883a 	mov	r4,r19
    7b18:	14800226 	beq	r2,r18,7b24 <_fwalk_reent+0x7c>
    7b1c:	a83ee83a 	callr	r21
    7b20:	b8aeb03a 	or	r23,r23,r2
    7b24:	84001a04 	addi	r16,r16,104
    7b28:	8cbff51e 	bne	r17,r18,7b00 <_fwalk_reent+0x58>
    7b2c:	a5000017 	ldw	r20,0(r20)
    7b30:	a03fee1e 	bne	r20,zero,7aec <_fwalk_reent+0x44>
    7b34:	b805883a 	mov	r2,r23
    7b38:	dfc00817 	ldw	ra,32(sp)
    7b3c:	ddc00717 	ldw	r23,28(sp)
    7b40:	dd800617 	ldw	r22,24(sp)
    7b44:	dd400517 	ldw	r21,20(sp)
    7b48:	dd000417 	ldw	r20,16(sp)
    7b4c:	dcc00317 	ldw	r19,12(sp)
    7b50:	dc800217 	ldw	r18,8(sp)
    7b54:	dc400117 	ldw	r17,4(sp)
    7b58:	dc000017 	ldw	r16,0(sp)
    7b5c:	dec00904 	addi	sp,sp,36
    7b60:	f800283a 	ret
    7b64:	002f883a 	mov	r23,zero
    7b68:	003ff206 	br	7b34 <_fwalk_reent+0x8c>

00007b6c <_setlocale_r>:
    7b6c:	30001b26 	beq	r6,zero,7bdc <_setlocale_r+0x70>
    7b70:	01400074 	movhi	r5,1
    7b74:	defffe04 	addi	sp,sp,-8
    7b78:	29471504 	addi	r5,r5,7252
    7b7c:	3009883a 	mov	r4,r6
    7b80:	dc000015 	stw	r16,0(sp)
    7b84:	dfc00115 	stw	ra,4(sp)
    7b88:	3021883a 	mov	r16,r6
    7b8c:	00099c40 	call	99c4 <strcmp>
    7b90:	1000061e 	bne	r2,zero,7bac <_setlocale_r+0x40>
    7b94:	00800074 	movhi	r2,1
    7b98:	10871404 	addi	r2,r2,7248
    7b9c:	dfc00117 	ldw	ra,4(sp)
    7ba0:	dc000017 	ldw	r16,0(sp)
    7ba4:	dec00204 	addi	sp,sp,8
    7ba8:	f800283a 	ret
    7bac:	01400074 	movhi	r5,1
    7bb0:	29471404 	addi	r5,r5,7248
    7bb4:	8009883a 	mov	r4,r16
    7bb8:	00099c40 	call	99c4 <strcmp>
    7bbc:	103ff526 	beq	r2,zero,7b94 <_setlocale_r+0x28>
    7bc0:	01400074 	movhi	r5,1
    7bc4:	2946ff04 	addi	r5,r5,7164
    7bc8:	8009883a 	mov	r4,r16
    7bcc:	00099c40 	call	99c4 <strcmp>
    7bd0:	103ff026 	beq	r2,zero,7b94 <_setlocale_r+0x28>
    7bd4:	0005883a 	mov	r2,zero
    7bd8:	003ff006 	br	7b9c <_setlocale_r+0x30>
    7bdc:	00800074 	movhi	r2,1
    7be0:	10871404 	addi	r2,r2,7248
    7be4:	f800283a 	ret

00007be8 <__locale_charset>:
    7be8:	00800074 	movhi	r2,1
    7bec:	1089c704 	addi	r2,r2,10012
    7bf0:	f800283a 	ret

00007bf4 <__locale_mb_cur_max>:
    7bf4:	00800074 	movhi	r2,1
    7bf8:	108e6304 	addi	r2,r2,14732
    7bfc:	10800017 	ldw	r2,0(r2)
    7c00:	f800283a 	ret

00007c04 <__locale_msgcharset>:
    7c04:	00800074 	movhi	r2,1
    7c08:	1089bf04 	addi	r2,r2,9980
    7c0c:	f800283a 	ret

00007c10 <__locale_cjk_lang>:
    7c10:	0005883a 	mov	r2,zero
    7c14:	f800283a 	ret

00007c18 <_localeconv_r>:
    7c18:	00800074 	movhi	r2,1
    7c1c:	1089cf04 	addi	r2,r2,10044
    7c20:	f800283a 	ret

00007c24 <setlocale>:
    7c24:	00800074 	movhi	r2,1
    7c28:	108e6204 	addi	r2,r2,14728
    7c2c:	280d883a 	mov	r6,r5
    7c30:	200b883a 	mov	r5,r4
    7c34:	11000017 	ldw	r4,0(r2)
    7c38:	0007b6c1 	jmpi	7b6c <_setlocale_r>

00007c3c <localeconv>:
    7c3c:	00800074 	movhi	r2,1
    7c40:	1089cf04 	addi	r2,r2,10044
    7c44:	f800283a 	ret

00007c48 <__smakebuf_r>:
    7c48:	2880030b 	ldhu	r2,12(r5)
    7c4c:	10c0008c 	andi	r3,r2,2
    7c50:	1800411e 	bne	r3,zero,7d58 <__smakebuf_r+0x110>
    7c54:	deffec04 	addi	sp,sp,-80
    7c58:	dc000f15 	stw	r16,60(sp)
    7c5c:	2821883a 	mov	r16,r5
    7c60:	2940038f 	ldh	r5,14(r5)
    7c64:	dc401015 	stw	r17,64(sp)
    7c68:	dfc01315 	stw	ra,76(sp)
    7c6c:	dcc01215 	stw	r19,72(sp)
    7c70:	dc801115 	stw	r18,68(sp)
    7c74:	2023883a 	mov	r17,r4
    7c78:	28001c16 	blt	r5,zero,7cec <__smakebuf_r+0xa4>
    7c7c:	d80d883a 	mov	r6,sp
    7c80:	000b56c0 	call	b56c <_fstat_r>
    7c84:	10001816 	blt	r2,zero,7ce8 <__smakebuf_r+0xa0>
    7c88:	d8800117 	ldw	r2,4(sp)
    7c8c:	00e00014 	movui	r3,32768
    7c90:	10bc000c 	andi	r2,r2,61440
    7c94:	14c80020 	cmpeqi	r19,r2,8192
    7c98:	10c03726 	beq	r2,r3,7d78 <__smakebuf_r+0x130>
    7c9c:	80c0030b 	ldhu	r3,12(r16)
    7ca0:	18c20014 	ori	r3,r3,2048
    7ca4:	80c0030d 	sth	r3,12(r16)
    7ca8:	00c80004 	movi	r3,8192
    7cac:	10c0521e 	bne	r2,r3,7df8 <__smakebuf_r+0x1b0>
    7cb0:	8140038f 	ldh	r5,14(r16)
    7cb4:	8809883a 	mov	r4,r17
    7cb8:	000b5c80 	call	b5c8 <_isatty_r>
    7cbc:	10004c26 	beq	r2,zero,7df0 <__smakebuf_r+0x1a8>
    7cc0:	8080030b 	ldhu	r2,12(r16)
    7cc4:	80c010c4 	addi	r3,r16,67
    7cc8:	80c00015 	stw	r3,0(r16)
    7ccc:	10800054 	ori	r2,r2,1
    7cd0:	8080030d 	sth	r2,12(r16)
    7cd4:	00800044 	movi	r2,1
    7cd8:	80c00415 	stw	r3,16(r16)
    7cdc:	80800515 	stw	r2,20(r16)
    7ce0:	04810004 	movi	r18,1024
    7ce4:	00000706 	br	7d04 <__smakebuf_r+0xbc>
    7ce8:	8080030b 	ldhu	r2,12(r16)
    7cec:	10c0200c 	andi	r3,r2,128
    7cf0:	18001f1e 	bne	r3,zero,7d70 <__smakebuf_r+0x128>
    7cf4:	04810004 	movi	r18,1024
    7cf8:	10820014 	ori	r2,r2,2048
    7cfc:	8080030d 	sth	r2,12(r16)
    7d00:	0027883a 	mov	r19,zero
    7d04:	900b883a 	mov	r5,r18
    7d08:	8809883a 	mov	r4,r17
    7d0c:	00023c80 	call	23c8 <_malloc_r>
    7d10:	10002c26 	beq	r2,zero,7dc4 <__smakebuf_r+0x17c>
    7d14:	80c0030b 	ldhu	r3,12(r16)
    7d18:	01000034 	movhi	r4,0
    7d1c:	211b5704 	addi	r4,r4,27996
    7d20:	89000f15 	stw	r4,60(r17)
    7d24:	18c02014 	ori	r3,r3,128
    7d28:	80c0030d 	sth	r3,12(r16)
    7d2c:	80800015 	stw	r2,0(r16)
    7d30:	80800415 	stw	r2,16(r16)
    7d34:	84800515 	stw	r18,20(r16)
    7d38:	98001a1e 	bne	r19,zero,7da4 <__smakebuf_r+0x15c>
    7d3c:	dfc01317 	ldw	ra,76(sp)
    7d40:	dcc01217 	ldw	r19,72(sp)
    7d44:	dc801117 	ldw	r18,68(sp)
    7d48:	dc401017 	ldw	r17,64(sp)
    7d4c:	dc000f17 	ldw	r16,60(sp)
    7d50:	dec01404 	addi	sp,sp,80
    7d54:	f800283a 	ret
    7d58:	288010c4 	addi	r2,r5,67
    7d5c:	28800015 	stw	r2,0(r5)
    7d60:	28800415 	stw	r2,16(r5)
    7d64:	00800044 	movi	r2,1
    7d68:	28800515 	stw	r2,20(r5)
    7d6c:	f800283a 	ret
    7d70:	04801004 	movi	r18,64
    7d74:	003fe006 	br	7cf8 <__smakebuf_r+0xb0>
    7d78:	81000a17 	ldw	r4,40(r16)
    7d7c:	00c00074 	movhi	r3,1
    7d80:	18e65804 	addi	r3,r3,-26272
    7d84:	20ffc51e 	bne	r4,r3,7c9c <__smakebuf_r+0x54>
    7d88:	8080030b 	ldhu	r2,12(r16)
    7d8c:	04810004 	movi	r18,1024
    7d90:	84801315 	stw	r18,76(r16)
    7d94:	1484b03a 	or	r2,r2,r18
    7d98:	8080030d 	sth	r2,12(r16)
    7d9c:	0027883a 	mov	r19,zero
    7da0:	003fd806 	br	7d04 <__smakebuf_r+0xbc>
    7da4:	8140038f 	ldh	r5,14(r16)
    7da8:	8809883a 	mov	r4,r17
    7dac:	000b5c80 	call	b5c8 <_isatty_r>
    7db0:	103fe226 	beq	r2,zero,7d3c <__smakebuf_r+0xf4>
    7db4:	8080030b 	ldhu	r2,12(r16)
    7db8:	10800054 	ori	r2,r2,1
    7dbc:	8080030d 	sth	r2,12(r16)
    7dc0:	003fde06 	br	7d3c <__smakebuf_r+0xf4>
    7dc4:	8080030b 	ldhu	r2,12(r16)
    7dc8:	10c0800c 	andi	r3,r2,512
    7dcc:	183fdb1e 	bne	r3,zero,7d3c <__smakebuf_r+0xf4>
    7dd0:	10800094 	ori	r2,r2,2
    7dd4:	80c010c4 	addi	r3,r16,67
    7dd8:	8080030d 	sth	r2,12(r16)
    7ddc:	00800044 	movi	r2,1
    7de0:	80c00015 	stw	r3,0(r16)
    7de4:	80c00415 	stw	r3,16(r16)
    7de8:	80800515 	stw	r2,20(r16)
    7dec:	003fd306 	br	7d3c <__smakebuf_r+0xf4>
    7df0:	04810004 	movi	r18,1024
    7df4:	003fc306 	br	7d04 <__smakebuf_r+0xbc>
    7df8:	0027883a 	mov	r19,zero
    7dfc:	04810004 	movi	r18,1024
    7e00:	003fc006 	br	7d04 <__smakebuf_r+0xbc>

00007e04 <memchr>:
    7e04:	208000cc 	andi	r2,r4,3
    7e08:	280f883a 	mov	r7,r5
    7e0c:	10003426 	beq	r2,zero,7ee0 <memchr+0xdc>
    7e10:	30bfffc4 	addi	r2,r6,-1
    7e14:	30001a26 	beq	r6,zero,7e80 <memchr+0x7c>
    7e18:	20c00003 	ldbu	r3,0(r4)
    7e1c:	29803fcc 	andi	r6,r5,255
    7e20:	30c0051e 	bne	r6,r3,7e38 <memchr+0x34>
    7e24:	00001806 	br	7e88 <memchr+0x84>
    7e28:	10001526 	beq	r2,zero,7e80 <memchr+0x7c>
    7e2c:	20c00003 	ldbu	r3,0(r4)
    7e30:	10bfffc4 	addi	r2,r2,-1
    7e34:	30c01426 	beq	r6,r3,7e88 <memchr+0x84>
    7e38:	21000044 	addi	r4,r4,1
    7e3c:	20c000cc 	andi	r3,r4,3
    7e40:	183ff91e 	bne	r3,zero,7e28 <memchr+0x24>
    7e44:	020000c4 	movi	r8,3
    7e48:	40801136 	bltu	r8,r2,7e90 <memchr+0x8c>
    7e4c:	10000c26 	beq	r2,zero,7e80 <memchr+0x7c>
    7e50:	20c00003 	ldbu	r3,0(r4)
    7e54:	29403fcc 	andi	r5,r5,255
    7e58:	28c00b26 	beq	r5,r3,7e88 <memchr+0x84>
    7e5c:	20c00044 	addi	r3,r4,1
    7e60:	39803fcc 	andi	r6,r7,255
    7e64:	2089883a 	add	r4,r4,r2
    7e68:	00000306 	br	7e78 <memchr+0x74>
    7e6c:	18c00044 	addi	r3,r3,1
    7e70:	197fffc3 	ldbu	r5,-1(r3)
    7e74:	31400526 	beq	r6,r5,7e8c <memchr+0x88>
    7e78:	1805883a 	mov	r2,r3
    7e7c:	20fffb1e 	bne	r4,r3,7e6c <memchr+0x68>
    7e80:	0005883a 	mov	r2,zero
    7e84:	f800283a 	ret
    7e88:	2005883a 	mov	r2,r4
    7e8c:	f800283a 	ret
    7e90:	28c03fcc 	andi	r3,r5,255
    7e94:	1812923a 	slli	r9,r3,8
    7e98:	02ffbff4 	movhi	r11,65279
    7e9c:	02a02074 	movhi	r10,32897
    7ea0:	48d2b03a 	or	r9,r9,r3
    7ea4:	4806943a 	slli	r3,r9,16
    7ea8:	5affbfc4 	addi	r11,r11,-257
    7eac:	52a02004 	addi	r10,r10,-32640
    7eb0:	48d2b03a 	or	r9,r9,r3
    7eb4:	20c00017 	ldw	r3,0(r4)
    7eb8:	48c6f03a 	xor	r3,r9,r3
    7ebc:	1acd883a 	add	r6,r3,r11
    7ec0:	00c6303a 	nor	r3,zero,r3
    7ec4:	30c6703a 	and	r3,r6,r3
    7ec8:	1a86703a 	and	r3,r3,r10
    7ecc:	183fe01e 	bne	r3,zero,7e50 <memchr+0x4c>
    7ed0:	10bfff04 	addi	r2,r2,-4
    7ed4:	21000104 	addi	r4,r4,4
    7ed8:	40bff636 	bltu	r8,r2,7eb4 <memchr+0xb0>
    7edc:	003fdb06 	br	7e4c <memchr+0x48>
    7ee0:	3005883a 	mov	r2,r6
    7ee4:	003fd706 	br	7e44 <memchr+0x40>

00007ee8 <memcpy>:
    7ee8:	defffd04 	addi	sp,sp,-12
    7eec:	dfc00215 	stw	ra,8(sp)
    7ef0:	dc400115 	stw	r17,4(sp)
    7ef4:	dc000015 	stw	r16,0(sp)
    7ef8:	00c003c4 	movi	r3,15
    7efc:	2005883a 	mov	r2,r4
    7f00:	1980452e 	bgeu	r3,r6,8018 <memcpy+0x130>
    7f04:	2906b03a 	or	r3,r5,r4
    7f08:	18c000cc 	andi	r3,r3,3
    7f0c:	1800441e 	bne	r3,zero,8020 <memcpy+0x138>
    7f10:	347ffc04 	addi	r17,r6,-16
    7f14:	8822d13a 	srli	r17,r17,4
    7f18:	28c00104 	addi	r3,r5,4
    7f1c:	23400104 	addi	r13,r4,4
    7f20:	8820913a 	slli	r16,r17,4
    7f24:	2b000204 	addi	r12,r5,8
    7f28:	22c00204 	addi	r11,r4,8
    7f2c:	84000504 	addi	r16,r16,20
    7f30:	2a800304 	addi	r10,r5,12
    7f34:	22400304 	addi	r9,r4,12
    7f38:	2c21883a 	add	r16,r5,r16
    7f3c:	2811883a 	mov	r8,r5
    7f40:	200f883a 	mov	r7,r4
    7f44:	41000017 	ldw	r4,0(r8)
    7f48:	1fc00017 	ldw	ra,0(r3)
    7f4c:	63c00017 	ldw	r15,0(r12)
    7f50:	39000015 	stw	r4,0(r7)
    7f54:	53800017 	ldw	r14,0(r10)
    7f58:	6fc00015 	stw	ra,0(r13)
    7f5c:	5bc00015 	stw	r15,0(r11)
    7f60:	4b800015 	stw	r14,0(r9)
    7f64:	18c00404 	addi	r3,r3,16
    7f68:	39c00404 	addi	r7,r7,16
    7f6c:	42000404 	addi	r8,r8,16
    7f70:	6b400404 	addi	r13,r13,16
    7f74:	63000404 	addi	r12,r12,16
    7f78:	5ac00404 	addi	r11,r11,16
    7f7c:	52800404 	addi	r10,r10,16
    7f80:	4a400404 	addi	r9,r9,16
    7f84:	1c3fef1e 	bne	r3,r16,7f44 <memcpy+0x5c>
    7f88:	89c00044 	addi	r7,r17,1
    7f8c:	380e913a 	slli	r7,r7,4
    7f90:	310003cc 	andi	r4,r6,15
    7f94:	02c000c4 	movi	r11,3
    7f98:	11c7883a 	add	r3,r2,r7
    7f9c:	29cb883a 	add	r5,r5,r7
    7fa0:	5900212e 	bgeu	r11,r4,8028 <memcpy+0x140>
    7fa4:	1813883a 	mov	r9,r3
    7fa8:	2811883a 	mov	r8,r5
    7fac:	200f883a 	mov	r7,r4
    7fb0:	42800017 	ldw	r10,0(r8)
    7fb4:	4a400104 	addi	r9,r9,4
    7fb8:	39ffff04 	addi	r7,r7,-4
    7fbc:	4abfff15 	stw	r10,-4(r9)
    7fc0:	42000104 	addi	r8,r8,4
    7fc4:	59fffa36 	bltu	r11,r7,7fb0 <memcpy+0xc8>
    7fc8:	213fff04 	addi	r4,r4,-4
    7fcc:	2008d0ba 	srli	r4,r4,2
    7fd0:	318000cc 	andi	r6,r6,3
    7fd4:	21000044 	addi	r4,r4,1
    7fd8:	2109883a 	add	r4,r4,r4
    7fdc:	2109883a 	add	r4,r4,r4
    7fe0:	1907883a 	add	r3,r3,r4
    7fe4:	290b883a 	add	r5,r5,r4
    7fe8:	30000626 	beq	r6,zero,8004 <memcpy+0x11c>
    7fec:	198d883a 	add	r6,r3,r6
    7ff0:	29c00003 	ldbu	r7,0(r5)
    7ff4:	18c00044 	addi	r3,r3,1
    7ff8:	29400044 	addi	r5,r5,1
    7ffc:	19ffffc5 	stb	r7,-1(r3)
    8000:	19bffb1e 	bne	r3,r6,7ff0 <memcpy+0x108>
    8004:	dfc00217 	ldw	ra,8(sp)
    8008:	dc400117 	ldw	r17,4(sp)
    800c:	dc000017 	ldw	r16,0(sp)
    8010:	dec00304 	addi	sp,sp,12
    8014:	f800283a 	ret
    8018:	2007883a 	mov	r3,r4
    801c:	003ff206 	br	7fe8 <memcpy+0x100>
    8020:	2007883a 	mov	r3,r4
    8024:	003ff106 	br	7fec <memcpy+0x104>
    8028:	200d883a 	mov	r6,r4
    802c:	003fee06 	br	7fe8 <memcpy+0x100>

00008030 <memmove>:
    8030:	2005883a 	mov	r2,r4
    8034:	29000b2e 	bgeu	r5,r4,8064 <memmove+0x34>
    8038:	298f883a 	add	r7,r5,r6
    803c:	21c0092e 	bgeu	r4,r7,8064 <memmove+0x34>
    8040:	2187883a 	add	r3,r4,r6
    8044:	198bc83a 	sub	r5,r3,r6
    8048:	30004826 	beq	r6,zero,816c <memmove+0x13c>
    804c:	39ffffc4 	addi	r7,r7,-1
    8050:	39000003 	ldbu	r4,0(r7)
    8054:	18ffffc4 	addi	r3,r3,-1
    8058:	19000005 	stb	r4,0(r3)
    805c:	28fffb1e 	bne	r5,r3,804c <memmove+0x1c>
    8060:	f800283a 	ret
    8064:	00c003c4 	movi	r3,15
    8068:	1980412e 	bgeu	r3,r6,8170 <memmove+0x140>
    806c:	2886b03a 	or	r3,r5,r2
    8070:	18c000cc 	andi	r3,r3,3
    8074:	1800401e 	bne	r3,zero,8178 <memmove+0x148>
    8078:	33fffc04 	addi	r15,r6,-16
    807c:	781ed13a 	srli	r15,r15,4
    8080:	28c00104 	addi	r3,r5,4
    8084:	13400104 	addi	r13,r2,4
    8088:	781c913a 	slli	r14,r15,4
    808c:	2b000204 	addi	r12,r5,8
    8090:	12c00204 	addi	r11,r2,8
    8094:	73800504 	addi	r14,r14,20
    8098:	2a800304 	addi	r10,r5,12
    809c:	12400304 	addi	r9,r2,12
    80a0:	2b9d883a 	add	r14,r5,r14
    80a4:	2811883a 	mov	r8,r5
    80a8:	100f883a 	mov	r7,r2
    80ac:	41000017 	ldw	r4,0(r8)
    80b0:	39c00404 	addi	r7,r7,16
    80b4:	18c00404 	addi	r3,r3,16
    80b8:	393ffc15 	stw	r4,-16(r7)
    80bc:	193ffc17 	ldw	r4,-16(r3)
    80c0:	6b400404 	addi	r13,r13,16
    80c4:	5ac00404 	addi	r11,r11,16
    80c8:	693ffc15 	stw	r4,-16(r13)
    80cc:	61000017 	ldw	r4,0(r12)
    80d0:	4a400404 	addi	r9,r9,16
    80d4:	42000404 	addi	r8,r8,16
    80d8:	593ffc15 	stw	r4,-16(r11)
    80dc:	51000017 	ldw	r4,0(r10)
    80e0:	63000404 	addi	r12,r12,16
    80e4:	52800404 	addi	r10,r10,16
    80e8:	493ffc15 	stw	r4,-16(r9)
    80ec:	1bbfef1e 	bne	r3,r14,80ac <memmove+0x7c>
    80f0:	79000044 	addi	r4,r15,1
    80f4:	2008913a 	slli	r4,r4,4
    80f8:	328003cc 	andi	r10,r6,15
    80fc:	02c000c4 	movi	r11,3
    8100:	1107883a 	add	r3,r2,r4
    8104:	290b883a 	add	r5,r5,r4
    8108:	5a801e2e 	bgeu	r11,r10,8184 <memmove+0x154>
    810c:	1813883a 	mov	r9,r3
    8110:	2811883a 	mov	r8,r5
    8114:	500f883a 	mov	r7,r10
    8118:	41000017 	ldw	r4,0(r8)
    811c:	4a400104 	addi	r9,r9,4
    8120:	39ffff04 	addi	r7,r7,-4
    8124:	493fff15 	stw	r4,-4(r9)
    8128:	42000104 	addi	r8,r8,4
    812c:	59fffa36 	bltu	r11,r7,8118 <memmove+0xe8>
    8130:	513fff04 	addi	r4,r10,-4
    8134:	2008d0ba 	srli	r4,r4,2
    8138:	318000cc 	andi	r6,r6,3
    813c:	21000044 	addi	r4,r4,1
    8140:	2109883a 	add	r4,r4,r4
    8144:	2109883a 	add	r4,r4,r4
    8148:	1907883a 	add	r3,r3,r4
    814c:	290b883a 	add	r5,r5,r4
    8150:	30000b26 	beq	r6,zero,8180 <memmove+0x150>
    8154:	198d883a 	add	r6,r3,r6
    8158:	29c00003 	ldbu	r7,0(r5)
    815c:	18c00044 	addi	r3,r3,1
    8160:	29400044 	addi	r5,r5,1
    8164:	19ffffc5 	stb	r7,-1(r3)
    8168:	19bffb1e 	bne	r3,r6,8158 <memmove+0x128>
    816c:	f800283a 	ret
    8170:	1007883a 	mov	r3,r2
    8174:	003ff606 	br	8150 <memmove+0x120>
    8178:	1007883a 	mov	r3,r2
    817c:	003ff506 	br	8154 <memmove+0x124>
    8180:	f800283a 	ret
    8184:	500d883a 	mov	r6,r10
    8188:	003ff106 	br	8150 <memmove+0x120>

0000818c <memset>:
    818c:	20c000cc 	andi	r3,r4,3
    8190:	2005883a 	mov	r2,r4
    8194:	18004426 	beq	r3,zero,82a8 <memset+0x11c>
    8198:	31ffffc4 	addi	r7,r6,-1
    819c:	30004026 	beq	r6,zero,82a0 <memset+0x114>
    81a0:	2813883a 	mov	r9,r5
    81a4:	200d883a 	mov	r6,r4
    81a8:	2007883a 	mov	r3,r4
    81ac:	00000406 	br	81c0 <memset+0x34>
    81b0:	3a3fffc4 	addi	r8,r7,-1
    81b4:	31800044 	addi	r6,r6,1
    81b8:	38003926 	beq	r7,zero,82a0 <memset+0x114>
    81bc:	400f883a 	mov	r7,r8
    81c0:	18c00044 	addi	r3,r3,1
    81c4:	32400005 	stb	r9,0(r6)
    81c8:	1a0000cc 	andi	r8,r3,3
    81cc:	403ff81e 	bne	r8,zero,81b0 <memset+0x24>
    81d0:	010000c4 	movi	r4,3
    81d4:	21c02d2e 	bgeu	r4,r7,828c <memset+0x100>
    81d8:	29003fcc 	andi	r4,r5,255
    81dc:	200c923a 	slli	r6,r4,8
    81e0:	3108b03a 	or	r4,r6,r4
    81e4:	200c943a 	slli	r6,r4,16
    81e8:	218cb03a 	or	r6,r4,r6
    81ec:	010003c4 	movi	r4,15
    81f0:	21c0182e 	bgeu	r4,r7,8254 <memset+0xc8>
    81f4:	3b3ffc04 	addi	r12,r7,-16
    81f8:	6018d13a 	srli	r12,r12,4
    81fc:	1a000104 	addi	r8,r3,4
    8200:	1ac00204 	addi	r11,r3,8
    8204:	6008913a 	slli	r4,r12,4
    8208:	1a800304 	addi	r10,r3,12
    820c:	1813883a 	mov	r9,r3
    8210:	21000504 	addi	r4,r4,20
    8214:	1909883a 	add	r4,r3,r4
    8218:	49800015 	stw	r6,0(r9)
    821c:	41800015 	stw	r6,0(r8)
    8220:	59800015 	stw	r6,0(r11)
    8224:	51800015 	stw	r6,0(r10)
    8228:	42000404 	addi	r8,r8,16
    822c:	4a400404 	addi	r9,r9,16
    8230:	5ac00404 	addi	r11,r11,16
    8234:	52800404 	addi	r10,r10,16
    8238:	413ff71e 	bne	r8,r4,8218 <memset+0x8c>
    823c:	63000044 	addi	r12,r12,1
    8240:	6018913a 	slli	r12,r12,4
    8244:	39c003cc 	andi	r7,r7,15
    8248:	010000c4 	movi	r4,3
    824c:	1b07883a 	add	r3,r3,r12
    8250:	21c00e2e 	bgeu	r4,r7,828c <memset+0x100>
    8254:	1813883a 	mov	r9,r3
    8258:	3811883a 	mov	r8,r7
    825c:	010000c4 	movi	r4,3
    8260:	49800015 	stw	r6,0(r9)
    8264:	423fff04 	addi	r8,r8,-4
    8268:	4a400104 	addi	r9,r9,4
    826c:	223ffc36 	bltu	r4,r8,8260 <memset+0xd4>
    8270:	393fff04 	addi	r4,r7,-4
    8274:	2008d0ba 	srli	r4,r4,2
    8278:	39c000cc 	andi	r7,r7,3
    827c:	21000044 	addi	r4,r4,1
    8280:	2109883a 	add	r4,r4,r4
    8284:	2109883a 	add	r4,r4,r4
    8288:	1907883a 	add	r3,r3,r4
    828c:	38000526 	beq	r7,zero,82a4 <memset+0x118>
    8290:	19cf883a 	add	r7,r3,r7
    8294:	19400005 	stb	r5,0(r3)
    8298:	18c00044 	addi	r3,r3,1
    829c:	38fffd1e 	bne	r7,r3,8294 <memset+0x108>
    82a0:	f800283a 	ret
    82a4:	f800283a 	ret
    82a8:	2007883a 	mov	r3,r4
    82ac:	300f883a 	mov	r7,r6
    82b0:	003fc706 	br	81d0 <memset+0x44>

000082b4 <_Balloc>:
    82b4:	20801317 	ldw	r2,76(r4)
    82b8:	defffc04 	addi	sp,sp,-16
    82bc:	dc400115 	stw	r17,4(sp)
    82c0:	dc000015 	stw	r16,0(sp)
    82c4:	dfc00315 	stw	ra,12(sp)
    82c8:	dc800215 	stw	r18,8(sp)
    82cc:	2023883a 	mov	r17,r4
    82d0:	2821883a 	mov	r16,r5
    82d4:	10000f26 	beq	r2,zero,8314 <_Balloc+0x60>
    82d8:	8407883a 	add	r3,r16,r16
    82dc:	18c7883a 	add	r3,r3,r3
    82e0:	10c7883a 	add	r3,r2,r3
    82e4:	18800017 	ldw	r2,0(r3)
    82e8:	10001126 	beq	r2,zero,8330 <_Balloc+0x7c>
    82ec:	11000017 	ldw	r4,0(r2)
    82f0:	19000015 	stw	r4,0(r3)
    82f4:	10000415 	stw	zero,16(r2)
    82f8:	10000315 	stw	zero,12(r2)
    82fc:	dfc00317 	ldw	ra,12(sp)
    8300:	dc800217 	ldw	r18,8(sp)
    8304:	dc400117 	ldw	r17,4(sp)
    8308:	dc000017 	ldw	r16,0(sp)
    830c:	dec00404 	addi	sp,sp,16
    8310:	f800283a 	ret
    8314:	01800844 	movi	r6,33
    8318:	01400104 	movi	r5,4
    831c:	000b19c0 	call	b19c <_calloc_r>
    8320:	88801315 	stw	r2,76(r17)
    8324:	103fec1e 	bne	r2,zero,82d8 <_Balloc+0x24>
    8328:	0005883a 	mov	r2,zero
    832c:	003ff306 	br	82fc <_Balloc+0x48>
    8330:	01400044 	movi	r5,1
    8334:	2c24983a 	sll	r18,r5,r16
    8338:	8809883a 	mov	r4,r17
    833c:	91800144 	addi	r6,r18,5
    8340:	318d883a 	add	r6,r6,r6
    8344:	318d883a 	add	r6,r6,r6
    8348:	000b19c0 	call	b19c <_calloc_r>
    834c:	103ff626 	beq	r2,zero,8328 <_Balloc+0x74>
    8350:	14000115 	stw	r16,4(r2)
    8354:	14800215 	stw	r18,8(r2)
    8358:	003fe606 	br	82f4 <_Balloc+0x40>

0000835c <_Bfree>:
    835c:	28000826 	beq	r5,zero,8380 <_Bfree+0x24>
    8360:	28c00117 	ldw	r3,4(r5)
    8364:	20801317 	ldw	r2,76(r4)
    8368:	18c7883a 	add	r3,r3,r3
    836c:	18c7883a 	add	r3,r3,r3
    8370:	10c5883a 	add	r2,r2,r3
    8374:	10c00017 	ldw	r3,0(r2)
    8378:	28c00015 	stw	r3,0(r5)
    837c:	11400015 	stw	r5,0(r2)
    8380:	f800283a 	ret

00008384 <__multadd>:
    8384:	defffa04 	addi	sp,sp,-24
    8388:	dc800315 	stw	r18,12(sp)
    838c:	dc400215 	stw	r17,8(sp)
    8390:	dc000115 	stw	r16,4(sp)
    8394:	2823883a 	mov	r17,r5
    8398:	2c000417 	ldw	r16,16(r5)
    839c:	dfc00515 	stw	ra,20(sp)
    83a0:	dcc00415 	stw	r19,16(sp)
    83a4:	2025883a 	mov	r18,r4
    83a8:	29400504 	addi	r5,r5,20
    83ac:	0011883a 	mov	r8,zero
    83b0:	28c00017 	ldw	r3,0(r5)
    83b4:	29400104 	addi	r5,r5,4
    83b8:	42000044 	addi	r8,r8,1
    83bc:	18bfffcc 	andi	r2,r3,65535
    83c0:	1185383a 	mul	r2,r2,r6
    83c4:	1806d43a 	srli	r3,r3,16
    83c8:	11cf883a 	add	r7,r2,r7
    83cc:	3808d43a 	srli	r4,r7,16
    83d0:	1987383a 	mul	r3,r3,r6
    83d4:	38bfffcc 	andi	r2,r7,65535
    83d8:	1907883a 	add	r3,r3,r4
    83dc:	1808943a 	slli	r4,r3,16
    83e0:	180ed43a 	srli	r7,r3,16
    83e4:	2085883a 	add	r2,r4,r2
    83e8:	28bfff15 	stw	r2,-4(r5)
    83ec:	443ff016 	blt	r8,r16,83b0 <__multadd+0x2c>
    83f0:	38000926 	beq	r7,zero,8418 <__multadd+0x94>
    83f4:	88800217 	ldw	r2,8(r17)
    83f8:	80800f0e 	bge	r16,r2,8438 <__multadd+0xb4>
    83fc:	80800144 	addi	r2,r16,5
    8400:	1085883a 	add	r2,r2,r2
    8404:	1085883a 	add	r2,r2,r2
    8408:	8885883a 	add	r2,r17,r2
    840c:	11c00015 	stw	r7,0(r2)
    8410:	84000044 	addi	r16,r16,1
    8414:	8c000415 	stw	r16,16(r17)
    8418:	8805883a 	mov	r2,r17
    841c:	dfc00517 	ldw	ra,20(sp)
    8420:	dcc00417 	ldw	r19,16(sp)
    8424:	dc800317 	ldw	r18,12(sp)
    8428:	dc400217 	ldw	r17,8(sp)
    842c:	dc000117 	ldw	r16,4(sp)
    8430:	dec00604 	addi	sp,sp,24
    8434:	f800283a 	ret
    8438:	89400117 	ldw	r5,4(r17)
    843c:	9009883a 	mov	r4,r18
    8440:	d9c00015 	stw	r7,0(sp)
    8444:	29400044 	addi	r5,r5,1
    8448:	00082b40 	call	82b4 <_Balloc>
    844c:	89800417 	ldw	r6,16(r17)
    8450:	89400304 	addi	r5,r17,12
    8454:	11000304 	addi	r4,r2,12
    8458:	31800084 	addi	r6,r6,2
    845c:	318d883a 	add	r6,r6,r6
    8460:	318d883a 	add	r6,r6,r6
    8464:	1027883a 	mov	r19,r2
    8468:	0007ee80 	call	7ee8 <memcpy>
    846c:	d9c00017 	ldw	r7,0(sp)
    8470:	88000a26 	beq	r17,zero,849c <__multadd+0x118>
    8474:	88c00117 	ldw	r3,4(r17)
    8478:	90801317 	ldw	r2,76(r18)
    847c:	18c7883a 	add	r3,r3,r3
    8480:	18c7883a 	add	r3,r3,r3
    8484:	10c5883a 	add	r2,r2,r3
    8488:	10c00017 	ldw	r3,0(r2)
    848c:	88c00015 	stw	r3,0(r17)
    8490:	14400015 	stw	r17,0(r2)
    8494:	9823883a 	mov	r17,r19
    8498:	003fd806 	br	83fc <__multadd+0x78>
    849c:	9823883a 	mov	r17,r19
    84a0:	003fd606 	br	83fc <__multadd+0x78>

000084a4 <__s2b>:
    84a4:	defff904 	addi	sp,sp,-28
    84a8:	dc400115 	stw	r17,4(sp)
    84ac:	dc000015 	stw	r16,0(sp)
    84b0:	2023883a 	mov	r17,r4
    84b4:	2821883a 	mov	r16,r5
    84b8:	39000204 	addi	r4,r7,8
    84bc:	01400244 	movi	r5,9
    84c0:	dcc00315 	stw	r19,12(sp)
    84c4:	dc800215 	stw	r18,8(sp)
    84c8:	dfc00615 	stw	ra,24(sp)
    84cc:	dd400515 	stw	r21,20(sp)
    84d0:	dd000415 	stw	r20,16(sp)
    84d4:	3825883a 	mov	r18,r7
    84d8:	3027883a 	mov	r19,r6
    84dc:	000c4cc0 	call	c4cc <__divsi3>
    84e0:	00c00044 	movi	r3,1
    84e4:	000b883a 	mov	r5,zero
    84e8:	1880030e 	bge	r3,r2,84f8 <__s2b+0x54>
    84ec:	18c7883a 	add	r3,r3,r3
    84f0:	29400044 	addi	r5,r5,1
    84f4:	18bffd16 	blt	r3,r2,84ec <__s2b+0x48>
    84f8:	8809883a 	mov	r4,r17
    84fc:	00082b40 	call	82b4 <_Balloc>
    8500:	d8c00717 	ldw	r3,28(sp)
    8504:	10c00515 	stw	r3,20(r2)
    8508:	00c00044 	movi	r3,1
    850c:	10c00415 	stw	r3,16(r2)
    8510:	00c00244 	movi	r3,9
    8514:	1cc0210e 	bge	r3,r19,859c <__s2b+0xf8>
    8518:	80eb883a 	add	r21,r16,r3
    851c:	a829883a 	mov	r20,r21
    8520:	84e1883a 	add	r16,r16,r19
    8524:	a1c00007 	ldb	r7,0(r20)
    8528:	01800284 	movi	r6,10
    852c:	a5000044 	addi	r20,r20,1
    8530:	100b883a 	mov	r5,r2
    8534:	39fff404 	addi	r7,r7,-48
    8538:	8809883a 	mov	r4,r17
    853c:	00083840 	call	8384 <__multadd>
    8540:	a43ff81e 	bne	r20,r16,8524 <__s2b+0x80>
    8544:	ace1883a 	add	r16,r21,r19
    8548:	843ffe04 	addi	r16,r16,-8
    854c:	9c800a0e 	bge	r19,r18,8578 <__s2b+0xd4>
    8550:	94e5c83a 	sub	r18,r18,r19
    8554:	84a5883a 	add	r18,r16,r18
    8558:	81c00007 	ldb	r7,0(r16)
    855c:	01800284 	movi	r6,10
    8560:	84000044 	addi	r16,r16,1
    8564:	100b883a 	mov	r5,r2
    8568:	39fff404 	addi	r7,r7,-48
    856c:	8809883a 	mov	r4,r17
    8570:	00083840 	call	8384 <__multadd>
    8574:	84bff81e 	bne	r16,r18,8558 <__s2b+0xb4>
    8578:	dfc00617 	ldw	ra,24(sp)
    857c:	dd400517 	ldw	r21,20(sp)
    8580:	dd000417 	ldw	r20,16(sp)
    8584:	dcc00317 	ldw	r19,12(sp)
    8588:	dc800217 	ldw	r18,8(sp)
    858c:	dc400117 	ldw	r17,4(sp)
    8590:	dc000017 	ldw	r16,0(sp)
    8594:	dec00704 	addi	sp,sp,28
    8598:	f800283a 	ret
    859c:	84000284 	addi	r16,r16,10
    85a0:	1827883a 	mov	r19,r3
    85a4:	003fe906 	br	854c <__s2b+0xa8>

000085a8 <__hi0bits>:
    85a8:	20bfffec 	andhi	r2,r4,65535
    85ac:	1000141e 	bne	r2,zero,8600 <__hi0bits+0x58>
    85b0:	2008943a 	slli	r4,r4,16
    85b4:	00800404 	movi	r2,16
    85b8:	20ffc02c 	andhi	r3,r4,65280
    85bc:	1800021e 	bne	r3,zero,85c8 <__hi0bits+0x20>
    85c0:	2008923a 	slli	r4,r4,8
    85c4:	10800204 	addi	r2,r2,8
    85c8:	20fc002c 	andhi	r3,r4,61440
    85cc:	1800021e 	bne	r3,zero,85d8 <__hi0bits+0x30>
    85d0:	2008913a 	slli	r4,r4,4
    85d4:	10800104 	addi	r2,r2,4
    85d8:	20f0002c 	andhi	r3,r4,49152
    85dc:	1800031e 	bne	r3,zero,85ec <__hi0bits+0x44>
    85e0:	2109883a 	add	r4,r4,r4
    85e4:	10800084 	addi	r2,r2,2
    85e8:	2109883a 	add	r4,r4,r4
    85ec:	20000316 	blt	r4,zero,85fc <__hi0bits+0x54>
    85f0:	2110002c 	andhi	r4,r4,16384
    85f4:	2000041e 	bne	r4,zero,8608 <__hi0bits+0x60>
    85f8:	00800804 	movi	r2,32
    85fc:	f800283a 	ret
    8600:	0005883a 	mov	r2,zero
    8604:	003fec06 	br	85b8 <__hi0bits+0x10>
    8608:	10800044 	addi	r2,r2,1
    860c:	f800283a 	ret

00008610 <__lo0bits>:
    8610:	20c00017 	ldw	r3,0(r4)
    8614:	188001cc 	andi	r2,r3,7
    8618:	10000826 	beq	r2,zero,863c <__lo0bits+0x2c>
    861c:	1880004c 	andi	r2,r3,1
    8620:	1000211e 	bne	r2,zero,86a8 <__lo0bits+0x98>
    8624:	1880008c 	andi	r2,r3,2
    8628:	1000211e 	bne	r2,zero,86b0 <__lo0bits+0xa0>
    862c:	1806d0ba 	srli	r3,r3,2
    8630:	00800084 	movi	r2,2
    8634:	20c00015 	stw	r3,0(r4)
    8638:	f800283a 	ret
    863c:	18bfffcc 	andi	r2,r3,65535
    8640:	10001326 	beq	r2,zero,8690 <__lo0bits+0x80>
    8644:	0005883a 	mov	r2,zero
    8648:	19403fcc 	andi	r5,r3,255
    864c:	2800021e 	bne	r5,zero,8658 <__lo0bits+0x48>
    8650:	1806d23a 	srli	r3,r3,8
    8654:	10800204 	addi	r2,r2,8
    8658:	194003cc 	andi	r5,r3,15
    865c:	2800021e 	bne	r5,zero,8668 <__lo0bits+0x58>
    8660:	1806d13a 	srli	r3,r3,4
    8664:	10800104 	addi	r2,r2,4
    8668:	194000cc 	andi	r5,r3,3
    866c:	2800021e 	bne	r5,zero,8678 <__lo0bits+0x68>
    8670:	1806d0ba 	srli	r3,r3,2
    8674:	10800084 	addi	r2,r2,2
    8678:	1940004c 	andi	r5,r3,1
    867c:	2800081e 	bne	r5,zero,86a0 <__lo0bits+0x90>
    8680:	1806d07a 	srli	r3,r3,1
    8684:	1800051e 	bne	r3,zero,869c <__lo0bits+0x8c>
    8688:	00800804 	movi	r2,32
    868c:	f800283a 	ret
    8690:	1806d43a 	srli	r3,r3,16
    8694:	00800404 	movi	r2,16
    8698:	003feb06 	br	8648 <__lo0bits+0x38>
    869c:	10800044 	addi	r2,r2,1
    86a0:	20c00015 	stw	r3,0(r4)
    86a4:	f800283a 	ret
    86a8:	0005883a 	mov	r2,zero
    86ac:	f800283a 	ret
    86b0:	1806d07a 	srli	r3,r3,1
    86b4:	00800044 	movi	r2,1
    86b8:	20c00015 	stw	r3,0(r4)
    86bc:	f800283a 	ret

000086c0 <__i2b>:
    86c0:	defffd04 	addi	sp,sp,-12
    86c4:	dc000015 	stw	r16,0(sp)
    86c8:	04000044 	movi	r16,1
    86cc:	dc400115 	stw	r17,4(sp)
    86d0:	2823883a 	mov	r17,r5
    86d4:	800b883a 	mov	r5,r16
    86d8:	dfc00215 	stw	ra,8(sp)
    86dc:	00082b40 	call	82b4 <_Balloc>
    86e0:	14400515 	stw	r17,20(r2)
    86e4:	14000415 	stw	r16,16(r2)
    86e8:	dfc00217 	ldw	ra,8(sp)
    86ec:	dc400117 	ldw	r17,4(sp)
    86f0:	dc000017 	ldw	r16,0(sp)
    86f4:	dec00304 	addi	sp,sp,12
    86f8:	f800283a 	ret

000086fc <__multiply>:
    86fc:	defffa04 	addi	sp,sp,-24
    8700:	dcc00315 	stw	r19,12(sp)
    8704:	dc800215 	stw	r18,8(sp)
    8708:	34c00417 	ldw	r19,16(r6)
    870c:	2c800417 	ldw	r18,16(r5)
    8710:	dd000415 	stw	r20,16(sp)
    8714:	dc400115 	stw	r17,4(sp)
    8718:	dfc00515 	stw	ra,20(sp)
    871c:	dc000015 	stw	r16,0(sp)
    8720:	2829883a 	mov	r20,r5
    8724:	3023883a 	mov	r17,r6
    8728:	94c0050e 	bge	r18,r19,8740 <__multiply+0x44>
    872c:	9007883a 	mov	r3,r18
    8730:	3029883a 	mov	r20,r6
    8734:	9825883a 	mov	r18,r19
    8738:	2823883a 	mov	r17,r5
    873c:	1827883a 	mov	r19,r3
    8740:	a0800217 	ldw	r2,8(r20)
    8744:	94e1883a 	add	r16,r18,r19
    8748:	a1400117 	ldw	r5,4(r20)
    874c:	1400010e 	bge	r2,r16,8754 <__multiply+0x58>
    8750:	29400044 	addi	r5,r5,1
    8754:	00082b40 	call	82b4 <_Balloc>
    8758:	8415883a 	add	r10,r16,r16
    875c:	12c00504 	addi	r11,r2,20
    8760:	5295883a 	add	r10,r10,r10
    8764:	5a95883a 	add	r10,r11,r10
    8768:	5807883a 	mov	r3,r11
    876c:	5a80032e 	bgeu	r11,r10,877c <__multiply+0x80>
    8770:	18000015 	stw	zero,0(r3)
    8774:	18c00104 	addi	r3,r3,4
    8778:	1abffd36 	bltu	r3,r10,8770 <__multiply+0x74>
    877c:	9ce7883a 	add	r19,r19,r19
    8780:	94a5883a 	add	r18,r18,r18
    8784:	89800504 	addi	r6,r17,20
    8788:	9ce7883a 	add	r19,r19,r19
    878c:	a3400504 	addi	r13,r20,20
    8790:	94a5883a 	add	r18,r18,r18
    8794:	34d9883a 	add	r12,r6,r19
    8798:	6c93883a 	add	r9,r13,r18
    879c:	3300422e 	bgeu	r6,r12,88a8 <__multiply+0x1ac>
    87a0:	37c00017 	ldw	ra,0(r6)
    87a4:	fbffffcc 	andi	r15,ra,65535
    87a8:	78001b26 	beq	r15,zero,8818 <__multiply+0x11c>
    87ac:	5811883a 	mov	r8,r11
    87b0:	681d883a 	mov	r14,r13
    87b4:	000f883a 	mov	r7,zero
    87b8:	71000017 	ldw	r4,0(r14)
    87bc:	40c00017 	ldw	r3,0(r8)
    87c0:	73800104 	addi	r14,r14,4
    87c4:	217fffcc 	andi	r5,r4,65535
    87c8:	2bcb383a 	mul	r5,r5,r15
    87cc:	2008d43a 	srli	r4,r4,16
    87d0:	1c7fffcc 	andi	r17,r3,65535
    87d4:	2c4b883a 	add	r5,r5,r17
    87d8:	29cb883a 	add	r5,r5,r7
    87dc:	23c9383a 	mul	r4,r4,r15
    87e0:	1806d43a 	srli	r3,r3,16
    87e4:	280ed43a 	srli	r7,r5,16
    87e8:	297fffcc 	andi	r5,r5,65535
    87ec:	20c7883a 	add	r3,r4,r3
    87f0:	19c7883a 	add	r3,r3,r7
    87f4:	1808943a 	slli	r4,r3,16
    87f8:	4023883a 	mov	r17,r8
    87fc:	180ed43a 	srli	r7,r3,16
    8800:	214ab03a 	or	r5,r4,r5
    8804:	41400015 	stw	r5,0(r8)
    8808:	42000104 	addi	r8,r8,4
    880c:	727fea36 	bltu	r14,r9,87b8 <__multiply+0xbc>
    8810:	89c00115 	stw	r7,4(r17)
    8814:	37c00017 	ldw	ra,0(r6)
    8818:	f83ed43a 	srli	ra,ra,16
    881c:	f8001f26 	beq	ra,zero,889c <__multiply+0x1a0>
    8820:	58c00017 	ldw	r3,0(r11)
    8824:	681d883a 	mov	r14,r13
    8828:	581f883a 	mov	r15,r11
    882c:	1811883a 	mov	r8,r3
    8830:	5825883a 	mov	r18,r11
    8834:	000f883a 	mov	r7,zero
    8838:	00000106 	br	8840 <__multiply+0x144>
    883c:	8825883a 	mov	r18,r17
    8840:	7140000b 	ldhu	r5,0(r14)
    8844:	4010d43a 	srli	r8,r8,16
    8848:	193fffcc 	andi	r4,r3,65535
    884c:	2fcb383a 	mul	r5,r5,ra
    8850:	7bc00104 	addi	r15,r15,4
    8854:	73800104 	addi	r14,r14,4
    8858:	2a0b883a 	add	r5,r5,r8
    885c:	29cb883a 	add	r5,r5,r7
    8860:	2806943a 	slli	r3,r5,16
    8864:	94400104 	addi	r17,r18,4
    8868:	280ad43a 	srli	r5,r5,16
    886c:	1908b03a 	or	r4,r3,r4
    8870:	793fff15 	stw	r4,-4(r15)
    8874:	70ffff17 	ldw	r3,-4(r14)
    8878:	8a000017 	ldw	r8,0(r17)
    887c:	1806d43a 	srli	r3,r3,16
    8880:	413fffcc 	andi	r4,r8,65535
    8884:	1fc7383a 	mul	r3,r3,ra
    8888:	1907883a 	add	r3,r3,r4
    888c:	1947883a 	add	r3,r3,r5
    8890:	180ed43a 	srli	r7,r3,16
    8894:	727fe936 	bltu	r14,r9,883c <__multiply+0x140>
    8898:	90c00115 	stw	r3,4(r18)
    889c:	31800104 	addi	r6,r6,4
    88a0:	5ac00104 	addi	r11,r11,4
    88a4:	333fbe36 	bltu	r6,r12,87a0 <__multiply+0xa4>
    88a8:	0400090e 	bge	zero,r16,88d0 <__multiply+0x1d4>
    88ac:	50ffff17 	ldw	r3,-4(r10)
    88b0:	52bfff04 	addi	r10,r10,-4
    88b4:	18000326 	beq	r3,zero,88c4 <__multiply+0x1c8>
    88b8:	00000506 	br	88d0 <__multiply+0x1d4>
    88bc:	50c00017 	ldw	r3,0(r10)
    88c0:	1800031e 	bne	r3,zero,88d0 <__multiply+0x1d4>
    88c4:	843fffc4 	addi	r16,r16,-1
    88c8:	52bfff04 	addi	r10,r10,-4
    88cc:	803ffb1e 	bne	r16,zero,88bc <__multiply+0x1c0>
    88d0:	14000415 	stw	r16,16(r2)
    88d4:	dfc00517 	ldw	ra,20(sp)
    88d8:	dd000417 	ldw	r20,16(sp)
    88dc:	dcc00317 	ldw	r19,12(sp)
    88e0:	dc800217 	ldw	r18,8(sp)
    88e4:	dc400117 	ldw	r17,4(sp)
    88e8:	dc000017 	ldw	r16,0(sp)
    88ec:	dec00604 	addi	sp,sp,24
    88f0:	f800283a 	ret

000088f4 <__pow5mult>:
    88f4:	defffa04 	addi	sp,sp,-24
    88f8:	dcc00315 	stw	r19,12(sp)
    88fc:	dc000015 	stw	r16,0(sp)
    8900:	dfc00515 	stw	ra,20(sp)
    8904:	dd000415 	stw	r20,16(sp)
    8908:	dc800215 	stw	r18,8(sp)
    890c:	dc400115 	stw	r17,4(sp)
    8910:	308000cc 	andi	r2,r6,3
    8914:	3021883a 	mov	r16,r6
    8918:	2027883a 	mov	r19,r4
    891c:	10002f1e 	bne	r2,zero,89dc <__pow5mult+0xe8>
    8920:	2825883a 	mov	r18,r5
    8924:	8021d0ba 	srai	r16,r16,2
    8928:	80001a26 	beq	r16,zero,8994 <__pow5mult+0xa0>
    892c:	9c401217 	ldw	r17,72(r19)
    8930:	8800061e 	bne	r17,zero,894c <__pow5mult+0x58>
    8934:	00003406 	br	8a08 <__pow5mult+0x114>
    8938:	8021d07a 	srai	r16,r16,1
    893c:	80001526 	beq	r16,zero,8994 <__pow5mult+0xa0>
    8940:	88800017 	ldw	r2,0(r17)
    8944:	10001c26 	beq	r2,zero,89b8 <__pow5mult+0xc4>
    8948:	1023883a 	mov	r17,r2
    894c:	8080004c 	andi	r2,r16,1
    8950:	103ff926 	beq	r2,zero,8938 <__pow5mult+0x44>
    8954:	880d883a 	mov	r6,r17
    8958:	900b883a 	mov	r5,r18
    895c:	9809883a 	mov	r4,r19
    8960:	00086fc0 	call	86fc <__multiply>
    8964:	90001b26 	beq	r18,zero,89d4 <__pow5mult+0xe0>
    8968:	91000117 	ldw	r4,4(r18)
    896c:	98c01317 	ldw	r3,76(r19)
    8970:	8021d07a 	srai	r16,r16,1
    8974:	2109883a 	add	r4,r4,r4
    8978:	2109883a 	add	r4,r4,r4
    897c:	1907883a 	add	r3,r3,r4
    8980:	19000017 	ldw	r4,0(r3)
    8984:	91000015 	stw	r4,0(r18)
    8988:	1c800015 	stw	r18,0(r3)
    898c:	1025883a 	mov	r18,r2
    8990:	803feb1e 	bne	r16,zero,8940 <__pow5mult+0x4c>
    8994:	9005883a 	mov	r2,r18
    8998:	dfc00517 	ldw	ra,20(sp)
    899c:	dd000417 	ldw	r20,16(sp)
    89a0:	dcc00317 	ldw	r19,12(sp)
    89a4:	dc800217 	ldw	r18,8(sp)
    89a8:	dc400117 	ldw	r17,4(sp)
    89ac:	dc000017 	ldw	r16,0(sp)
    89b0:	dec00604 	addi	sp,sp,24
    89b4:	f800283a 	ret
    89b8:	880d883a 	mov	r6,r17
    89bc:	880b883a 	mov	r5,r17
    89c0:	9809883a 	mov	r4,r19
    89c4:	00086fc0 	call	86fc <__multiply>
    89c8:	88800015 	stw	r2,0(r17)
    89cc:	10000015 	stw	zero,0(r2)
    89d0:	003fdd06 	br	8948 <__pow5mult+0x54>
    89d4:	1025883a 	mov	r18,r2
    89d8:	003fd706 	br	8938 <__pow5mult+0x44>
    89dc:	10bfffc4 	addi	r2,r2,-1
    89e0:	1085883a 	add	r2,r2,r2
    89e4:	00c00074 	movhi	r3,1
    89e8:	18c71804 	addi	r3,r3,7264
    89ec:	1085883a 	add	r2,r2,r2
    89f0:	1885883a 	add	r2,r3,r2
    89f4:	11800017 	ldw	r6,0(r2)
    89f8:	000f883a 	mov	r7,zero
    89fc:	00083840 	call	8384 <__multadd>
    8a00:	1025883a 	mov	r18,r2
    8a04:	003fc706 	br	8924 <__pow5mult+0x30>
    8a08:	05000044 	movi	r20,1
    8a0c:	a00b883a 	mov	r5,r20
    8a10:	9809883a 	mov	r4,r19
    8a14:	00082b40 	call	82b4 <_Balloc>
    8a18:	1023883a 	mov	r17,r2
    8a1c:	00809c44 	movi	r2,625
    8a20:	88800515 	stw	r2,20(r17)
    8a24:	8d000415 	stw	r20,16(r17)
    8a28:	9c401215 	stw	r17,72(r19)
    8a2c:	88000015 	stw	zero,0(r17)
    8a30:	003fc606 	br	894c <__pow5mult+0x58>

00008a34 <__lshift>:
    8a34:	defff904 	addi	sp,sp,-28
    8a38:	dd400515 	stw	r21,20(sp)
    8a3c:	dcc00315 	stw	r19,12(sp)
    8a40:	302bd17a 	srai	r21,r6,5
    8a44:	2cc00417 	ldw	r19,16(r5)
    8a48:	28800217 	ldw	r2,8(r5)
    8a4c:	dd000415 	stw	r20,16(sp)
    8a50:	ace7883a 	add	r19,r21,r19
    8a54:	dc800215 	stw	r18,8(sp)
    8a58:	dc400115 	stw	r17,4(sp)
    8a5c:	dc000015 	stw	r16,0(sp)
    8a60:	dfc00615 	stw	ra,24(sp)
    8a64:	9c000044 	addi	r16,r19,1
    8a68:	2823883a 	mov	r17,r5
    8a6c:	3029883a 	mov	r20,r6
    8a70:	2025883a 	mov	r18,r4
    8a74:	29400117 	ldw	r5,4(r5)
    8a78:	1400030e 	bge	r2,r16,8a88 <__lshift+0x54>
    8a7c:	1085883a 	add	r2,r2,r2
    8a80:	29400044 	addi	r5,r5,1
    8a84:	143ffd16 	blt	r2,r16,8a7c <__lshift+0x48>
    8a88:	9009883a 	mov	r4,r18
    8a8c:	00082b40 	call	82b4 <_Balloc>
    8a90:	10c00504 	addi	r3,r2,20
    8a94:	0540070e 	bge	zero,r21,8ab4 <__lshift+0x80>
    8a98:	ad6b883a 	add	r21,r21,r21
    8a9c:	ad6b883a 	add	r21,r21,r21
    8aa0:	1809883a 	mov	r4,r3
    8aa4:	1d47883a 	add	r3,r3,r21
    8aa8:	20000015 	stw	zero,0(r4)
    8aac:	21000104 	addi	r4,r4,4
    8ab0:	193ffd1e 	bne	r3,r4,8aa8 <__lshift+0x74>
    8ab4:	8a000417 	ldw	r8,16(r17)
    8ab8:	89000504 	addi	r4,r17,20
    8abc:	a18007cc 	andi	r6,r20,31
    8ac0:	4211883a 	add	r8,r8,r8
    8ac4:	4211883a 	add	r8,r8,r8
    8ac8:	2211883a 	add	r8,r4,r8
    8acc:	30002326 	beq	r6,zero,8b5c <__lshift+0x128>
    8ad0:	02400804 	movi	r9,32
    8ad4:	4993c83a 	sub	r9,r9,r6
    8ad8:	000b883a 	mov	r5,zero
    8adc:	21c00017 	ldw	r7,0(r4)
    8ae0:	1815883a 	mov	r10,r3
    8ae4:	18c00104 	addi	r3,r3,4
    8ae8:	398e983a 	sll	r7,r7,r6
    8aec:	21000104 	addi	r4,r4,4
    8af0:	394ab03a 	or	r5,r7,r5
    8af4:	197fff15 	stw	r5,-4(r3)
    8af8:	217fff17 	ldw	r5,-4(r4)
    8afc:	2a4ad83a 	srl	r5,r5,r9
    8b00:	223ff636 	bltu	r4,r8,8adc <__lshift+0xa8>
    8b04:	51400115 	stw	r5,4(r10)
    8b08:	28001a1e 	bne	r5,zero,8b74 <__lshift+0x140>
    8b0c:	843fffc4 	addi	r16,r16,-1
    8b10:	14000415 	stw	r16,16(r2)
    8b14:	88000826 	beq	r17,zero,8b38 <__lshift+0x104>
    8b18:	89000117 	ldw	r4,4(r17)
    8b1c:	90c01317 	ldw	r3,76(r18)
    8b20:	2109883a 	add	r4,r4,r4
    8b24:	2109883a 	add	r4,r4,r4
    8b28:	1907883a 	add	r3,r3,r4
    8b2c:	19000017 	ldw	r4,0(r3)
    8b30:	89000015 	stw	r4,0(r17)
    8b34:	1c400015 	stw	r17,0(r3)
    8b38:	dfc00617 	ldw	ra,24(sp)
    8b3c:	dd400517 	ldw	r21,20(sp)
    8b40:	dd000417 	ldw	r20,16(sp)
    8b44:	dcc00317 	ldw	r19,12(sp)
    8b48:	dc800217 	ldw	r18,8(sp)
    8b4c:	dc400117 	ldw	r17,4(sp)
    8b50:	dc000017 	ldw	r16,0(sp)
    8b54:	dec00704 	addi	sp,sp,28
    8b58:	f800283a 	ret
    8b5c:	21400017 	ldw	r5,0(r4)
    8b60:	18c00104 	addi	r3,r3,4
    8b64:	21000104 	addi	r4,r4,4
    8b68:	197fff15 	stw	r5,-4(r3)
    8b6c:	223ffb36 	bltu	r4,r8,8b5c <__lshift+0x128>
    8b70:	003fe606 	br	8b0c <__lshift+0xd8>
    8b74:	9c000084 	addi	r16,r19,2
    8b78:	003fe406 	br	8b0c <__lshift+0xd8>

00008b7c <__mcmp>:
    8b7c:	20800417 	ldw	r2,16(r4)
    8b80:	28c00417 	ldw	r3,16(r5)
    8b84:	10c5c83a 	sub	r2,r2,r3
    8b88:	1000111e 	bne	r2,zero,8bd0 <__mcmp+0x54>
    8b8c:	18c7883a 	add	r3,r3,r3
    8b90:	18c7883a 	add	r3,r3,r3
    8b94:	21000504 	addi	r4,r4,20
    8b98:	29400504 	addi	r5,r5,20
    8b9c:	20c5883a 	add	r2,r4,r3
    8ba0:	28cb883a 	add	r5,r5,r3
    8ba4:	00000106 	br	8bac <__mcmp+0x30>
    8ba8:	20800a2e 	bgeu	r4,r2,8bd4 <__mcmp+0x58>
    8bac:	10bfff04 	addi	r2,r2,-4
    8bb0:	297fff04 	addi	r5,r5,-4
    8bb4:	11800017 	ldw	r6,0(r2)
    8bb8:	28c00017 	ldw	r3,0(r5)
    8bbc:	30fffa26 	beq	r6,r3,8ba8 <__mcmp+0x2c>
    8bc0:	30c00236 	bltu	r6,r3,8bcc <__mcmp+0x50>
    8bc4:	00800044 	movi	r2,1
    8bc8:	f800283a 	ret
    8bcc:	00bfffc4 	movi	r2,-1
    8bd0:	f800283a 	ret
    8bd4:	0005883a 	mov	r2,zero
    8bd8:	f800283a 	ret

00008bdc <__mdiff>:
    8bdc:	28c00417 	ldw	r3,16(r5)
    8be0:	30800417 	ldw	r2,16(r6)
    8be4:	defffa04 	addi	sp,sp,-24
    8be8:	dcc00315 	stw	r19,12(sp)
    8bec:	dc800215 	stw	r18,8(sp)
    8bf0:	dfc00515 	stw	ra,20(sp)
    8bf4:	dd000415 	stw	r20,16(sp)
    8bf8:	dc400115 	stw	r17,4(sp)
    8bfc:	dc000015 	stw	r16,0(sp)
    8c00:	1887c83a 	sub	r3,r3,r2
    8c04:	2825883a 	mov	r18,r5
    8c08:	3027883a 	mov	r19,r6
    8c0c:	1800141e 	bne	r3,zero,8c60 <__mdiff+0x84>
    8c10:	1085883a 	add	r2,r2,r2
    8c14:	1085883a 	add	r2,r2,r2
    8c18:	2a000504 	addi	r8,r5,20
    8c1c:	34000504 	addi	r16,r6,20
    8c20:	4087883a 	add	r3,r8,r2
    8c24:	8085883a 	add	r2,r16,r2
    8c28:	00000106 	br	8c30 <__mdiff+0x54>
    8c2c:	40c0592e 	bgeu	r8,r3,8d94 <__mdiff+0x1b8>
    8c30:	18ffff04 	addi	r3,r3,-4
    8c34:	10bfff04 	addi	r2,r2,-4
    8c38:	19c00017 	ldw	r7,0(r3)
    8c3c:	11400017 	ldw	r5,0(r2)
    8c40:	397ffa26 	beq	r7,r5,8c2c <__mdiff+0x50>
    8c44:	3940592e 	bgeu	r7,r5,8dac <__mdiff+0x1d0>
    8c48:	9005883a 	mov	r2,r18
    8c4c:	4023883a 	mov	r17,r8
    8c50:	9825883a 	mov	r18,r19
    8c54:	05000044 	movi	r20,1
    8c58:	1027883a 	mov	r19,r2
    8c5c:	00000406 	br	8c70 <__mdiff+0x94>
    8c60:	18005616 	blt	r3,zero,8dbc <__mdiff+0x1e0>
    8c64:	34400504 	addi	r17,r6,20
    8c68:	2c000504 	addi	r16,r5,20
    8c6c:	0029883a 	mov	r20,zero
    8c70:	91400117 	ldw	r5,4(r18)
    8c74:	00082b40 	call	82b4 <_Balloc>
    8c78:	92400417 	ldw	r9,16(r18)
    8c7c:	9b000417 	ldw	r12,16(r19)
    8c80:	12c00504 	addi	r11,r2,20
    8c84:	4a51883a 	add	r8,r9,r9
    8c88:	6319883a 	add	r12,r12,r12
    8c8c:	4211883a 	add	r8,r8,r8
    8c90:	6319883a 	add	r12,r12,r12
    8c94:	15000315 	stw	r20,12(r2)
    8c98:	8211883a 	add	r8,r16,r8
    8c9c:	8b19883a 	add	r12,r17,r12
    8ca0:	0007883a 	mov	r3,zero
    8ca4:	81400017 	ldw	r5,0(r16)
    8ca8:	89c00017 	ldw	r7,0(r17)
    8cac:	59800104 	addi	r6,r11,4
    8cb0:	293fffcc 	andi	r4,r5,65535
    8cb4:	20c7883a 	add	r3,r4,r3
    8cb8:	393fffcc 	andi	r4,r7,65535
    8cbc:	1909c83a 	sub	r4,r3,r4
    8cc0:	280ad43a 	srli	r5,r5,16
    8cc4:	380ed43a 	srli	r7,r7,16
    8cc8:	2007d43a 	srai	r3,r4,16
    8ccc:	213fffcc 	andi	r4,r4,65535
    8cd0:	29cbc83a 	sub	r5,r5,r7
    8cd4:	28c7883a 	add	r3,r5,r3
    8cd8:	180a943a 	slli	r5,r3,16
    8cdc:	8c400104 	addi	r17,r17,4
    8ce0:	84000104 	addi	r16,r16,4
    8ce4:	2908b03a 	or	r4,r5,r4
    8ce8:	59000015 	stw	r4,0(r11)
    8cec:	1807d43a 	srai	r3,r3,16
    8cf0:	3015883a 	mov	r10,r6
    8cf4:	3017883a 	mov	r11,r6
    8cf8:	8b3fea36 	bltu	r17,r12,8ca4 <__mdiff+0xc8>
    8cfc:	8200162e 	bgeu	r16,r8,8d58 <__mdiff+0x17c>
    8d00:	8017883a 	mov	r11,r16
    8d04:	59400017 	ldw	r5,0(r11)
    8d08:	31800104 	addi	r6,r6,4
    8d0c:	5ac00104 	addi	r11,r11,4
    8d10:	293fffcc 	andi	r4,r5,65535
    8d14:	20c7883a 	add	r3,r4,r3
    8d18:	280ed43a 	srli	r7,r5,16
    8d1c:	180bd43a 	srai	r5,r3,16
    8d20:	193fffcc 	andi	r4,r3,65535
    8d24:	3947883a 	add	r3,r7,r5
    8d28:	180a943a 	slli	r5,r3,16
    8d2c:	1807d43a 	srai	r3,r3,16
    8d30:	2908b03a 	or	r4,r5,r4
    8d34:	313fff15 	stw	r4,-4(r6)
    8d38:	5a3ff236 	bltu	r11,r8,8d04 <__mdiff+0x128>
    8d3c:	0406303a 	nor	r3,zero,r16
    8d40:	1a07883a 	add	r3,r3,r8
    8d44:	1806d0ba 	srli	r3,r3,2
    8d48:	18c00044 	addi	r3,r3,1
    8d4c:	18c7883a 	add	r3,r3,r3
    8d50:	18c7883a 	add	r3,r3,r3
    8d54:	50d5883a 	add	r10,r10,r3
    8d58:	50ffff04 	addi	r3,r10,-4
    8d5c:	2000041e 	bne	r4,zero,8d70 <__mdiff+0x194>
    8d60:	18ffff04 	addi	r3,r3,-4
    8d64:	19000017 	ldw	r4,0(r3)
    8d68:	4a7fffc4 	addi	r9,r9,-1
    8d6c:	203ffc26 	beq	r4,zero,8d60 <__mdiff+0x184>
    8d70:	12400415 	stw	r9,16(r2)
    8d74:	dfc00517 	ldw	ra,20(sp)
    8d78:	dd000417 	ldw	r20,16(sp)
    8d7c:	dcc00317 	ldw	r19,12(sp)
    8d80:	dc800217 	ldw	r18,8(sp)
    8d84:	dc400117 	ldw	r17,4(sp)
    8d88:	dc000017 	ldw	r16,0(sp)
    8d8c:	dec00604 	addi	sp,sp,24
    8d90:	f800283a 	ret
    8d94:	000b883a 	mov	r5,zero
    8d98:	00082b40 	call	82b4 <_Balloc>
    8d9c:	00c00044 	movi	r3,1
    8da0:	10c00415 	stw	r3,16(r2)
    8da4:	10000515 	stw	zero,20(r2)
    8da8:	003ff206 	br	8d74 <__mdiff+0x198>
    8dac:	8023883a 	mov	r17,r16
    8db0:	0029883a 	mov	r20,zero
    8db4:	4021883a 	mov	r16,r8
    8db8:	003fad06 	br	8c70 <__mdiff+0x94>
    8dbc:	9005883a 	mov	r2,r18
    8dc0:	94400504 	addi	r17,r18,20
    8dc4:	9c000504 	addi	r16,r19,20
    8dc8:	9825883a 	mov	r18,r19
    8dcc:	05000044 	movi	r20,1
    8dd0:	1027883a 	mov	r19,r2
    8dd4:	003fa606 	br	8c70 <__mdiff+0x94>

00008dd8 <__ulp>:
    8dd8:	295ffc2c 	andhi	r5,r5,32752
    8ddc:	00bf3034 	movhi	r2,64704
    8de0:	2887883a 	add	r3,r5,r2
    8de4:	00c0020e 	bge	zero,r3,8df0 <__ulp+0x18>
    8de8:	0005883a 	mov	r2,zero
    8dec:	f800283a 	ret
    8df0:	00c7c83a 	sub	r3,zero,r3
    8df4:	1807d53a 	srai	r3,r3,20
    8df8:	008004c4 	movi	r2,19
    8dfc:	10c00b0e 	bge	r2,r3,8e2c <__ulp+0x54>
    8e00:	18bffb04 	addi	r2,r3,-20
    8e04:	01000784 	movi	r4,30
    8e08:	0007883a 	mov	r3,zero
    8e0c:	20800516 	blt	r4,r2,8e24 <__ulp+0x4c>
    8e10:	010007c4 	movi	r4,31
    8e14:	2089c83a 	sub	r4,r4,r2
    8e18:	00800044 	movi	r2,1
    8e1c:	1104983a 	sll	r2,r2,r4
    8e20:	f800283a 	ret
    8e24:	00800044 	movi	r2,1
    8e28:	f800283a 	ret
    8e2c:	01400234 	movhi	r5,8
    8e30:	28c7d83a 	sra	r3,r5,r3
    8e34:	0005883a 	mov	r2,zero
    8e38:	f800283a 	ret

00008e3c <__b2d>:
    8e3c:	defffa04 	addi	sp,sp,-24
    8e40:	dc000015 	stw	r16,0(sp)
    8e44:	24000417 	ldw	r16,16(r4)
    8e48:	dc400115 	stw	r17,4(sp)
    8e4c:	24400504 	addi	r17,r4,20
    8e50:	8421883a 	add	r16,r16,r16
    8e54:	8421883a 	add	r16,r16,r16
    8e58:	8c21883a 	add	r16,r17,r16
    8e5c:	dc800215 	stw	r18,8(sp)
    8e60:	84bfff17 	ldw	r18,-4(r16)
    8e64:	dd000415 	stw	r20,16(sp)
    8e68:	dcc00315 	stw	r19,12(sp)
    8e6c:	9009883a 	mov	r4,r18
    8e70:	2829883a 	mov	r20,r5
    8e74:	dfc00515 	stw	ra,20(sp)
    8e78:	00085a80 	call	85a8 <__hi0bits>
    8e7c:	00c00804 	movi	r3,32
    8e80:	1889c83a 	sub	r4,r3,r2
    8e84:	a1000015 	stw	r4,0(r20)
    8e88:	01000284 	movi	r4,10
    8e8c:	84ffff04 	addi	r19,r16,-4
    8e90:	20801216 	blt	r4,r2,8edc <__b2d+0xa0>
    8e94:	018002c4 	movi	r6,11
    8e98:	308dc83a 	sub	r6,r6,r2
    8e9c:	9186d83a 	srl	r3,r18,r6
    8ea0:	18cffc34 	orhi	r3,r3,16368
    8ea4:	8cc0212e 	bgeu	r17,r19,8f2c <__b2d+0xf0>
    8ea8:	813ffe17 	ldw	r4,-8(r16)
    8eac:	218cd83a 	srl	r6,r4,r6
    8eb0:	10800544 	addi	r2,r2,21
    8eb4:	9084983a 	sll	r2,r18,r2
    8eb8:	1184b03a 	or	r2,r2,r6
    8ebc:	dfc00517 	ldw	ra,20(sp)
    8ec0:	dd000417 	ldw	r20,16(sp)
    8ec4:	dcc00317 	ldw	r19,12(sp)
    8ec8:	dc800217 	ldw	r18,8(sp)
    8ecc:	dc400117 	ldw	r17,4(sp)
    8ed0:	dc000017 	ldw	r16,0(sp)
    8ed4:	dec00604 	addi	sp,sp,24
    8ed8:	f800283a 	ret
    8edc:	8cc00f2e 	bgeu	r17,r19,8f1c <__b2d+0xe0>
    8ee0:	117ffd44 	addi	r5,r2,-11
    8ee4:	80bffe17 	ldw	r2,-8(r16)
    8ee8:	28000e26 	beq	r5,zero,8f24 <__b2d+0xe8>
    8eec:	1949c83a 	sub	r4,r3,r5
    8ef0:	9164983a 	sll	r18,r18,r5
    8ef4:	1106d83a 	srl	r3,r2,r4
    8ef8:	81bffe04 	addi	r6,r16,-8
    8efc:	948ffc34 	orhi	r18,r18,16368
    8f00:	90c6b03a 	or	r3,r18,r3
    8f04:	89800e2e 	bgeu	r17,r6,8f40 <__b2d+0x104>
    8f08:	81bffd17 	ldw	r6,-12(r16)
    8f0c:	1144983a 	sll	r2,r2,r5
    8f10:	310ad83a 	srl	r5,r6,r4
    8f14:	2884b03a 	or	r2,r5,r2
    8f18:	003fe806 	br	8ebc <__b2d+0x80>
    8f1c:	10bffd44 	addi	r2,r2,-11
    8f20:	1000041e 	bne	r2,zero,8f34 <__b2d+0xf8>
    8f24:	90cffc34 	orhi	r3,r18,16368
    8f28:	003fe406 	br	8ebc <__b2d+0x80>
    8f2c:	000d883a 	mov	r6,zero
    8f30:	003fdf06 	br	8eb0 <__b2d+0x74>
    8f34:	90a4983a 	sll	r18,r18,r2
    8f38:	0005883a 	mov	r2,zero
    8f3c:	003ff906 	br	8f24 <__b2d+0xe8>
    8f40:	1144983a 	sll	r2,r2,r5
    8f44:	003fdd06 	br	8ebc <__b2d+0x80>

00008f48 <__d2b>:
    8f48:	defff804 	addi	sp,sp,-32
    8f4c:	dc000215 	stw	r16,8(sp)
    8f50:	3021883a 	mov	r16,r6
    8f54:	dc400315 	stw	r17,12(sp)
    8f58:	8022907a 	slli	r17,r16,1
    8f5c:	dd000615 	stw	r20,24(sp)
    8f60:	2829883a 	mov	r20,r5
    8f64:	01400044 	movi	r5,1
    8f68:	dcc00515 	stw	r19,20(sp)
    8f6c:	dc800415 	stw	r18,16(sp)
    8f70:	dfc00715 	stw	ra,28(sp)
    8f74:	3825883a 	mov	r18,r7
    8f78:	8822d57a 	srli	r17,r17,21
    8f7c:	00082b40 	call	82b4 <_Balloc>
    8f80:	1027883a 	mov	r19,r2
    8f84:	00800434 	movhi	r2,16
    8f88:	10bfffc4 	addi	r2,r2,-1
    8f8c:	808c703a 	and	r6,r16,r2
    8f90:	88000126 	beq	r17,zero,8f98 <__d2b+0x50>
    8f94:	31800434 	orhi	r6,r6,16
    8f98:	d9800015 	stw	r6,0(sp)
    8f9c:	a0002426 	beq	r20,zero,9030 <__d2b+0xe8>
    8fa0:	d9000104 	addi	r4,sp,4
    8fa4:	dd000115 	stw	r20,4(sp)
    8fa8:	00086100 	call	8610 <__lo0bits>
    8fac:	d8c00017 	ldw	r3,0(sp)
    8fb0:	10002f1e 	bne	r2,zero,9070 <__d2b+0x128>
    8fb4:	d9000117 	ldw	r4,4(sp)
    8fb8:	99000515 	stw	r4,20(r19)
    8fbc:	1821003a 	cmpeq	r16,r3,zero
    8fc0:	01000084 	movi	r4,2
    8fc4:	2421c83a 	sub	r16,r4,r16
    8fc8:	98c00615 	stw	r3,24(r19)
    8fcc:	9c000415 	stw	r16,16(r19)
    8fd0:	88001f1e 	bne	r17,zero,9050 <__d2b+0x108>
    8fd4:	10bef384 	addi	r2,r2,-1074
    8fd8:	90800015 	stw	r2,0(r18)
    8fdc:	00900034 	movhi	r2,16384
    8fe0:	10bfffc4 	addi	r2,r2,-1
    8fe4:	8085883a 	add	r2,r16,r2
    8fe8:	1085883a 	add	r2,r2,r2
    8fec:	1085883a 	add	r2,r2,r2
    8ff0:	9885883a 	add	r2,r19,r2
    8ff4:	11000517 	ldw	r4,20(r2)
    8ff8:	8020917a 	slli	r16,r16,5
    8ffc:	00085a80 	call	85a8 <__hi0bits>
    9000:	d8c00817 	ldw	r3,32(sp)
    9004:	8085c83a 	sub	r2,r16,r2
    9008:	18800015 	stw	r2,0(r3)
    900c:	9805883a 	mov	r2,r19
    9010:	dfc00717 	ldw	ra,28(sp)
    9014:	dd000617 	ldw	r20,24(sp)
    9018:	dcc00517 	ldw	r19,20(sp)
    901c:	dc800417 	ldw	r18,16(sp)
    9020:	dc400317 	ldw	r17,12(sp)
    9024:	dc000217 	ldw	r16,8(sp)
    9028:	dec00804 	addi	sp,sp,32
    902c:	f800283a 	ret
    9030:	d809883a 	mov	r4,sp
    9034:	00086100 	call	8610 <__lo0bits>
    9038:	d8c00017 	ldw	r3,0(sp)
    903c:	04000044 	movi	r16,1
    9040:	9c000415 	stw	r16,16(r19)
    9044:	98c00515 	stw	r3,20(r19)
    9048:	10800804 	addi	r2,r2,32
    904c:	883fe126 	beq	r17,zero,8fd4 <__d2b+0x8c>
    9050:	00c00d44 	movi	r3,53
    9054:	8c7ef344 	addi	r17,r17,-1075
    9058:	88a3883a 	add	r17,r17,r2
    905c:	1885c83a 	sub	r2,r3,r2
    9060:	d8c00817 	ldw	r3,32(sp)
    9064:	94400015 	stw	r17,0(r18)
    9068:	18800015 	stw	r2,0(r3)
    906c:	003fe706 	br	900c <__d2b+0xc4>
    9070:	01000804 	movi	r4,32
    9074:	2089c83a 	sub	r4,r4,r2
    9078:	1908983a 	sll	r4,r3,r4
    907c:	d9400117 	ldw	r5,4(sp)
    9080:	1886d83a 	srl	r3,r3,r2
    9084:	2148b03a 	or	r4,r4,r5
    9088:	99000515 	stw	r4,20(r19)
    908c:	d8c00015 	stw	r3,0(sp)
    9090:	003fca06 	br	8fbc <__d2b+0x74>

00009094 <__ratio>:
    9094:	defff904 	addi	sp,sp,-28
    9098:	dc400315 	stw	r17,12(sp)
    909c:	2823883a 	mov	r17,r5
    90a0:	d9400104 	addi	r5,sp,4
    90a4:	dfc00615 	stw	ra,24(sp)
    90a8:	dcc00515 	stw	r19,20(sp)
    90ac:	dc800415 	stw	r18,16(sp)
    90b0:	2027883a 	mov	r19,r4
    90b4:	dc000215 	stw	r16,8(sp)
    90b8:	0008e3c0 	call	8e3c <__b2d>
    90bc:	d80b883a 	mov	r5,sp
    90c0:	8809883a 	mov	r4,r17
    90c4:	1025883a 	mov	r18,r2
    90c8:	1821883a 	mov	r16,r3
    90cc:	0008e3c0 	call	8e3c <__b2d>
    90d0:	8a000417 	ldw	r8,16(r17)
    90d4:	99000417 	ldw	r4,16(r19)
    90d8:	d9400117 	ldw	r5,4(sp)
    90dc:	2209c83a 	sub	r4,r4,r8
    90e0:	2010917a 	slli	r8,r4,5
    90e4:	d9000017 	ldw	r4,0(sp)
    90e8:	2909c83a 	sub	r4,r5,r4
    90ec:	4109883a 	add	r4,r8,r4
    90f0:	01000e0e 	bge	zero,r4,912c <__ratio+0x98>
    90f4:	2008953a 	slli	r4,r4,20
    90f8:	2421883a 	add	r16,r4,r16
    90fc:	100d883a 	mov	r6,r2
    9100:	180f883a 	mov	r7,r3
    9104:	9009883a 	mov	r4,r18
    9108:	800b883a 	mov	r5,r16
    910c:	000cf2c0 	call	cf2c <__divdf3>
    9110:	dfc00617 	ldw	ra,24(sp)
    9114:	dcc00517 	ldw	r19,20(sp)
    9118:	dc800417 	ldw	r18,16(sp)
    911c:	dc400317 	ldw	r17,12(sp)
    9120:	dc000217 	ldw	r16,8(sp)
    9124:	dec00704 	addi	sp,sp,28
    9128:	f800283a 	ret
    912c:	2008953a 	slli	r4,r4,20
    9130:	1907c83a 	sub	r3,r3,r4
    9134:	003ff106 	br	90fc <__ratio+0x68>

00009138 <_mprec_log10>:
    9138:	defffe04 	addi	sp,sp,-8
    913c:	dc000015 	stw	r16,0(sp)
    9140:	dfc00115 	stw	ra,4(sp)
    9144:	008005c4 	movi	r2,23
    9148:	2021883a 	mov	r16,r4
    914c:	11000d0e 	bge	r2,r4,9184 <_mprec_log10+0x4c>
    9150:	0005883a 	mov	r2,zero
    9154:	00cffc34 	movhi	r3,16368
    9158:	843fffc4 	addi	r16,r16,-1
    915c:	000d883a 	mov	r6,zero
    9160:	01d00934 	movhi	r7,16420
    9164:	1009883a 	mov	r4,r2
    9168:	180b883a 	mov	r5,r3
    916c:	000da6c0 	call	da6c <__muldf3>
    9170:	803ff91e 	bne	r16,zero,9158 <_mprec_log10+0x20>
    9174:	dfc00117 	ldw	ra,4(sp)
    9178:	dc000017 	ldw	r16,0(sp)
    917c:	dec00204 	addi	sp,sp,8
    9180:	f800283a 	ret
    9184:	202090fa 	slli	r16,r4,3
    9188:	00800074 	movhi	r2,1
    918c:	10872f04 	addi	r2,r2,7356
    9190:	1421883a 	add	r16,r2,r16
    9194:	80800017 	ldw	r2,0(r16)
    9198:	80c00117 	ldw	r3,4(r16)
    919c:	dfc00117 	ldw	ra,4(sp)
    91a0:	dc000017 	ldw	r16,0(sp)
    91a4:	dec00204 	addi	sp,sp,8
    91a8:	f800283a 	ret

000091ac <__copybits>:
    91ac:	297fffc4 	addi	r5,r5,-1
    91b0:	280fd17a 	srai	r7,r5,5
    91b4:	30c00417 	ldw	r3,16(r6)
    91b8:	30800504 	addi	r2,r6,20
    91bc:	39c00044 	addi	r7,r7,1
    91c0:	18c7883a 	add	r3,r3,r3
    91c4:	39cf883a 	add	r7,r7,r7
    91c8:	18c7883a 	add	r3,r3,r3
    91cc:	39cf883a 	add	r7,r7,r7
    91d0:	10c7883a 	add	r3,r2,r3
    91d4:	21cf883a 	add	r7,r4,r7
    91d8:	10c00d2e 	bgeu	r2,r3,9210 <__copybits+0x64>
    91dc:	200b883a 	mov	r5,r4
    91e0:	12000017 	ldw	r8,0(r2)
    91e4:	29400104 	addi	r5,r5,4
    91e8:	10800104 	addi	r2,r2,4
    91ec:	2a3fff15 	stw	r8,-4(r5)
    91f0:	10fffb36 	bltu	r2,r3,91e0 <__copybits+0x34>
    91f4:	1985c83a 	sub	r2,r3,r6
    91f8:	10bffac4 	addi	r2,r2,-21
    91fc:	1004d0ba 	srli	r2,r2,2
    9200:	10800044 	addi	r2,r2,1
    9204:	1085883a 	add	r2,r2,r2
    9208:	1085883a 	add	r2,r2,r2
    920c:	2089883a 	add	r4,r4,r2
    9210:	21c0032e 	bgeu	r4,r7,9220 <__copybits+0x74>
    9214:	20000015 	stw	zero,0(r4)
    9218:	21000104 	addi	r4,r4,4
    921c:	21fffd36 	bltu	r4,r7,9214 <__copybits+0x68>
    9220:	f800283a 	ret

00009224 <__any_on>:
    9224:	20c00417 	ldw	r3,16(r4)
    9228:	2805d17a 	srai	r2,r5,5
    922c:	21000504 	addi	r4,r4,20
    9230:	18800d0e 	bge	r3,r2,9268 <__any_on+0x44>
    9234:	18c7883a 	add	r3,r3,r3
    9238:	18c7883a 	add	r3,r3,r3
    923c:	20c7883a 	add	r3,r4,r3
    9240:	20c0192e 	bgeu	r4,r3,92a8 <__any_on+0x84>
    9244:	18bfff17 	ldw	r2,-4(r3)
    9248:	18ffff04 	addi	r3,r3,-4
    924c:	1000041e 	bne	r2,zero,9260 <__any_on+0x3c>
    9250:	20c0142e 	bgeu	r4,r3,92a4 <__any_on+0x80>
    9254:	18ffff04 	addi	r3,r3,-4
    9258:	19400017 	ldw	r5,0(r3)
    925c:	283ffc26 	beq	r5,zero,9250 <__any_on+0x2c>
    9260:	00800044 	movi	r2,1
    9264:	f800283a 	ret
    9268:	10c00a0e 	bge	r2,r3,9294 <__any_on+0x70>
    926c:	1085883a 	add	r2,r2,r2
    9270:	1085883a 	add	r2,r2,r2
    9274:	294007cc 	andi	r5,r5,31
    9278:	2087883a 	add	r3,r4,r2
    927c:	283ff026 	beq	r5,zero,9240 <__any_on+0x1c>
    9280:	19800017 	ldw	r6,0(r3)
    9284:	3144d83a 	srl	r2,r6,r5
    9288:	114a983a 	sll	r5,r2,r5
    928c:	317ff41e 	bne	r6,r5,9260 <__any_on+0x3c>
    9290:	003feb06 	br	9240 <__any_on+0x1c>
    9294:	1085883a 	add	r2,r2,r2
    9298:	1085883a 	add	r2,r2,r2
    929c:	2087883a 	add	r3,r4,r2
    92a0:	003fe706 	br	9240 <__any_on+0x1c>
    92a4:	f800283a 	ret
    92a8:	0005883a 	mov	r2,zero
    92ac:	f800283a 	ret

000092b0 <_realloc_r>:
    92b0:	defff604 	addi	sp,sp,-40
    92b4:	dc800215 	stw	r18,8(sp)
    92b8:	dfc00915 	stw	ra,36(sp)
    92bc:	df000815 	stw	fp,32(sp)
    92c0:	ddc00715 	stw	r23,28(sp)
    92c4:	dd800615 	stw	r22,24(sp)
    92c8:	dd400515 	stw	r21,20(sp)
    92cc:	dd000415 	stw	r20,16(sp)
    92d0:	dcc00315 	stw	r19,12(sp)
    92d4:	dc400115 	stw	r17,4(sp)
    92d8:	dc000015 	stw	r16,0(sp)
    92dc:	3025883a 	mov	r18,r6
    92e0:	2800b726 	beq	r5,zero,95c0 <_realloc_r+0x310>
    92e4:	282b883a 	mov	r21,r5
    92e8:	2029883a 	mov	r20,r4
    92ec:	000f2640 	call	f264 <__malloc_lock>
    92f0:	a8bfff17 	ldw	r2,-4(r21)
    92f4:	043fff04 	movi	r16,-4
    92f8:	90c002c4 	addi	r3,r18,11
    92fc:	01000584 	movi	r4,22
    9300:	acfffe04 	addi	r19,r21,-8
    9304:	1420703a 	and	r16,r2,r16
    9308:	20c0332e 	bgeu	r4,r3,93d8 <_realloc_r+0x128>
    930c:	047ffe04 	movi	r17,-8
    9310:	1c62703a 	and	r17,r3,r17
    9314:	8807883a 	mov	r3,r17
    9318:	88005816 	blt	r17,zero,947c <_realloc_r+0x1cc>
    931c:	8c805736 	bltu	r17,r18,947c <_realloc_r+0x1cc>
    9320:	80c0300e 	bge	r16,r3,93e4 <_realloc_r+0x134>
    9324:	07000074 	movhi	fp,1
    9328:	e707b404 	addi	fp,fp,7888
    932c:	e1c00217 	ldw	r7,8(fp)
    9330:	9c09883a 	add	r4,r19,r16
    9334:	22000117 	ldw	r8,4(r4)
    9338:	21c06326 	beq	r4,r7,94c8 <_realloc_r+0x218>
    933c:	017fff84 	movi	r5,-2
    9340:	414a703a 	and	r5,r8,r5
    9344:	214b883a 	add	r5,r4,r5
    9348:	29800117 	ldw	r6,4(r5)
    934c:	3180004c 	andi	r6,r6,1
    9350:	30003f26 	beq	r6,zero,9450 <_realloc_r+0x1a0>
    9354:	1080004c 	andi	r2,r2,1
    9358:	10008326 	beq	r2,zero,9568 <_realloc_r+0x2b8>
    935c:	900b883a 	mov	r5,r18
    9360:	a009883a 	mov	r4,r20
    9364:	00023c80 	call	23c8 <_malloc_r>
    9368:	1025883a 	mov	r18,r2
    936c:	10011e26 	beq	r2,zero,97e8 <_realloc_r+0x538>
    9370:	a93fff17 	ldw	r4,-4(r21)
    9374:	10fffe04 	addi	r3,r2,-8
    9378:	00bfff84 	movi	r2,-2
    937c:	2084703a 	and	r2,r4,r2
    9380:	9885883a 	add	r2,r19,r2
    9384:	1880ee26 	beq	r3,r2,9740 <_realloc_r+0x490>
    9388:	81bfff04 	addi	r6,r16,-4
    938c:	00800904 	movi	r2,36
    9390:	1180b836 	bltu	r2,r6,9674 <_realloc_r+0x3c4>
    9394:	00c004c4 	movi	r3,19
    9398:	19809636 	bltu	r3,r6,95f4 <_realloc_r+0x344>
    939c:	9005883a 	mov	r2,r18
    93a0:	a807883a 	mov	r3,r21
    93a4:	19000017 	ldw	r4,0(r3)
    93a8:	11000015 	stw	r4,0(r2)
    93ac:	19000117 	ldw	r4,4(r3)
    93b0:	11000115 	stw	r4,4(r2)
    93b4:	18c00217 	ldw	r3,8(r3)
    93b8:	10c00215 	stw	r3,8(r2)
    93bc:	a80b883a 	mov	r5,r21
    93c0:	a009883a 	mov	r4,r20
    93c4:	00072180 	call	7218 <_free_r>
    93c8:	a009883a 	mov	r4,r20
    93cc:	000f2880 	call	f288 <__malloc_unlock>
    93d0:	9005883a 	mov	r2,r18
    93d4:	00001206 	br	9420 <_realloc_r+0x170>
    93d8:	00c00404 	movi	r3,16
    93dc:	1823883a 	mov	r17,r3
    93e0:	003fce06 	br	931c <_realloc_r+0x6c>
    93e4:	a825883a 	mov	r18,r21
    93e8:	8445c83a 	sub	r2,r16,r17
    93ec:	00c003c4 	movi	r3,15
    93f0:	18802636 	bltu	r3,r2,948c <_realloc_r+0x1dc>
    93f4:	99800117 	ldw	r6,4(r19)
    93f8:	9c07883a 	add	r3,r19,r16
    93fc:	3180004c 	andi	r6,r6,1
    9400:	3420b03a 	or	r16,r6,r16
    9404:	9c000115 	stw	r16,4(r19)
    9408:	18800117 	ldw	r2,4(r3)
    940c:	10800054 	ori	r2,r2,1
    9410:	18800115 	stw	r2,4(r3)
    9414:	a009883a 	mov	r4,r20
    9418:	000f2880 	call	f288 <__malloc_unlock>
    941c:	9005883a 	mov	r2,r18
    9420:	dfc00917 	ldw	ra,36(sp)
    9424:	df000817 	ldw	fp,32(sp)
    9428:	ddc00717 	ldw	r23,28(sp)
    942c:	dd800617 	ldw	r22,24(sp)
    9430:	dd400517 	ldw	r21,20(sp)
    9434:	dd000417 	ldw	r20,16(sp)
    9438:	dcc00317 	ldw	r19,12(sp)
    943c:	dc800217 	ldw	r18,8(sp)
    9440:	dc400117 	ldw	r17,4(sp)
    9444:	dc000017 	ldw	r16,0(sp)
    9448:	dec00a04 	addi	sp,sp,40
    944c:	f800283a 	ret
    9450:	017fff04 	movi	r5,-4
    9454:	414a703a 	and	r5,r8,r5
    9458:	814d883a 	add	r6,r16,r5
    945c:	30c01f16 	blt	r6,r3,94dc <_realloc_r+0x22c>
    9460:	20800317 	ldw	r2,12(r4)
    9464:	20c00217 	ldw	r3,8(r4)
    9468:	a825883a 	mov	r18,r21
    946c:	3021883a 	mov	r16,r6
    9470:	18800315 	stw	r2,12(r3)
    9474:	10c00215 	stw	r3,8(r2)
    9478:	003fdb06 	br	93e8 <_realloc_r+0x138>
    947c:	00800304 	movi	r2,12
    9480:	a0800015 	stw	r2,0(r20)
    9484:	0005883a 	mov	r2,zero
    9488:	003fe506 	br	9420 <_realloc_r+0x170>
    948c:	98c00117 	ldw	r3,4(r19)
    9490:	9c4b883a 	add	r5,r19,r17
    9494:	11000054 	ori	r4,r2,1
    9498:	18c0004c 	andi	r3,r3,1
    949c:	1c62b03a 	or	r17,r3,r17
    94a0:	9c400115 	stw	r17,4(r19)
    94a4:	29000115 	stw	r4,4(r5)
    94a8:	2885883a 	add	r2,r5,r2
    94ac:	10c00117 	ldw	r3,4(r2)
    94b0:	29400204 	addi	r5,r5,8
    94b4:	a009883a 	mov	r4,r20
    94b8:	18c00054 	ori	r3,r3,1
    94bc:	10c00115 	stw	r3,4(r2)
    94c0:	00072180 	call	7218 <_free_r>
    94c4:	003fd306 	br	9414 <_realloc_r+0x164>
    94c8:	017fff04 	movi	r5,-4
    94cc:	414a703a 	and	r5,r8,r5
    94d0:	89800404 	addi	r6,r17,16
    94d4:	8151883a 	add	r8,r16,r5
    94d8:	4180590e 	bge	r8,r6,9640 <_realloc_r+0x390>
    94dc:	1080004c 	andi	r2,r2,1
    94e0:	103f9e1e 	bne	r2,zero,935c <_realloc_r+0xac>
    94e4:	adbffe17 	ldw	r22,-8(r21)
    94e8:	00bfff04 	movi	r2,-4
    94ec:	9dadc83a 	sub	r22,r19,r22
    94f0:	b1800117 	ldw	r6,4(r22)
    94f4:	3084703a 	and	r2,r6,r2
    94f8:	20002026 	beq	r4,zero,957c <_realloc_r+0x2cc>
    94fc:	80af883a 	add	r23,r16,r2
    9500:	b96f883a 	add	r23,r23,r5
    9504:	21c05f26 	beq	r4,r7,9684 <_realloc_r+0x3d4>
    9508:	b8c01c16 	blt	r23,r3,957c <_realloc_r+0x2cc>
    950c:	20800317 	ldw	r2,12(r4)
    9510:	20c00217 	ldw	r3,8(r4)
    9514:	81bfff04 	addi	r6,r16,-4
    9518:	01000904 	movi	r4,36
    951c:	18800315 	stw	r2,12(r3)
    9520:	10c00215 	stw	r3,8(r2)
    9524:	b0c00217 	ldw	r3,8(r22)
    9528:	b0800317 	ldw	r2,12(r22)
    952c:	b4800204 	addi	r18,r22,8
    9530:	18800315 	stw	r2,12(r3)
    9534:	10c00215 	stw	r3,8(r2)
    9538:	21801b36 	bltu	r4,r6,95a8 <_realloc_r+0x2f8>
    953c:	008004c4 	movi	r2,19
    9540:	1180352e 	bgeu	r2,r6,9618 <_realloc_r+0x368>
    9544:	a8800017 	ldw	r2,0(r21)
    9548:	b0800215 	stw	r2,8(r22)
    954c:	a8800117 	ldw	r2,4(r21)
    9550:	b0800315 	stw	r2,12(r22)
    9554:	008006c4 	movi	r2,27
    9558:	11807f36 	bltu	r2,r6,9758 <_realloc_r+0x4a8>
    955c:	b0800404 	addi	r2,r22,16
    9560:	ad400204 	addi	r21,r21,8
    9564:	00002d06 	br	961c <_realloc_r+0x36c>
    9568:	adbffe17 	ldw	r22,-8(r21)
    956c:	00bfff04 	movi	r2,-4
    9570:	9dadc83a 	sub	r22,r19,r22
    9574:	b1000117 	ldw	r4,4(r22)
    9578:	2084703a 	and	r2,r4,r2
    957c:	b03f7726 	beq	r22,zero,935c <_realloc_r+0xac>
    9580:	80af883a 	add	r23,r16,r2
    9584:	b8ff7516 	blt	r23,r3,935c <_realloc_r+0xac>
    9588:	b0800317 	ldw	r2,12(r22)
    958c:	b0c00217 	ldw	r3,8(r22)
    9590:	81bfff04 	addi	r6,r16,-4
    9594:	01000904 	movi	r4,36
    9598:	18800315 	stw	r2,12(r3)
    959c:	10c00215 	stw	r3,8(r2)
    95a0:	b4800204 	addi	r18,r22,8
    95a4:	21bfe52e 	bgeu	r4,r6,953c <_realloc_r+0x28c>
    95a8:	a80b883a 	mov	r5,r21
    95ac:	9009883a 	mov	r4,r18
    95b0:	00080300 	call	8030 <memmove>
    95b4:	b821883a 	mov	r16,r23
    95b8:	b027883a 	mov	r19,r22
    95bc:	003f8a06 	br	93e8 <_realloc_r+0x138>
    95c0:	300b883a 	mov	r5,r6
    95c4:	dfc00917 	ldw	ra,36(sp)
    95c8:	df000817 	ldw	fp,32(sp)
    95cc:	ddc00717 	ldw	r23,28(sp)
    95d0:	dd800617 	ldw	r22,24(sp)
    95d4:	dd400517 	ldw	r21,20(sp)
    95d8:	dd000417 	ldw	r20,16(sp)
    95dc:	dcc00317 	ldw	r19,12(sp)
    95e0:	dc800217 	ldw	r18,8(sp)
    95e4:	dc400117 	ldw	r17,4(sp)
    95e8:	dc000017 	ldw	r16,0(sp)
    95ec:	dec00a04 	addi	sp,sp,40
    95f0:	00023c81 	jmpi	23c8 <_malloc_r>
    95f4:	a8c00017 	ldw	r3,0(r21)
    95f8:	90c00015 	stw	r3,0(r18)
    95fc:	a8c00117 	ldw	r3,4(r21)
    9600:	90c00115 	stw	r3,4(r18)
    9604:	00c006c4 	movi	r3,27
    9608:	19804536 	bltu	r3,r6,9720 <_realloc_r+0x470>
    960c:	90800204 	addi	r2,r18,8
    9610:	a8c00204 	addi	r3,r21,8
    9614:	003f6306 	br	93a4 <_realloc_r+0xf4>
    9618:	9005883a 	mov	r2,r18
    961c:	a8c00017 	ldw	r3,0(r21)
    9620:	b821883a 	mov	r16,r23
    9624:	b027883a 	mov	r19,r22
    9628:	10c00015 	stw	r3,0(r2)
    962c:	a8c00117 	ldw	r3,4(r21)
    9630:	10c00115 	stw	r3,4(r2)
    9634:	a8c00217 	ldw	r3,8(r21)
    9638:	10c00215 	stw	r3,8(r2)
    963c:	003f6a06 	br	93e8 <_realloc_r+0x138>
    9640:	9c67883a 	add	r19,r19,r17
    9644:	4445c83a 	sub	r2,r8,r17
    9648:	e4c00215 	stw	r19,8(fp)
    964c:	10800054 	ori	r2,r2,1
    9650:	98800115 	stw	r2,4(r19)
    9654:	a8bfff17 	ldw	r2,-4(r21)
    9658:	a009883a 	mov	r4,r20
    965c:	1080004c 	andi	r2,r2,1
    9660:	1462b03a 	or	r17,r2,r17
    9664:	ac7fff15 	stw	r17,-4(r21)
    9668:	000f2880 	call	f288 <__malloc_unlock>
    966c:	a805883a 	mov	r2,r21
    9670:	003f6b06 	br	9420 <_realloc_r+0x170>
    9674:	a80b883a 	mov	r5,r21
    9678:	9009883a 	mov	r4,r18
    967c:	00080300 	call	8030 <memmove>
    9680:	003f4e06 	br	93bc <_realloc_r+0x10c>
    9684:	89000404 	addi	r4,r17,16
    9688:	b93fbc16 	blt	r23,r4,957c <_realloc_r+0x2cc>
    968c:	b0800317 	ldw	r2,12(r22)
    9690:	b0c00217 	ldw	r3,8(r22)
    9694:	81bfff04 	addi	r6,r16,-4
    9698:	01000904 	movi	r4,36
    969c:	18800315 	stw	r2,12(r3)
    96a0:	10c00215 	stw	r3,8(r2)
    96a4:	b4800204 	addi	r18,r22,8
    96a8:	21804336 	bltu	r4,r6,97b8 <_realloc_r+0x508>
    96ac:	008004c4 	movi	r2,19
    96b0:	11803f2e 	bgeu	r2,r6,97b0 <_realloc_r+0x500>
    96b4:	a8800017 	ldw	r2,0(r21)
    96b8:	b0800215 	stw	r2,8(r22)
    96bc:	a8800117 	ldw	r2,4(r21)
    96c0:	b0800315 	stw	r2,12(r22)
    96c4:	008006c4 	movi	r2,27
    96c8:	11803f36 	bltu	r2,r6,97c8 <_realloc_r+0x518>
    96cc:	b0800404 	addi	r2,r22,16
    96d0:	ad400204 	addi	r21,r21,8
    96d4:	a8c00017 	ldw	r3,0(r21)
    96d8:	10c00015 	stw	r3,0(r2)
    96dc:	a8c00117 	ldw	r3,4(r21)
    96e0:	10c00115 	stw	r3,4(r2)
    96e4:	a8c00217 	ldw	r3,8(r21)
    96e8:	10c00215 	stw	r3,8(r2)
    96ec:	b447883a 	add	r3,r22,r17
    96f0:	bc45c83a 	sub	r2,r23,r17
    96f4:	e0c00215 	stw	r3,8(fp)
    96f8:	10800054 	ori	r2,r2,1
    96fc:	18800115 	stw	r2,4(r3)
    9700:	b0800117 	ldw	r2,4(r22)
    9704:	a009883a 	mov	r4,r20
    9708:	1080004c 	andi	r2,r2,1
    970c:	1462b03a 	or	r17,r2,r17
    9710:	b4400115 	stw	r17,4(r22)
    9714:	000f2880 	call	f288 <__malloc_unlock>
    9718:	9005883a 	mov	r2,r18
    971c:	003f4006 	br	9420 <_realloc_r+0x170>
    9720:	a8c00217 	ldw	r3,8(r21)
    9724:	90c00215 	stw	r3,8(r18)
    9728:	a8c00317 	ldw	r3,12(r21)
    972c:	90c00315 	stw	r3,12(r18)
    9730:	30801126 	beq	r6,r2,9778 <_realloc_r+0x4c8>
    9734:	90800404 	addi	r2,r18,16
    9738:	a8c00404 	addi	r3,r21,16
    973c:	003f1906 	br	93a4 <_realloc_r+0xf4>
    9740:	90ffff17 	ldw	r3,-4(r18)
    9744:	00bfff04 	movi	r2,-4
    9748:	a825883a 	mov	r18,r21
    974c:	1884703a 	and	r2,r3,r2
    9750:	80a1883a 	add	r16,r16,r2
    9754:	003f2406 	br	93e8 <_realloc_r+0x138>
    9758:	a8800217 	ldw	r2,8(r21)
    975c:	b0800415 	stw	r2,16(r22)
    9760:	a8800317 	ldw	r2,12(r21)
    9764:	b0800515 	stw	r2,20(r22)
    9768:	31000a26 	beq	r6,r4,9794 <_realloc_r+0x4e4>
    976c:	b0800604 	addi	r2,r22,24
    9770:	ad400404 	addi	r21,r21,16
    9774:	003fa906 	br	961c <_realloc_r+0x36c>
    9778:	a9000417 	ldw	r4,16(r21)
    977c:	90800604 	addi	r2,r18,24
    9780:	a8c00604 	addi	r3,r21,24
    9784:	91000415 	stw	r4,16(r18)
    9788:	a9000517 	ldw	r4,20(r21)
    978c:	91000515 	stw	r4,20(r18)
    9790:	003f0406 	br	93a4 <_realloc_r+0xf4>
    9794:	a8c00417 	ldw	r3,16(r21)
    9798:	ad400604 	addi	r21,r21,24
    979c:	b0800804 	addi	r2,r22,32
    97a0:	b0c00615 	stw	r3,24(r22)
    97a4:	a8ffff17 	ldw	r3,-4(r21)
    97a8:	b0c00715 	stw	r3,28(r22)
    97ac:	003f9b06 	br	961c <_realloc_r+0x36c>
    97b0:	9005883a 	mov	r2,r18
    97b4:	003fc706 	br	96d4 <_realloc_r+0x424>
    97b8:	a80b883a 	mov	r5,r21
    97bc:	9009883a 	mov	r4,r18
    97c0:	00080300 	call	8030 <memmove>
    97c4:	003fc906 	br	96ec <_realloc_r+0x43c>
    97c8:	a8800217 	ldw	r2,8(r21)
    97cc:	b0800415 	stw	r2,16(r22)
    97d0:	a8800317 	ldw	r2,12(r21)
    97d4:	b0800515 	stw	r2,20(r22)
    97d8:	31000726 	beq	r6,r4,97f8 <_realloc_r+0x548>
    97dc:	b0800604 	addi	r2,r22,24
    97e0:	ad400404 	addi	r21,r21,16
    97e4:	003fbb06 	br	96d4 <_realloc_r+0x424>
    97e8:	a009883a 	mov	r4,r20
    97ec:	000f2880 	call	f288 <__malloc_unlock>
    97f0:	0005883a 	mov	r2,zero
    97f4:	003f0a06 	br	9420 <_realloc_r+0x170>
    97f8:	a8c00417 	ldw	r3,16(r21)
    97fc:	ad400604 	addi	r21,r21,24
    9800:	b0800804 	addi	r2,r22,32
    9804:	b0c00615 	stw	r3,24(r22)
    9808:	a8ffff17 	ldw	r3,-4(r21)
    980c:	b0c00715 	stw	r3,28(r22)
    9810:	003fb006 	br	96d4 <_realloc_r+0x424>

00009814 <__fpclassifyd>:
    9814:	00a00034 	movhi	r2,32768
    9818:	10bfffc4 	addi	r2,r2,-1
    981c:	2884703a 	and	r2,r5,r2
    9820:	10000726 	beq	r2,zero,9840 <__fpclassifyd+0x2c>
    9824:	00fffc34 	movhi	r3,65520
    9828:	019ff834 	movhi	r6,32736
    982c:	28c7883a 	add	r3,r5,r3
    9830:	31bfffc4 	addi	r6,r6,-1
    9834:	30c00536 	bltu	r6,r3,984c <__fpclassifyd+0x38>
    9838:	00800104 	movi	r2,4
    983c:	f800283a 	ret
    9840:	2000021e 	bne	r4,zero,984c <__fpclassifyd+0x38>
    9844:	00800084 	movi	r2,2
    9848:	f800283a 	ret
    984c:	00dffc34 	movhi	r3,32752
    9850:	019ff834 	movhi	r6,32736
    9854:	28cb883a 	add	r5,r5,r3
    9858:	31bfffc4 	addi	r6,r6,-1
    985c:	317ff62e 	bgeu	r6,r5,9838 <__fpclassifyd+0x24>
    9860:	01400434 	movhi	r5,16
    9864:	297fffc4 	addi	r5,r5,-1
    9868:	28800236 	bltu	r5,r2,9874 <__fpclassifyd+0x60>
    986c:	008000c4 	movi	r2,3
    9870:	f800283a 	ret
    9874:	10c00226 	beq	r2,r3,9880 <__fpclassifyd+0x6c>
    9878:	0005883a 	mov	r2,zero
    987c:	f800283a 	ret
    9880:	2005003a 	cmpeq	r2,r4,zero
    9884:	f800283a 	ret

00009888 <__sread>:
    9888:	defffe04 	addi	sp,sp,-8
    988c:	dc000015 	stw	r16,0(sp)
    9890:	2821883a 	mov	r16,r5
    9894:	2940038f 	ldh	r5,14(r5)
    9898:	dfc00115 	stw	ra,4(sp)
    989c:	000b67c0 	call	b67c <_read_r>
    98a0:	10000716 	blt	r2,zero,98c0 <__sread+0x38>
    98a4:	80c01417 	ldw	r3,80(r16)
    98a8:	1887883a 	add	r3,r3,r2
    98ac:	80c01415 	stw	r3,80(r16)
    98b0:	dfc00117 	ldw	ra,4(sp)
    98b4:	dc000017 	ldw	r16,0(sp)
    98b8:	dec00204 	addi	sp,sp,8
    98bc:	f800283a 	ret
    98c0:	80c0030b 	ldhu	r3,12(r16)
    98c4:	18fbffcc 	andi	r3,r3,61439
    98c8:	80c0030d 	sth	r3,12(r16)
    98cc:	dfc00117 	ldw	ra,4(sp)
    98d0:	dc000017 	ldw	r16,0(sp)
    98d4:	dec00204 	addi	sp,sp,8
    98d8:	f800283a 	ret

000098dc <__seofread>:
    98dc:	0005883a 	mov	r2,zero
    98e0:	f800283a 	ret

000098e4 <__swrite>:
    98e4:	2880030b 	ldhu	r2,12(r5)
    98e8:	defffb04 	addi	sp,sp,-20
    98ec:	dcc00315 	stw	r19,12(sp)
    98f0:	dc800215 	stw	r18,8(sp)
    98f4:	dc400115 	stw	r17,4(sp)
    98f8:	dc000015 	stw	r16,0(sp)
    98fc:	dfc00415 	stw	ra,16(sp)
    9900:	10c0400c 	andi	r3,r2,256
    9904:	2821883a 	mov	r16,r5
    9908:	2023883a 	mov	r17,r4
    990c:	3025883a 	mov	r18,r6
    9910:	3827883a 	mov	r19,r7
    9914:	18000526 	beq	r3,zero,992c <__swrite+0x48>
    9918:	2940038f 	ldh	r5,14(r5)
    991c:	01c00084 	movi	r7,2
    9920:	000d883a 	mov	r6,zero
    9924:	000b61c0 	call	b61c <_lseek_r>
    9928:	8080030b 	ldhu	r2,12(r16)
    992c:	8140038f 	ldh	r5,14(r16)
    9930:	10bbffcc 	andi	r2,r2,61439
    9934:	980f883a 	mov	r7,r19
    9938:	900d883a 	mov	r6,r18
    993c:	8809883a 	mov	r4,r17
    9940:	8080030d 	sth	r2,12(r16)
    9944:	dfc00417 	ldw	ra,16(sp)
    9948:	dcc00317 	ldw	r19,12(sp)
    994c:	dc800217 	ldw	r18,8(sp)
    9950:	dc400117 	ldw	r17,4(sp)
    9954:	dc000017 	ldw	r16,0(sp)
    9958:	dec00504 	addi	sp,sp,20
    995c:	000b0e81 	jmpi	b0e8 <_write_r>

00009960 <__sseek>:
    9960:	defffe04 	addi	sp,sp,-8
    9964:	dc000015 	stw	r16,0(sp)
    9968:	2821883a 	mov	r16,r5
    996c:	2940038f 	ldh	r5,14(r5)
    9970:	dfc00115 	stw	ra,4(sp)
    9974:	000b61c0 	call	b61c <_lseek_r>
    9978:	00ffffc4 	movi	r3,-1
    997c:	10c00826 	beq	r2,r3,99a0 <__sseek+0x40>
    9980:	80c0030b 	ldhu	r3,12(r16)
    9984:	80801415 	stw	r2,80(r16)
    9988:	18c40014 	ori	r3,r3,4096
    998c:	80c0030d 	sth	r3,12(r16)
    9990:	dfc00117 	ldw	ra,4(sp)
    9994:	dc000017 	ldw	r16,0(sp)
    9998:	dec00204 	addi	sp,sp,8
    999c:	f800283a 	ret
    99a0:	80c0030b 	ldhu	r3,12(r16)
    99a4:	18fbffcc 	andi	r3,r3,61439
    99a8:	80c0030d 	sth	r3,12(r16)
    99ac:	dfc00117 	ldw	ra,4(sp)
    99b0:	dc000017 	ldw	r16,0(sp)
    99b4:	dec00204 	addi	sp,sp,8
    99b8:	f800283a 	ret

000099bc <__sclose>:
    99bc:	2940038f 	ldh	r5,14(r5)
    99c0:	000b1481 	jmpi	b148 <_close_r>

000099c4 <strcmp>:
    99c4:	2144b03a 	or	r2,r4,r5
    99c8:	108000cc 	andi	r2,r2,3
    99cc:	1000171e 	bne	r2,zero,9a2c <strcmp+0x68>
    99d0:	20800017 	ldw	r2,0(r4)
    99d4:	28c00017 	ldw	r3,0(r5)
    99d8:	10c0141e 	bne	r2,r3,9a2c <strcmp+0x68>
    99dc:	027fbff4 	movhi	r9,65279
    99e0:	4a7fbfc4 	addi	r9,r9,-257
    99e4:	0086303a 	nor	r3,zero,r2
    99e8:	02202074 	movhi	r8,32897
    99ec:	1245883a 	add	r2,r2,r9
    99f0:	42202004 	addi	r8,r8,-32640
    99f4:	10c4703a 	and	r2,r2,r3
    99f8:	1204703a 	and	r2,r2,r8
    99fc:	10000226 	beq	r2,zero,9a08 <strcmp+0x44>
    9a00:	00002306 	br	9a90 <strcmp+0xcc>
    9a04:	1000221e 	bne	r2,zero,9a90 <strcmp+0xcc>
    9a08:	21000104 	addi	r4,r4,4
    9a0c:	20c00017 	ldw	r3,0(r4)
    9a10:	29400104 	addi	r5,r5,4
    9a14:	29800017 	ldw	r6,0(r5)
    9a18:	1a4f883a 	add	r7,r3,r9
    9a1c:	00c4303a 	nor	r2,zero,r3
    9a20:	3884703a 	and	r2,r7,r2
    9a24:	1204703a 	and	r2,r2,r8
    9a28:	19bff626 	beq	r3,r6,9a04 <strcmp+0x40>
    9a2c:	20800003 	ldbu	r2,0(r4)
    9a30:	10c03fcc 	andi	r3,r2,255
    9a34:	18c0201c 	xori	r3,r3,128
    9a38:	18ffe004 	addi	r3,r3,-128
    9a3c:	18000c26 	beq	r3,zero,9a70 <strcmp+0xac>
    9a40:	29800007 	ldb	r6,0(r5)
    9a44:	19800326 	beq	r3,r6,9a54 <strcmp+0x90>
    9a48:	00001306 	br	9a98 <strcmp+0xd4>
    9a4c:	29800007 	ldb	r6,0(r5)
    9a50:	11800b1e 	bne	r2,r6,9a80 <strcmp+0xbc>
    9a54:	21000044 	addi	r4,r4,1
    9a58:	20c00003 	ldbu	r3,0(r4)
    9a5c:	29400044 	addi	r5,r5,1
    9a60:	18803fcc 	andi	r2,r3,255
    9a64:	1080201c 	xori	r2,r2,128
    9a68:	10bfe004 	addi	r2,r2,-128
    9a6c:	103ff71e 	bne	r2,zero,9a4c <strcmp+0x88>
    9a70:	0007883a 	mov	r3,zero
    9a74:	28800003 	ldbu	r2,0(r5)
    9a78:	1885c83a 	sub	r2,r3,r2
    9a7c:	f800283a 	ret
    9a80:	28800003 	ldbu	r2,0(r5)
    9a84:	18c03fcc 	andi	r3,r3,255
    9a88:	1885c83a 	sub	r2,r3,r2
    9a8c:	f800283a 	ret
    9a90:	0005883a 	mov	r2,zero
    9a94:	f800283a 	ret
    9a98:	10c03fcc 	andi	r3,r2,255
    9a9c:	003ff506 	br	9a74 <strcmp+0xb0>

00009aa0 <__sprint_r.part.0>:
    9aa0:	28801917 	ldw	r2,100(r5)
    9aa4:	defff604 	addi	sp,sp,-40
    9aa8:	dd400515 	stw	r21,20(sp)
    9aac:	dfc00915 	stw	ra,36(sp)
    9ab0:	df000815 	stw	fp,32(sp)
    9ab4:	ddc00715 	stw	r23,28(sp)
    9ab8:	dd800615 	stw	r22,24(sp)
    9abc:	dd000415 	stw	r20,16(sp)
    9ac0:	dcc00315 	stw	r19,12(sp)
    9ac4:	dc800215 	stw	r18,8(sp)
    9ac8:	dc400115 	stw	r17,4(sp)
    9acc:	dc000015 	stw	r16,0(sp)
    9ad0:	1088000c 	andi	r2,r2,8192
    9ad4:	302b883a 	mov	r21,r6
    9ad8:	10002e26 	beq	r2,zero,9b94 <__sprint_r.part.0+0xf4>
    9adc:	30800217 	ldw	r2,8(r6)
    9ae0:	35800017 	ldw	r22,0(r6)
    9ae4:	10002926 	beq	r2,zero,9b8c <__sprint_r.part.0+0xec>
    9ae8:	2827883a 	mov	r19,r5
    9aec:	2029883a 	mov	r20,r4
    9af0:	b5c00104 	addi	r23,r22,4
    9af4:	04bfffc4 	movi	r18,-1
    9af8:	bc400017 	ldw	r17,0(r23)
    9afc:	b4000017 	ldw	r16,0(r22)
    9b00:	0039883a 	mov	fp,zero
    9b04:	8822d0ba 	srli	r17,r17,2
    9b08:	8800031e 	bne	r17,zero,9b18 <__sprint_r.part.0+0x78>
    9b0c:	00001806 	br	9b70 <__sprint_r.part.0+0xd0>
    9b10:	84000104 	addi	r16,r16,4
    9b14:	8f001526 	beq	r17,fp,9b6c <__sprint_r.part.0+0xcc>
    9b18:	81400017 	ldw	r5,0(r16)
    9b1c:	980d883a 	mov	r6,r19
    9b20:	a009883a 	mov	r4,r20
    9b24:	000b4c80 	call	b4c8 <_fputwc_r>
    9b28:	e7000044 	addi	fp,fp,1
    9b2c:	14bff81e 	bne	r2,r18,9b10 <__sprint_r.part.0+0x70>
    9b30:	9005883a 	mov	r2,r18
    9b34:	a8000215 	stw	zero,8(r21)
    9b38:	a8000115 	stw	zero,4(r21)
    9b3c:	dfc00917 	ldw	ra,36(sp)
    9b40:	df000817 	ldw	fp,32(sp)
    9b44:	ddc00717 	ldw	r23,28(sp)
    9b48:	dd800617 	ldw	r22,24(sp)
    9b4c:	dd400517 	ldw	r21,20(sp)
    9b50:	dd000417 	ldw	r20,16(sp)
    9b54:	dcc00317 	ldw	r19,12(sp)
    9b58:	dc800217 	ldw	r18,8(sp)
    9b5c:	dc400117 	ldw	r17,4(sp)
    9b60:	dc000017 	ldw	r16,0(sp)
    9b64:	dec00a04 	addi	sp,sp,40
    9b68:	f800283a 	ret
    9b6c:	a8800217 	ldw	r2,8(r21)
    9b70:	8c63883a 	add	r17,r17,r17
    9b74:	8c63883a 	add	r17,r17,r17
    9b78:	1445c83a 	sub	r2,r2,r17
    9b7c:	a8800215 	stw	r2,8(r21)
    9b80:	b5800204 	addi	r22,r22,8
    9b84:	bdc00204 	addi	r23,r23,8
    9b88:	103fdb1e 	bne	r2,zero,9af8 <__sprint_r.part.0+0x58>
    9b8c:	0005883a 	mov	r2,zero
    9b90:	003fe806 	br	9b34 <__sprint_r.part.0+0x94>
    9b94:	00075280 	call	7528 <__sfvwrite_r>
    9b98:	003fe606 	br	9b34 <__sprint_r.part.0+0x94>

00009b9c <__sprint_r>:
    9b9c:	30c00217 	ldw	r3,8(r6)
    9ba0:	18000126 	beq	r3,zero,9ba8 <__sprint_r+0xc>
    9ba4:	0009aa01 	jmpi	9aa0 <__sprint_r.part.0>
    9ba8:	30000115 	stw	zero,4(r6)
    9bac:	0005883a 	mov	r2,zero
    9bb0:	f800283a 	ret

00009bb4 <___vfiprintf_internal_r>:
    9bb4:	deffc904 	addi	sp,sp,-220
    9bb8:	df003515 	stw	fp,212(sp)
    9bbc:	dd003115 	stw	r20,196(sp)
    9bc0:	dfc03615 	stw	ra,216(sp)
    9bc4:	ddc03415 	stw	r23,208(sp)
    9bc8:	dd803315 	stw	r22,204(sp)
    9bcc:	dd403215 	stw	r21,200(sp)
    9bd0:	dcc03015 	stw	r19,192(sp)
    9bd4:	dc802f15 	stw	r18,188(sp)
    9bd8:	dc402e15 	stw	r17,184(sp)
    9bdc:	dc002d15 	stw	r16,180(sp)
    9be0:	d9002015 	stw	r4,128(sp)
    9be4:	d9c02215 	stw	r7,136(sp)
    9be8:	2829883a 	mov	r20,r5
    9bec:	3039883a 	mov	fp,r6
    9bf0:	20000226 	beq	r4,zero,9bfc <___vfiprintf_internal_r+0x48>
    9bf4:	20800e17 	ldw	r2,56(r4)
    9bf8:	1000cf26 	beq	r2,zero,9f38 <___vfiprintf_internal_r+0x384>
    9bfc:	a080030b 	ldhu	r2,12(r20)
    9c00:	10c8000c 	andi	r3,r2,8192
    9c04:	1800061e 	bne	r3,zero,9c20 <___vfiprintf_internal_r+0x6c>
    9c08:	a1001917 	ldw	r4,100(r20)
    9c0c:	00f7ffc4 	movi	r3,-8193
    9c10:	10880014 	ori	r2,r2,8192
    9c14:	20c6703a 	and	r3,r4,r3
    9c18:	a080030d 	sth	r2,12(r20)
    9c1c:	a0c01915 	stw	r3,100(r20)
    9c20:	10c0020c 	andi	r3,r2,8
    9c24:	1800a926 	beq	r3,zero,9ecc <___vfiprintf_internal_r+0x318>
    9c28:	a0c00417 	ldw	r3,16(r20)
    9c2c:	1800a726 	beq	r3,zero,9ecc <___vfiprintf_internal_r+0x318>
    9c30:	1080068c 	andi	r2,r2,26
    9c34:	00c00284 	movi	r3,10
    9c38:	10c0ac26 	beq	r2,r3,9eec <___vfiprintf_internal_r+0x338>
    9c3c:	da801a04 	addi	r10,sp,104
    9c40:	da801e15 	stw	r10,120(sp)
    9c44:	d8801e17 	ldw	r2,120(sp)
    9c48:	da8019c4 	addi	r10,sp,103
    9c4c:	05800074 	movhi	r22,1
    9c50:	05c00074 	movhi	r23,1
    9c54:	da801f15 	stw	r10,124(sp)
    9c58:	1295c83a 	sub	r10,r2,r10
    9c5c:	b5876504 	addi	r22,r22,7572
    9c60:	bdc76104 	addi	r23,r23,7556
    9c64:	dec01a15 	stw	sp,104(sp)
    9c68:	d8001c15 	stw	zero,112(sp)
    9c6c:	d8001b15 	stw	zero,108(sp)
    9c70:	d8002615 	stw	zero,152(sp)
    9c74:	d8002315 	stw	zero,140(sp)
    9c78:	da802715 	stw	r10,156(sp)
    9c7c:	d811883a 	mov	r8,sp
    9c80:	dd002115 	stw	r20,132(sp)
    9c84:	e021883a 	mov	r16,fp
    9c88:	80800007 	ldb	r2,0(r16)
    9c8c:	1003ea26 	beq	r2,zero,ac38 <___vfiprintf_internal_r+0x1084>
    9c90:	00c00944 	movi	r3,37
    9c94:	8025883a 	mov	r18,r16
    9c98:	10c0021e 	bne	r2,r3,9ca4 <___vfiprintf_internal_r+0xf0>
    9c9c:	00001606 	br	9cf8 <___vfiprintf_internal_r+0x144>
    9ca0:	10c00326 	beq	r2,r3,9cb0 <___vfiprintf_internal_r+0xfc>
    9ca4:	94800044 	addi	r18,r18,1
    9ca8:	90800007 	ldb	r2,0(r18)
    9cac:	103ffc1e 	bne	r2,zero,9ca0 <___vfiprintf_internal_r+0xec>
    9cb0:	9423c83a 	sub	r17,r18,r16
    9cb4:	88001026 	beq	r17,zero,9cf8 <___vfiprintf_internal_r+0x144>
    9cb8:	d8c01c17 	ldw	r3,112(sp)
    9cbc:	d8801b17 	ldw	r2,108(sp)
    9cc0:	44000015 	stw	r16,0(r8)
    9cc4:	88c7883a 	add	r3,r17,r3
    9cc8:	10800044 	addi	r2,r2,1
    9ccc:	44400115 	stw	r17,4(r8)
    9cd0:	d8c01c15 	stw	r3,112(sp)
    9cd4:	d8801b15 	stw	r2,108(sp)
    9cd8:	010001c4 	movi	r4,7
    9cdc:	2080760e 	bge	r4,r2,9eb8 <___vfiprintf_internal_r+0x304>
    9ce0:	1803821e 	bne	r3,zero,aaec <___vfiprintf_internal_r+0xf38>
    9ce4:	da802317 	ldw	r10,140(sp)
    9ce8:	d8001b15 	stw	zero,108(sp)
    9cec:	d811883a 	mov	r8,sp
    9cf0:	5455883a 	add	r10,r10,r17
    9cf4:	da802315 	stw	r10,140(sp)
    9cf8:	90800007 	ldb	r2,0(r18)
    9cfc:	10044626 	beq	r2,zero,ae18 <___vfiprintf_internal_r+0x1264>
    9d00:	90c00047 	ldb	r3,1(r18)
    9d04:	94000044 	addi	r16,r18,1
    9d08:	d8001d85 	stb	zero,118(sp)
    9d0c:	0009883a 	mov	r4,zero
    9d10:	000f883a 	mov	r7,zero
    9d14:	027fffc4 	movi	r9,-1
    9d18:	0023883a 	mov	r17,zero
    9d1c:	0029883a 	mov	r20,zero
    9d20:	01401604 	movi	r5,88
    9d24:	01800244 	movi	r6,9
    9d28:	03400a84 	movi	r13,42
    9d2c:	03001b04 	movi	r12,108
    9d30:	84000044 	addi	r16,r16,1
    9d34:	18bff804 	addi	r2,r3,-32
    9d38:	28827336 	bltu	r5,r2,a708 <___vfiprintf_internal_r+0xb54>
    9d3c:	100490ba 	slli	r2,r2,2
    9d40:	02800074 	movhi	r10,1
    9d44:	52a75504 	addi	r10,r10,-25260
    9d48:	1285883a 	add	r2,r2,r10
    9d4c:	10800017 	ldw	r2,0(r2)
    9d50:	1000683a 	jmp	r2
    9d54:	0000a43c 	xorhi	zero,zero,656
    9d58:	0000a708 	cmpgei	zero,zero,668
    9d5c:	0000a708 	cmpgei	zero,zero,668
    9d60:	0000a45c 	xori	zero,zero,657
    9d64:	0000a708 	cmpgei	zero,zero,668
    9d68:	0000a708 	cmpgei	zero,zero,668
    9d6c:	0000a708 	cmpgei	zero,zero,668
    9d70:	0000a708 	cmpgei	zero,zero,668
    9d74:	0000a708 	cmpgei	zero,zero,668
    9d78:	0000a708 	cmpgei	zero,zero,668
    9d7c:	0000a644 	movi	zero,665
    9d80:	0000a660 	cmpeqi	zero,zero,665
    9d84:	0000a708 	cmpgei	zero,zero,668
    9d88:	00009f48 	cmpgei	zero,zero,637
    9d8c:	0000a670 	cmpltui	zero,zero,665
    9d90:	0000a708 	cmpgei	zero,zero,668
    9d94:	0000a468 	cmpgeui	zero,zero,657
    9d98:	0000a474 	movhi	zero,657
    9d9c:	0000a474 	movhi	zero,657
    9da0:	0000a474 	movhi	zero,657
    9da4:	0000a474 	movhi	zero,657
    9da8:	0000a474 	movhi	zero,657
    9dac:	0000a474 	movhi	zero,657
    9db0:	0000a474 	movhi	zero,657
    9db4:	0000a474 	movhi	zero,657
    9db8:	0000a474 	movhi	zero,657
    9dbc:	0000a708 	cmpgei	zero,zero,668
    9dc0:	0000a708 	cmpgei	zero,zero,668
    9dc4:	0000a708 	cmpgei	zero,zero,668
    9dc8:	0000a708 	cmpgei	zero,zero,668
    9dcc:	0000a708 	cmpgei	zero,zero,668
    9dd0:	0000a708 	cmpgei	zero,zero,668
    9dd4:	0000a708 	cmpgei	zero,zero,668
    9dd8:	0000a708 	cmpgei	zero,zero,668
    9ddc:	0000a708 	cmpgei	zero,zero,668
    9de0:	0000a708 	cmpgei	zero,zero,668
    9de4:	0000a4a0 	cmpeqi	zero,zero,658
    9de8:	0000a708 	cmpgei	zero,zero,668
    9dec:	0000a708 	cmpgei	zero,zero,668
    9df0:	0000a708 	cmpgei	zero,zero,668
    9df4:	0000a708 	cmpgei	zero,zero,668
    9df8:	0000a708 	cmpgei	zero,zero,668
    9dfc:	0000a708 	cmpgei	zero,zero,668
    9e00:	0000a708 	cmpgei	zero,zero,668
    9e04:	0000a708 	cmpgei	zero,zero,668
    9e08:	0000a708 	cmpgei	zero,zero,668
    9e0c:	0000a708 	cmpgei	zero,zero,668
    9e10:	0000a4d8 	cmpnei	zero,zero,659
    9e14:	0000a708 	cmpgei	zero,zero,668
    9e18:	0000a708 	cmpgei	zero,zero,668
    9e1c:	0000a708 	cmpgei	zero,zero,668
    9e20:	0000a708 	cmpgei	zero,zero,668
    9e24:	0000a708 	cmpgei	zero,zero,668
    9e28:	0000a530 	cmpltui	zero,zero,660
    9e2c:	0000a708 	cmpgei	zero,zero,668
    9e30:	0000a708 	cmpgei	zero,zero,668
    9e34:	0000a5a0 	cmpeqi	zero,zero,662
    9e38:	0000a708 	cmpgei	zero,zero,668
    9e3c:	0000a708 	cmpgei	zero,zero,668
    9e40:	0000a708 	cmpgei	zero,zero,668
    9e44:	0000a708 	cmpgei	zero,zero,668
    9e48:	0000a708 	cmpgei	zero,zero,668
    9e4c:	0000a708 	cmpgei	zero,zero,668
    9e50:	0000a708 	cmpgei	zero,zero,668
    9e54:	0000a708 	cmpgei	zero,zero,668
    9e58:	0000a708 	cmpgei	zero,zero,668
    9e5c:	0000a708 	cmpgei	zero,zero,668
    9e60:	0000a34c 	andi	zero,zero,653
    9e64:	0000a378 	rdprs	zero,zero,653
    9e68:	0000a708 	cmpgei	zero,zero,668
    9e6c:	0000a708 	cmpgei	zero,zero,668
    9e70:	0000a708 	cmpgei	zero,zero,668
    9e74:	0000a6b0 	cmpltui	zero,zero,666
    9e78:	0000a378 	rdprs	zero,zero,653
    9e7c:	0000a708 	cmpgei	zero,zero,668
    9e80:	0000a708 	cmpgei	zero,zero,668
    9e84:	0000a20c 	andi	zero,zero,648
    9e88:	0000a708 	cmpgei	zero,zero,668
    9e8c:	0000a21c 	xori	zero,zero,648
    9e90:	0000a258 	cmpnei	zero,zero,649
    9e94:	00009f54 	movui	zero,637
    9e98:	0000a200 	call	a20 <init_LCD+0x1c>
    9e9c:	0000a708 	cmpgei	zero,zero,668
    9ea0:	0000a5dc 	xori	zero,zero,663
    9ea4:	0000a708 	cmpgei	zero,zero,668
    9ea8:	0000a634 	movhi	zero,664
    9eac:	0000a708 	cmpgei	zero,zero,668
    9eb0:	0000a708 	cmpgei	zero,zero,668
    9eb4:	0000a2f8 	rdprs	zero,zero,651
    9eb8:	42000204 	addi	r8,r8,8
    9ebc:	da802317 	ldw	r10,140(sp)
    9ec0:	5455883a 	add	r10,r10,r17
    9ec4:	da802315 	stw	r10,140(sp)
    9ec8:	003f8b06 	br	9cf8 <___vfiprintf_internal_r+0x144>
    9ecc:	d9002017 	ldw	r4,128(sp)
    9ed0:	a00b883a 	mov	r5,r20
    9ed4:	00050d00 	call	50d0 <__swsetup_r>
    9ed8:	1003b11e 	bne	r2,zero,ada0 <___vfiprintf_internal_r+0x11ec>
    9edc:	a080030b 	ldhu	r2,12(r20)
    9ee0:	00c00284 	movi	r3,10
    9ee4:	1080068c 	andi	r2,r2,26
    9ee8:	10ff541e 	bne	r2,r3,9c3c <___vfiprintf_internal_r+0x88>
    9eec:	a080038f 	ldh	r2,14(r20)
    9ef0:	103f5216 	blt	r2,zero,9c3c <___vfiprintf_internal_r+0x88>
    9ef4:	d9c02217 	ldw	r7,136(sp)
    9ef8:	d9002017 	ldw	r4,128(sp)
    9efc:	e00d883a 	mov	r6,fp
    9f00:	a00b883a 	mov	r5,r20
    9f04:	000b02c0 	call	b02c <__sbprintf>
    9f08:	dfc03617 	ldw	ra,216(sp)
    9f0c:	df003517 	ldw	fp,212(sp)
    9f10:	ddc03417 	ldw	r23,208(sp)
    9f14:	dd803317 	ldw	r22,204(sp)
    9f18:	dd403217 	ldw	r21,200(sp)
    9f1c:	dd003117 	ldw	r20,196(sp)
    9f20:	dcc03017 	ldw	r19,192(sp)
    9f24:	dc802f17 	ldw	r18,188(sp)
    9f28:	dc402e17 	ldw	r17,184(sp)
    9f2c:	dc002d17 	ldw	r16,180(sp)
    9f30:	dec03704 	addi	sp,sp,220
    9f34:	f800283a 	ret
    9f38:	00070a40 	call	70a4 <__sinit>
    9f3c:	003f2f06 	br	9bfc <___vfiprintf_internal_r+0x48>
    9f40:	0463c83a 	sub	r17,zero,r17
    9f44:	d8802215 	stw	r2,136(sp)
    9f48:	a5000114 	ori	r20,r20,4
    9f4c:	80c00007 	ldb	r3,0(r16)
    9f50:	003f7706 	br	9d30 <___vfiprintf_internal_r+0x17c>
    9f54:	00800c04 	movi	r2,48
    9f58:	da802217 	ldw	r10,136(sp)
    9f5c:	d8801d05 	stb	r2,116(sp)
    9f60:	00801e04 	movi	r2,120
    9f64:	d8801d45 	stb	r2,117(sp)
    9f68:	d8001d85 	stb	zero,118(sp)
    9f6c:	50c00104 	addi	r3,r10,4
    9f70:	54800017 	ldw	r18,0(r10)
    9f74:	0027883a 	mov	r19,zero
    9f78:	a0800094 	ori	r2,r20,2
    9f7c:	48030b16 	blt	r9,zero,abac <___vfiprintf_internal_r+0xff8>
    9f80:	00bfdfc4 	movi	r2,-129
    9f84:	a096703a 	and	r11,r20,r2
    9f88:	d8c02215 	stw	r3,136(sp)
    9f8c:	5d000094 	ori	r20,r11,2
    9f90:	90032b1e 	bne	r18,zero,ac40 <___vfiprintf_internal_r+0x108c>
    9f94:	00800074 	movhi	r2,1
    9f98:	10870004 	addi	r2,r2,7168
    9f9c:	d8802615 	stw	r2,152(sp)
    9fa0:	0039883a 	mov	fp,zero
    9fa4:	48017b1e 	bne	r9,zero,a594 <___vfiprintf_internal_r+0x9e0>
    9fa8:	0013883a 	mov	r9,zero
    9fac:	0027883a 	mov	r19,zero
    9fb0:	dd401a04 	addi	r21,sp,104
    9fb4:	4825883a 	mov	r18,r9
    9fb8:	4cc0010e 	bge	r9,r19,9fc0 <___vfiprintf_internal_r+0x40c>
    9fbc:	9825883a 	mov	r18,r19
    9fc0:	e7003fcc 	andi	fp,fp,255
    9fc4:	e700201c 	xori	fp,fp,128
    9fc8:	e73fe004 	addi	fp,fp,-128
    9fcc:	e0000126 	beq	fp,zero,9fd4 <___vfiprintf_internal_r+0x420>
    9fd0:	94800044 	addi	r18,r18,1
    9fd4:	a380008c 	andi	r14,r20,2
    9fd8:	70000126 	beq	r14,zero,9fe0 <___vfiprintf_internal_r+0x42c>
    9fdc:	94800084 	addi	r18,r18,2
    9fe0:	a700210c 	andi	fp,r20,132
    9fe4:	e001df1e 	bne	fp,zero,a764 <___vfiprintf_internal_r+0xbb0>
    9fe8:	8c87c83a 	sub	r3,r17,r18
    9fec:	00c1dd0e 	bge	zero,r3,a764 <___vfiprintf_internal_r+0xbb0>
    9ff0:	01c00404 	movi	r7,16
    9ff4:	d8801c17 	ldw	r2,112(sp)
    9ff8:	38c3ad0e 	bge	r7,r3,aeb0 <___vfiprintf_internal_r+0x12fc>
    9ffc:	02800074 	movhi	r10,1
    a000:	52876504 	addi	r10,r10,7572
    a004:	dc002915 	stw	r16,164(sp)
    a008:	d9801b17 	ldw	r6,108(sp)
    a00c:	da802415 	stw	r10,144(sp)
    a010:	03c001c4 	movi	r15,7
    a014:	da402515 	stw	r9,148(sp)
    a018:	db802815 	stw	r14,160(sp)
    a01c:	1821883a 	mov	r16,r3
    a020:	00000506 	br	a038 <___vfiprintf_internal_r+0x484>
    a024:	31400084 	addi	r5,r6,2
    a028:	42000204 	addi	r8,r8,8
    a02c:	200d883a 	mov	r6,r4
    a030:	843ffc04 	addi	r16,r16,-16
    a034:	3c000d0e 	bge	r7,r16,a06c <___vfiprintf_internal_r+0x4b8>
    a038:	10800404 	addi	r2,r2,16
    a03c:	31000044 	addi	r4,r6,1
    a040:	45800015 	stw	r22,0(r8)
    a044:	41c00115 	stw	r7,4(r8)
    a048:	d8801c15 	stw	r2,112(sp)
    a04c:	d9001b15 	stw	r4,108(sp)
    a050:	793ff40e 	bge	r15,r4,a024 <___vfiprintf_internal_r+0x470>
    a054:	1001b51e 	bne	r2,zero,a72c <___vfiprintf_internal_r+0xb78>
    a058:	843ffc04 	addi	r16,r16,-16
    a05c:	000d883a 	mov	r6,zero
    a060:	01400044 	movi	r5,1
    a064:	d811883a 	mov	r8,sp
    a068:	3c3ff316 	blt	r7,r16,a038 <___vfiprintf_internal_r+0x484>
    a06c:	8007883a 	mov	r3,r16
    a070:	da402517 	ldw	r9,148(sp)
    a074:	db802817 	ldw	r14,160(sp)
    a078:	dc002917 	ldw	r16,164(sp)
    a07c:	da802417 	ldw	r10,144(sp)
    a080:	1885883a 	add	r2,r3,r2
    a084:	40c00115 	stw	r3,4(r8)
    a088:	42800015 	stw	r10,0(r8)
    a08c:	d8801c15 	stw	r2,112(sp)
    a090:	d9401b15 	stw	r5,108(sp)
    a094:	00c001c4 	movi	r3,7
    a098:	19426016 	blt	r3,r5,aa1c <___vfiprintf_internal_r+0xe68>
    a09c:	d8c01d87 	ldb	r3,118(sp)
    a0a0:	42000204 	addi	r8,r8,8
    a0a4:	29000044 	addi	r4,r5,1
    a0a8:	1801b31e 	bne	r3,zero,a778 <___vfiprintf_internal_r+0xbc4>
    a0ac:	7001c026 	beq	r14,zero,a7b0 <___vfiprintf_internal_r+0xbfc>
    a0b0:	d8c01d04 	addi	r3,sp,116
    a0b4:	10800084 	addi	r2,r2,2
    a0b8:	40c00015 	stw	r3,0(r8)
    a0bc:	00c00084 	movi	r3,2
    a0c0:	40c00115 	stw	r3,4(r8)
    a0c4:	d8801c15 	stw	r2,112(sp)
    a0c8:	d9001b15 	stw	r4,108(sp)
    a0cc:	00c001c4 	movi	r3,7
    a0d0:	1902650e 	bge	r3,r4,aa68 <___vfiprintf_internal_r+0xeb4>
    a0d4:	10029a1e 	bne	r2,zero,ab40 <___vfiprintf_internal_r+0xf8c>
    a0d8:	00c02004 	movi	r3,128
    a0dc:	01000044 	movi	r4,1
    a0e0:	000b883a 	mov	r5,zero
    a0e4:	d811883a 	mov	r8,sp
    a0e8:	e0c1b31e 	bne	fp,r3,a7b8 <___vfiprintf_internal_r+0xc04>
    a0ec:	8cb9c83a 	sub	fp,r17,r18
    a0f0:	0701b10e 	bge	zero,fp,a7b8 <___vfiprintf_internal_r+0xc04>
    a0f4:	01c00404 	movi	r7,16
    a0f8:	3f03890e 	bge	r7,fp,af20 <___vfiprintf_internal_r+0x136c>
    a0fc:	00c00074 	movhi	r3,1
    a100:	18c76104 	addi	r3,r3,7556
    a104:	d8c02415 	stw	r3,144(sp)
    a108:	8007883a 	mov	r3,r16
    a10c:	034001c4 	movi	r13,7
    a110:	e021883a 	mov	r16,fp
    a114:	da402515 	stw	r9,148(sp)
    a118:	1839883a 	mov	fp,r3
    a11c:	00000506 	br	a134 <___vfiprintf_internal_r+0x580>
    a120:	29800084 	addi	r6,r5,2
    a124:	42000204 	addi	r8,r8,8
    a128:	180b883a 	mov	r5,r3
    a12c:	843ffc04 	addi	r16,r16,-16
    a130:	3c000d0e 	bge	r7,r16,a168 <___vfiprintf_internal_r+0x5b4>
    a134:	10800404 	addi	r2,r2,16
    a138:	28c00044 	addi	r3,r5,1
    a13c:	45c00015 	stw	r23,0(r8)
    a140:	41c00115 	stw	r7,4(r8)
    a144:	d8801c15 	stw	r2,112(sp)
    a148:	d8c01b15 	stw	r3,108(sp)
    a14c:	68fff40e 	bge	r13,r3,a120 <___vfiprintf_internal_r+0x56c>
    a150:	1002241e 	bne	r2,zero,a9e4 <___vfiprintf_internal_r+0xe30>
    a154:	843ffc04 	addi	r16,r16,-16
    a158:	01800044 	movi	r6,1
    a15c:	000b883a 	mov	r5,zero
    a160:	d811883a 	mov	r8,sp
    a164:	3c3ff316 	blt	r7,r16,a134 <___vfiprintf_internal_r+0x580>
    a168:	da402517 	ldw	r9,148(sp)
    a16c:	e007883a 	mov	r3,fp
    a170:	8039883a 	mov	fp,r16
    a174:	1821883a 	mov	r16,r3
    a178:	d8c02417 	ldw	r3,144(sp)
    a17c:	1705883a 	add	r2,r2,fp
    a180:	47000115 	stw	fp,4(r8)
    a184:	40c00015 	stw	r3,0(r8)
    a188:	d8801c15 	stw	r2,112(sp)
    a18c:	d9801b15 	stw	r6,108(sp)
    a190:	00c001c4 	movi	r3,7
    a194:	19827616 	blt	r3,r6,ab70 <___vfiprintf_internal_r+0xfbc>
    a198:	4cf9c83a 	sub	fp,r9,r19
    a19c:	42000204 	addi	r8,r8,8
    a1a0:	31000044 	addi	r4,r6,1
    a1a4:	300b883a 	mov	r5,r6
    a1a8:	07018516 	blt	zero,fp,a7c0 <___vfiprintf_internal_r+0xc0c>
    a1ac:	9885883a 	add	r2,r19,r2
    a1b0:	45400015 	stw	r21,0(r8)
    a1b4:	44c00115 	stw	r19,4(r8)
    a1b8:	d8801c15 	stw	r2,112(sp)
    a1bc:	d9001b15 	stw	r4,108(sp)
    a1c0:	00c001c4 	movi	r3,7
    a1c4:	1901dd0e 	bge	r3,r4,a93c <___vfiprintf_internal_r+0xd88>
    a1c8:	1002401e 	bne	r2,zero,aacc <___vfiprintf_internal_r+0xf18>
    a1cc:	d8001b15 	stw	zero,108(sp)
    a1d0:	a2c0010c 	andi	r11,r20,4
    a1d4:	58000226 	beq	r11,zero,a1e0 <___vfiprintf_internal_r+0x62c>
    a1d8:	8ca7c83a 	sub	r19,r17,r18
    a1dc:	04c2f216 	blt	zero,r19,ada8 <___vfiprintf_internal_r+0x11f4>
    a1e0:	8c80010e 	bge	r17,r18,a1e8 <___vfiprintf_internal_r+0x634>
    a1e4:	9023883a 	mov	r17,r18
    a1e8:	da802317 	ldw	r10,140(sp)
    a1ec:	5455883a 	add	r10,r10,r17
    a1f0:	da802315 	stw	r10,140(sp)
    a1f4:	d8001b15 	stw	zero,108(sp)
    a1f8:	d811883a 	mov	r8,sp
    a1fc:	003ea206 	br	9c88 <___vfiprintf_internal_r+0xd4>
    a200:	a5000814 	ori	r20,r20,32
    a204:	80c00007 	ldb	r3,0(r16)
    a208:	003ec906 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a20c:	80c00007 	ldb	r3,0(r16)
    a210:	1b030926 	beq	r3,r12,ae38 <___vfiprintf_internal_r+0x1284>
    a214:	a5000414 	ori	r20,r20,16
    a218:	003ec506 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a21c:	21003fcc 	andi	r4,r4,255
    a220:	20035e1e 	bne	r4,zero,af9c <___vfiprintf_internal_r+0x13e8>
    a224:	a080080c 	andi	r2,r20,32
    a228:	1002a526 	beq	r2,zero,acc0 <___vfiprintf_internal_r+0x110c>
    a22c:	da802217 	ldw	r10,136(sp)
    a230:	50800017 	ldw	r2,0(r10)
    a234:	da802317 	ldw	r10,140(sp)
    a238:	5007d7fa 	srai	r3,r10,31
    a23c:	da802217 	ldw	r10,136(sp)
    a240:	10c00115 	stw	r3,4(r2)
    a244:	52800104 	addi	r10,r10,4
    a248:	da802215 	stw	r10,136(sp)
    a24c:	da802317 	ldw	r10,140(sp)
    a250:	12800015 	stw	r10,0(r2)
    a254:	003e8c06 	br	9c88 <___vfiprintf_internal_r+0xd4>
    a258:	21003fcc 	andi	r4,r4,255
    a25c:	2003511e 	bne	r4,zero,afa4 <___vfiprintf_internal_r+0x13f0>
    a260:	a080080c 	andi	r2,r20,32
    a264:	1000a126 	beq	r2,zero,a4ec <___vfiprintf_internal_r+0x938>
    a268:	da802217 	ldw	r10,136(sp)
    a26c:	d8001d85 	stb	zero,118(sp)
    a270:	50800204 	addi	r2,r10,8
    a274:	54800017 	ldw	r18,0(r10)
    a278:	54c00117 	ldw	r19,4(r10)
    a27c:	4802b416 	blt	r9,zero,ad50 <___vfiprintf_internal_r+0x119c>
    a280:	013fdfc4 	movi	r4,-129
    a284:	94c6b03a 	or	r3,r18,r19
    a288:	d8802215 	stw	r2,136(sp)
    a28c:	a128703a 	and	r20,r20,r4
    a290:	1800a226 	beq	r3,zero,a51c <___vfiprintf_internal_r+0x968>
    a294:	0039883a 	mov	fp,zero
    a298:	dd401a04 	addi	r21,sp,104
    a29c:	9006d0fa 	srli	r3,r18,3
    a2a0:	9808977a 	slli	r4,r19,29
    a2a4:	9826d0fa 	srli	r19,r19,3
    a2a8:	948001cc 	andi	r18,r18,7
    a2ac:	90800c04 	addi	r2,r18,48
    a2b0:	ad7fffc4 	addi	r21,r21,-1
    a2b4:	20e4b03a 	or	r18,r4,r3
    a2b8:	a8800005 	stb	r2,0(r21)
    a2bc:	94c6b03a 	or	r3,r18,r19
    a2c0:	183ff61e 	bne	r3,zero,a29c <___vfiprintf_internal_r+0x6e8>
    a2c4:	a0c0004c 	andi	r3,r20,1
    a2c8:	18005926 	beq	r3,zero,a430 <___vfiprintf_internal_r+0x87c>
    a2cc:	10803fcc 	andi	r2,r2,255
    a2d0:	1080201c 	xori	r2,r2,128
    a2d4:	10bfe004 	addi	r2,r2,-128
    a2d8:	00c00c04 	movi	r3,48
    a2dc:	10c05426 	beq	r2,r3,a430 <___vfiprintf_internal_r+0x87c>
    a2e0:	da801e17 	ldw	r10,120(sp)
    a2e4:	a8bfffc4 	addi	r2,r21,-1
    a2e8:	a8ffffc5 	stb	r3,-1(r21)
    a2ec:	50a7c83a 	sub	r19,r10,r2
    a2f0:	102b883a 	mov	r21,r2
    a2f4:	003f2f06 	br	9fb4 <___vfiprintf_internal_r+0x400>
    a2f8:	21003fcc 	andi	r4,r4,255
    a2fc:	2003421e 	bne	r4,zero,b008 <___vfiprintf_internal_r+0x1454>
    a300:	00800074 	movhi	r2,1
    a304:	10870004 	addi	r2,r2,7168
    a308:	d8802615 	stw	r2,152(sp)
    a30c:	a080080c 	andi	r2,r20,32
    a310:	1000aa26 	beq	r2,zero,a5bc <___vfiprintf_internal_r+0xa08>
    a314:	da802217 	ldw	r10,136(sp)
    a318:	54800017 	ldw	r18,0(r10)
    a31c:	54c00117 	ldw	r19,4(r10)
    a320:	52800204 	addi	r10,r10,8
    a324:	da802215 	stw	r10,136(sp)
    a328:	a080004c 	andi	r2,r20,1
    a32c:	1001d226 	beq	r2,zero,aa78 <___vfiprintf_internal_r+0xec4>
    a330:	94c4b03a 	or	r2,r18,r19
    a334:	1002351e 	bne	r2,zero,ac0c <___vfiprintf_internal_r+0x1058>
    a338:	d8001d85 	stb	zero,118(sp)
    a33c:	48022216 	blt	r9,zero,abc8 <___vfiprintf_internal_r+0x1014>
    a340:	00bfdfc4 	movi	r2,-129
    a344:	a0a8703a 	and	r20,r20,r2
    a348:	003f1506 	br	9fa0 <___vfiprintf_internal_r+0x3ec>
    a34c:	da802217 	ldw	r10,136(sp)
    a350:	04800044 	movi	r18,1
    a354:	d8001d85 	stb	zero,118(sp)
    a358:	50800017 	ldw	r2,0(r10)
    a35c:	52800104 	addi	r10,r10,4
    a360:	da802215 	stw	r10,136(sp)
    a364:	d8801005 	stb	r2,64(sp)
    a368:	9027883a 	mov	r19,r18
    a36c:	dd401004 	addi	r21,sp,64
    a370:	0013883a 	mov	r9,zero
    a374:	003f1706 	br	9fd4 <___vfiprintf_internal_r+0x420>
    a378:	21003fcc 	andi	r4,r4,255
    a37c:	2003201e 	bne	r4,zero,b000 <___vfiprintf_internal_r+0x144c>
    a380:	a080080c 	andi	r2,r20,32
    a384:	10004b26 	beq	r2,zero,a4b4 <___vfiprintf_internal_r+0x900>
    a388:	da802217 	ldw	r10,136(sp)
    a38c:	50800117 	ldw	r2,4(r10)
    a390:	54800017 	ldw	r18,0(r10)
    a394:	52800204 	addi	r10,r10,8
    a398:	da802215 	stw	r10,136(sp)
    a39c:	1027883a 	mov	r19,r2
    a3a0:	10022c16 	blt	r2,zero,ac54 <___vfiprintf_internal_r+0x10a0>
    a3a4:	df001d83 	ldbu	fp,118(sp)
    a3a8:	48007216 	blt	r9,zero,a574 <___vfiprintf_internal_r+0x9c0>
    a3ac:	00ffdfc4 	movi	r3,-129
    a3b0:	94c4b03a 	or	r2,r18,r19
    a3b4:	a0e8703a 	and	r20,r20,r3
    a3b8:	1000cc26 	beq	r2,zero,a6ec <___vfiprintf_internal_r+0xb38>
    a3bc:	98021026 	beq	r19,zero,ac00 <___vfiprintf_internal_r+0x104c>
    a3c0:	dc402415 	stw	r17,144(sp)
    a3c4:	dc002515 	stw	r16,148(sp)
    a3c8:	9823883a 	mov	r17,r19
    a3cc:	9021883a 	mov	r16,r18
    a3d0:	dd401a04 	addi	r21,sp,104
    a3d4:	4825883a 	mov	r18,r9
    a3d8:	4027883a 	mov	r19,r8
    a3dc:	8009883a 	mov	r4,r16
    a3e0:	880b883a 	mov	r5,r17
    a3e4:	01800284 	movi	r6,10
    a3e8:	000f883a 	mov	r7,zero
    a3ec:	000bf940 	call	bf94 <__umoddi3>
    a3f0:	10800c04 	addi	r2,r2,48
    a3f4:	ad7fffc4 	addi	r21,r21,-1
    a3f8:	8009883a 	mov	r4,r16
    a3fc:	880b883a 	mov	r5,r17
    a400:	a8800005 	stb	r2,0(r21)
    a404:	01800284 	movi	r6,10
    a408:	000f883a 	mov	r7,zero
    a40c:	000ba1c0 	call	ba1c <__udivdi3>
    a410:	1021883a 	mov	r16,r2
    a414:	10c4b03a 	or	r2,r2,r3
    a418:	1823883a 	mov	r17,r3
    a41c:	103fef1e 	bne	r2,zero,a3dc <___vfiprintf_internal_r+0x828>
    a420:	dc402417 	ldw	r17,144(sp)
    a424:	dc002517 	ldw	r16,148(sp)
    a428:	9013883a 	mov	r9,r18
    a42c:	9811883a 	mov	r8,r19
    a430:	da801e17 	ldw	r10,120(sp)
    a434:	5567c83a 	sub	r19,r10,r21
    a438:	003ede06 	br	9fb4 <___vfiprintf_internal_r+0x400>
    a43c:	38803fcc 	andi	r2,r7,255
    a440:	1080201c 	xori	r2,r2,128
    a444:	10bfe004 	addi	r2,r2,-128
    a448:	1002371e 	bne	r2,zero,ad28 <___vfiprintf_internal_r+0x1174>
    a44c:	01000044 	movi	r4,1
    a450:	01c00804 	movi	r7,32
    a454:	80c00007 	ldb	r3,0(r16)
    a458:	003e3506 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a45c:	a5000054 	ori	r20,r20,1
    a460:	80c00007 	ldb	r3,0(r16)
    a464:	003e3206 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a468:	a5002014 	ori	r20,r20,128
    a46c:	80c00007 	ldb	r3,0(r16)
    a470:	003e2f06 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a474:	8015883a 	mov	r10,r16
    a478:	0023883a 	mov	r17,zero
    a47c:	18bff404 	addi	r2,r3,-48
    a480:	50c00007 	ldb	r3,0(r10)
    a484:	8c4002a4 	muli	r17,r17,10
    a488:	84000044 	addi	r16,r16,1
    a48c:	8015883a 	mov	r10,r16
    a490:	1463883a 	add	r17,r2,r17
    a494:	18bff404 	addi	r2,r3,-48
    a498:	30bff92e 	bgeu	r6,r2,a480 <___vfiprintf_internal_r+0x8cc>
    a49c:	003e2506 	br	9d34 <___vfiprintf_internal_r+0x180>
    a4a0:	21003fcc 	andi	r4,r4,255
    a4a4:	2002d41e 	bne	r4,zero,aff8 <___vfiprintf_internal_r+0x1444>
    a4a8:	a5000414 	ori	r20,r20,16
    a4ac:	a080080c 	andi	r2,r20,32
    a4b0:	103fb51e 	bne	r2,zero,a388 <___vfiprintf_internal_r+0x7d4>
    a4b4:	a080040c 	andi	r2,r20,16
    a4b8:	1001f826 	beq	r2,zero,ac9c <___vfiprintf_internal_r+0x10e8>
    a4bc:	da802217 	ldw	r10,136(sp)
    a4c0:	54800017 	ldw	r18,0(r10)
    a4c4:	52800104 	addi	r10,r10,4
    a4c8:	da802215 	stw	r10,136(sp)
    a4cc:	9027d7fa 	srai	r19,r18,31
    a4d0:	9805883a 	mov	r2,r19
    a4d4:	003fb206 	br	a3a0 <___vfiprintf_internal_r+0x7ec>
    a4d8:	21003fcc 	andi	r4,r4,255
    a4dc:	2002c41e 	bne	r4,zero,aff0 <___vfiprintf_internal_r+0x143c>
    a4e0:	a5000414 	ori	r20,r20,16
    a4e4:	a080080c 	andi	r2,r20,32
    a4e8:	103f5f1e 	bne	r2,zero,a268 <___vfiprintf_internal_r+0x6b4>
    a4ec:	a080040c 	andi	r2,r20,16
    a4f0:	10020f26 	beq	r2,zero,ad30 <___vfiprintf_internal_r+0x117c>
    a4f4:	da802217 	ldw	r10,136(sp)
    a4f8:	d8001d85 	stb	zero,118(sp)
    a4fc:	0027883a 	mov	r19,zero
    a500:	50800104 	addi	r2,r10,4
    a504:	54800017 	ldw	r18,0(r10)
    a508:	48021116 	blt	r9,zero,ad50 <___vfiprintf_internal_r+0x119c>
    a50c:	00ffdfc4 	movi	r3,-129
    a510:	d8802215 	stw	r2,136(sp)
    a514:	a0e8703a 	and	r20,r20,r3
    a518:	903f5e1e 	bne	r18,zero,a294 <___vfiprintf_internal_r+0x6e0>
    a51c:	0039883a 	mov	fp,zero
    a520:	4802a626 	beq	r9,zero,afbc <___vfiprintf_internal_r+0x1408>
    a524:	0025883a 	mov	r18,zero
    a528:	0027883a 	mov	r19,zero
    a52c:	003f5a06 	br	a298 <___vfiprintf_internal_r+0x6e4>
    a530:	21003fcc 	andi	r4,r4,255
    a534:	20029f1e 	bne	r4,zero,afb4 <___vfiprintf_internal_r+0x1400>
    a538:	a5000414 	ori	r20,r20,16
    a53c:	a080080c 	andi	r2,r20,32
    a540:	10005e1e 	bne	r2,zero,a6bc <___vfiprintf_internal_r+0xb08>
    a544:	a080040c 	andi	r2,r20,16
    a548:	1001a21e 	bne	r2,zero,abd4 <___vfiprintf_internal_r+0x1020>
    a54c:	a080100c 	andi	r2,r20,64
    a550:	d8001d85 	stb	zero,118(sp)
    a554:	da802217 	ldw	r10,136(sp)
    a558:	1002231e 	bne	r2,zero,ade8 <___vfiprintf_internal_r+0x1234>
    a55c:	50800104 	addi	r2,r10,4
    a560:	54800017 	ldw	r18,0(r10)
    a564:	0027883a 	mov	r19,zero
    a568:	4801a00e 	bge	r9,zero,abec <___vfiprintf_internal_r+0x1038>
    a56c:	d8802215 	stw	r2,136(sp)
    a570:	0039883a 	mov	fp,zero
    a574:	94c4b03a 	or	r2,r18,r19
    a578:	103f901e 	bne	r2,zero,a3bc <___vfiprintf_internal_r+0x808>
    a57c:	00800044 	movi	r2,1
    a580:	10803fcc 	andi	r2,r2,255
    a584:	00c00044 	movi	r3,1
    a588:	10c05926 	beq	r2,r3,a6f0 <___vfiprintf_internal_r+0xb3c>
    a58c:	00c00084 	movi	r3,2
    a590:	10ffe41e 	bne	r2,r3,a524 <___vfiprintf_internal_r+0x970>
    a594:	0025883a 	mov	r18,zero
    a598:	0027883a 	mov	r19,zero
    a59c:	00013d06 	br	aa94 <___vfiprintf_internal_r+0xee0>
    a5a0:	21003fcc 	andi	r4,r4,255
    a5a4:	2002811e 	bne	r4,zero,afac <___vfiprintf_internal_r+0x13f8>
    a5a8:	00800074 	movhi	r2,1
    a5ac:	1086fb04 	addi	r2,r2,7148
    a5b0:	d8802615 	stw	r2,152(sp)
    a5b4:	a080080c 	andi	r2,r20,32
    a5b8:	103f561e 	bne	r2,zero,a314 <___vfiprintf_internal_r+0x760>
    a5bc:	a080040c 	andi	r2,r20,16
    a5c0:	1001d126 	beq	r2,zero,ad08 <___vfiprintf_internal_r+0x1154>
    a5c4:	da802217 	ldw	r10,136(sp)
    a5c8:	0027883a 	mov	r19,zero
    a5cc:	54800017 	ldw	r18,0(r10)
    a5d0:	52800104 	addi	r10,r10,4
    a5d4:	da802215 	stw	r10,136(sp)
    a5d8:	003f5306 	br	a328 <___vfiprintf_internal_r+0x774>
    a5dc:	da802217 	ldw	r10,136(sp)
    a5e0:	d8001d85 	stb	zero,118(sp)
    a5e4:	55400017 	ldw	r21,0(r10)
    a5e8:	50c00104 	addi	r3,r10,4
    a5ec:	a8024226 	beq	r21,zero,aef8 <___vfiprintf_internal_r+0x1344>
    a5f0:	48021816 	blt	r9,zero,ae54 <___vfiprintf_internal_r+0x12a0>
    a5f4:	480d883a 	mov	r6,r9
    a5f8:	000b883a 	mov	r5,zero
    a5fc:	a809883a 	mov	r4,r21
    a600:	d8c02a15 	stw	r3,168(sp)
    a604:	da002b15 	stw	r8,172(sp)
    a608:	da402c15 	stw	r9,176(sp)
    a60c:	0007e040 	call	7e04 <memchr>
    a610:	d8c02a17 	ldw	r3,168(sp)
    a614:	da002b17 	ldw	r8,172(sp)
    a618:	da402c17 	ldw	r9,176(sp)
    a61c:	10024826 	beq	r2,zero,af40 <___vfiprintf_internal_r+0x138c>
    a620:	1567c83a 	sub	r19,r2,r21
    a624:	df001d83 	ldbu	fp,118(sp)
    a628:	d8c02215 	stw	r3,136(sp)
    a62c:	0013883a 	mov	r9,zero
    a630:	003e6006 	br	9fb4 <___vfiprintf_internal_r+0x400>
    a634:	21003fcc 	andi	r4,r4,255
    a638:	203fc026 	beq	r4,zero,a53c <___vfiprintf_internal_r+0x988>
    a63c:	d9c01d85 	stb	r7,118(sp)
    a640:	003fbe06 	br	a53c <___vfiprintf_internal_r+0x988>
    a644:	da802217 	ldw	r10,136(sp)
    a648:	54400017 	ldw	r17,0(r10)
    a64c:	50800104 	addi	r2,r10,4
    a650:	883e3b16 	blt	r17,zero,9f40 <___vfiprintf_internal_r+0x38c>
    a654:	d8802215 	stw	r2,136(sp)
    a658:	80c00007 	ldb	r3,0(r16)
    a65c:	003db406 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a660:	01000044 	movi	r4,1
    a664:	01c00ac4 	movi	r7,43
    a668:	80c00007 	ldb	r3,0(r16)
    a66c:	003db006 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a670:	80c00007 	ldb	r3,0(r16)
    a674:	82800044 	addi	r10,r16,1
    a678:	1b423c26 	beq	r3,r13,af6c <___vfiprintf_internal_r+0x13b8>
    a67c:	18bff404 	addi	r2,r3,-48
    a680:	0013883a 	mov	r9,zero
    a684:	30822b36 	bltu	r6,r2,af34 <___vfiprintf_internal_r+0x1380>
    a688:	50c00007 	ldb	r3,0(r10)
    a68c:	4a4002a4 	muli	r9,r9,10
    a690:	54000044 	addi	r16,r10,1
    a694:	8015883a 	mov	r10,r16
    a698:	4893883a 	add	r9,r9,r2
    a69c:	18bff404 	addi	r2,r3,-48
    a6a0:	30bff92e 	bgeu	r6,r2,a688 <___vfiprintf_internal_r+0xad4>
    a6a4:	483da30e 	bge	r9,zero,9d34 <___vfiprintf_internal_r+0x180>
    a6a8:	027fffc4 	movi	r9,-1
    a6ac:	003da106 	br	9d34 <___vfiprintf_internal_r+0x180>
    a6b0:	a5001014 	ori	r20,r20,64
    a6b4:	80c00007 	ldb	r3,0(r16)
    a6b8:	003d9d06 	br	9d30 <___vfiprintf_internal_r+0x17c>
    a6bc:	da802217 	ldw	r10,136(sp)
    a6c0:	d8001d85 	stb	zero,118(sp)
    a6c4:	50c00204 	addi	r3,r10,8
    a6c8:	54800017 	ldw	r18,0(r10)
    a6cc:	54c00117 	ldw	r19,4(r10)
    a6d0:	4801ca16 	blt	r9,zero,adfc <___vfiprintf_internal_r+0x1248>
    a6d4:	013fdfc4 	movi	r4,-129
    a6d8:	94c4b03a 	or	r2,r18,r19
    a6dc:	d8c02215 	stw	r3,136(sp)
    a6e0:	a128703a 	and	r20,r20,r4
    a6e4:	0039883a 	mov	fp,zero
    a6e8:	103f341e 	bne	r2,zero,a3bc <___vfiprintf_internal_r+0x808>
    a6ec:	483e2e26 	beq	r9,zero,9fa8 <___vfiprintf_internal_r+0x3f4>
    a6f0:	0025883a 	mov	r18,zero
    a6f4:	94800c04 	addi	r18,r18,48
    a6f8:	dc8019c5 	stb	r18,103(sp)
    a6fc:	dcc02717 	ldw	r19,156(sp)
    a700:	dd4019c4 	addi	r21,sp,103
    a704:	003e2b06 	br	9fb4 <___vfiprintf_internal_r+0x400>
    a708:	21003fcc 	andi	r4,r4,255
    a70c:	2002361e 	bne	r4,zero,afe8 <___vfiprintf_internal_r+0x1434>
    a710:	1801c126 	beq	r3,zero,ae18 <___vfiprintf_internal_r+0x1264>
    a714:	04800044 	movi	r18,1
    a718:	d8c01005 	stb	r3,64(sp)
    a71c:	d8001d85 	stb	zero,118(sp)
    a720:	9027883a 	mov	r19,r18
    a724:	dd401004 	addi	r21,sp,64
    a728:	003f1106 	br	a370 <___vfiprintf_internal_r+0x7bc>
    a72c:	d9402117 	ldw	r5,132(sp)
    a730:	d9002017 	ldw	r4,128(sp)
    a734:	d9801a04 	addi	r6,sp,104
    a738:	d9c02b15 	stw	r7,172(sp)
    a73c:	dbc02a15 	stw	r15,168(sp)
    a740:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    a744:	d9c02b17 	ldw	r7,172(sp)
    a748:	dbc02a17 	ldw	r15,168(sp)
    a74c:	10006d1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    a750:	d9801b17 	ldw	r6,108(sp)
    a754:	d8801c17 	ldw	r2,112(sp)
    a758:	d811883a 	mov	r8,sp
    a75c:	31400044 	addi	r5,r6,1
    a760:	003e3306 	br	a030 <___vfiprintf_internal_r+0x47c>
    a764:	d9401b17 	ldw	r5,108(sp)
    a768:	d8801c17 	ldw	r2,112(sp)
    a76c:	29000044 	addi	r4,r5,1
    a770:	d8c01d87 	ldb	r3,118(sp)
    a774:	183e4d26 	beq	r3,zero,a0ac <___vfiprintf_internal_r+0x4f8>
    a778:	00c00044 	movi	r3,1
    a77c:	d9401d84 	addi	r5,sp,118
    a780:	10c5883a 	add	r2,r2,r3
    a784:	41400015 	stw	r5,0(r8)
    a788:	40c00115 	stw	r3,4(r8)
    a78c:	d8801c15 	stw	r2,112(sp)
    a790:	d9001b15 	stw	r4,108(sp)
    a794:	014001c4 	movi	r5,7
    a798:	2900a90e 	bge	r5,r4,aa40 <___vfiprintf_internal_r+0xe8c>
    a79c:	1000da1e 	bne	r2,zero,ab08 <___vfiprintf_internal_r+0xf54>
    a7a0:	7000ab1e 	bne	r14,zero,aa50 <___vfiprintf_internal_r+0xe9c>
    a7a4:	000b883a 	mov	r5,zero
    a7a8:	1809883a 	mov	r4,r3
    a7ac:	d811883a 	mov	r8,sp
    a7b0:	00c02004 	movi	r3,128
    a7b4:	e0fe4d26 	beq	fp,r3,a0ec <___vfiprintf_internal_r+0x538>
    a7b8:	4cf9c83a 	sub	fp,r9,r19
    a7bc:	073e7b0e 	bge	zero,fp,a1ac <___vfiprintf_internal_r+0x5f8>
    a7c0:	01c00404 	movi	r7,16
    a7c4:	3f01900e 	bge	r7,fp,ae08 <___vfiprintf_internal_r+0x1254>
    a7c8:	00c00074 	movhi	r3,1
    a7cc:	18c76104 	addi	r3,r3,7556
    a7d0:	d8c02415 	stw	r3,144(sp)
    a7d4:	034001c4 	movi	r13,7
    a7d8:	00000506 	br	a7f0 <___vfiprintf_internal_r+0xc3c>
    a7dc:	29000084 	addi	r4,r5,2
    a7e0:	42000204 	addi	r8,r8,8
    a7e4:	180b883a 	mov	r5,r3
    a7e8:	e73ffc04 	addi	fp,fp,-16
    a7ec:	3f000d0e 	bge	r7,fp,a824 <___vfiprintf_internal_r+0xc70>
    a7f0:	10800404 	addi	r2,r2,16
    a7f4:	28c00044 	addi	r3,r5,1
    a7f8:	45c00015 	stw	r23,0(r8)
    a7fc:	41c00115 	stw	r7,4(r8)
    a800:	d8801c15 	stw	r2,112(sp)
    a804:	d8c01b15 	stw	r3,108(sp)
    a808:	68fff40e 	bge	r13,r3,a7dc <___vfiprintf_internal_r+0xc28>
    a80c:	1000101e 	bne	r2,zero,a850 <___vfiprintf_internal_r+0xc9c>
    a810:	e73ffc04 	addi	fp,fp,-16
    a814:	01000044 	movi	r4,1
    a818:	000b883a 	mov	r5,zero
    a81c:	d811883a 	mov	r8,sp
    a820:	3f3ff316 	blt	r7,fp,a7f0 <___vfiprintf_internal_r+0xc3c>
    a824:	da802417 	ldw	r10,144(sp)
    a828:	1705883a 	add	r2,r2,fp
    a82c:	47000115 	stw	fp,4(r8)
    a830:	42800015 	stw	r10,0(r8)
    a834:	d8801c15 	stw	r2,112(sp)
    a838:	d9001b15 	stw	r4,108(sp)
    a83c:	00c001c4 	movi	r3,7
    a840:	19003616 	blt	r3,r4,a91c <___vfiprintf_internal_r+0xd68>
    a844:	42000204 	addi	r8,r8,8
    a848:	21000044 	addi	r4,r4,1
    a84c:	003e5706 	br	a1ac <___vfiprintf_internal_r+0x5f8>
    a850:	d9402117 	ldw	r5,132(sp)
    a854:	d9002017 	ldw	r4,128(sp)
    a858:	d9801a04 	addi	r6,sp,104
    a85c:	d9c02b15 	stw	r7,172(sp)
    a860:	db402a15 	stw	r13,168(sp)
    a864:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    a868:	d9c02b17 	ldw	r7,172(sp)
    a86c:	db402a17 	ldw	r13,168(sp)
    a870:	1000241e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    a874:	d9401b17 	ldw	r5,108(sp)
    a878:	d8801c17 	ldw	r2,112(sp)
    a87c:	d811883a 	mov	r8,sp
    a880:	29000044 	addi	r4,r5,1
    a884:	003fd806 	br	a7e8 <___vfiprintf_internal_r+0xc34>
    a888:	d9401b17 	ldw	r5,108(sp)
    a88c:	00c00074 	movhi	r3,1
    a890:	18c76504 	addi	r3,r3,7572
    a894:	d8c02415 	stw	r3,144(sp)
    a898:	29400044 	addi	r5,r5,1
    a89c:	d8c02417 	ldw	r3,144(sp)
    a8a0:	14c5883a 	add	r2,r2,r19
    a8a4:	44c00115 	stw	r19,4(r8)
    a8a8:	40c00015 	stw	r3,0(r8)
    a8ac:	d8801c15 	stw	r2,112(sp)
    a8b0:	d9401b15 	stw	r5,108(sp)
    a8b4:	00c001c4 	movi	r3,7
    a8b8:	1940070e 	bge	r3,r5,a8d8 <___vfiprintf_internal_r+0xd24>
    a8bc:	103e4826 	beq	r2,zero,a1e0 <___vfiprintf_internal_r+0x62c>
    a8c0:	d9402117 	ldw	r5,132(sp)
    a8c4:	d9002017 	ldw	r4,128(sp)
    a8c8:	d9801a04 	addi	r6,sp,104
    a8cc:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    a8d0:	10000c1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    a8d4:	d8801c17 	ldw	r2,112(sp)
    a8d8:	8c80010e 	bge	r17,r18,a8e0 <___vfiprintf_internal_r+0xd2c>
    a8dc:	9023883a 	mov	r17,r18
    a8e0:	da802317 	ldw	r10,140(sp)
    a8e4:	5455883a 	add	r10,r10,r17
    a8e8:	da802315 	stw	r10,140(sp)
    a8ec:	103e4126 	beq	r2,zero,a1f4 <___vfiprintf_internal_r+0x640>
    a8f0:	d9402117 	ldw	r5,132(sp)
    a8f4:	d9002017 	ldw	r4,128(sp)
    a8f8:	d9801a04 	addi	r6,sp,104
    a8fc:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    a900:	103e3c26 	beq	r2,zero,a1f4 <___vfiprintf_internal_r+0x640>
    a904:	dd002117 	ldw	r20,132(sp)
    a908:	a080030b 	ldhu	r2,12(r20)
    a90c:	1080100c 	andi	r2,r2,64
    a910:	1001231e 	bne	r2,zero,ada0 <___vfiprintf_internal_r+0x11ec>
    a914:	d8802317 	ldw	r2,140(sp)
    a918:	003d7b06 	br	9f08 <___vfiprintf_internal_r+0x354>
    a91c:	1000991e 	bne	r2,zero,ab84 <___vfiprintf_internal_r+0xfd0>
    a920:	00c00044 	movi	r3,1
    a924:	9805883a 	mov	r2,r19
    a928:	dd400015 	stw	r21,0(sp)
    a92c:	dcc00115 	stw	r19,4(sp)
    a930:	dcc01c15 	stw	r19,112(sp)
    a934:	d8c01b15 	stw	r3,108(sp)
    a938:	d811883a 	mov	r8,sp
    a93c:	42000204 	addi	r8,r8,8
    a940:	a2c0010c 	andi	r11,r20,4
    a944:	583fe426 	beq	r11,zero,a8d8 <___vfiprintf_internal_r+0xd24>
    a948:	8ca7c83a 	sub	r19,r17,r18
    a94c:	04ffe20e 	bge	zero,r19,a8d8 <___vfiprintf_internal_r+0xd24>
    a950:	01c00404 	movi	r7,16
    a954:	3cffcc0e 	bge	r7,r19,a888 <___vfiprintf_internal_r+0xcd4>
    a958:	02800074 	movhi	r10,1
    a95c:	52876504 	addi	r10,r10,7572
    a960:	d9001b17 	ldw	r4,108(sp)
    a964:	da802415 	stw	r10,144(sp)
    a968:	382b883a 	mov	r21,r7
    a96c:	050001c4 	movi	r20,7
    a970:	df002017 	ldw	fp,128(sp)
    a974:	00000506 	br	a98c <___vfiprintf_internal_r+0xdd8>
    a978:	21400084 	addi	r5,r4,2
    a97c:	42000204 	addi	r8,r8,8
    a980:	1809883a 	mov	r4,r3
    a984:	9cfffc04 	addi	r19,r19,-16
    a988:	acffc40e 	bge	r21,r19,a89c <___vfiprintf_internal_r+0xce8>
    a98c:	10800404 	addi	r2,r2,16
    a990:	20c00044 	addi	r3,r4,1
    a994:	45800015 	stw	r22,0(r8)
    a998:	45400115 	stw	r21,4(r8)
    a99c:	d8801c15 	stw	r2,112(sp)
    a9a0:	d8c01b15 	stw	r3,108(sp)
    a9a4:	a0fff40e 	bge	r20,r3,a978 <___vfiprintf_internal_r+0xdc4>
    a9a8:	1000041e 	bne	r2,zero,a9bc <___vfiprintf_internal_r+0xe08>
    a9ac:	01400044 	movi	r5,1
    a9b0:	0009883a 	mov	r4,zero
    a9b4:	d811883a 	mov	r8,sp
    a9b8:	003ff206 	br	a984 <___vfiprintf_internal_r+0xdd0>
    a9bc:	d9402117 	ldw	r5,132(sp)
    a9c0:	d9801a04 	addi	r6,sp,104
    a9c4:	e009883a 	mov	r4,fp
    a9c8:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    a9cc:	103fcd1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    a9d0:	d9001b17 	ldw	r4,108(sp)
    a9d4:	d8801c17 	ldw	r2,112(sp)
    a9d8:	d811883a 	mov	r8,sp
    a9dc:	21400044 	addi	r5,r4,1
    a9e0:	003fe806 	br	a984 <___vfiprintf_internal_r+0xdd0>
    a9e4:	d9402117 	ldw	r5,132(sp)
    a9e8:	d9002017 	ldw	r4,128(sp)
    a9ec:	d9801a04 	addi	r6,sp,104
    a9f0:	d9c02b15 	stw	r7,172(sp)
    a9f4:	db402a15 	stw	r13,168(sp)
    a9f8:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    a9fc:	d9c02b17 	ldw	r7,172(sp)
    aa00:	db402a17 	ldw	r13,168(sp)
    aa04:	103fbf1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    aa08:	d9401b17 	ldw	r5,108(sp)
    aa0c:	d8801c17 	ldw	r2,112(sp)
    aa10:	d811883a 	mov	r8,sp
    aa14:	29800044 	addi	r6,r5,1
    aa18:	003dc406 	br	a12c <___vfiprintf_internal_r+0x578>
    aa1c:	1000d21e 	bne	r2,zero,ad68 <___vfiprintf_internal_r+0x11b4>
    aa20:	d8c01d87 	ldb	r3,118(sp)
    aa24:	18009526 	beq	r3,zero,ac7c <___vfiprintf_internal_r+0x10c8>
    aa28:	00800044 	movi	r2,1
    aa2c:	d8c01d84 	addi	r3,sp,118
    aa30:	1009883a 	mov	r4,r2
    aa34:	d8c00015 	stw	r3,0(sp)
    aa38:	d8800115 	stw	r2,4(sp)
    aa3c:	d811883a 	mov	r8,sp
    aa40:	200b883a 	mov	r5,r4
    aa44:	42000204 	addi	r8,r8,8
    aa48:	21000044 	addi	r4,r4,1
    aa4c:	003d9706 	br	a0ac <___vfiprintf_internal_r+0x4f8>
    aa50:	d9001d04 	addi	r4,sp,116
    aa54:	00800084 	movi	r2,2
    aa58:	d9000015 	stw	r4,0(sp)
    aa5c:	d8800115 	stw	r2,4(sp)
    aa60:	1809883a 	mov	r4,r3
    aa64:	d811883a 	mov	r8,sp
    aa68:	200b883a 	mov	r5,r4
    aa6c:	42000204 	addi	r8,r8,8
    aa70:	21000044 	addi	r4,r4,1
    aa74:	003f4e06 	br	a7b0 <___vfiprintf_internal_r+0xbfc>
    aa78:	d8001d85 	stb	zero,118(sp)
    aa7c:	48005016 	blt	r9,zero,abc0 <___vfiprintf_internal_r+0x100c>
    aa80:	00ffdfc4 	movi	r3,-129
    aa84:	94c4b03a 	or	r2,r18,r19
    aa88:	a0e8703a 	and	r20,r20,r3
    aa8c:	103d4426 	beq	r2,zero,9fa0 <___vfiprintf_internal_r+0x3ec>
    aa90:	0039883a 	mov	fp,zero
    aa94:	d9002617 	ldw	r4,152(sp)
    aa98:	dd401a04 	addi	r21,sp,104
    aa9c:	908003cc 	andi	r2,r18,15
    aaa0:	9806973a 	slli	r3,r19,28
    aaa4:	2085883a 	add	r2,r4,r2
    aaa8:	9024d13a 	srli	r18,r18,4
    aaac:	10800003 	ldbu	r2,0(r2)
    aab0:	9826d13a 	srli	r19,r19,4
    aab4:	ad7fffc4 	addi	r21,r21,-1
    aab8:	1ca4b03a 	or	r18,r3,r18
    aabc:	a8800005 	stb	r2,0(r21)
    aac0:	94c4b03a 	or	r2,r18,r19
    aac4:	103ff51e 	bne	r2,zero,aa9c <___vfiprintf_internal_r+0xee8>
    aac8:	003e5906 	br	a430 <___vfiprintf_internal_r+0x87c>
    aacc:	d9402117 	ldw	r5,132(sp)
    aad0:	d9002017 	ldw	r4,128(sp)
    aad4:	d9801a04 	addi	r6,sp,104
    aad8:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    aadc:	103f891e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    aae0:	d8801c17 	ldw	r2,112(sp)
    aae4:	d811883a 	mov	r8,sp
    aae8:	003f9506 	br	a940 <___vfiprintf_internal_r+0xd8c>
    aaec:	d9402117 	ldw	r5,132(sp)
    aaf0:	d9002017 	ldw	r4,128(sp)
    aaf4:	d9801a04 	addi	r6,sp,104
    aaf8:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    aafc:	103f811e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    ab00:	d811883a 	mov	r8,sp
    ab04:	003ced06 	br	9ebc <___vfiprintf_internal_r+0x308>
    ab08:	d9402117 	ldw	r5,132(sp)
    ab0c:	d9002017 	ldw	r4,128(sp)
    ab10:	d9801a04 	addi	r6,sp,104
    ab14:	da402c15 	stw	r9,176(sp)
    ab18:	db802a15 	stw	r14,168(sp)
    ab1c:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    ab20:	da402c17 	ldw	r9,176(sp)
    ab24:	db802a17 	ldw	r14,168(sp)
    ab28:	103f761e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    ab2c:	d9401b17 	ldw	r5,108(sp)
    ab30:	d8801c17 	ldw	r2,112(sp)
    ab34:	d811883a 	mov	r8,sp
    ab38:	29000044 	addi	r4,r5,1
    ab3c:	003d5b06 	br	a0ac <___vfiprintf_internal_r+0x4f8>
    ab40:	d9402117 	ldw	r5,132(sp)
    ab44:	d9002017 	ldw	r4,128(sp)
    ab48:	d9801a04 	addi	r6,sp,104
    ab4c:	da402c15 	stw	r9,176(sp)
    ab50:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    ab54:	da402c17 	ldw	r9,176(sp)
    ab58:	103f6a1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    ab5c:	d9401b17 	ldw	r5,108(sp)
    ab60:	d8801c17 	ldw	r2,112(sp)
    ab64:	d811883a 	mov	r8,sp
    ab68:	29000044 	addi	r4,r5,1
    ab6c:	003f1006 	br	a7b0 <___vfiprintf_internal_r+0xbfc>
    ab70:	1000c31e 	bne	r2,zero,ae80 <___vfiprintf_internal_r+0x12cc>
    ab74:	01000044 	movi	r4,1
    ab78:	000b883a 	mov	r5,zero
    ab7c:	d811883a 	mov	r8,sp
    ab80:	003f0d06 	br	a7b8 <___vfiprintf_internal_r+0xc04>
    ab84:	d9402117 	ldw	r5,132(sp)
    ab88:	d9002017 	ldw	r4,128(sp)
    ab8c:	d9801a04 	addi	r6,sp,104
    ab90:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    ab94:	103f5b1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    ab98:	d9001b17 	ldw	r4,108(sp)
    ab9c:	d8801c17 	ldw	r2,112(sp)
    aba0:	d811883a 	mov	r8,sp
    aba4:	21000044 	addi	r4,r4,1
    aba8:	003d8006 	br	a1ac <___vfiprintf_internal_r+0x5f8>
    abac:	01000074 	movhi	r4,1
    abb0:	21070004 	addi	r4,r4,7168
    abb4:	d9002615 	stw	r4,152(sp)
    abb8:	d8c02215 	stw	r3,136(sp)
    abbc:	1029883a 	mov	r20,r2
    abc0:	94c4b03a 	or	r2,r18,r19
    abc4:	103fb21e 	bne	r2,zero,aa90 <___vfiprintf_internal_r+0xedc>
    abc8:	0039883a 	mov	fp,zero
    abcc:	00800084 	movi	r2,2
    abd0:	003e6b06 	br	a580 <___vfiprintf_internal_r+0x9cc>
    abd4:	da802217 	ldw	r10,136(sp)
    abd8:	d8001d85 	stb	zero,118(sp)
    abdc:	0027883a 	mov	r19,zero
    abe0:	50800104 	addi	r2,r10,4
    abe4:	54800017 	ldw	r18,0(r10)
    abe8:	483e6016 	blt	r9,zero,a56c <___vfiprintf_internal_r+0x9b8>
    abec:	00ffdfc4 	movi	r3,-129
    abf0:	d8802215 	stw	r2,136(sp)
    abf4:	a0e8703a 	and	r20,r20,r3
    abf8:	0039883a 	mov	fp,zero
    abfc:	903ebb26 	beq	r18,zero,a6ec <___vfiprintf_internal_r+0xb38>
    ac00:	00800244 	movi	r2,9
    ac04:	14bdee36 	bltu	r2,r18,a3c0 <___vfiprintf_internal_r+0x80c>
    ac08:	003eba06 	br	a6f4 <___vfiprintf_internal_r+0xb40>
    ac0c:	00800c04 	movi	r2,48
    ac10:	d8c01d45 	stb	r3,117(sp)
    ac14:	d8801d05 	stb	r2,116(sp)
    ac18:	d8001d85 	stb	zero,118(sp)
    ac1c:	a0c00094 	ori	r3,r20,2
    ac20:	4800a916 	blt	r9,zero,aec8 <___vfiprintf_internal_r+0x1314>
    ac24:	00bfdfc4 	movi	r2,-129
    ac28:	a096703a 	and	r11,r20,r2
    ac2c:	5d000094 	ori	r20,r11,2
    ac30:	0039883a 	mov	fp,zero
    ac34:	003f9706 	br	aa94 <___vfiprintf_internal_r+0xee0>
    ac38:	8025883a 	mov	r18,r16
    ac3c:	003c2e06 	br	9cf8 <___vfiprintf_internal_r+0x144>
    ac40:	00800074 	movhi	r2,1
    ac44:	10870004 	addi	r2,r2,7168
    ac48:	0039883a 	mov	fp,zero
    ac4c:	d8802615 	stw	r2,152(sp)
    ac50:	003f9006 	br	aa94 <___vfiprintf_internal_r+0xee0>
    ac54:	04a5c83a 	sub	r18,zero,r18
    ac58:	07000b44 	movi	fp,45
    ac5c:	9004c03a 	cmpne	r2,r18,zero
    ac60:	04e7c83a 	sub	r19,zero,r19
    ac64:	df001d85 	stb	fp,118(sp)
    ac68:	98a7c83a 	sub	r19,r19,r2
    ac6c:	48009f16 	blt	r9,zero,aeec <___vfiprintf_internal_r+0x1338>
    ac70:	00bfdfc4 	movi	r2,-129
    ac74:	a0a8703a 	and	r20,r20,r2
    ac78:	003dd006 	br	a3bc <___vfiprintf_internal_r+0x808>
    ac7c:	70004c26 	beq	r14,zero,adb0 <___vfiprintf_internal_r+0x11fc>
    ac80:	00800084 	movi	r2,2
    ac84:	d8c01d04 	addi	r3,sp,116
    ac88:	d8c00015 	stw	r3,0(sp)
    ac8c:	d8800115 	stw	r2,4(sp)
    ac90:	01000044 	movi	r4,1
    ac94:	d811883a 	mov	r8,sp
    ac98:	003f7306 	br	aa68 <___vfiprintf_internal_r+0xeb4>
    ac9c:	a080100c 	andi	r2,r20,64
    aca0:	da802217 	ldw	r10,136(sp)
    aca4:	103e0626 	beq	r2,zero,a4c0 <___vfiprintf_internal_r+0x90c>
    aca8:	5480000f 	ldh	r18,0(r10)
    acac:	52800104 	addi	r10,r10,4
    acb0:	da802215 	stw	r10,136(sp)
    acb4:	9027d7fa 	srai	r19,r18,31
    acb8:	9805883a 	mov	r2,r19
    acbc:	003db806 	br	a3a0 <___vfiprintf_internal_r+0x7ec>
    acc0:	a080040c 	andi	r2,r20,16
    acc4:	1000091e 	bne	r2,zero,acec <___vfiprintf_internal_r+0x1138>
    acc8:	a2c0100c 	andi	r11,r20,64
    accc:	58000726 	beq	r11,zero,acec <___vfiprintf_internal_r+0x1138>
    acd0:	da802217 	ldw	r10,136(sp)
    acd4:	50800017 	ldw	r2,0(r10)
    acd8:	52800104 	addi	r10,r10,4
    acdc:	da802215 	stw	r10,136(sp)
    ace0:	da802317 	ldw	r10,140(sp)
    ace4:	1280000d 	sth	r10,0(r2)
    ace8:	003be706 	br	9c88 <___vfiprintf_internal_r+0xd4>
    acec:	da802217 	ldw	r10,136(sp)
    acf0:	50800017 	ldw	r2,0(r10)
    acf4:	52800104 	addi	r10,r10,4
    acf8:	da802215 	stw	r10,136(sp)
    acfc:	da802317 	ldw	r10,140(sp)
    ad00:	12800015 	stw	r10,0(r2)
    ad04:	003be006 	br	9c88 <___vfiprintf_internal_r+0xd4>
    ad08:	a080100c 	andi	r2,r20,64
    ad0c:	da802217 	ldw	r10,136(sp)
    ad10:	10003026 	beq	r2,zero,add4 <___vfiprintf_internal_r+0x1220>
    ad14:	5480000b 	ldhu	r18,0(r10)
    ad18:	52800104 	addi	r10,r10,4
    ad1c:	0027883a 	mov	r19,zero
    ad20:	da802215 	stw	r10,136(sp)
    ad24:	003d8006 	br	a328 <___vfiprintf_internal_r+0x774>
    ad28:	80c00007 	ldb	r3,0(r16)
    ad2c:	003c0006 	br	9d30 <___vfiprintf_internal_r+0x17c>
    ad30:	a080100c 	andi	r2,r20,64
    ad34:	d8001d85 	stb	zero,118(sp)
    ad38:	da802217 	ldw	r10,136(sp)
    ad3c:	1000201e 	bne	r2,zero,adc0 <___vfiprintf_internal_r+0x120c>
    ad40:	50800104 	addi	r2,r10,4
    ad44:	54800017 	ldw	r18,0(r10)
    ad48:	0027883a 	mov	r19,zero
    ad4c:	483def0e 	bge	r9,zero,a50c <___vfiprintf_internal_r+0x958>
    ad50:	94c6b03a 	or	r3,r18,r19
    ad54:	d8802215 	stw	r2,136(sp)
    ad58:	183d4e1e 	bne	r3,zero,a294 <___vfiprintf_internal_r+0x6e0>
    ad5c:	0039883a 	mov	fp,zero
    ad60:	0005883a 	mov	r2,zero
    ad64:	003e0606 	br	a580 <___vfiprintf_internal_r+0x9cc>
    ad68:	d9402117 	ldw	r5,132(sp)
    ad6c:	d9002017 	ldw	r4,128(sp)
    ad70:	d9801a04 	addi	r6,sp,104
    ad74:	da402c15 	stw	r9,176(sp)
    ad78:	db802a15 	stw	r14,168(sp)
    ad7c:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    ad80:	da402c17 	ldw	r9,176(sp)
    ad84:	db802a17 	ldw	r14,168(sp)
    ad88:	103ede1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    ad8c:	d9401b17 	ldw	r5,108(sp)
    ad90:	d8801c17 	ldw	r2,112(sp)
    ad94:	d811883a 	mov	r8,sp
    ad98:	29000044 	addi	r4,r5,1
    ad9c:	003e7406 	br	a770 <___vfiprintf_internal_r+0xbbc>
    ada0:	00bfffc4 	movi	r2,-1
    ada4:	003c5806 	br	9f08 <___vfiprintf_internal_r+0x354>
    ada8:	d811883a 	mov	r8,sp
    adac:	003ee806 	br	a950 <___vfiprintf_internal_r+0xd9c>
    adb0:	000b883a 	mov	r5,zero
    adb4:	01000044 	movi	r4,1
    adb8:	d811883a 	mov	r8,sp
    adbc:	003e7c06 	br	a7b0 <___vfiprintf_internal_r+0xbfc>
    adc0:	50800104 	addi	r2,r10,4
    adc4:	5480000b 	ldhu	r18,0(r10)
    adc8:	0027883a 	mov	r19,zero
    adcc:	483dcf0e 	bge	r9,zero,a50c <___vfiprintf_internal_r+0x958>
    add0:	003fdf06 	br	ad50 <___vfiprintf_internal_r+0x119c>
    add4:	54800017 	ldw	r18,0(r10)
    add8:	52800104 	addi	r10,r10,4
    addc:	0027883a 	mov	r19,zero
    ade0:	da802215 	stw	r10,136(sp)
    ade4:	003d5006 	br	a328 <___vfiprintf_internal_r+0x774>
    ade8:	50800104 	addi	r2,r10,4
    adec:	5480000b 	ldhu	r18,0(r10)
    adf0:	0027883a 	mov	r19,zero
    adf4:	483f7d0e 	bge	r9,zero,abec <___vfiprintf_internal_r+0x1038>
    adf8:	003ddc06 	br	a56c <___vfiprintf_internal_r+0x9b8>
    adfc:	d8c02215 	stw	r3,136(sp)
    ae00:	0039883a 	mov	fp,zero
    ae04:	003ddb06 	br	a574 <___vfiprintf_internal_r+0x9c0>
    ae08:	02800074 	movhi	r10,1
    ae0c:	52876104 	addi	r10,r10,7556
    ae10:	da802415 	stw	r10,144(sp)
    ae14:	003e8306 	br	a824 <___vfiprintf_internal_r+0xc70>
    ae18:	d8801c17 	ldw	r2,112(sp)
    ae1c:	dd002117 	ldw	r20,132(sp)
    ae20:	103eb926 	beq	r2,zero,a908 <___vfiprintf_internal_r+0xd54>
    ae24:	d9002017 	ldw	r4,128(sp)
    ae28:	d9801a04 	addi	r6,sp,104
    ae2c:	a00b883a 	mov	r5,r20
    ae30:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    ae34:	003eb406 	br	a908 <___vfiprintf_internal_r+0xd54>
    ae38:	80c00043 	ldbu	r3,1(r16)
    ae3c:	a5000814 	ori	r20,r20,32
    ae40:	84000044 	addi	r16,r16,1
    ae44:	18c03fcc 	andi	r3,r3,255
    ae48:	18c0201c 	xori	r3,r3,128
    ae4c:	18ffe004 	addi	r3,r3,-128
    ae50:	003bb706 	br	9d30 <___vfiprintf_internal_r+0x17c>
    ae54:	a809883a 	mov	r4,r21
    ae58:	d8c02a15 	stw	r3,168(sp)
    ae5c:	da002b15 	stw	r8,172(sp)
    ae60:	0002d680 	call	2d68 <strlen>
    ae64:	d8c02a17 	ldw	r3,168(sp)
    ae68:	1027883a 	mov	r19,r2
    ae6c:	df001d83 	ldbu	fp,118(sp)
    ae70:	d8c02215 	stw	r3,136(sp)
    ae74:	0013883a 	mov	r9,zero
    ae78:	da002b17 	ldw	r8,172(sp)
    ae7c:	003c4d06 	br	9fb4 <___vfiprintf_internal_r+0x400>
    ae80:	d9402117 	ldw	r5,132(sp)
    ae84:	d9002017 	ldw	r4,128(sp)
    ae88:	d9801a04 	addi	r6,sp,104
    ae8c:	da402c15 	stw	r9,176(sp)
    ae90:	0009aa00 	call	9aa0 <__sprint_r.part.0>
    ae94:	da402c17 	ldw	r9,176(sp)
    ae98:	103e9a1e 	bne	r2,zero,a904 <___vfiprintf_internal_r+0xd50>
    ae9c:	d9401b17 	ldw	r5,108(sp)
    aea0:	d8801c17 	ldw	r2,112(sp)
    aea4:	d811883a 	mov	r8,sp
    aea8:	29000044 	addi	r4,r5,1
    aeac:	003e4206 	br	a7b8 <___vfiprintf_internal_r+0xc04>
    aeb0:	d9401b17 	ldw	r5,108(sp)
    aeb4:	01000074 	movhi	r4,1
    aeb8:	21076504 	addi	r4,r4,7572
    aebc:	d9002415 	stw	r4,144(sp)
    aec0:	29400044 	addi	r5,r5,1
    aec4:	003c6d06 	br	a07c <___vfiprintf_internal_r+0x4c8>
    aec8:	0039883a 	mov	fp,zero
    aecc:	00800084 	movi	r2,2
    aed0:	10803fcc 	andi	r2,r2,255
    aed4:	01000044 	movi	r4,1
    aed8:	11001e26 	beq	r2,r4,af54 <___vfiprintf_internal_r+0x13a0>
    aedc:	01000084 	movi	r4,2
    aee0:	11001e1e 	bne	r2,r4,af5c <___vfiprintf_internal_r+0x13a8>
    aee4:	1829883a 	mov	r20,r3
    aee8:	003eea06 	br	aa94 <___vfiprintf_internal_r+0xee0>
    aeec:	a007883a 	mov	r3,r20
    aef0:	00800044 	movi	r2,1
    aef4:	003ff606 	br	aed0 <___vfiprintf_internal_r+0x131c>
    aef8:	00800184 	movi	r2,6
    aefc:	1240012e 	bgeu	r2,r9,af04 <___vfiprintf_internal_r+0x1350>
    af00:	1013883a 	mov	r9,r2
    af04:	4827883a 	mov	r19,r9
    af08:	4825883a 	mov	r18,r9
    af0c:	48001516 	blt	r9,zero,af64 <___vfiprintf_internal_r+0x13b0>
    af10:	05400074 	movhi	r21,1
    af14:	d8c02215 	stw	r3,136(sp)
    af18:	ad470504 	addi	r21,r21,7188
    af1c:	003d1406 	br	a370 <___vfiprintf_internal_r+0x7bc>
    af20:	02800074 	movhi	r10,1
    af24:	52876104 	addi	r10,r10,7556
    af28:	da802415 	stw	r10,144(sp)
    af2c:	200d883a 	mov	r6,r4
    af30:	003c9106 	br	a178 <___vfiprintf_internal_r+0x5c4>
    af34:	5021883a 	mov	r16,r10
    af38:	0013883a 	mov	r9,zero
    af3c:	003b7d06 	br	9d34 <___vfiprintf_internal_r+0x180>
    af40:	4827883a 	mov	r19,r9
    af44:	df001d83 	ldbu	fp,118(sp)
    af48:	d8c02215 	stw	r3,136(sp)
    af4c:	0013883a 	mov	r9,zero
    af50:	003c1806 	br	9fb4 <___vfiprintf_internal_r+0x400>
    af54:	1829883a 	mov	r20,r3
    af58:	003d1806 	br	a3bc <___vfiprintf_internal_r+0x808>
    af5c:	1829883a 	mov	r20,r3
    af60:	003ccd06 	br	a298 <___vfiprintf_internal_r+0x6e4>
    af64:	0025883a 	mov	r18,zero
    af68:	003fe906 	br	af10 <___vfiprintf_internal_r+0x135c>
    af6c:	d8802217 	ldw	r2,136(sp)
    af70:	80c00043 	ldbu	r3,1(r16)
    af74:	5021883a 	mov	r16,r10
    af78:	12400017 	ldw	r9,0(r2)
    af7c:	10800104 	addi	r2,r2,4
    af80:	d8802215 	stw	r2,136(sp)
    af84:	483faf0e 	bge	r9,zero,ae44 <___vfiprintf_internal_r+0x1290>
    af88:	18c03fcc 	andi	r3,r3,255
    af8c:	18c0201c 	xori	r3,r3,128
    af90:	027fffc4 	movi	r9,-1
    af94:	18ffe004 	addi	r3,r3,-128
    af98:	003b6506 	br	9d30 <___vfiprintf_internal_r+0x17c>
    af9c:	d9c01d85 	stb	r7,118(sp)
    afa0:	003ca006 	br	a224 <___vfiprintf_internal_r+0x670>
    afa4:	d9c01d85 	stb	r7,118(sp)
    afa8:	003cad06 	br	a260 <___vfiprintf_internal_r+0x6ac>
    afac:	d9c01d85 	stb	r7,118(sp)
    afb0:	003d7d06 	br	a5a8 <___vfiprintf_internal_r+0x9f4>
    afb4:	d9c01d85 	stb	r7,118(sp)
    afb8:	003d5f06 	br	a538 <___vfiprintf_internal_r+0x984>
    afbc:	a080004c 	andi	r2,r20,1
    afc0:	0039883a 	mov	fp,zero
    afc4:	10000526 	beq	r2,zero,afdc <___vfiprintf_internal_r+0x1428>
    afc8:	00800c04 	movi	r2,48
    afcc:	d88019c5 	stb	r2,103(sp)
    afd0:	dcc02717 	ldw	r19,156(sp)
    afd4:	dd4019c4 	addi	r21,sp,103
    afd8:	003bf606 	br	9fb4 <___vfiprintf_internal_r+0x400>
    afdc:	0027883a 	mov	r19,zero
    afe0:	dd401a04 	addi	r21,sp,104
    afe4:	003bf306 	br	9fb4 <___vfiprintf_internal_r+0x400>
    afe8:	d9c01d85 	stb	r7,118(sp)
    afec:	003dc806 	br	a710 <___vfiprintf_internal_r+0xb5c>
    aff0:	d9c01d85 	stb	r7,118(sp)
    aff4:	003d3a06 	br	a4e0 <___vfiprintf_internal_r+0x92c>
    aff8:	d9c01d85 	stb	r7,118(sp)
    affc:	003d2a06 	br	a4a8 <___vfiprintf_internal_r+0x8f4>
    b000:	d9c01d85 	stb	r7,118(sp)
    b004:	003cde06 	br	a380 <___vfiprintf_internal_r+0x7cc>
    b008:	d9c01d85 	stb	r7,118(sp)
    b00c:	003cbc06 	br	a300 <___vfiprintf_internal_r+0x74c>

0000b010 <__vfiprintf_internal>:
    b010:	00800074 	movhi	r2,1
    b014:	108e6204 	addi	r2,r2,14728
    b018:	300f883a 	mov	r7,r6
    b01c:	280d883a 	mov	r6,r5
    b020:	200b883a 	mov	r5,r4
    b024:	11000017 	ldw	r4,0(r2)
    b028:	0009bb41 	jmpi	9bb4 <___vfiprintf_internal_r>

0000b02c <__sbprintf>:
    b02c:	2880030b 	ldhu	r2,12(r5)
    b030:	2ac01917 	ldw	r11,100(r5)
    b034:	2a80038b 	ldhu	r10,14(r5)
    b038:	2a400717 	ldw	r9,28(r5)
    b03c:	2a000917 	ldw	r8,36(r5)
    b040:	defee204 	addi	sp,sp,-1144
    b044:	00c10004 	movi	r3,1024
    b048:	dc011a15 	stw	r16,1128(sp)
    b04c:	10bfff4c 	andi	r2,r2,65533
    b050:	2821883a 	mov	r16,r5
    b054:	d8cb883a 	add	r5,sp,r3
    b058:	dc811c15 	stw	r18,1136(sp)
    b05c:	dc411b15 	stw	r17,1132(sp)
    b060:	dfc11d15 	stw	ra,1140(sp)
    b064:	2025883a 	mov	r18,r4
    b068:	d881030d 	sth	r2,1036(sp)
    b06c:	dac11915 	stw	r11,1124(sp)
    b070:	da81038d 	sth	r10,1038(sp)
    b074:	da410715 	stw	r9,1052(sp)
    b078:	da010915 	stw	r8,1060(sp)
    b07c:	dec10015 	stw	sp,1024(sp)
    b080:	dec10415 	stw	sp,1040(sp)
    b084:	d8c10215 	stw	r3,1032(sp)
    b088:	d8c10515 	stw	r3,1044(sp)
    b08c:	d8010615 	stw	zero,1048(sp)
    b090:	0009bb40 	call	9bb4 <___vfiprintf_internal_r>
    b094:	1023883a 	mov	r17,r2
    b098:	10000416 	blt	r2,zero,b0ac <__sbprintf+0x80>
    b09c:	d9410004 	addi	r5,sp,1024
    b0a0:	9009883a 	mov	r4,r18
    b0a4:	0006cc80 	call	6cc8 <_fflush_r>
    b0a8:	10000d1e 	bne	r2,zero,b0e0 <__sbprintf+0xb4>
    b0ac:	d881030b 	ldhu	r2,1036(sp)
    b0b0:	1080100c 	andi	r2,r2,64
    b0b4:	10000326 	beq	r2,zero,b0c4 <__sbprintf+0x98>
    b0b8:	8080030b 	ldhu	r2,12(r16)
    b0bc:	10801014 	ori	r2,r2,64
    b0c0:	8080030d 	sth	r2,12(r16)
    b0c4:	8805883a 	mov	r2,r17
    b0c8:	dfc11d17 	ldw	ra,1140(sp)
    b0cc:	dc811c17 	ldw	r18,1136(sp)
    b0d0:	dc411b17 	ldw	r17,1132(sp)
    b0d4:	dc011a17 	ldw	r16,1128(sp)
    b0d8:	dec11e04 	addi	sp,sp,1144
    b0dc:	f800283a 	ret
    b0e0:	047fffc4 	movi	r17,-1
    b0e4:	003ff106 	br	b0ac <__sbprintf+0x80>

0000b0e8 <_write_r>:
    b0e8:	defffd04 	addi	sp,sp,-12
    b0ec:	2805883a 	mov	r2,r5
    b0f0:	dc000015 	stw	r16,0(sp)
    b0f4:	04000074 	movhi	r16,1
    b0f8:	dc400115 	stw	r17,4(sp)
    b0fc:	300b883a 	mov	r5,r6
    b100:	84153704 	addi	r16,r16,21724
    b104:	2023883a 	mov	r17,r4
    b108:	380d883a 	mov	r6,r7
    b10c:	1009883a 	mov	r4,r2
    b110:	dfc00215 	stw	ra,8(sp)
    b114:	80000015 	stw	zero,0(r16)
    b118:	000f5640 	call	f564 <write>
    b11c:	00ffffc4 	movi	r3,-1
    b120:	10c00526 	beq	r2,r3,b138 <_write_r+0x50>
    b124:	dfc00217 	ldw	ra,8(sp)
    b128:	dc400117 	ldw	r17,4(sp)
    b12c:	dc000017 	ldw	r16,0(sp)
    b130:	dec00304 	addi	sp,sp,12
    b134:	f800283a 	ret
    b138:	80c00017 	ldw	r3,0(r16)
    b13c:	183ff926 	beq	r3,zero,b124 <_write_r+0x3c>
    b140:	88c00015 	stw	r3,0(r17)
    b144:	003ff706 	br	b124 <_write_r+0x3c>

0000b148 <_close_r>:
    b148:	defffd04 	addi	sp,sp,-12
    b14c:	dc000015 	stw	r16,0(sp)
    b150:	04000074 	movhi	r16,1
    b154:	dc400115 	stw	r17,4(sp)
    b158:	84153704 	addi	r16,r16,21724
    b15c:	2023883a 	mov	r17,r4
    b160:	2809883a 	mov	r4,r5
    b164:	dfc00215 	stw	ra,8(sp)
    b168:	80000015 	stw	zero,0(r16)
    b16c:	000ed240 	call	ed24 <close>
    b170:	00ffffc4 	movi	r3,-1
    b174:	10c00526 	beq	r2,r3,b18c <_close_r+0x44>
    b178:	dfc00217 	ldw	ra,8(sp)
    b17c:	dc400117 	ldw	r17,4(sp)
    b180:	dc000017 	ldw	r16,0(sp)
    b184:	dec00304 	addi	sp,sp,12
    b188:	f800283a 	ret
    b18c:	80c00017 	ldw	r3,0(r16)
    b190:	183ff926 	beq	r3,zero,b178 <_close_r+0x30>
    b194:	88c00015 	stw	r3,0(r17)
    b198:	003ff706 	br	b178 <_close_r+0x30>

0000b19c <_calloc_r>:
    b19c:	298b383a 	mul	r5,r5,r6
    b1a0:	defffe04 	addi	sp,sp,-8
    b1a4:	dfc00115 	stw	ra,4(sp)
    b1a8:	dc000015 	stw	r16,0(sp)
    b1ac:	00023c80 	call	23c8 <_malloc_r>
    b1b0:	10002926 	beq	r2,zero,b258 <_calloc_r+0xbc>
    b1b4:	11bfff17 	ldw	r6,-4(r2)
    b1b8:	1021883a 	mov	r16,r2
    b1bc:	00bfff04 	movi	r2,-4
    b1c0:	308c703a 	and	r6,r6,r2
    b1c4:	00c00904 	movi	r3,36
    b1c8:	308d883a 	add	r6,r6,r2
    b1cc:	19801636 	bltu	r3,r6,b228 <_calloc_r+0x8c>
    b1d0:	008004c4 	movi	r2,19
    b1d4:	11800b2e 	bgeu	r2,r6,b204 <_calloc_r+0x68>
    b1d8:	80000015 	stw	zero,0(r16)
    b1dc:	80000115 	stw	zero,4(r16)
    b1e0:	008006c4 	movi	r2,27
    b1e4:	11801a2e 	bgeu	r2,r6,b250 <_calloc_r+0xb4>
    b1e8:	80000215 	stw	zero,8(r16)
    b1ec:	80000315 	stw	zero,12(r16)
    b1f0:	30c0151e 	bne	r6,r3,b248 <_calloc_r+0xac>
    b1f4:	80000415 	stw	zero,16(r16)
    b1f8:	80800604 	addi	r2,r16,24
    b1fc:	80000515 	stw	zero,20(r16)
    b200:	00000106 	br	b208 <_calloc_r+0x6c>
    b204:	8005883a 	mov	r2,r16
    b208:	10000015 	stw	zero,0(r2)
    b20c:	10000115 	stw	zero,4(r2)
    b210:	10000215 	stw	zero,8(r2)
    b214:	8005883a 	mov	r2,r16
    b218:	dfc00117 	ldw	ra,4(sp)
    b21c:	dc000017 	ldw	r16,0(sp)
    b220:	dec00204 	addi	sp,sp,8
    b224:	f800283a 	ret
    b228:	000b883a 	mov	r5,zero
    b22c:	8009883a 	mov	r4,r16
    b230:	000818c0 	call	818c <memset>
    b234:	8005883a 	mov	r2,r16
    b238:	dfc00117 	ldw	ra,4(sp)
    b23c:	dc000017 	ldw	r16,0(sp)
    b240:	dec00204 	addi	sp,sp,8
    b244:	f800283a 	ret
    b248:	80800404 	addi	r2,r16,16
    b24c:	003fee06 	br	b208 <_calloc_r+0x6c>
    b250:	80800204 	addi	r2,r16,8
    b254:	003fec06 	br	b208 <_calloc_r+0x6c>
    b258:	0005883a 	mov	r2,zero
    b25c:	003fee06 	br	b218 <_calloc_r+0x7c>

0000b260 <_fclose_r>:
    b260:	28003926 	beq	r5,zero,b348 <_fclose_r+0xe8>
    b264:	defffc04 	addi	sp,sp,-16
    b268:	dc400115 	stw	r17,4(sp)
    b26c:	dc000015 	stw	r16,0(sp)
    b270:	dfc00315 	stw	ra,12(sp)
    b274:	dc800215 	stw	r18,8(sp)
    b278:	2023883a 	mov	r17,r4
    b27c:	2821883a 	mov	r16,r5
    b280:	20000226 	beq	r4,zero,b28c <_fclose_r+0x2c>
    b284:	20800e17 	ldw	r2,56(r4)
    b288:	10002726 	beq	r2,zero,b328 <_fclose_r+0xc8>
    b28c:	8080030f 	ldh	r2,12(r16)
    b290:	1000071e 	bne	r2,zero,b2b0 <_fclose_r+0x50>
    b294:	0005883a 	mov	r2,zero
    b298:	dfc00317 	ldw	ra,12(sp)
    b29c:	dc800217 	ldw	r18,8(sp)
    b2a0:	dc400117 	ldw	r17,4(sp)
    b2a4:	dc000017 	ldw	r16,0(sp)
    b2a8:	dec00404 	addi	sp,sp,16
    b2ac:	f800283a 	ret
    b2b0:	800b883a 	mov	r5,r16
    b2b4:	8809883a 	mov	r4,r17
    b2b8:	0006aac0 	call	6aac <__sflush_r>
    b2bc:	1025883a 	mov	r18,r2
    b2c0:	80800b17 	ldw	r2,44(r16)
    b2c4:	10000426 	beq	r2,zero,b2d8 <_fclose_r+0x78>
    b2c8:	81400717 	ldw	r5,28(r16)
    b2cc:	8809883a 	mov	r4,r17
    b2d0:	103ee83a 	callr	r2
    b2d4:	10001616 	blt	r2,zero,b330 <_fclose_r+0xd0>
    b2d8:	8080030b 	ldhu	r2,12(r16)
    b2dc:	1080200c 	andi	r2,r2,128
    b2e0:	1000151e 	bne	r2,zero,b338 <_fclose_r+0xd8>
    b2e4:	81400c17 	ldw	r5,48(r16)
    b2e8:	28000526 	beq	r5,zero,b300 <_fclose_r+0xa0>
    b2ec:	80801004 	addi	r2,r16,64
    b2f0:	28800226 	beq	r5,r2,b2fc <_fclose_r+0x9c>
    b2f4:	8809883a 	mov	r4,r17
    b2f8:	00072180 	call	7218 <_free_r>
    b2fc:	80000c15 	stw	zero,48(r16)
    b300:	81401117 	ldw	r5,68(r16)
    b304:	28000326 	beq	r5,zero,b314 <_fclose_r+0xb4>
    b308:	8809883a 	mov	r4,r17
    b30c:	00072180 	call	7218 <_free_r>
    b310:	80001115 	stw	zero,68(r16)
    b314:	00070b40 	call	70b4 <__sfp_lock_acquire>
    b318:	8000030d 	sth	zero,12(r16)
    b31c:	00070b80 	call	70b8 <__sfp_lock_release>
    b320:	9005883a 	mov	r2,r18
    b324:	003fdc06 	br	b298 <_fclose_r+0x38>
    b328:	00070a40 	call	70a4 <__sinit>
    b32c:	003fd706 	br	b28c <_fclose_r+0x2c>
    b330:	04bfffc4 	movi	r18,-1
    b334:	003fe806 	br	b2d8 <_fclose_r+0x78>
    b338:	81400417 	ldw	r5,16(r16)
    b33c:	8809883a 	mov	r4,r17
    b340:	00072180 	call	7218 <_free_r>
    b344:	003fe706 	br	b2e4 <_fclose_r+0x84>
    b348:	0005883a 	mov	r2,zero
    b34c:	f800283a 	ret

0000b350 <fclose>:
    b350:	00800074 	movhi	r2,1
    b354:	108e6204 	addi	r2,r2,14728
    b358:	200b883a 	mov	r5,r4
    b35c:	11000017 	ldw	r4,0(r2)
    b360:	000b2601 	jmpi	b260 <_fclose_r>

0000b364 <__fputwc>:
    b364:	defff804 	addi	sp,sp,-32
    b368:	dcc00415 	stw	r19,16(sp)
    b36c:	dc800315 	stw	r18,12(sp)
    b370:	dc000115 	stw	r16,4(sp)
    b374:	dfc00715 	stw	ra,28(sp)
    b378:	dd400615 	stw	r21,24(sp)
    b37c:	dd000515 	stw	r20,20(sp)
    b380:	dc400215 	stw	r17,8(sp)
    b384:	2027883a 	mov	r19,r4
    b388:	2825883a 	mov	r18,r5
    b38c:	3021883a 	mov	r16,r6
    b390:	0007bf40 	call	7bf4 <__locale_mb_cur_max>
    b394:	00c00044 	movi	r3,1
    b398:	10c03e26 	beq	r2,r3,b494 <__fputwc+0x130>
    b39c:	81c01704 	addi	r7,r16,92
    b3a0:	900d883a 	mov	r6,r18
    b3a4:	d80b883a 	mov	r5,sp
    b3a8:	9809883a 	mov	r4,r19
    b3ac:	000b8340 	call	b834 <_wcrtomb_r>
    b3b0:	1029883a 	mov	r20,r2
    b3b4:	00bfffc4 	movi	r2,-1
    b3b8:	a0802026 	beq	r20,r2,b43c <__fputwc+0xd8>
    b3bc:	d9400003 	ldbu	r5,0(sp)
    b3c0:	a0001c26 	beq	r20,zero,b434 <__fputwc+0xd0>
    b3c4:	0023883a 	mov	r17,zero
    b3c8:	05400284 	movi	r21,10
    b3cc:	00000906 	br	b3f4 <__fputwc+0x90>
    b3d0:	80800017 	ldw	r2,0(r16)
    b3d4:	11400005 	stb	r5,0(r2)
    b3d8:	80c00017 	ldw	r3,0(r16)
    b3dc:	18c00044 	addi	r3,r3,1
    b3e0:	80c00015 	stw	r3,0(r16)
    b3e4:	8c400044 	addi	r17,r17,1
    b3e8:	dc45883a 	add	r2,sp,r17
    b3ec:	8d00112e 	bgeu	r17,r20,b434 <__fputwc+0xd0>
    b3f0:	11400003 	ldbu	r5,0(r2)
    b3f4:	80c00217 	ldw	r3,8(r16)
    b3f8:	18ffffc4 	addi	r3,r3,-1
    b3fc:	80c00215 	stw	r3,8(r16)
    b400:	183ff30e 	bge	r3,zero,b3d0 <__fputwc+0x6c>
    b404:	80800617 	ldw	r2,24(r16)
    b408:	18801916 	blt	r3,r2,b470 <__fputwc+0x10c>
    b40c:	80800017 	ldw	r2,0(r16)
    b410:	11400005 	stb	r5,0(r2)
    b414:	80800017 	ldw	r2,0(r16)
    b418:	10c00003 	ldbu	r3,0(r2)
    b41c:	10800044 	addi	r2,r2,1
    b420:	1d402326 	beq	r3,r21,b4b0 <__fputwc+0x14c>
    b424:	80800015 	stw	r2,0(r16)
    b428:	8c400044 	addi	r17,r17,1
    b42c:	dc45883a 	add	r2,sp,r17
    b430:	8d3fef36 	bltu	r17,r20,b3f0 <__fputwc+0x8c>
    b434:	9005883a 	mov	r2,r18
    b438:	00000406 	br	b44c <__fputwc+0xe8>
    b43c:	80c0030b 	ldhu	r3,12(r16)
    b440:	a005883a 	mov	r2,r20
    b444:	18c01014 	ori	r3,r3,64
    b448:	80c0030d 	sth	r3,12(r16)
    b44c:	dfc00717 	ldw	ra,28(sp)
    b450:	dd400617 	ldw	r21,24(sp)
    b454:	dd000517 	ldw	r20,20(sp)
    b458:	dcc00417 	ldw	r19,16(sp)
    b45c:	dc800317 	ldw	r18,12(sp)
    b460:	dc400217 	ldw	r17,8(sp)
    b464:	dc000117 	ldw	r16,4(sp)
    b468:	dec00804 	addi	sp,sp,32
    b46c:	f800283a 	ret
    b470:	800d883a 	mov	r6,r16
    b474:	29403fcc 	andi	r5,r5,255
    b478:	9809883a 	mov	r4,r19
    b47c:	000b6dc0 	call	b6dc <__swbuf_r>
    b480:	10bfffe0 	cmpeqi	r2,r2,-1
    b484:	10803fcc 	andi	r2,r2,255
    b488:	103fd626 	beq	r2,zero,b3e4 <__fputwc+0x80>
    b48c:	00bfffc4 	movi	r2,-1
    b490:	003fee06 	br	b44c <__fputwc+0xe8>
    b494:	90ffffc4 	addi	r3,r18,-1
    b498:	01003f84 	movi	r4,254
    b49c:	20ffbf36 	bltu	r4,r3,b39c <__fputwc+0x38>
    b4a0:	900b883a 	mov	r5,r18
    b4a4:	dc800005 	stb	r18,0(sp)
    b4a8:	1029883a 	mov	r20,r2
    b4ac:	003fc506 	br	b3c4 <__fputwc+0x60>
    b4b0:	800d883a 	mov	r6,r16
    b4b4:	a80b883a 	mov	r5,r21
    b4b8:	9809883a 	mov	r4,r19
    b4bc:	000b6dc0 	call	b6dc <__swbuf_r>
    b4c0:	10bfffe0 	cmpeqi	r2,r2,-1
    b4c4:	003fef06 	br	b484 <__fputwc+0x120>

0000b4c8 <_fputwc_r>:
    b4c8:	3080030b 	ldhu	r2,12(r6)
    b4cc:	10c8000c 	andi	r3,r2,8192
    b4d0:	1800051e 	bne	r3,zero,b4e8 <_fputwc_r+0x20>
    b4d4:	30c01917 	ldw	r3,100(r6)
    b4d8:	10880014 	ori	r2,r2,8192
    b4dc:	3080030d 	sth	r2,12(r6)
    b4e0:	18880014 	ori	r2,r3,8192
    b4e4:	30801915 	stw	r2,100(r6)
    b4e8:	000b3641 	jmpi	b364 <__fputwc>

0000b4ec <fputwc>:
    b4ec:	00800074 	movhi	r2,1
    b4f0:	defffc04 	addi	sp,sp,-16
    b4f4:	108e6204 	addi	r2,r2,14728
    b4f8:	dc000115 	stw	r16,4(sp)
    b4fc:	14000017 	ldw	r16,0(r2)
    b500:	dc400215 	stw	r17,8(sp)
    b504:	dfc00315 	stw	ra,12(sp)
    b508:	2023883a 	mov	r17,r4
    b50c:	80000226 	beq	r16,zero,b518 <fputwc+0x2c>
    b510:	80800e17 	ldw	r2,56(r16)
    b514:	10001026 	beq	r2,zero,b558 <fputwc+0x6c>
    b518:	2880030b 	ldhu	r2,12(r5)
    b51c:	10c8000c 	andi	r3,r2,8192
    b520:	1800051e 	bne	r3,zero,b538 <fputwc+0x4c>
    b524:	28c01917 	ldw	r3,100(r5)
    b528:	10880014 	ori	r2,r2,8192
    b52c:	2880030d 	sth	r2,12(r5)
    b530:	18880014 	ori	r2,r3,8192
    b534:	28801915 	stw	r2,100(r5)
    b538:	280d883a 	mov	r6,r5
    b53c:	8009883a 	mov	r4,r16
    b540:	880b883a 	mov	r5,r17
    b544:	dfc00317 	ldw	ra,12(sp)
    b548:	dc400217 	ldw	r17,8(sp)
    b54c:	dc000117 	ldw	r16,4(sp)
    b550:	dec00404 	addi	sp,sp,16
    b554:	000b3641 	jmpi	b364 <__fputwc>
    b558:	8009883a 	mov	r4,r16
    b55c:	d9400015 	stw	r5,0(sp)
    b560:	00070a40 	call	70a4 <__sinit>
    b564:	d9400017 	ldw	r5,0(sp)
    b568:	003feb06 	br	b518 <fputwc+0x2c>

0000b56c <_fstat_r>:
    b56c:	defffd04 	addi	sp,sp,-12
    b570:	2805883a 	mov	r2,r5
    b574:	dc000015 	stw	r16,0(sp)
    b578:	04000074 	movhi	r16,1
    b57c:	dc400115 	stw	r17,4(sp)
    b580:	84153704 	addi	r16,r16,21724
    b584:	2023883a 	mov	r17,r4
    b588:	300b883a 	mov	r5,r6
    b58c:	1009883a 	mov	r4,r2
    b590:	dfc00215 	stw	ra,8(sp)
    b594:	80000015 	stw	zero,0(r16)
    b598:	000ee5c0 	call	ee5c <fstat>
    b59c:	00ffffc4 	movi	r3,-1
    b5a0:	10c00526 	beq	r2,r3,b5b8 <_fstat_r+0x4c>
    b5a4:	dfc00217 	ldw	ra,8(sp)
    b5a8:	dc400117 	ldw	r17,4(sp)
    b5ac:	dc000017 	ldw	r16,0(sp)
    b5b0:	dec00304 	addi	sp,sp,12
    b5b4:	f800283a 	ret
    b5b8:	80c00017 	ldw	r3,0(r16)
    b5bc:	183ff926 	beq	r3,zero,b5a4 <_fstat_r+0x38>
    b5c0:	88c00015 	stw	r3,0(r17)
    b5c4:	003ff706 	br	b5a4 <_fstat_r+0x38>

0000b5c8 <_isatty_r>:
    b5c8:	defffd04 	addi	sp,sp,-12
    b5cc:	dc000015 	stw	r16,0(sp)
    b5d0:	04000074 	movhi	r16,1
    b5d4:	dc400115 	stw	r17,4(sp)
    b5d8:	84153704 	addi	r16,r16,21724
    b5dc:	2023883a 	mov	r17,r4
    b5e0:	2809883a 	mov	r4,r5
    b5e4:	dfc00215 	stw	ra,8(sp)
    b5e8:	80000015 	stw	zero,0(r16)
    b5ec:	000ef480 	call	ef48 <isatty>
    b5f0:	00ffffc4 	movi	r3,-1
    b5f4:	10c00526 	beq	r2,r3,b60c <_isatty_r+0x44>
    b5f8:	dfc00217 	ldw	ra,8(sp)
    b5fc:	dc400117 	ldw	r17,4(sp)
    b600:	dc000017 	ldw	r16,0(sp)
    b604:	dec00304 	addi	sp,sp,12
    b608:	f800283a 	ret
    b60c:	80c00017 	ldw	r3,0(r16)
    b610:	183ff926 	beq	r3,zero,b5f8 <_isatty_r+0x30>
    b614:	88c00015 	stw	r3,0(r17)
    b618:	003ff706 	br	b5f8 <_isatty_r+0x30>

0000b61c <_lseek_r>:
    b61c:	defffd04 	addi	sp,sp,-12
    b620:	2805883a 	mov	r2,r5
    b624:	dc000015 	stw	r16,0(sp)
    b628:	04000074 	movhi	r16,1
    b62c:	dc400115 	stw	r17,4(sp)
    b630:	300b883a 	mov	r5,r6
    b634:	84153704 	addi	r16,r16,21724
    b638:	2023883a 	mov	r17,r4
    b63c:	380d883a 	mov	r6,r7
    b640:	1009883a 	mov	r4,r2
    b644:	dfc00215 	stw	ra,8(sp)
    b648:	80000015 	stw	zero,0(r16)
    b64c:	000f1140 	call	f114 <lseek>
    b650:	00ffffc4 	movi	r3,-1
    b654:	10c00526 	beq	r2,r3,b66c <_lseek_r+0x50>
    b658:	dfc00217 	ldw	ra,8(sp)
    b65c:	dc400117 	ldw	r17,4(sp)
    b660:	dc000017 	ldw	r16,0(sp)
    b664:	dec00304 	addi	sp,sp,12
    b668:	f800283a 	ret
    b66c:	80c00017 	ldw	r3,0(r16)
    b670:	183ff926 	beq	r3,zero,b658 <_lseek_r+0x3c>
    b674:	88c00015 	stw	r3,0(r17)
    b678:	003ff706 	br	b658 <_lseek_r+0x3c>

0000b67c <_read_r>:
    b67c:	defffd04 	addi	sp,sp,-12
    b680:	2805883a 	mov	r2,r5
    b684:	dc000015 	stw	r16,0(sp)
    b688:	04000074 	movhi	r16,1
    b68c:	dc400115 	stw	r17,4(sp)
    b690:	300b883a 	mov	r5,r6
    b694:	84153704 	addi	r16,r16,21724
    b698:	2023883a 	mov	r17,r4
    b69c:	380d883a 	mov	r6,r7
    b6a0:	1009883a 	mov	r4,r2
    b6a4:	dfc00215 	stw	ra,8(sp)
    b6a8:	80000015 	stw	zero,0(r16)
    b6ac:	000f2e80 	call	f2e8 <read>
    b6b0:	00ffffc4 	movi	r3,-1
    b6b4:	10c00526 	beq	r2,r3,b6cc <_read_r+0x50>
    b6b8:	dfc00217 	ldw	ra,8(sp)
    b6bc:	dc400117 	ldw	r17,4(sp)
    b6c0:	dc000017 	ldw	r16,0(sp)
    b6c4:	dec00304 	addi	sp,sp,12
    b6c8:	f800283a 	ret
    b6cc:	80c00017 	ldw	r3,0(r16)
    b6d0:	183ff926 	beq	r3,zero,b6b8 <_read_r+0x3c>
    b6d4:	88c00015 	stw	r3,0(r17)
    b6d8:	003ff706 	br	b6b8 <_read_r+0x3c>

0000b6dc <__swbuf_r>:
    b6dc:	defffb04 	addi	sp,sp,-20
    b6e0:	dcc00315 	stw	r19,12(sp)
    b6e4:	dc800215 	stw	r18,8(sp)
    b6e8:	dc000015 	stw	r16,0(sp)
    b6ec:	dfc00415 	stw	ra,16(sp)
    b6f0:	dc400115 	stw	r17,4(sp)
    b6f4:	2025883a 	mov	r18,r4
    b6f8:	2827883a 	mov	r19,r5
    b6fc:	3021883a 	mov	r16,r6
    b700:	20000226 	beq	r4,zero,b70c <__swbuf_r+0x30>
    b704:	20800e17 	ldw	r2,56(r4)
    b708:	10004226 	beq	r2,zero,b814 <__swbuf_r+0x138>
    b70c:	80800617 	ldw	r2,24(r16)
    b710:	8100030b 	ldhu	r4,12(r16)
    b714:	80800215 	stw	r2,8(r16)
    b718:	2080020c 	andi	r2,r4,8
    b71c:	10003626 	beq	r2,zero,b7f8 <__swbuf_r+0x11c>
    b720:	80c00417 	ldw	r3,16(r16)
    b724:	18003426 	beq	r3,zero,b7f8 <__swbuf_r+0x11c>
    b728:	2088000c 	andi	r2,r4,8192
    b72c:	9c403fcc 	andi	r17,r19,255
    b730:	10001a26 	beq	r2,zero,b79c <__swbuf_r+0xc0>
    b734:	80800017 	ldw	r2,0(r16)
    b738:	81000517 	ldw	r4,20(r16)
    b73c:	10c7c83a 	sub	r3,r2,r3
    b740:	1900200e 	bge	r3,r4,b7c4 <__swbuf_r+0xe8>
    b744:	18c00044 	addi	r3,r3,1
    b748:	81000217 	ldw	r4,8(r16)
    b74c:	11400044 	addi	r5,r2,1
    b750:	81400015 	stw	r5,0(r16)
    b754:	213fffc4 	addi	r4,r4,-1
    b758:	81000215 	stw	r4,8(r16)
    b75c:	14c00005 	stb	r19,0(r2)
    b760:	80800517 	ldw	r2,20(r16)
    b764:	10c01e26 	beq	r2,r3,b7e0 <__swbuf_r+0x104>
    b768:	8080030b 	ldhu	r2,12(r16)
    b76c:	1080004c 	andi	r2,r2,1
    b770:	10000226 	beq	r2,zero,b77c <__swbuf_r+0xa0>
    b774:	00800284 	movi	r2,10
    b778:	88801926 	beq	r17,r2,b7e0 <__swbuf_r+0x104>
    b77c:	8805883a 	mov	r2,r17
    b780:	dfc00417 	ldw	ra,16(sp)
    b784:	dcc00317 	ldw	r19,12(sp)
    b788:	dc800217 	ldw	r18,8(sp)
    b78c:	dc400117 	ldw	r17,4(sp)
    b790:	dc000017 	ldw	r16,0(sp)
    b794:	dec00504 	addi	sp,sp,20
    b798:	f800283a 	ret
    b79c:	81401917 	ldw	r5,100(r16)
    b7a0:	00b7ffc4 	movi	r2,-8193
    b7a4:	21080014 	ori	r4,r4,8192
    b7a8:	2884703a 	and	r2,r5,r2
    b7ac:	80801915 	stw	r2,100(r16)
    b7b0:	80800017 	ldw	r2,0(r16)
    b7b4:	8100030d 	sth	r4,12(r16)
    b7b8:	81000517 	ldw	r4,20(r16)
    b7bc:	10c7c83a 	sub	r3,r2,r3
    b7c0:	193fe016 	blt	r3,r4,b744 <__swbuf_r+0x68>
    b7c4:	800b883a 	mov	r5,r16
    b7c8:	9009883a 	mov	r4,r18
    b7cc:	0006cc80 	call	6cc8 <_fflush_r>
    b7d0:	1000071e 	bne	r2,zero,b7f0 <__swbuf_r+0x114>
    b7d4:	80800017 	ldw	r2,0(r16)
    b7d8:	00c00044 	movi	r3,1
    b7dc:	003fda06 	br	b748 <__swbuf_r+0x6c>
    b7e0:	800b883a 	mov	r5,r16
    b7e4:	9009883a 	mov	r4,r18
    b7e8:	0006cc80 	call	6cc8 <_fflush_r>
    b7ec:	103fe326 	beq	r2,zero,b77c <__swbuf_r+0xa0>
    b7f0:	00bfffc4 	movi	r2,-1
    b7f4:	003fe206 	br	b780 <__swbuf_r+0xa4>
    b7f8:	800b883a 	mov	r5,r16
    b7fc:	9009883a 	mov	r4,r18
    b800:	00050d00 	call	50d0 <__swsetup_r>
    b804:	103ffa1e 	bne	r2,zero,b7f0 <__swbuf_r+0x114>
    b808:	8100030b 	ldhu	r4,12(r16)
    b80c:	80c00417 	ldw	r3,16(r16)
    b810:	003fc506 	br	b728 <__swbuf_r+0x4c>
    b814:	00070a40 	call	70a4 <__sinit>
    b818:	003fbc06 	br	b70c <__swbuf_r+0x30>

0000b81c <__swbuf>:
    b81c:	00800074 	movhi	r2,1
    b820:	108e6204 	addi	r2,r2,14728
    b824:	280d883a 	mov	r6,r5
    b828:	200b883a 	mov	r5,r4
    b82c:	11000017 	ldw	r4,0(r2)
    b830:	000b6dc1 	jmpi	b6dc <__swbuf_r>

0000b834 <_wcrtomb_r>:
    b834:	defff604 	addi	sp,sp,-40
    b838:	00800074 	movhi	r2,1
    b83c:	dc800815 	stw	r18,32(sp)
    b840:	dc400715 	stw	r17,28(sp)
    b844:	dc000615 	stw	r16,24(sp)
    b848:	108e6404 	addi	r2,r2,14736
    b84c:	dfc00915 	stw	ra,36(sp)
    b850:	2021883a 	mov	r16,r4
    b854:	3823883a 	mov	r17,r7
    b858:	14800017 	ldw	r18,0(r2)
    b85c:	28001426 	beq	r5,zero,b8b0 <_wcrtomb_r+0x7c>
    b860:	d9400415 	stw	r5,16(sp)
    b864:	d9800515 	stw	r6,20(sp)
    b868:	0007be80 	call	7be8 <__locale_charset>
    b86c:	d9800517 	ldw	r6,20(sp)
    b870:	d9400417 	ldw	r5,16(sp)
    b874:	100f883a 	mov	r7,r2
    b878:	dc400015 	stw	r17,0(sp)
    b87c:	8009883a 	mov	r4,r16
    b880:	903ee83a 	callr	r18
    b884:	00ffffc4 	movi	r3,-1
    b888:	10c0031e 	bne	r2,r3,b898 <_wcrtomb_r+0x64>
    b88c:	88000015 	stw	zero,0(r17)
    b890:	00c02284 	movi	r3,138
    b894:	80c00015 	stw	r3,0(r16)
    b898:	dfc00917 	ldw	ra,36(sp)
    b89c:	dc800817 	ldw	r18,32(sp)
    b8a0:	dc400717 	ldw	r17,28(sp)
    b8a4:	dc000617 	ldw	r16,24(sp)
    b8a8:	dec00a04 	addi	sp,sp,40
    b8ac:	f800283a 	ret
    b8b0:	0007be80 	call	7be8 <__locale_charset>
    b8b4:	100f883a 	mov	r7,r2
    b8b8:	dc400015 	stw	r17,0(sp)
    b8bc:	000d883a 	mov	r6,zero
    b8c0:	d9400104 	addi	r5,sp,4
    b8c4:	8009883a 	mov	r4,r16
    b8c8:	903ee83a 	callr	r18
    b8cc:	003fed06 	br	b884 <_wcrtomb_r+0x50>

0000b8d0 <wcrtomb>:
    b8d0:	defff604 	addi	sp,sp,-40
    b8d4:	00800074 	movhi	r2,1
    b8d8:	dc800615 	stw	r18,24(sp)
    b8dc:	dc400515 	stw	r17,20(sp)
    b8e0:	108e6204 	addi	r2,r2,14728
    b8e4:	dfc00915 	stw	ra,36(sp)
    b8e8:	dd000815 	stw	r20,32(sp)
    b8ec:	dcc00715 	stw	r19,28(sp)
    b8f0:	dc000415 	stw	r16,16(sp)
    b8f4:	3025883a 	mov	r18,r6
    b8f8:	14400017 	ldw	r17,0(r2)
    b8fc:	20001926 	beq	r4,zero,b964 <wcrtomb+0x94>
    b900:	00800074 	movhi	r2,1
    b904:	108e6404 	addi	r2,r2,14736
    b908:	15000017 	ldw	r20,0(r2)
    b90c:	2021883a 	mov	r16,r4
    b910:	2827883a 	mov	r19,r5
    b914:	0007be80 	call	7be8 <__locale_charset>
    b918:	100f883a 	mov	r7,r2
    b91c:	dc800015 	stw	r18,0(sp)
    b920:	980d883a 	mov	r6,r19
    b924:	800b883a 	mov	r5,r16
    b928:	8809883a 	mov	r4,r17
    b92c:	a03ee83a 	callr	r20
    b930:	00ffffc4 	movi	r3,-1
    b934:	10c0031e 	bne	r2,r3,b944 <wcrtomb+0x74>
    b938:	90000015 	stw	zero,0(r18)
    b93c:	00c02284 	movi	r3,138
    b940:	88c00015 	stw	r3,0(r17)
    b944:	dfc00917 	ldw	ra,36(sp)
    b948:	dd000817 	ldw	r20,32(sp)
    b94c:	dcc00717 	ldw	r19,28(sp)
    b950:	dc800617 	ldw	r18,24(sp)
    b954:	dc400517 	ldw	r17,20(sp)
    b958:	dc000417 	ldw	r16,16(sp)
    b95c:	dec00a04 	addi	sp,sp,40
    b960:	f800283a 	ret
    b964:	00800074 	movhi	r2,1
    b968:	108e6404 	addi	r2,r2,14736
    b96c:	14000017 	ldw	r16,0(r2)
    b970:	0007be80 	call	7be8 <__locale_charset>
    b974:	100f883a 	mov	r7,r2
    b978:	dc800015 	stw	r18,0(sp)
    b97c:	000d883a 	mov	r6,zero
    b980:	d9400104 	addi	r5,sp,4
    b984:	8809883a 	mov	r4,r17
    b988:	803ee83a 	callr	r16
    b98c:	003fe806 	br	b930 <wcrtomb+0x60>

0000b990 <__ascii_wctomb>:
    b990:	28000526 	beq	r5,zero,b9a8 <__ascii_wctomb+0x18>
    b994:	00803fc4 	movi	r2,255
    b998:	11800536 	bltu	r2,r6,b9b0 <__ascii_wctomb+0x20>
    b99c:	29800005 	stb	r6,0(r5)
    b9a0:	00800044 	movi	r2,1
    b9a4:	f800283a 	ret
    b9a8:	0005883a 	mov	r2,zero
    b9ac:	f800283a 	ret
    b9b0:	00802284 	movi	r2,138
    b9b4:	20800015 	stw	r2,0(r4)
    b9b8:	00bfffc4 	movi	r2,-1
    b9bc:	f800283a 	ret

0000b9c0 <_wctomb_r>:
    b9c0:	00800074 	movhi	r2,1
    b9c4:	defff904 	addi	sp,sp,-28
    b9c8:	108e6404 	addi	r2,r2,14736
    b9cc:	dfc00615 	stw	ra,24(sp)
    b9d0:	dc400515 	stw	r17,20(sp)
    b9d4:	dc000415 	stw	r16,16(sp)
    b9d8:	3823883a 	mov	r17,r7
    b9dc:	14000017 	ldw	r16,0(r2)
    b9e0:	d9000115 	stw	r4,4(sp)
    b9e4:	d9400215 	stw	r5,8(sp)
    b9e8:	d9800315 	stw	r6,12(sp)
    b9ec:	0007be80 	call	7be8 <__locale_charset>
    b9f0:	d9800317 	ldw	r6,12(sp)
    b9f4:	d9400217 	ldw	r5,8(sp)
    b9f8:	d9000117 	ldw	r4,4(sp)
    b9fc:	100f883a 	mov	r7,r2
    ba00:	dc400015 	stw	r17,0(sp)
    ba04:	803ee83a 	callr	r16
    ba08:	dfc00617 	ldw	ra,24(sp)
    ba0c:	dc400517 	ldw	r17,20(sp)
    ba10:	dc000417 	ldw	r16,16(sp)
    ba14:	dec00704 	addi	sp,sp,28
    ba18:	f800283a 	ret

0000ba1c <__udivdi3>:
    ba1c:	defff504 	addi	sp,sp,-44
    ba20:	dcc00415 	stw	r19,16(sp)
    ba24:	dc000115 	stw	r16,4(sp)
    ba28:	dfc00a15 	stw	ra,40(sp)
    ba2c:	df000915 	stw	fp,36(sp)
    ba30:	ddc00815 	stw	r23,32(sp)
    ba34:	dd800715 	stw	r22,28(sp)
    ba38:	dd400615 	stw	r21,24(sp)
    ba3c:	dd000515 	stw	r20,20(sp)
    ba40:	dc800315 	stw	r18,12(sp)
    ba44:	dc400215 	stw	r17,8(sp)
    ba48:	2027883a 	mov	r19,r4
    ba4c:	2821883a 	mov	r16,r5
    ba50:	3800411e 	bne	r7,zero,bb58 <__udivdi3+0x13c>
    ba54:	3023883a 	mov	r17,r6
    ba58:	2025883a 	mov	r18,r4
    ba5c:	2980522e 	bgeu	r5,r6,bba8 <__udivdi3+0x18c>
    ba60:	00bfffd4 	movui	r2,65535
    ba64:	282d883a 	mov	r22,r5
    ba68:	1180a836 	bltu	r2,r6,bd0c <__udivdi3+0x2f0>
    ba6c:	00803fc4 	movi	r2,255
    ba70:	1185803a 	cmpltu	r2,r2,r6
    ba74:	100490fa 	slli	r2,r2,3
    ba78:	3086d83a 	srl	r3,r6,r2
    ba7c:	01000074 	movhi	r4,1
    ba80:	21076904 	addi	r4,r4,7588
    ba84:	20c7883a 	add	r3,r4,r3
    ba88:	18c00003 	ldbu	r3,0(r3)
    ba8c:	1885883a 	add	r2,r3,r2
    ba90:	00c00804 	movi	r3,32
    ba94:	1887c83a 	sub	r3,r3,r2
    ba98:	18000526 	beq	r3,zero,bab0 <__udivdi3+0x94>
    ba9c:	80e0983a 	sll	r16,r16,r3
    baa0:	9884d83a 	srl	r2,r19,r2
    baa4:	30e2983a 	sll	r17,r6,r3
    baa8:	98e4983a 	sll	r18,r19,r3
    baac:	142cb03a 	or	r22,r2,r16
    bab0:	882ad43a 	srli	r21,r17,16
    bab4:	b009883a 	mov	r4,r22
    bab8:	8d3fffcc 	andi	r20,r17,65535
    babc:	a80b883a 	mov	r5,r21
    bac0:	000c6280 	call	c628 <__umodsi3>
    bac4:	b009883a 	mov	r4,r22
    bac8:	a80b883a 	mov	r5,r21
    bacc:	1027883a 	mov	r19,r2
    bad0:	000c5c40 	call	c5c4 <__udivsi3>
    bad4:	102d883a 	mov	r22,r2
    bad8:	9826943a 	slli	r19,r19,16
    badc:	9004d43a 	srli	r2,r18,16
    bae0:	a5a1383a 	mul	r16,r20,r22
    bae4:	14c4b03a 	or	r2,r2,r19
    bae8:	1400052e 	bgeu	r2,r16,bb00 <__udivdi3+0xe4>
    baec:	1445883a 	add	r2,r2,r17
    baf0:	b0ffffc4 	addi	r3,r22,-1
    baf4:	14400136 	bltu	r2,r17,bafc <__udivdi3+0xe0>
    baf8:	14012336 	bltu	r2,r16,bf88 <__udivdi3+0x56c>
    bafc:	182d883a 	mov	r22,r3
    bb00:	1421c83a 	sub	r16,r2,r16
    bb04:	a80b883a 	mov	r5,r21
    bb08:	8009883a 	mov	r4,r16
    bb0c:	000c6280 	call	c628 <__umodsi3>
    bb10:	1027883a 	mov	r19,r2
    bb14:	a80b883a 	mov	r5,r21
    bb18:	8009883a 	mov	r4,r16
    bb1c:	000c5c40 	call	c5c4 <__udivsi3>
    bb20:	9826943a 	slli	r19,r19,16
    bb24:	a0a9383a 	mul	r20,r20,r2
    bb28:	94bfffcc 	andi	r18,r18,65535
    bb2c:	94e4b03a 	or	r18,r18,r19
    bb30:	9500052e 	bgeu	r18,r20,bb48 <__udivdi3+0x12c>
    bb34:	8ca5883a 	add	r18,r17,r18
    bb38:	10ffffc4 	addi	r3,r2,-1
    bb3c:	9440f136 	bltu	r18,r17,bf04 <__udivdi3+0x4e8>
    bb40:	9500f02e 	bgeu	r18,r20,bf04 <__udivdi3+0x4e8>
    bb44:	10bfff84 	addi	r2,r2,-2
    bb48:	b00c943a 	slli	r6,r22,16
    bb4c:	0007883a 	mov	r3,zero
    bb50:	3084b03a 	or	r2,r6,r2
    bb54:	00005906 	br	bcbc <__udivdi3+0x2a0>
    bb58:	29c05636 	bltu	r5,r7,bcb4 <__udivdi3+0x298>
    bb5c:	00bfffd4 	movui	r2,65535
    bb60:	11c0622e 	bgeu	r2,r7,bcec <__udivdi3+0x2d0>
    bb64:	00804034 	movhi	r2,256
    bb68:	10bfffc4 	addi	r2,r2,-1
    bb6c:	11c0ee36 	bltu	r2,r7,bf28 <__udivdi3+0x50c>
    bb70:	00800404 	movi	r2,16
    bb74:	3886d83a 	srl	r3,r7,r2
    bb78:	01000074 	movhi	r4,1
    bb7c:	21076904 	addi	r4,r4,7588
    bb80:	20c7883a 	add	r3,r4,r3
    bb84:	18c00003 	ldbu	r3,0(r3)
    bb88:	05400804 	movi	r21,32
    bb8c:	1885883a 	add	r2,r3,r2
    bb90:	a8abc83a 	sub	r21,r21,r2
    bb94:	a800621e 	bne	r21,zero,bd20 <__udivdi3+0x304>
    bb98:	3c00e936 	bltu	r7,r16,bf40 <__udivdi3+0x524>
    bb9c:	9985403a 	cmpgeu	r2,r19,r6
    bba0:	0007883a 	mov	r3,zero
    bba4:	00004506 	br	bcbc <__udivdi3+0x2a0>
    bba8:	3000041e 	bne	r6,zero,bbbc <__udivdi3+0x1a0>
    bbac:	000b883a 	mov	r5,zero
    bbb0:	01000044 	movi	r4,1
    bbb4:	000c5c40 	call	c5c4 <__udivsi3>
    bbb8:	1023883a 	mov	r17,r2
    bbbc:	00bfffd4 	movui	r2,65535
    bbc0:	14404e2e 	bgeu	r2,r17,bcfc <__udivdi3+0x2e0>
    bbc4:	00804034 	movhi	r2,256
    bbc8:	10bfffc4 	addi	r2,r2,-1
    bbcc:	1440d836 	bltu	r2,r17,bf30 <__udivdi3+0x514>
    bbd0:	00800404 	movi	r2,16
    bbd4:	8886d83a 	srl	r3,r17,r2
    bbd8:	01000074 	movhi	r4,1
    bbdc:	21076904 	addi	r4,r4,7588
    bbe0:	20c7883a 	add	r3,r4,r3
    bbe4:	18c00003 	ldbu	r3,0(r3)
    bbe8:	1885883a 	add	r2,r3,r2
    bbec:	00c00804 	movi	r3,32
    bbf0:	1887c83a 	sub	r3,r3,r2
    bbf4:	18008f1e 	bne	r3,zero,be34 <__udivdi3+0x418>
    bbf8:	882ad43a 	srli	r21,r17,16
    bbfc:	8461c83a 	sub	r16,r16,r17
    bc00:	8d3fffcc 	andi	r20,r17,65535
    bc04:	00c00044 	movi	r3,1
    bc08:	8009883a 	mov	r4,r16
    bc0c:	a80b883a 	mov	r5,r21
    bc10:	d8c00015 	stw	r3,0(sp)
    bc14:	000c6280 	call	c628 <__umodsi3>
    bc18:	8009883a 	mov	r4,r16
    bc1c:	a80b883a 	mov	r5,r21
    bc20:	1027883a 	mov	r19,r2
    bc24:	000c5c40 	call	c5c4 <__udivsi3>
    bc28:	9826943a 	slli	r19,r19,16
    bc2c:	9008d43a 	srli	r4,r18,16
    bc30:	1521383a 	mul	r16,r2,r20
    bc34:	102d883a 	mov	r22,r2
    bc38:	24c8b03a 	or	r4,r4,r19
    bc3c:	d8c00017 	ldw	r3,0(sp)
    bc40:	2400052e 	bgeu	r4,r16,bc58 <__udivdi3+0x23c>
    bc44:	2449883a 	add	r4,r4,r17
    bc48:	b0bfffc4 	addi	r2,r22,-1
    bc4c:	24400136 	bltu	r4,r17,bc54 <__udivdi3+0x238>
    bc50:	2400ca36 	bltu	r4,r16,bf7c <__udivdi3+0x560>
    bc54:	102d883a 	mov	r22,r2
    bc58:	2421c83a 	sub	r16,r4,r16
    bc5c:	a80b883a 	mov	r5,r21
    bc60:	8009883a 	mov	r4,r16
    bc64:	d8c00015 	stw	r3,0(sp)
    bc68:	000c6280 	call	c628 <__umodsi3>
    bc6c:	1027883a 	mov	r19,r2
    bc70:	a80b883a 	mov	r5,r21
    bc74:	8009883a 	mov	r4,r16
    bc78:	000c5c40 	call	c5c4 <__udivsi3>
    bc7c:	9826943a 	slli	r19,r19,16
    bc80:	1529383a 	mul	r20,r2,r20
    bc84:	94bfffcc 	andi	r18,r18,65535
    bc88:	94e4b03a 	or	r18,r18,r19
    bc8c:	d8c00017 	ldw	r3,0(sp)
    bc90:	9500052e 	bgeu	r18,r20,bca8 <__udivdi3+0x28c>
    bc94:	8ca5883a 	add	r18,r17,r18
    bc98:	113fffc4 	addi	r4,r2,-1
    bc9c:	94409736 	bltu	r18,r17,befc <__udivdi3+0x4e0>
    bca0:	9500962e 	bgeu	r18,r20,befc <__udivdi3+0x4e0>
    bca4:	10bfff84 	addi	r2,r2,-2
    bca8:	b00c943a 	slli	r6,r22,16
    bcac:	3084b03a 	or	r2,r6,r2
    bcb0:	00000206 	br	bcbc <__udivdi3+0x2a0>
    bcb4:	0007883a 	mov	r3,zero
    bcb8:	0005883a 	mov	r2,zero
    bcbc:	dfc00a17 	ldw	ra,40(sp)
    bcc0:	df000917 	ldw	fp,36(sp)
    bcc4:	ddc00817 	ldw	r23,32(sp)
    bcc8:	dd800717 	ldw	r22,28(sp)
    bccc:	dd400617 	ldw	r21,24(sp)
    bcd0:	dd000517 	ldw	r20,20(sp)
    bcd4:	dcc00417 	ldw	r19,16(sp)
    bcd8:	dc800317 	ldw	r18,12(sp)
    bcdc:	dc400217 	ldw	r17,8(sp)
    bce0:	dc000117 	ldw	r16,4(sp)
    bce4:	dec00b04 	addi	sp,sp,44
    bce8:	f800283a 	ret
    bcec:	00803fc4 	movi	r2,255
    bcf0:	11c5803a 	cmpltu	r2,r2,r7
    bcf4:	100490fa 	slli	r2,r2,3
    bcf8:	003f9e06 	br	bb74 <__udivdi3+0x158>
    bcfc:	00803fc4 	movi	r2,255
    bd00:	1445803a 	cmpltu	r2,r2,r17
    bd04:	100490fa 	slli	r2,r2,3
    bd08:	003fb206 	br	bbd4 <__udivdi3+0x1b8>
    bd0c:	00804034 	movhi	r2,256
    bd10:	10bfffc4 	addi	r2,r2,-1
    bd14:	11808836 	bltu	r2,r6,bf38 <__udivdi3+0x51c>
    bd18:	00800404 	movi	r2,16
    bd1c:	003f5606 	br	ba78 <__udivdi3+0x5c>
    bd20:	30aed83a 	srl	r23,r6,r2
    bd24:	3d4e983a 	sll	r7,r7,r21
    bd28:	80acd83a 	srl	r22,r16,r2
    bd2c:	9884d83a 	srl	r2,r19,r2
    bd30:	3deeb03a 	or	r23,r7,r23
    bd34:	b824d43a 	srli	r18,r23,16
    bd38:	8560983a 	sll	r16,r16,r21
    bd3c:	b009883a 	mov	r4,r22
    bd40:	900b883a 	mov	r5,r18
    bd44:	3568983a 	sll	r20,r6,r21
    bd48:	1420b03a 	or	r16,r2,r16
    bd4c:	000c6280 	call	c628 <__umodsi3>
    bd50:	b009883a 	mov	r4,r22
    bd54:	900b883a 	mov	r5,r18
    bd58:	1023883a 	mov	r17,r2
    bd5c:	000c5c40 	call	c5c4 <__udivsi3>
    bd60:	8808943a 	slli	r4,r17,16
    bd64:	bf3fffcc 	andi	fp,r23,65535
    bd68:	8006d43a 	srli	r3,r16,16
    bd6c:	e0a3383a 	mul	r17,fp,r2
    bd70:	100d883a 	mov	r6,r2
    bd74:	1906b03a 	or	r3,r3,r4
    bd78:	1c40042e 	bgeu	r3,r17,bd8c <__udivdi3+0x370>
    bd7c:	1dc7883a 	add	r3,r3,r23
    bd80:	10bfffc4 	addi	r2,r2,-1
    bd84:	1dc0752e 	bgeu	r3,r23,bf5c <__udivdi3+0x540>
    bd88:	100d883a 	mov	r6,r2
    bd8c:	1c63c83a 	sub	r17,r3,r17
    bd90:	900b883a 	mov	r5,r18
    bd94:	8809883a 	mov	r4,r17
    bd98:	d9800015 	stw	r6,0(sp)
    bd9c:	000c6280 	call	c628 <__umodsi3>
    bda0:	102d883a 	mov	r22,r2
    bda4:	8809883a 	mov	r4,r17
    bda8:	900b883a 	mov	r5,r18
    bdac:	000c5c40 	call	c5c4 <__udivsi3>
    bdb0:	b02c943a 	slli	r22,r22,16
    bdb4:	e089383a 	mul	r4,fp,r2
    bdb8:	843fffcc 	andi	r16,r16,65535
    bdbc:	85a0b03a 	or	r16,r16,r22
    bdc0:	d9800017 	ldw	r6,0(sp)
    bdc4:	8100042e 	bgeu	r16,r4,bdd8 <__udivdi3+0x3bc>
    bdc8:	85e1883a 	add	r16,r16,r23
    bdcc:	10ffffc4 	addi	r3,r2,-1
    bdd0:	85c05e2e 	bgeu	r16,r23,bf4c <__udivdi3+0x530>
    bdd4:	1805883a 	mov	r2,r3
    bdd8:	300c943a 	slli	r6,r6,16
    bddc:	a17fffcc 	andi	r5,r20,65535
    bde0:	a028d43a 	srli	r20,r20,16
    bde4:	3084b03a 	or	r2,r6,r2
    bde8:	10ffffcc 	andi	r3,r2,65535
    bdec:	100cd43a 	srli	r6,r2,16
    bdf0:	194f383a 	mul	r7,r3,r5
    bdf4:	1d07383a 	mul	r3,r3,r20
    bdf8:	314b383a 	mul	r5,r6,r5
    bdfc:	3810d43a 	srli	r8,r7,16
    be00:	8121c83a 	sub	r16,r16,r4
    be04:	1947883a 	add	r3,r3,r5
    be08:	40c7883a 	add	r3,r8,r3
    be0c:	350d383a 	mul	r6,r6,r20
    be10:	1940022e 	bgeu	r3,r5,be1c <__udivdi3+0x400>
    be14:	01000074 	movhi	r4,1
    be18:	310d883a 	add	r6,r6,r4
    be1c:	1828d43a 	srli	r20,r3,16
    be20:	a18d883a 	add	r6,r20,r6
    be24:	81803e36 	bltu	r16,r6,bf20 <__udivdi3+0x504>
    be28:	81803826 	beq	r16,r6,bf0c <__udivdi3+0x4f0>
    be2c:	0007883a 	mov	r3,zero
    be30:	003fa206 	br	bcbc <__udivdi3+0x2a0>
    be34:	88e2983a 	sll	r17,r17,r3
    be38:	80a8d83a 	srl	r20,r16,r2
    be3c:	80e0983a 	sll	r16,r16,r3
    be40:	882ad43a 	srli	r21,r17,16
    be44:	9884d83a 	srl	r2,r19,r2
    be48:	a009883a 	mov	r4,r20
    be4c:	a80b883a 	mov	r5,r21
    be50:	142eb03a 	or	r23,r2,r16
    be54:	98e4983a 	sll	r18,r19,r3
    be58:	000c6280 	call	c628 <__umodsi3>
    be5c:	a009883a 	mov	r4,r20
    be60:	a80b883a 	mov	r5,r21
    be64:	1021883a 	mov	r16,r2
    be68:	000c5c40 	call	c5c4 <__udivsi3>
    be6c:	1039883a 	mov	fp,r2
    be70:	8d3fffcc 	andi	r20,r17,65535
    be74:	8020943a 	slli	r16,r16,16
    be78:	b804d43a 	srli	r2,r23,16
    be7c:	a72d383a 	mul	r22,r20,fp
    be80:	1404b03a 	or	r2,r2,r16
    be84:	1580062e 	bgeu	r2,r22,bea0 <__udivdi3+0x484>
    be88:	1445883a 	add	r2,r2,r17
    be8c:	e0ffffc4 	addi	r3,fp,-1
    be90:	14403836 	bltu	r2,r17,bf74 <__udivdi3+0x558>
    be94:	1580372e 	bgeu	r2,r22,bf74 <__udivdi3+0x558>
    be98:	e73fff84 	addi	fp,fp,-2
    be9c:	1445883a 	add	r2,r2,r17
    bea0:	15adc83a 	sub	r22,r2,r22
    bea4:	a80b883a 	mov	r5,r21
    bea8:	b009883a 	mov	r4,r22
    beac:	000c6280 	call	c628 <__umodsi3>
    beb0:	1027883a 	mov	r19,r2
    beb4:	b009883a 	mov	r4,r22
    beb8:	a80b883a 	mov	r5,r21
    bebc:	000c5c40 	call	c5c4 <__udivsi3>
    bec0:	9826943a 	slli	r19,r19,16
    bec4:	a0a1383a 	mul	r16,r20,r2
    bec8:	b93fffcc 	andi	r4,r23,65535
    becc:	24c8b03a 	or	r4,r4,r19
    bed0:	2400062e 	bgeu	r4,r16,beec <__udivdi3+0x4d0>
    bed4:	2449883a 	add	r4,r4,r17
    bed8:	10ffffc4 	addi	r3,r2,-1
    bedc:	24402336 	bltu	r4,r17,bf6c <__udivdi3+0x550>
    bee0:	2400222e 	bgeu	r4,r16,bf6c <__udivdi3+0x550>
    bee4:	10bfff84 	addi	r2,r2,-2
    bee8:	2449883a 	add	r4,r4,r17
    beec:	e038943a 	slli	fp,fp,16
    bef0:	2421c83a 	sub	r16,r4,r16
    bef4:	e086b03a 	or	r3,fp,r2
    bef8:	003f4306 	br	bc08 <__udivdi3+0x1ec>
    befc:	2005883a 	mov	r2,r4
    bf00:	003f6906 	br	bca8 <__udivdi3+0x28c>
    bf04:	1805883a 	mov	r2,r3
    bf08:	003f0f06 	br	bb48 <__udivdi3+0x12c>
    bf0c:	1806943a 	slli	r3,r3,16
    bf10:	9d66983a 	sll	r19,r19,r21
    bf14:	39ffffcc 	andi	r7,r7,65535
    bf18:	19c7883a 	add	r3,r3,r7
    bf1c:	98ffc32e 	bgeu	r19,r3,be2c <__udivdi3+0x410>
    bf20:	10bfffc4 	addi	r2,r2,-1
    bf24:	003fc106 	br	be2c <__udivdi3+0x410>
    bf28:	00800604 	movi	r2,24
    bf2c:	003f1106 	br	bb74 <__udivdi3+0x158>
    bf30:	00800604 	movi	r2,24
    bf34:	003f2706 	br	bbd4 <__udivdi3+0x1b8>
    bf38:	00800604 	movi	r2,24
    bf3c:	003ece06 	br	ba78 <__udivdi3+0x5c>
    bf40:	0007883a 	mov	r3,zero
    bf44:	00800044 	movi	r2,1
    bf48:	003f5c06 	br	bcbc <__udivdi3+0x2a0>
    bf4c:	813fa12e 	bgeu	r16,r4,bdd4 <__udivdi3+0x3b8>
    bf50:	10bfff84 	addi	r2,r2,-2
    bf54:	85e1883a 	add	r16,r16,r23
    bf58:	003f9f06 	br	bdd8 <__udivdi3+0x3bc>
    bf5c:	1c7f8a2e 	bgeu	r3,r17,bd88 <__udivdi3+0x36c>
    bf60:	31bfff84 	addi	r6,r6,-2
    bf64:	1dc7883a 	add	r3,r3,r23
    bf68:	003f8806 	br	bd8c <__udivdi3+0x370>
    bf6c:	1805883a 	mov	r2,r3
    bf70:	003fde06 	br	beec <__udivdi3+0x4d0>
    bf74:	1839883a 	mov	fp,r3
    bf78:	003fc906 	br	bea0 <__udivdi3+0x484>
    bf7c:	b5bfff84 	addi	r22,r22,-2
    bf80:	2449883a 	add	r4,r4,r17
    bf84:	003f3406 	br	bc58 <__udivdi3+0x23c>
    bf88:	b5bfff84 	addi	r22,r22,-2
    bf8c:	1445883a 	add	r2,r2,r17
    bf90:	003edb06 	br	bb00 <__udivdi3+0xe4>

0000bf94 <__umoddi3>:
    bf94:	defff404 	addi	sp,sp,-48
    bf98:	df000a15 	stw	fp,40(sp)
    bf9c:	dc400315 	stw	r17,12(sp)
    bfa0:	dc000215 	stw	r16,8(sp)
    bfa4:	dfc00b15 	stw	ra,44(sp)
    bfa8:	ddc00915 	stw	r23,36(sp)
    bfac:	dd800815 	stw	r22,32(sp)
    bfb0:	dd400715 	stw	r21,28(sp)
    bfb4:	dd000615 	stw	r20,24(sp)
    bfb8:	dcc00515 	stw	r19,20(sp)
    bfbc:	dc800415 	stw	r18,16(sp)
    bfc0:	2021883a 	mov	r16,r4
    bfc4:	2823883a 	mov	r17,r5
    bfc8:	2839883a 	mov	fp,r5
    bfcc:	38003c1e 	bne	r7,zero,c0c0 <__umoddi3+0x12c>
    bfd0:	3027883a 	mov	r19,r6
    bfd4:	2029883a 	mov	r20,r4
    bfd8:	2980512e 	bgeu	r5,r6,c120 <__umoddi3+0x18c>
    bfdc:	00bfffd4 	movui	r2,65535
    bfe0:	11809a36 	bltu	r2,r6,c24c <__umoddi3+0x2b8>
    bfe4:	01003fc4 	movi	r4,255
    bfe8:	2189803a 	cmpltu	r4,r4,r6
    bfec:	200890fa 	slli	r4,r4,3
    bff0:	3104d83a 	srl	r2,r6,r4
    bff4:	00c00074 	movhi	r3,1
    bff8:	18c76904 	addi	r3,r3,7588
    bffc:	1885883a 	add	r2,r3,r2
    c000:	10c00003 	ldbu	r3,0(r2)
    c004:	00800804 	movi	r2,32
    c008:	1909883a 	add	r4,r3,r4
    c00c:	1125c83a 	sub	r18,r2,r4
    c010:	90000526 	beq	r18,zero,c028 <__umoddi3+0x94>
    c014:	8ca2983a 	sll	r17,r17,r18
    c018:	8108d83a 	srl	r4,r16,r4
    c01c:	34a6983a 	sll	r19,r6,r18
    c020:	84a8983a 	sll	r20,r16,r18
    c024:	2478b03a 	or	fp,r4,r17
    c028:	982ed43a 	srli	r23,r19,16
    c02c:	e009883a 	mov	r4,fp
    c030:	9dbfffcc 	andi	r22,r19,65535
    c034:	b80b883a 	mov	r5,r23
    c038:	000c6280 	call	c628 <__umodsi3>
    c03c:	e009883a 	mov	r4,fp
    c040:	b80b883a 	mov	r5,r23
    c044:	102b883a 	mov	r21,r2
    c048:	000c5c40 	call	c5c4 <__udivsi3>
    c04c:	a806943a 	slli	r3,r21,16
    c050:	a008d43a 	srli	r4,r20,16
    c054:	b085383a 	mul	r2,r22,r2
    c058:	20c8b03a 	or	r4,r4,r3
    c05c:	2080032e 	bgeu	r4,r2,c06c <__umoddi3+0xd8>
    c060:	24c9883a 	add	r4,r4,r19
    c064:	24c00136 	bltu	r4,r19,c06c <__umoddi3+0xd8>
    c068:	20811036 	bltu	r4,r2,c4ac <__umoddi3+0x518>
    c06c:	20abc83a 	sub	r21,r4,r2
    c070:	b80b883a 	mov	r5,r23
    c074:	a809883a 	mov	r4,r21
    c078:	000c6280 	call	c628 <__umodsi3>
    c07c:	1023883a 	mov	r17,r2
    c080:	b80b883a 	mov	r5,r23
    c084:	a809883a 	mov	r4,r21
    c088:	000c5c40 	call	c5c4 <__udivsi3>
    c08c:	8822943a 	slli	r17,r17,16
    c090:	b085383a 	mul	r2,r22,r2
    c094:	a0ffffcc 	andi	r3,r20,65535
    c098:	1c46b03a 	or	r3,r3,r17
    c09c:	1880042e 	bgeu	r3,r2,c0b0 <__umoddi3+0x11c>
    c0a0:	1cc7883a 	add	r3,r3,r19
    c0a4:	1cc00236 	bltu	r3,r19,c0b0 <__umoddi3+0x11c>
    c0a8:	1880012e 	bgeu	r3,r2,c0b0 <__umoddi3+0x11c>
    c0ac:	1cc7883a 	add	r3,r3,r19
    c0b0:	1885c83a 	sub	r2,r3,r2
    c0b4:	1484d83a 	srl	r2,r2,r18
    c0b8:	0007883a 	mov	r3,zero
    c0bc:	00004f06 	br	c1fc <__umoddi3+0x268>
    c0c0:	29c04c36 	bltu	r5,r7,c1f4 <__umoddi3+0x260>
    c0c4:	00bfffd4 	movui	r2,65535
    c0c8:	11c0582e 	bgeu	r2,r7,c22c <__umoddi3+0x298>
    c0cc:	00804034 	movhi	r2,256
    c0d0:	10bfffc4 	addi	r2,r2,-1
    c0d4:	11c0e736 	bltu	r2,r7,c474 <__umoddi3+0x4e0>
    c0d8:	01000404 	movi	r4,16
    c0dc:	3904d83a 	srl	r2,r7,r4
    c0e0:	00c00074 	movhi	r3,1
    c0e4:	18c76904 	addi	r3,r3,7588
    c0e8:	1885883a 	add	r2,r3,r2
    c0ec:	14c00003 	ldbu	r19,0(r2)
    c0f0:	00c00804 	movi	r3,32
    c0f4:	9927883a 	add	r19,r19,r4
    c0f8:	1ce9c83a 	sub	r20,r3,r19
    c0fc:	a000581e 	bne	r20,zero,c260 <__umoddi3+0x2cc>
    c100:	3c400136 	bltu	r7,r17,c108 <__umoddi3+0x174>
    c104:	8180eb36 	bltu	r16,r6,c4b4 <__umoddi3+0x520>
    c108:	8185c83a 	sub	r2,r16,r6
    c10c:	89e3c83a 	sub	r17,r17,r7
    c110:	8089803a 	cmpltu	r4,r16,r2
    c114:	8939c83a 	sub	fp,r17,r4
    c118:	e007883a 	mov	r3,fp
    c11c:	00003706 	br	c1fc <__umoddi3+0x268>
    c120:	3000041e 	bne	r6,zero,c134 <__umoddi3+0x1a0>
    c124:	000b883a 	mov	r5,zero
    c128:	01000044 	movi	r4,1
    c12c:	000c5c40 	call	c5c4 <__udivsi3>
    c130:	1027883a 	mov	r19,r2
    c134:	00bfffd4 	movui	r2,65535
    c138:	14c0402e 	bgeu	r2,r19,c23c <__umoddi3+0x2a8>
    c13c:	00804034 	movhi	r2,256
    c140:	10bfffc4 	addi	r2,r2,-1
    c144:	14c0cd36 	bltu	r2,r19,c47c <__umoddi3+0x4e8>
    c148:	00800404 	movi	r2,16
    c14c:	9886d83a 	srl	r3,r19,r2
    c150:	01000074 	movhi	r4,1
    c154:	21076904 	addi	r4,r4,7588
    c158:	20c7883a 	add	r3,r4,r3
    c15c:	18c00003 	ldbu	r3,0(r3)
    c160:	1887883a 	add	r3,r3,r2
    c164:	00800804 	movi	r2,32
    c168:	10e5c83a 	sub	r18,r2,r3
    c16c:	9000901e 	bne	r18,zero,c3b0 <__umoddi3+0x41c>
    c170:	982cd43a 	srli	r22,r19,16
    c174:	8ce3c83a 	sub	r17,r17,r19
    c178:	9d7fffcc 	andi	r21,r19,65535
    c17c:	b00b883a 	mov	r5,r22
    c180:	8809883a 	mov	r4,r17
    c184:	000c6280 	call	c628 <__umodsi3>
    c188:	8809883a 	mov	r4,r17
    c18c:	b00b883a 	mov	r5,r22
    c190:	1021883a 	mov	r16,r2
    c194:	000c5c40 	call	c5c4 <__udivsi3>
    c198:	8006943a 	slli	r3,r16,16
    c19c:	a008d43a 	srli	r4,r20,16
    c1a0:	1545383a 	mul	r2,r2,r21
    c1a4:	20c8b03a 	or	r4,r4,r3
    c1a8:	2080042e 	bgeu	r4,r2,c1bc <__umoddi3+0x228>
    c1ac:	24c9883a 	add	r4,r4,r19
    c1b0:	24c00236 	bltu	r4,r19,c1bc <__umoddi3+0x228>
    c1b4:	2080012e 	bgeu	r4,r2,c1bc <__umoddi3+0x228>
    c1b8:	24c9883a 	add	r4,r4,r19
    c1bc:	20a1c83a 	sub	r16,r4,r2
    c1c0:	b00b883a 	mov	r5,r22
    c1c4:	8009883a 	mov	r4,r16
    c1c8:	000c6280 	call	c628 <__umodsi3>
    c1cc:	1023883a 	mov	r17,r2
    c1d0:	b00b883a 	mov	r5,r22
    c1d4:	8009883a 	mov	r4,r16
    c1d8:	000c5c40 	call	c5c4 <__udivsi3>
    c1dc:	8822943a 	slli	r17,r17,16
    c1e0:	1545383a 	mul	r2,r2,r21
    c1e4:	a53fffcc 	andi	r20,r20,65535
    c1e8:	a446b03a 	or	r3,r20,r17
    c1ec:	18bfb02e 	bgeu	r3,r2,c0b0 <__umoddi3+0x11c>
    c1f0:	003fab06 	br	c0a0 <__umoddi3+0x10c>
    c1f4:	2005883a 	mov	r2,r4
    c1f8:	2807883a 	mov	r3,r5
    c1fc:	dfc00b17 	ldw	ra,44(sp)
    c200:	df000a17 	ldw	fp,40(sp)
    c204:	ddc00917 	ldw	r23,36(sp)
    c208:	dd800817 	ldw	r22,32(sp)
    c20c:	dd400717 	ldw	r21,28(sp)
    c210:	dd000617 	ldw	r20,24(sp)
    c214:	dcc00517 	ldw	r19,20(sp)
    c218:	dc800417 	ldw	r18,16(sp)
    c21c:	dc400317 	ldw	r17,12(sp)
    c220:	dc000217 	ldw	r16,8(sp)
    c224:	dec00c04 	addi	sp,sp,48
    c228:	f800283a 	ret
    c22c:	04c03fc4 	movi	r19,255
    c230:	99c9803a 	cmpltu	r4,r19,r7
    c234:	200890fa 	slli	r4,r4,3
    c238:	003fa806 	br	c0dc <__umoddi3+0x148>
    c23c:	00803fc4 	movi	r2,255
    c240:	14c5803a 	cmpltu	r2,r2,r19
    c244:	100490fa 	slli	r2,r2,3
    c248:	003fc006 	br	c14c <__umoddi3+0x1b8>
    c24c:	00804034 	movhi	r2,256
    c250:	10bfffc4 	addi	r2,r2,-1
    c254:	11808b36 	bltu	r2,r6,c484 <__umoddi3+0x4f0>
    c258:	01000404 	movi	r4,16
    c25c:	003f6406 	br	bff0 <__umoddi3+0x5c>
    c260:	34c4d83a 	srl	r2,r6,r19
    c264:	3d0e983a 	sll	r7,r7,r20
    c268:	8cf8d83a 	srl	fp,r17,r19
    c26c:	8d10983a 	sll	r8,r17,r20
    c270:	38aab03a 	or	r21,r7,r2
    c274:	a82cd43a 	srli	r22,r21,16
    c278:	84e2d83a 	srl	r17,r16,r19
    c27c:	e009883a 	mov	r4,fp
    c280:	b00b883a 	mov	r5,r22
    c284:	8a22b03a 	or	r17,r17,r8
    c288:	3524983a 	sll	r18,r6,r20
    c28c:	000c6280 	call	c628 <__umodsi3>
    c290:	e009883a 	mov	r4,fp
    c294:	b00b883a 	mov	r5,r22
    c298:	102f883a 	mov	r23,r2
    c29c:	000c5c40 	call	c5c4 <__udivsi3>
    c2a0:	100d883a 	mov	r6,r2
    c2a4:	b808943a 	slli	r4,r23,16
    c2a8:	aa3fffcc 	andi	r8,r21,65535
    c2ac:	8804d43a 	srli	r2,r17,16
    c2b0:	41af383a 	mul	r23,r8,r6
    c2b4:	8520983a 	sll	r16,r16,r20
    c2b8:	1104b03a 	or	r2,r2,r4
    c2bc:	15c0042e 	bgeu	r2,r23,c2d0 <__umoddi3+0x33c>
    c2c0:	1545883a 	add	r2,r2,r21
    c2c4:	30ffffc4 	addi	r3,r6,-1
    c2c8:	1540742e 	bgeu	r2,r21,c49c <__umoddi3+0x508>
    c2cc:	180d883a 	mov	r6,r3
    c2d0:	15efc83a 	sub	r23,r2,r23
    c2d4:	b00b883a 	mov	r5,r22
    c2d8:	b809883a 	mov	r4,r23
    c2dc:	d9800115 	stw	r6,4(sp)
    c2e0:	da000015 	stw	r8,0(sp)
    c2e4:	000c6280 	call	c628 <__umodsi3>
    c2e8:	b00b883a 	mov	r5,r22
    c2ec:	b809883a 	mov	r4,r23
    c2f0:	1039883a 	mov	fp,r2
    c2f4:	000c5c40 	call	c5c4 <__udivsi3>
    c2f8:	da000017 	ldw	r8,0(sp)
    c2fc:	e038943a 	slli	fp,fp,16
    c300:	100b883a 	mov	r5,r2
    c304:	4089383a 	mul	r4,r8,r2
    c308:	8a3fffcc 	andi	r8,r17,65535
    c30c:	4710b03a 	or	r8,r8,fp
    c310:	d9800117 	ldw	r6,4(sp)
    c314:	4100042e 	bgeu	r8,r4,c328 <__umoddi3+0x394>
    c318:	4551883a 	add	r8,r8,r21
    c31c:	10bfffc4 	addi	r2,r2,-1
    c320:	45405a2e 	bgeu	r8,r21,c48c <__umoddi3+0x4f8>
    c324:	100b883a 	mov	r5,r2
    c328:	300c943a 	slli	r6,r6,16
    c32c:	91ffffcc 	andi	r7,r18,65535
    c330:	9004d43a 	srli	r2,r18,16
    c334:	314cb03a 	or	r6,r6,r5
    c338:	317fffcc 	andi	r5,r6,65535
    c33c:	300cd43a 	srli	r6,r6,16
    c340:	29d3383a 	mul	r9,r5,r7
    c344:	288b383a 	mul	r5,r5,r2
    c348:	31cf383a 	mul	r7,r6,r7
    c34c:	4806d43a 	srli	r3,r9,16
    c350:	4111c83a 	sub	r8,r8,r4
    c354:	29cb883a 	add	r5,r5,r7
    c358:	194b883a 	add	r5,r3,r5
    c35c:	3085383a 	mul	r2,r6,r2
    c360:	29c0022e 	bgeu	r5,r7,c36c <__umoddi3+0x3d8>
    c364:	00c00074 	movhi	r3,1
    c368:	10c5883a 	add	r2,r2,r3
    c36c:	2808d43a 	srli	r4,r5,16
    c370:	280a943a 	slli	r5,r5,16
    c374:	4a7fffcc 	andi	r9,r9,65535
    c378:	2085883a 	add	r2,r4,r2
    c37c:	2a4b883a 	add	r5,r5,r9
    c380:	40803636 	bltu	r8,r2,c45c <__umoddi3+0x4c8>
    c384:	40804d26 	beq	r8,r2,c4bc <__umoddi3+0x528>
    c388:	4089c83a 	sub	r4,r8,r2
    c38c:	280f883a 	mov	r7,r5
    c390:	81cfc83a 	sub	r7,r16,r7
    c394:	81c7803a 	cmpltu	r3,r16,r7
    c398:	20c7c83a 	sub	r3,r4,r3
    c39c:	1cc4983a 	sll	r2,r3,r19
    c3a0:	3d0ed83a 	srl	r7,r7,r20
    c3a4:	1d06d83a 	srl	r3,r3,r20
    c3a8:	11c4b03a 	or	r2,r2,r7
    c3ac:	003f9306 	br	c1fc <__umoddi3+0x268>
    c3b0:	9ca6983a 	sll	r19,r19,r18
    c3b4:	88e8d83a 	srl	r20,r17,r3
    c3b8:	80c4d83a 	srl	r2,r16,r3
    c3bc:	982cd43a 	srli	r22,r19,16
    c3c0:	8ca2983a 	sll	r17,r17,r18
    c3c4:	a009883a 	mov	r4,r20
    c3c8:	b00b883a 	mov	r5,r22
    c3cc:	1478b03a 	or	fp,r2,r17
    c3d0:	000c6280 	call	c628 <__umodsi3>
    c3d4:	a009883a 	mov	r4,r20
    c3d8:	b00b883a 	mov	r5,r22
    c3dc:	1023883a 	mov	r17,r2
    c3e0:	000c5c40 	call	c5c4 <__udivsi3>
    c3e4:	9d7fffcc 	andi	r21,r19,65535
    c3e8:	880a943a 	slli	r5,r17,16
    c3ec:	e008d43a 	srli	r4,fp,16
    c3f0:	a885383a 	mul	r2,r21,r2
    c3f4:	84a8983a 	sll	r20,r16,r18
    c3f8:	2148b03a 	or	r4,r4,r5
    c3fc:	2080042e 	bgeu	r4,r2,c410 <__umoddi3+0x47c>
    c400:	24c9883a 	add	r4,r4,r19
    c404:	24c00236 	bltu	r4,r19,c410 <__umoddi3+0x47c>
    c408:	2080012e 	bgeu	r4,r2,c410 <__umoddi3+0x47c>
    c40c:	24c9883a 	add	r4,r4,r19
    c410:	20a3c83a 	sub	r17,r4,r2
    c414:	b00b883a 	mov	r5,r22
    c418:	8809883a 	mov	r4,r17
    c41c:	000c6280 	call	c628 <__umodsi3>
    c420:	102f883a 	mov	r23,r2
    c424:	8809883a 	mov	r4,r17
    c428:	b00b883a 	mov	r5,r22
    c42c:	000c5c40 	call	c5c4 <__udivsi3>
    c430:	b82e943a 	slli	r23,r23,16
    c434:	a885383a 	mul	r2,r21,r2
    c438:	e13fffcc 	andi	r4,fp,65535
    c43c:	25c8b03a 	or	r4,r4,r23
    c440:	2080042e 	bgeu	r4,r2,c454 <__umoddi3+0x4c0>
    c444:	24c9883a 	add	r4,r4,r19
    c448:	24c00236 	bltu	r4,r19,c454 <__umoddi3+0x4c0>
    c44c:	2080012e 	bgeu	r4,r2,c454 <__umoddi3+0x4c0>
    c450:	24c9883a 	add	r4,r4,r19
    c454:	20a3c83a 	sub	r17,r4,r2
    c458:	003f4806 	br	c17c <__umoddi3+0x1e8>
    c45c:	2c8fc83a 	sub	r7,r5,r18
    c460:	1545c83a 	sub	r2,r2,r21
    c464:	29cb803a 	cmpltu	r5,r5,r7
    c468:	1145c83a 	sub	r2,r2,r5
    c46c:	4089c83a 	sub	r4,r8,r2
    c470:	003fc706 	br	c390 <__umoddi3+0x3fc>
    c474:	01000604 	movi	r4,24
    c478:	003f1806 	br	c0dc <__umoddi3+0x148>
    c47c:	00800604 	movi	r2,24
    c480:	003f3206 	br	c14c <__umoddi3+0x1b8>
    c484:	01000604 	movi	r4,24
    c488:	003ed906 	br	bff0 <__umoddi3+0x5c>
    c48c:	413fa52e 	bgeu	r8,r4,c324 <__umoddi3+0x390>
    c490:	297fff84 	addi	r5,r5,-2
    c494:	4551883a 	add	r8,r8,r21
    c498:	003fa306 	br	c328 <__umoddi3+0x394>
    c49c:	15ff8b2e 	bgeu	r2,r23,c2cc <__umoddi3+0x338>
    c4a0:	31bfff84 	addi	r6,r6,-2
    c4a4:	1545883a 	add	r2,r2,r21
    c4a8:	003f8906 	br	c2d0 <__umoddi3+0x33c>
    c4ac:	24c9883a 	add	r4,r4,r19
    c4b0:	003eee06 	br	c06c <__umoddi3+0xd8>
    c4b4:	8005883a 	mov	r2,r16
    c4b8:	003f1706 	br	c118 <__umoddi3+0x184>
    c4bc:	817fe736 	bltu	r16,r5,c45c <__umoddi3+0x4c8>
    c4c0:	280f883a 	mov	r7,r5
    c4c4:	0009883a 	mov	r4,zero
    c4c8:	003fb106 	br	c390 <__umoddi3+0x3fc>

0000c4cc <__divsi3>:
    c4cc:	20001b16 	blt	r4,zero,c53c <__divsi3+0x70>
    c4d0:	000f883a 	mov	r7,zero
    c4d4:	28001616 	blt	r5,zero,c530 <__divsi3+0x64>
    c4d8:	200d883a 	mov	r6,r4
    c4dc:	29001a2e 	bgeu	r5,r4,c548 <__divsi3+0x7c>
    c4e0:	00800804 	movi	r2,32
    c4e4:	00c00044 	movi	r3,1
    c4e8:	00000106 	br	c4f0 <__divsi3+0x24>
    c4ec:	10000d26 	beq	r2,zero,c524 <__divsi3+0x58>
    c4f0:	294b883a 	add	r5,r5,r5
    c4f4:	10bfffc4 	addi	r2,r2,-1
    c4f8:	18c7883a 	add	r3,r3,r3
    c4fc:	293ffb36 	bltu	r5,r4,c4ec <__divsi3+0x20>
    c500:	0005883a 	mov	r2,zero
    c504:	18000726 	beq	r3,zero,c524 <__divsi3+0x58>
    c508:	0005883a 	mov	r2,zero
    c50c:	31400236 	bltu	r6,r5,c518 <__divsi3+0x4c>
    c510:	314dc83a 	sub	r6,r6,r5
    c514:	10c4b03a 	or	r2,r2,r3
    c518:	1806d07a 	srli	r3,r3,1
    c51c:	280ad07a 	srli	r5,r5,1
    c520:	183ffa1e 	bne	r3,zero,c50c <__divsi3+0x40>
    c524:	38000126 	beq	r7,zero,c52c <__divsi3+0x60>
    c528:	0085c83a 	sub	r2,zero,r2
    c52c:	f800283a 	ret
    c530:	014bc83a 	sub	r5,zero,r5
    c534:	39c0005c 	xori	r7,r7,1
    c538:	003fe706 	br	c4d8 <__divsi3+0xc>
    c53c:	0109c83a 	sub	r4,zero,r4
    c540:	01c00044 	movi	r7,1
    c544:	003fe306 	br	c4d4 <__divsi3+0x8>
    c548:	00c00044 	movi	r3,1
    c54c:	003fee06 	br	c508 <__divsi3+0x3c>

0000c550 <__modsi3>:
    c550:	20001716 	blt	r4,zero,c5b0 <__modsi3+0x60>
    c554:	000f883a 	mov	r7,zero
    c558:	2005883a 	mov	r2,r4
    c55c:	28001216 	blt	r5,zero,c5a8 <__modsi3+0x58>
    c560:	2900162e 	bgeu	r5,r4,c5bc <__modsi3+0x6c>
    c564:	01800804 	movi	r6,32
    c568:	00c00044 	movi	r3,1
    c56c:	00000106 	br	c574 <__modsi3+0x24>
    c570:	30000a26 	beq	r6,zero,c59c <__modsi3+0x4c>
    c574:	294b883a 	add	r5,r5,r5
    c578:	31bfffc4 	addi	r6,r6,-1
    c57c:	18c7883a 	add	r3,r3,r3
    c580:	293ffb36 	bltu	r5,r4,c570 <__modsi3+0x20>
    c584:	18000526 	beq	r3,zero,c59c <__modsi3+0x4c>
    c588:	1806d07a 	srli	r3,r3,1
    c58c:	11400136 	bltu	r2,r5,c594 <__modsi3+0x44>
    c590:	1145c83a 	sub	r2,r2,r5
    c594:	280ad07a 	srli	r5,r5,1
    c598:	183ffb1e 	bne	r3,zero,c588 <__modsi3+0x38>
    c59c:	38000126 	beq	r7,zero,c5a4 <__modsi3+0x54>
    c5a0:	0085c83a 	sub	r2,zero,r2
    c5a4:	f800283a 	ret
    c5a8:	014bc83a 	sub	r5,zero,r5
    c5ac:	003fec06 	br	c560 <__modsi3+0x10>
    c5b0:	0109c83a 	sub	r4,zero,r4
    c5b4:	01c00044 	movi	r7,1
    c5b8:	003fe706 	br	c558 <__modsi3+0x8>
    c5bc:	00c00044 	movi	r3,1
    c5c0:	003ff106 	br	c588 <__modsi3+0x38>

0000c5c4 <__udivsi3>:
    c5c4:	200d883a 	mov	r6,r4
    c5c8:	2900152e 	bgeu	r5,r4,c620 <__udivsi3+0x5c>
    c5cc:	28001416 	blt	r5,zero,c620 <__udivsi3+0x5c>
    c5d0:	00800804 	movi	r2,32
    c5d4:	00c00044 	movi	r3,1
    c5d8:	00000206 	br	c5e4 <__udivsi3+0x20>
    c5dc:	10000e26 	beq	r2,zero,c618 <__udivsi3+0x54>
    c5e0:	28000516 	blt	r5,zero,c5f8 <__udivsi3+0x34>
    c5e4:	294b883a 	add	r5,r5,r5
    c5e8:	10bfffc4 	addi	r2,r2,-1
    c5ec:	18c7883a 	add	r3,r3,r3
    c5f0:	293ffa36 	bltu	r5,r4,c5dc <__udivsi3+0x18>
    c5f4:	18000826 	beq	r3,zero,c618 <__udivsi3+0x54>
    c5f8:	0005883a 	mov	r2,zero
    c5fc:	31400236 	bltu	r6,r5,c608 <__udivsi3+0x44>
    c600:	314dc83a 	sub	r6,r6,r5
    c604:	10c4b03a 	or	r2,r2,r3
    c608:	1806d07a 	srli	r3,r3,1
    c60c:	280ad07a 	srli	r5,r5,1
    c610:	183ffa1e 	bne	r3,zero,c5fc <__udivsi3+0x38>
    c614:	f800283a 	ret
    c618:	0005883a 	mov	r2,zero
    c61c:	f800283a 	ret
    c620:	00c00044 	movi	r3,1
    c624:	003ff406 	br	c5f8 <__udivsi3+0x34>

0000c628 <__umodsi3>:
    c628:	2005883a 	mov	r2,r4
    c62c:	2900122e 	bgeu	r5,r4,c678 <__umodsi3+0x50>
    c630:	28001116 	blt	r5,zero,c678 <__umodsi3+0x50>
    c634:	01800804 	movi	r6,32
    c638:	00c00044 	movi	r3,1
    c63c:	00000206 	br	c648 <__umodsi3+0x20>
    c640:	30000c26 	beq	r6,zero,c674 <__umodsi3+0x4c>
    c644:	28000516 	blt	r5,zero,c65c <__umodsi3+0x34>
    c648:	294b883a 	add	r5,r5,r5
    c64c:	31bfffc4 	addi	r6,r6,-1
    c650:	18c7883a 	add	r3,r3,r3
    c654:	293ffa36 	bltu	r5,r4,c640 <__umodsi3+0x18>
    c658:	18000626 	beq	r3,zero,c674 <__umodsi3+0x4c>
    c65c:	1806d07a 	srli	r3,r3,1
    c660:	11400136 	bltu	r2,r5,c668 <__umodsi3+0x40>
    c664:	1145c83a 	sub	r2,r2,r5
    c668:	280ad07a 	srli	r5,r5,1
    c66c:	183ffb1e 	bne	r3,zero,c65c <__umodsi3+0x34>
    c670:	f800283a 	ret
    c674:	f800283a 	ret
    c678:	00c00044 	movi	r3,1
    c67c:	003ff706 	br	c65c <__umodsi3+0x34>

0000c680 <__adddf3>:
    c680:	02c00434 	movhi	r11,16
    c684:	5affffc4 	addi	r11,r11,-1
    c688:	2806d7fa 	srli	r3,r5,31
    c68c:	2ad4703a 	and	r10,r5,r11
    c690:	3ad2703a 	and	r9,r7,r11
    c694:	3804d53a 	srli	r2,r7,20
    c698:	3018d77a 	srli	r12,r6,29
    c69c:	280ad53a 	srli	r5,r5,20
    c6a0:	501490fa 	slli	r10,r10,3
    c6a4:	2010d77a 	srli	r8,r4,29
    c6a8:	481290fa 	slli	r9,r9,3
    c6ac:	380ed7fa 	srli	r7,r7,31
    c6b0:	defffb04 	addi	sp,sp,-20
    c6b4:	dc800215 	stw	r18,8(sp)
    c6b8:	dc400115 	stw	r17,4(sp)
    c6bc:	dc000015 	stw	r16,0(sp)
    c6c0:	dfc00415 	stw	ra,16(sp)
    c6c4:	dcc00315 	stw	r19,12(sp)
    c6c8:	1c803fcc 	andi	r18,r3,255
    c6cc:	2c01ffcc 	andi	r16,r5,2047
    c6d0:	5210b03a 	or	r8,r10,r8
    c6d4:	202290fa 	slli	r17,r4,3
    c6d8:	1081ffcc 	andi	r2,r2,2047
    c6dc:	4b12b03a 	or	r9,r9,r12
    c6e0:	300c90fa 	slli	r6,r6,3
    c6e4:	91c07526 	beq	r18,r7,c8bc <__adddf3+0x23c>
    c6e8:	8087c83a 	sub	r3,r16,r2
    c6ec:	00c0ab0e 	bge	zero,r3,c99c <__adddf3+0x31c>
    c6f0:	10002a1e 	bne	r2,zero,c79c <__adddf3+0x11c>
    c6f4:	4984b03a 	or	r2,r9,r6
    c6f8:	1000961e 	bne	r2,zero,c954 <__adddf3+0x2d4>
    c6fc:	888001cc 	andi	r2,r17,7
    c700:	10000726 	beq	r2,zero,c720 <__adddf3+0xa0>
    c704:	888003cc 	andi	r2,r17,15
    c708:	00c00104 	movi	r3,4
    c70c:	10c00426 	beq	r2,r3,c720 <__adddf3+0xa0>
    c710:	88c7883a 	add	r3,r17,r3
    c714:	1c63803a 	cmpltu	r17,r3,r17
    c718:	4451883a 	add	r8,r8,r17
    c71c:	1823883a 	mov	r17,r3
    c720:	4080202c 	andhi	r2,r8,128
    c724:	10005926 	beq	r2,zero,c88c <__adddf3+0x20c>
    c728:	84000044 	addi	r16,r16,1
    c72c:	0081ffc4 	movi	r2,2047
    c730:	8080ba26 	beq	r16,r2,ca1c <__adddf3+0x39c>
    c734:	00bfe034 	movhi	r2,65408
    c738:	10bfffc4 	addi	r2,r2,-1
    c73c:	4090703a 	and	r8,r8,r2
    c740:	4004977a 	slli	r2,r8,29
    c744:	4010927a 	slli	r8,r8,9
    c748:	8822d0fa 	srli	r17,r17,3
    c74c:	8401ffcc 	andi	r16,r16,2047
    c750:	4010d33a 	srli	r8,r8,12
    c754:	9007883a 	mov	r3,r18
    c758:	1444b03a 	or	r2,r2,r17
    c75c:	8401ffcc 	andi	r16,r16,2047
    c760:	8020953a 	slli	r16,r16,20
    c764:	18c03fcc 	andi	r3,r3,255
    c768:	01000434 	movhi	r4,16
    c76c:	213fffc4 	addi	r4,r4,-1
    c770:	180697fa 	slli	r3,r3,31
    c774:	4110703a 	and	r8,r8,r4
    c778:	4410b03a 	or	r8,r8,r16
    c77c:	40c6b03a 	or	r3,r8,r3
    c780:	dfc00417 	ldw	ra,16(sp)
    c784:	dcc00317 	ldw	r19,12(sp)
    c788:	dc800217 	ldw	r18,8(sp)
    c78c:	dc400117 	ldw	r17,4(sp)
    c790:	dc000017 	ldw	r16,0(sp)
    c794:	dec00504 	addi	sp,sp,20
    c798:	f800283a 	ret
    c79c:	0081ffc4 	movi	r2,2047
    c7a0:	80bfd626 	beq	r16,r2,c6fc <__adddf3+0x7c>
    c7a4:	4a402034 	orhi	r9,r9,128
    c7a8:	00800e04 	movi	r2,56
    c7ac:	10c09f16 	blt	r2,r3,ca2c <__adddf3+0x3ac>
    c7b0:	008007c4 	movi	r2,31
    c7b4:	10c0c216 	blt	r2,r3,cac0 <__adddf3+0x440>
    c7b8:	00800804 	movi	r2,32
    c7bc:	10c5c83a 	sub	r2,r2,r3
    c7c0:	488a983a 	sll	r5,r9,r2
    c7c4:	30c8d83a 	srl	r4,r6,r3
    c7c8:	3084983a 	sll	r2,r6,r2
    c7cc:	48c6d83a 	srl	r3,r9,r3
    c7d0:	290cb03a 	or	r6,r5,r4
    c7d4:	1004c03a 	cmpne	r2,r2,zero
    c7d8:	308cb03a 	or	r6,r6,r2
    c7dc:	898dc83a 	sub	r6,r17,r6
    c7e0:	89a3803a 	cmpltu	r17,r17,r6
    c7e4:	40d1c83a 	sub	r8,r8,r3
    c7e8:	4451c83a 	sub	r8,r8,r17
    c7ec:	3023883a 	mov	r17,r6
    c7f0:	4080202c 	andhi	r2,r8,128
    c7f4:	10002326 	beq	r2,zero,c884 <__adddf3+0x204>
    c7f8:	04c02034 	movhi	r19,128
    c7fc:	9cffffc4 	addi	r19,r19,-1
    c800:	44e6703a 	and	r19,r8,r19
    c804:	98007626 	beq	r19,zero,c9e0 <__adddf3+0x360>
    c808:	9809883a 	mov	r4,r19
    c80c:	000ec840 	call	ec84 <__clzsi2>
    c810:	10fffe04 	addi	r3,r2,-8
    c814:	010007c4 	movi	r4,31
    c818:	20c07716 	blt	r4,r3,c9f8 <__adddf3+0x378>
    c81c:	00800804 	movi	r2,32
    c820:	10c5c83a 	sub	r2,r2,r3
    c824:	8884d83a 	srl	r2,r17,r2
    c828:	98d0983a 	sll	r8,r19,r3
    c82c:	88e2983a 	sll	r17,r17,r3
    c830:	1204b03a 	or	r2,r2,r8
    c834:	1c007416 	blt	r3,r16,ca08 <__adddf3+0x388>
    c838:	1c21c83a 	sub	r16,r3,r16
    c83c:	82000044 	addi	r8,r16,1
    c840:	00c007c4 	movi	r3,31
    c844:	1a009116 	blt	r3,r8,ca8c <__adddf3+0x40c>
    c848:	00c00804 	movi	r3,32
    c84c:	1a07c83a 	sub	r3,r3,r8
    c850:	8a08d83a 	srl	r4,r17,r8
    c854:	88e2983a 	sll	r17,r17,r3
    c858:	10c6983a 	sll	r3,r2,r3
    c85c:	1210d83a 	srl	r8,r2,r8
    c860:	8804c03a 	cmpne	r2,r17,zero
    c864:	1906b03a 	or	r3,r3,r4
    c868:	18a2b03a 	or	r17,r3,r2
    c86c:	0021883a 	mov	r16,zero
    c870:	003fa206 	br	c6fc <__adddf3+0x7c>
    c874:	1890b03a 	or	r8,r3,r2
    c878:	40017d26 	beq	r8,zero,ce70 <__adddf3+0x7f0>
    c87c:	1011883a 	mov	r8,r2
    c880:	1823883a 	mov	r17,r3
    c884:	888001cc 	andi	r2,r17,7
    c888:	103f9e1e 	bne	r2,zero,c704 <__adddf3+0x84>
    c88c:	4004977a 	slli	r2,r8,29
    c890:	8822d0fa 	srli	r17,r17,3
    c894:	4010d0fa 	srli	r8,r8,3
    c898:	9007883a 	mov	r3,r18
    c89c:	1444b03a 	or	r2,r2,r17
    c8a0:	0101ffc4 	movi	r4,2047
    c8a4:	81002426 	beq	r16,r4,c938 <__adddf3+0x2b8>
    c8a8:	8120703a 	and	r16,r16,r4
    c8ac:	01000434 	movhi	r4,16
    c8b0:	213fffc4 	addi	r4,r4,-1
    c8b4:	4110703a 	and	r8,r8,r4
    c8b8:	003fa806 	br	c75c <__adddf3+0xdc>
    c8bc:	8089c83a 	sub	r4,r16,r2
    c8c0:	01005e0e 	bge	zero,r4,ca3c <__adddf3+0x3bc>
    c8c4:	10002b26 	beq	r2,zero,c974 <__adddf3+0x2f4>
    c8c8:	0081ffc4 	movi	r2,2047
    c8cc:	80bf8b26 	beq	r16,r2,c6fc <__adddf3+0x7c>
    c8d0:	4a402034 	orhi	r9,r9,128
    c8d4:	00800e04 	movi	r2,56
    c8d8:	1100a40e 	bge	r2,r4,cb6c <__adddf3+0x4ec>
    c8dc:	498cb03a 	or	r6,r9,r6
    c8e0:	300ac03a 	cmpne	r5,r6,zero
    c8e4:	0013883a 	mov	r9,zero
    c8e8:	2c4b883a 	add	r5,r5,r17
    c8ec:	2c63803a 	cmpltu	r17,r5,r17
    c8f0:	4a11883a 	add	r8,r9,r8
    c8f4:	8a11883a 	add	r8,r17,r8
    c8f8:	2823883a 	mov	r17,r5
    c8fc:	4080202c 	andhi	r2,r8,128
    c900:	103fe026 	beq	r2,zero,c884 <__adddf3+0x204>
    c904:	84000044 	addi	r16,r16,1
    c908:	0081ffc4 	movi	r2,2047
    c90c:	8080d226 	beq	r16,r2,cc58 <__adddf3+0x5d8>
    c910:	00bfe034 	movhi	r2,65408
    c914:	10bfffc4 	addi	r2,r2,-1
    c918:	4090703a 	and	r8,r8,r2
    c91c:	880ad07a 	srli	r5,r17,1
    c920:	400897fa 	slli	r4,r8,31
    c924:	88c0004c 	andi	r3,r17,1
    c928:	28e2b03a 	or	r17,r5,r3
    c92c:	4010d07a 	srli	r8,r8,1
    c930:	2462b03a 	or	r17,r4,r17
    c934:	003f7106 	br	c6fc <__adddf3+0x7c>
    c938:	4088b03a 	or	r4,r8,r2
    c93c:	20014526 	beq	r4,zero,ce54 <__adddf3+0x7d4>
    c940:	01000434 	movhi	r4,16
    c944:	42000234 	orhi	r8,r8,8
    c948:	213fffc4 	addi	r4,r4,-1
    c94c:	4110703a 	and	r8,r8,r4
    c950:	003f8206 	br	c75c <__adddf3+0xdc>
    c954:	18ffffc4 	addi	r3,r3,-1
    c958:	1800491e 	bne	r3,zero,ca80 <__adddf3+0x400>
    c95c:	898bc83a 	sub	r5,r17,r6
    c960:	8963803a 	cmpltu	r17,r17,r5
    c964:	4251c83a 	sub	r8,r8,r9
    c968:	4451c83a 	sub	r8,r8,r17
    c96c:	2823883a 	mov	r17,r5
    c970:	003f9f06 	br	c7f0 <__adddf3+0x170>
    c974:	4984b03a 	or	r2,r9,r6
    c978:	103f6026 	beq	r2,zero,c6fc <__adddf3+0x7c>
    c97c:	213fffc4 	addi	r4,r4,-1
    c980:	2000931e 	bne	r4,zero,cbd0 <__adddf3+0x550>
    c984:	898d883a 	add	r6,r17,r6
    c988:	3463803a 	cmpltu	r17,r6,r17
    c98c:	4251883a 	add	r8,r8,r9
    c990:	8a11883a 	add	r8,r17,r8
    c994:	3023883a 	mov	r17,r6
    c998:	003fd806 	br	c8fc <__adddf3+0x27c>
    c99c:	1800541e 	bne	r3,zero,caf0 <__adddf3+0x470>
    c9a0:	80800044 	addi	r2,r16,1
    c9a4:	1081ffcc 	andi	r2,r2,2047
    c9a8:	00c00044 	movi	r3,1
    c9ac:	1880a00e 	bge	r3,r2,cc30 <__adddf3+0x5b0>
    c9b0:	8989c83a 	sub	r4,r17,r6
    c9b4:	8905803a 	cmpltu	r2,r17,r4
    c9b8:	4267c83a 	sub	r19,r8,r9
    c9bc:	98a7c83a 	sub	r19,r19,r2
    c9c0:	9880202c 	andhi	r2,r19,128
    c9c4:	10006326 	beq	r2,zero,cb54 <__adddf3+0x4d4>
    c9c8:	3463c83a 	sub	r17,r6,r17
    c9cc:	4a07c83a 	sub	r3,r9,r8
    c9d0:	344d803a 	cmpltu	r6,r6,r17
    c9d4:	19a7c83a 	sub	r19,r3,r6
    c9d8:	3825883a 	mov	r18,r7
    c9dc:	983f8a1e 	bne	r19,zero,c808 <__adddf3+0x188>
    c9e0:	8809883a 	mov	r4,r17
    c9e4:	000ec840 	call	ec84 <__clzsi2>
    c9e8:	10800804 	addi	r2,r2,32
    c9ec:	10fffe04 	addi	r3,r2,-8
    c9f0:	010007c4 	movi	r4,31
    c9f4:	20ff890e 	bge	r4,r3,c81c <__adddf3+0x19c>
    c9f8:	10bff604 	addi	r2,r2,-40
    c9fc:	8884983a 	sll	r2,r17,r2
    ca00:	0023883a 	mov	r17,zero
    ca04:	1c3f8c0e 	bge	r3,r16,c838 <__adddf3+0x1b8>
    ca08:	023fe034 	movhi	r8,65408
    ca0c:	423fffc4 	addi	r8,r8,-1
    ca10:	80e1c83a 	sub	r16,r16,r3
    ca14:	1210703a 	and	r8,r2,r8
    ca18:	003f3806 	br	c6fc <__adddf3+0x7c>
    ca1c:	9007883a 	mov	r3,r18
    ca20:	0011883a 	mov	r8,zero
    ca24:	0005883a 	mov	r2,zero
    ca28:	003f4c06 	br	c75c <__adddf3+0xdc>
    ca2c:	498cb03a 	or	r6,r9,r6
    ca30:	300cc03a 	cmpne	r6,r6,zero
    ca34:	0007883a 	mov	r3,zero
    ca38:	003f6806 	br	c7dc <__adddf3+0x15c>
    ca3c:	20009c1e 	bne	r4,zero,ccb0 <__adddf3+0x630>
    ca40:	80800044 	addi	r2,r16,1
    ca44:	1141ffcc 	andi	r5,r2,2047
    ca48:	01000044 	movi	r4,1
    ca4c:	2140670e 	bge	r4,r5,cbec <__adddf3+0x56c>
    ca50:	0101ffc4 	movi	r4,2047
    ca54:	11007f26 	beq	r2,r4,cc54 <__adddf3+0x5d4>
    ca58:	898d883a 	add	r6,r17,r6
    ca5c:	4247883a 	add	r3,r8,r9
    ca60:	3451803a 	cmpltu	r8,r6,r17
    ca64:	40d1883a 	add	r8,r8,r3
    ca68:	402297fa 	slli	r17,r8,31
    ca6c:	300cd07a 	srli	r6,r6,1
    ca70:	4010d07a 	srli	r8,r8,1
    ca74:	1021883a 	mov	r16,r2
    ca78:	89a2b03a 	or	r17,r17,r6
    ca7c:	003f1f06 	br	c6fc <__adddf3+0x7c>
    ca80:	0081ffc4 	movi	r2,2047
    ca84:	80bf481e 	bne	r16,r2,c7a8 <__adddf3+0x128>
    ca88:	003f1c06 	br	c6fc <__adddf3+0x7c>
    ca8c:	843ff844 	addi	r16,r16,-31
    ca90:	01000804 	movi	r4,32
    ca94:	1406d83a 	srl	r3,r2,r16
    ca98:	41005026 	beq	r8,r4,cbdc <__adddf3+0x55c>
    ca9c:	01001004 	movi	r4,64
    caa0:	2211c83a 	sub	r8,r4,r8
    caa4:	1204983a 	sll	r2,r2,r8
    caa8:	88a2b03a 	or	r17,r17,r2
    caac:	8822c03a 	cmpne	r17,r17,zero
    cab0:	1c62b03a 	or	r17,r3,r17
    cab4:	0011883a 	mov	r8,zero
    cab8:	0021883a 	mov	r16,zero
    cabc:	003f7106 	br	c884 <__adddf3+0x204>
    cac0:	193ff804 	addi	r4,r3,-32
    cac4:	00800804 	movi	r2,32
    cac8:	4908d83a 	srl	r4,r9,r4
    cacc:	18804526 	beq	r3,r2,cbe4 <__adddf3+0x564>
    cad0:	00801004 	movi	r2,64
    cad4:	10c5c83a 	sub	r2,r2,r3
    cad8:	4886983a 	sll	r3,r9,r2
    cadc:	198cb03a 	or	r6,r3,r6
    cae0:	300cc03a 	cmpne	r6,r6,zero
    cae4:	218cb03a 	or	r6,r4,r6
    cae8:	0007883a 	mov	r3,zero
    caec:	003f3b06 	br	c7dc <__adddf3+0x15c>
    caf0:	80002a26 	beq	r16,zero,cb9c <__adddf3+0x51c>
    caf4:	0101ffc4 	movi	r4,2047
    caf8:	11006826 	beq	r2,r4,cc9c <__adddf3+0x61c>
    cafc:	00c7c83a 	sub	r3,zero,r3
    cb00:	42002034 	orhi	r8,r8,128
    cb04:	01000e04 	movi	r4,56
    cb08:	20c07c16 	blt	r4,r3,ccfc <__adddf3+0x67c>
    cb0c:	010007c4 	movi	r4,31
    cb10:	20c0da16 	blt	r4,r3,ce7c <__adddf3+0x7fc>
    cb14:	01000804 	movi	r4,32
    cb18:	20c9c83a 	sub	r4,r4,r3
    cb1c:	4114983a 	sll	r10,r8,r4
    cb20:	88cad83a 	srl	r5,r17,r3
    cb24:	8908983a 	sll	r4,r17,r4
    cb28:	40c6d83a 	srl	r3,r8,r3
    cb2c:	5162b03a 	or	r17,r10,r5
    cb30:	2008c03a 	cmpne	r4,r4,zero
    cb34:	8922b03a 	or	r17,r17,r4
    cb38:	3463c83a 	sub	r17,r6,r17
    cb3c:	48c7c83a 	sub	r3,r9,r3
    cb40:	344d803a 	cmpltu	r6,r6,r17
    cb44:	1991c83a 	sub	r8,r3,r6
    cb48:	1021883a 	mov	r16,r2
    cb4c:	3825883a 	mov	r18,r7
    cb50:	003f2706 	br	c7f0 <__adddf3+0x170>
    cb54:	24d0b03a 	or	r8,r4,r19
    cb58:	40001b1e 	bne	r8,zero,cbc8 <__adddf3+0x548>
    cb5c:	0005883a 	mov	r2,zero
    cb60:	0007883a 	mov	r3,zero
    cb64:	0021883a 	mov	r16,zero
    cb68:	003f4d06 	br	c8a0 <__adddf3+0x220>
    cb6c:	008007c4 	movi	r2,31
    cb70:	11003c16 	blt	r2,r4,cc64 <__adddf3+0x5e4>
    cb74:	00800804 	movi	r2,32
    cb78:	1105c83a 	sub	r2,r2,r4
    cb7c:	488e983a 	sll	r7,r9,r2
    cb80:	310ad83a 	srl	r5,r6,r4
    cb84:	3084983a 	sll	r2,r6,r2
    cb88:	4912d83a 	srl	r9,r9,r4
    cb8c:	394ab03a 	or	r5,r7,r5
    cb90:	1004c03a 	cmpne	r2,r2,zero
    cb94:	288ab03a 	or	r5,r5,r2
    cb98:	003f5306 	br	c8e8 <__adddf3+0x268>
    cb9c:	4448b03a 	or	r4,r8,r17
    cba0:	20003e26 	beq	r4,zero,cc9c <__adddf3+0x61c>
    cba4:	00c6303a 	nor	r3,zero,r3
    cba8:	18003a1e 	bne	r3,zero,cc94 <__adddf3+0x614>
    cbac:	3463c83a 	sub	r17,r6,r17
    cbb0:	4a07c83a 	sub	r3,r9,r8
    cbb4:	344d803a 	cmpltu	r6,r6,r17
    cbb8:	1991c83a 	sub	r8,r3,r6
    cbbc:	1021883a 	mov	r16,r2
    cbc0:	3825883a 	mov	r18,r7
    cbc4:	003f0a06 	br	c7f0 <__adddf3+0x170>
    cbc8:	2023883a 	mov	r17,r4
    cbcc:	003f0d06 	br	c804 <__adddf3+0x184>
    cbd0:	0081ffc4 	movi	r2,2047
    cbd4:	80bf3f1e 	bne	r16,r2,c8d4 <__adddf3+0x254>
    cbd8:	003ec806 	br	c6fc <__adddf3+0x7c>
    cbdc:	0005883a 	mov	r2,zero
    cbe0:	003fb106 	br	caa8 <__adddf3+0x428>
    cbe4:	0007883a 	mov	r3,zero
    cbe8:	003fbc06 	br	cadc <__adddf3+0x45c>
    cbec:	4444b03a 	or	r2,r8,r17
    cbf0:	8000871e 	bne	r16,zero,ce10 <__adddf3+0x790>
    cbf4:	1000ba26 	beq	r2,zero,cee0 <__adddf3+0x860>
    cbf8:	4984b03a 	or	r2,r9,r6
    cbfc:	103ebf26 	beq	r2,zero,c6fc <__adddf3+0x7c>
    cc00:	8985883a 	add	r2,r17,r6
    cc04:	4247883a 	add	r3,r8,r9
    cc08:	1451803a 	cmpltu	r8,r2,r17
    cc0c:	40d1883a 	add	r8,r8,r3
    cc10:	40c0202c 	andhi	r3,r8,128
    cc14:	1023883a 	mov	r17,r2
    cc18:	183f1a26 	beq	r3,zero,c884 <__adddf3+0x204>
    cc1c:	00bfe034 	movhi	r2,65408
    cc20:	10bfffc4 	addi	r2,r2,-1
    cc24:	2021883a 	mov	r16,r4
    cc28:	4090703a 	and	r8,r8,r2
    cc2c:	003eb306 	br	c6fc <__adddf3+0x7c>
    cc30:	4444b03a 	or	r2,r8,r17
    cc34:	8000291e 	bne	r16,zero,ccdc <__adddf3+0x65c>
    cc38:	10004b1e 	bne	r2,zero,cd68 <__adddf3+0x6e8>
    cc3c:	4990b03a 	or	r8,r9,r6
    cc40:	40008b26 	beq	r8,zero,ce70 <__adddf3+0x7f0>
    cc44:	4811883a 	mov	r8,r9
    cc48:	3023883a 	mov	r17,r6
    cc4c:	3825883a 	mov	r18,r7
    cc50:	003eaa06 	br	c6fc <__adddf3+0x7c>
    cc54:	1021883a 	mov	r16,r2
    cc58:	0011883a 	mov	r8,zero
    cc5c:	0005883a 	mov	r2,zero
    cc60:	003f0f06 	br	c8a0 <__adddf3+0x220>
    cc64:	217ff804 	addi	r5,r4,-32
    cc68:	00800804 	movi	r2,32
    cc6c:	494ad83a 	srl	r5,r9,r5
    cc70:	20807d26 	beq	r4,r2,ce68 <__adddf3+0x7e8>
    cc74:	00801004 	movi	r2,64
    cc78:	1109c83a 	sub	r4,r2,r4
    cc7c:	4912983a 	sll	r9,r9,r4
    cc80:	498cb03a 	or	r6,r9,r6
    cc84:	300cc03a 	cmpne	r6,r6,zero
    cc88:	298ab03a 	or	r5,r5,r6
    cc8c:	0013883a 	mov	r9,zero
    cc90:	003f1506 	br	c8e8 <__adddf3+0x268>
    cc94:	0101ffc4 	movi	r4,2047
    cc98:	113f9a1e 	bne	r2,r4,cb04 <__adddf3+0x484>
    cc9c:	4811883a 	mov	r8,r9
    cca0:	3023883a 	mov	r17,r6
    cca4:	1021883a 	mov	r16,r2
    cca8:	3825883a 	mov	r18,r7
    ccac:	003e9306 	br	c6fc <__adddf3+0x7c>
    ccb0:	8000161e 	bne	r16,zero,cd0c <__adddf3+0x68c>
    ccb4:	444ab03a 	or	r5,r8,r17
    ccb8:	28005126 	beq	r5,zero,ce00 <__adddf3+0x780>
    ccbc:	0108303a 	nor	r4,zero,r4
    ccc0:	20004d1e 	bne	r4,zero,cdf8 <__adddf3+0x778>
    ccc4:	89a3883a 	add	r17,r17,r6
    ccc8:	4253883a 	add	r9,r8,r9
    cccc:	898d803a 	cmpltu	r6,r17,r6
    ccd0:	3251883a 	add	r8,r6,r9
    ccd4:	1021883a 	mov	r16,r2
    ccd8:	003f0806 	br	c8fc <__adddf3+0x27c>
    ccdc:	1000301e 	bne	r2,zero,cda0 <__adddf3+0x720>
    cce0:	4984b03a 	or	r2,r9,r6
    cce4:	10007126 	beq	r2,zero,ceac <__adddf3+0x82c>
    cce8:	4811883a 	mov	r8,r9
    ccec:	3023883a 	mov	r17,r6
    ccf0:	3825883a 	mov	r18,r7
    ccf4:	0401ffc4 	movi	r16,2047
    ccf8:	003e8006 	br	c6fc <__adddf3+0x7c>
    ccfc:	4462b03a 	or	r17,r8,r17
    cd00:	8822c03a 	cmpne	r17,r17,zero
    cd04:	0007883a 	mov	r3,zero
    cd08:	003f8b06 	br	cb38 <__adddf3+0x4b8>
    cd0c:	0141ffc4 	movi	r5,2047
    cd10:	11403b26 	beq	r2,r5,ce00 <__adddf3+0x780>
    cd14:	0109c83a 	sub	r4,zero,r4
    cd18:	42002034 	orhi	r8,r8,128
    cd1c:	01400e04 	movi	r5,56
    cd20:	29006716 	blt	r5,r4,cec0 <__adddf3+0x840>
    cd24:	014007c4 	movi	r5,31
    cd28:	29007016 	blt	r5,r4,ceec <__adddf3+0x86c>
    cd2c:	01400804 	movi	r5,32
    cd30:	290bc83a 	sub	r5,r5,r4
    cd34:	4154983a 	sll	r10,r8,r5
    cd38:	890ed83a 	srl	r7,r17,r4
    cd3c:	894a983a 	sll	r5,r17,r5
    cd40:	4108d83a 	srl	r4,r8,r4
    cd44:	51e2b03a 	or	r17,r10,r7
    cd48:	280ac03a 	cmpne	r5,r5,zero
    cd4c:	8962b03a 	or	r17,r17,r5
    cd50:	89a3883a 	add	r17,r17,r6
    cd54:	2253883a 	add	r9,r4,r9
    cd58:	898d803a 	cmpltu	r6,r17,r6
    cd5c:	3251883a 	add	r8,r6,r9
    cd60:	1021883a 	mov	r16,r2
    cd64:	003ee506 	br	c8fc <__adddf3+0x27c>
    cd68:	4984b03a 	or	r2,r9,r6
    cd6c:	103e6326 	beq	r2,zero,c6fc <__adddf3+0x7c>
    cd70:	8987c83a 	sub	r3,r17,r6
    cd74:	88c9803a 	cmpltu	r4,r17,r3
    cd78:	4245c83a 	sub	r2,r8,r9
    cd7c:	1105c83a 	sub	r2,r2,r4
    cd80:	1100202c 	andhi	r4,r2,128
    cd84:	203ebb26 	beq	r4,zero,c874 <__adddf3+0x1f4>
    cd88:	3463c83a 	sub	r17,r6,r17
    cd8c:	4a07c83a 	sub	r3,r9,r8
    cd90:	344d803a 	cmpltu	r6,r6,r17
    cd94:	1991c83a 	sub	r8,r3,r6
    cd98:	3825883a 	mov	r18,r7
    cd9c:	003e5706 	br	c6fc <__adddf3+0x7c>
    cda0:	4984b03a 	or	r2,r9,r6
    cda4:	10002e26 	beq	r2,zero,ce60 <__adddf3+0x7e0>
    cda8:	4004d0fa 	srli	r2,r8,3
    cdac:	8822d0fa 	srli	r17,r17,3
    cdb0:	4010977a 	slli	r8,r8,29
    cdb4:	10c0022c 	andhi	r3,r2,8
    cdb8:	4462b03a 	or	r17,r8,r17
    cdbc:	18000826 	beq	r3,zero,cde0 <__adddf3+0x760>
    cdc0:	4808d0fa 	srli	r4,r9,3
    cdc4:	20c0022c 	andhi	r3,r4,8
    cdc8:	1800051e 	bne	r3,zero,cde0 <__adddf3+0x760>
    cdcc:	300cd0fa 	srli	r6,r6,3
    cdd0:	4806977a 	slli	r3,r9,29
    cdd4:	2005883a 	mov	r2,r4
    cdd8:	3825883a 	mov	r18,r7
    cddc:	19a2b03a 	or	r17,r3,r6
    cde0:	8810d77a 	srli	r8,r17,29
    cde4:	100490fa 	slli	r2,r2,3
    cde8:	882290fa 	slli	r17,r17,3
    cdec:	0401ffc4 	movi	r16,2047
    cdf0:	4090b03a 	or	r8,r8,r2
    cdf4:	003e4106 	br	c6fc <__adddf3+0x7c>
    cdf8:	0141ffc4 	movi	r5,2047
    cdfc:	117fc71e 	bne	r2,r5,cd1c <__adddf3+0x69c>
    ce00:	4811883a 	mov	r8,r9
    ce04:	3023883a 	mov	r17,r6
    ce08:	1021883a 	mov	r16,r2
    ce0c:	003e3b06 	br	c6fc <__adddf3+0x7c>
    ce10:	10002f26 	beq	r2,zero,ced0 <__adddf3+0x850>
    ce14:	4984b03a 	or	r2,r9,r6
    ce18:	10001126 	beq	r2,zero,ce60 <__adddf3+0x7e0>
    ce1c:	4004d0fa 	srli	r2,r8,3
    ce20:	8822d0fa 	srli	r17,r17,3
    ce24:	4010977a 	slli	r8,r8,29
    ce28:	10c0022c 	andhi	r3,r2,8
    ce2c:	4462b03a 	or	r17,r8,r17
    ce30:	183feb26 	beq	r3,zero,cde0 <__adddf3+0x760>
    ce34:	4808d0fa 	srli	r4,r9,3
    ce38:	20c0022c 	andhi	r3,r4,8
    ce3c:	183fe81e 	bne	r3,zero,cde0 <__adddf3+0x760>
    ce40:	300cd0fa 	srli	r6,r6,3
    ce44:	4806977a 	slli	r3,r9,29
    ce48:	2005883a 	mov	r2,r4
    ce4c:	19a2b03a 	or	r17,r3,r6
    ce50:	003fe306 	br	cde0 <__adddf3+0x760>
    ce54:	0011883a 	mov	r8,zero
    ce58:	0005883a 	mov	r2,zero
    ce5c:	003e3f06 	br	c75c <__adddf3+0xdc>
    ce60:	0401ffc4 	movi	r16,2047
    ce64:	003e2506 	br	c6fc <__adddf3+0x7c>
    ce68:	0013883a 	mov	r9,zero
    ce6c:	003f8406 	br	cc80 <__adddf3+0x600>
    ce70:	0005883a 	mov	r2,zero
    ce74:	0007883a 	mov	r3,zero
    ce78:	003e8906 	br	c8a0 <__adddf3+0x220>
    ce7c:	197ff804 	addi	r5,r3,-32
    ce80:	01000804 	movi	r4,32
    ce84:	414ad83a 	srl	r5,r8,r5
    ce88:	19002426 	beq	r3,r4,cf1c <__adddf3+0x89c>
    ce8c:	01001004 	movi	r4,64
    ce90:	20c7c83a 	sub	r3,r4,r3
    ce94:	40c6983a 	sll	r3,r8,r3
    ce98:	1c46b03a 	or	r3,r3,r17
    ce9c:	1806c03a 	cmpne	r3,r3,zero
    cea0:	28e2b03a 	or	r17,r5,r3
    cea4:	0007883a 	mov	r3,zero
    cea8:	003f2306 	br	cb38 <__adddf3+0x4b8>
    ceac:	0007883a 	mov	r3,zero
    ceb0:	5811883a 	mov	r8,r11
    ceb4:	00bfffc4 	movi	r2,-1
    ceb8:	0401ffc4 	movi	r16,2047
    cebc:	003e7806 	br	c8a0 <__adddf3+0x220>
    cec0:	4462b03a 	or	r17,r8,r17
    cec4:	8822c03a 	cmpne	r17,r17,zero
    cec8:	0009883a 	mov	r4,zero
    cecc:	003fa006 	br	cd50 <__adddf3+0x6d0>
    ced0:	4811883a 	mov	r8,r9
    ced4:	3023883a 	mov	r17,r6
    ced8:	0401ffc4 	movi	r16,2047
    cedc:	003e0706 	br	c6fc <__adddf3+0x7c>
    cee0:	4811883a 	mov	r8,r9
    cee4:	3023883a 	mov	r17,r6
    cee8:	003e0406 	br	c6fc <__adddf3+0x7c>
    ceec:	21fff804 	addi	r7,r4,-32
    cef0:	01400804 	movi	r5,32
    cef4:	41ced83a 	srl	r7,r8,r7
    cef8:	21400a26 	beq	r4,r5,cf24 <__adddf3+0x8a4>
    cefc:	01401004 	movi	r5,64
    cf00:	2909c83a 	sub	r4,r5,r4
    cf04:	4108983a 	sll	r4,r8,r4
    cf08:	2448b03a 	or	r4,r4,r17
    cf0c:	2008c03a 	cmpne	r4,r4,zero
    cf10:	3922b03a 	or	r17,r7,r4
    cf14:	0009883a 	mov	r4,zero
    cf18:	003f8d06 	br	cd50 <__adddf3+0x6d0>
    cf1c:	0007883a 	mov	r3,zero
    cf20:	003fdd06 	br	ce98 <__adddf3+0x818>
    cf24:	0009883a 	mov	r4,zero
    cf28:	003ff706 	br	cf08 <__adddf3+0x888>

0000cf2c <__divdf3>:
    cf2c:	defff204 	addi	sp,sp,-56
    cf30:	dd400915 	stw	r21,36(sp)
    cf34:	282ad53a 	srli	r21,r5,20
    cf38:	dd000815 	stw	r20,32(sp)
    cf3c:	2828d7fa 	srli	r20,r5,31
    cf40:	dc000415 	stw	r16,16(sp)
    cf44:	04000434 	movhi	r16,16
    cf48:	df000c15 	stw	fp,48(sp)
    cf4c:	843fffc4 	addi	r16,r16,-1
    cf50:	dfc00d15 	stw	ra,52(sp)
    cf54:	ddc00b15 	stw	r23,44(sp)
    cf58:	dd800a15 	stw	r22,40(sp)
    cf5c:	dcc00715 	stw	r19,28(sp)
    cf60:	dc800615 	stw	r18,24(sp)
    cf64:	dc400515 	stw	r17,20(sp)
    cf68:	ad41ffcc 	andi	r21,r21,2047
    cf6c:	2c20703a 	and	r16,r5,r16
    cf70:	a7003fcc 	andi	fp,r20,255
    cf74:	a8006126 	beq	r21,zero,d0fc <__divdf3+0x1d0>
    cf78:	0081ffc4 	movi	r2,2047
    cf7c:	2025883a 	mov	r18,r4
    cf80:	a8803726 	beq	r21,r2,d060 <__divdf3+0x134>
    cf84:	80800434 	orhi	r2,r16,16
    cf88:	100490fa 	slli	r2,r2,3
    cf8c:	2020d77a 	srli	r16,r4,29
    cf90:	202490fa 	slli	r18,r4,3
    cf94:	ad7f0044 	addi	r21,r21,-1023
    cf98:	80a0b03a 	or	r16,r16,r2
    cf9c:	0027883a 	mov	r19,zero
    cfa0:	0013883a 	mov	r9,zero
    cfa4:	3804d53a 	srli	r2,r7,20
    cfa8:	382cd7fa 	srli	r22,r7,31
    cfac:	04400434 	movhi	r17,16
    cfb0:	8c7fffc4 	addi	r17,r17,-1
    cfb4:	1081ffcc 	andi	r2,r2,2047
    cfb8:	3011883a 	mov	r8,r6
    cfbc:	3c62703a 	and	r17,r7,r17
    cfc0:	b5c03fcc 	andi	r23,r22,255
    cfc4:	10006c26 	beq	r2,zero,d178 <__divdf3+0x24c>
    cfc8:	00c1ffc4 	movi	r3,2047
    cfcc:	10c06426 	beq	r2,r3,d160 <__divdf3+0x234>
    cfd0:	88c00434 	orhi	r3,r17,16
    cfd4:	180690fa 	slli	r3,r3,3
    cfd8:	3022d77a 	srli	r17,r6,29
    cfdc:	301090fa 	slli	r8,r6,3
    cfe0:	10bf0044 	addi	r2,r2,-1023
    cfe4:	88e2b03a 	or	r17,r17,r3
    cfe8:	000f883a 	mov	r7,zero
    cfec:	a58cf03a 	xor	r6,r20,r22
    cff0:	3cc8b03a 	or	r4,r7,r19
    cff4:	a8abc83a 	sub	r21,r21,r2
    cff8:	008003c4 	movi	r2,15
    cffc:	3007883a 	mov	r3,r6
    d000:	34c03fcc 	andi	r19,r6,255
    d004:	11009036 	bltu	r2,r4,d248 <__divdf3+0x31c>
    d008:	200890ba 	slli	r4,r4,2
    d00c:	00800074 	movhi	r2,1
    d010:	10b40804 	addi	r2,r2,-12256
    d014:	2089883a 	add	r4,r4,r2
    d018:	20800017 	ldw	r2,0(r4)
    d01c:	1000683a 	jmp	r2
    d020:	0000d248 	cmpgei	zero,zero,841
    d024:	0000d098 	cmpnei	zero,zero,834
    d028:	0000d238 	rdprs	zero,zero,840
    d02c:	0000d08c 	andi	zero,zero,834
    d030:	0000d238 	rdprs	zero,zero,840
    d034:	0000d20c 	andi	zero,zero,840
    d038:	0000d238 	rdprs	zero,zero,840
    d03c:	0000d08c 	andi	zero,zero,834
    d040:	0000d098 	cmpnei	zero,zero,834
    d044:	0000d098 	cmpnei	zero,zero,834
    d048:	0000d20c 	andi	zero,zero,840
    d04c:	0000d08c 	andi	zero,zero,834
    d050:	0000d07c 	xorhi	zero,zero,833
    d054:	0000d07c 	xorhi	zero,zero,833
    d058:	0000d07c 	xorhi	zero,zero,833
    d05c:	0000d52c 	andhi	zero,zero,852
    d060:	2404b03a 	or	r2,r4,r16
    d064:	1000661e 	bne	r2,zero,d200 <__divdf3+0x2d4>
    d068:	04c00204 	movi	r19,8
    d06c:	0021883a 	mov	r16,zero
    d070:	0025883a 	mov	r18,zero
    d074:	02400084 	movi	r9,2
    d078:	003fca06 	br	cfa4 <__divdf3+0x78>
    d07c:	8023883a 	mov	r17,r16
    d080:	9011883a 	mov	r8,r18
    d084:	e02f883a 	mov	r23,fp
    d088:	480f883a 	mov	r7,r9
    d08c:	00800084 	movi	r2,2
    d090:	3881311e 	bne	r7,r2,d558 <__divdf3+0x62c>
    d094:	b827883a 	mov	r19,r23
    d098:	98c0004c 	andi	r3,r19,1
    d09c:	0081ffc4 	movi	r2,2047
    d0a0:	000b883a 	mov	r5,zero
    d0a4:	0025883a 	mov	r18,zero
    d0a8:	1004953a 	slli	r2,r2,20
    d0ac:	18c03fcc 	andi	r3,r3,255
    d0b0:	04400434 	movhi	r17,16
    d0b4:	8c7fffc4 	addi	r17,r17,-1
    d0b8:	180697fa 	slli	r3,r3,31
    d0bc:	2c4a703a 	and	r5,r5,r17
    d0c0:	288ab03a 	or	r5,r5,r2
    d0c4:	28c6b03a 	or	r3,r5,r3
    d0c8:	9005883a 	mov	r2,r18
    d0cc:	dfc00d17 	ldw	ra,52(sp)
    d0d0:	df000c17 	ldw	fp,48(sp)
    d0d4:	ddc00b17 	ldw	r23,44(sp)
    d0d8:	dd800a17 	ldw	r22,40(sp)
    d0dc:	dd400917 	ldw	r21,36(sp)
    d0e0:	dd000817 	ldw	r20,32(sp)
    d0e4:	dcc00717 	ldw	r19,28(sp)
    d0e8:	dc800617 	ldw	r18,24(sp)
    d0ec:	dc400517 	ldw	r17,20(sp)
    d0f0:	dc000417 	ldw	r16,16(sp)
    d0f4:	dec00e04 	addi	sp,sp,56
    d0f8:	f800283a 	ret
    d0fc:	2404b03a 	or	r2,r4,r16
    d100:	2027883a 	mov	r19,r4
    d104:	10003926 	beq	r2,zero,d1ec <__divdf3+0x2c0>
    d108:	80012e26 	beq	r16,zero,d5c4 <__divdf3+0x698>
    d10c:	8009883a 	mov	r4,r16
    d110:	d9800315 	stw	r6,12(sp)
    d114:	d9c00215 	stw	r7,8(sp)
    d118:	000ec840 	call	ec84 <__clzsi2>
    d11c:	d9800317 	ldw	r6,12(sp)
    d120:	d9c00217 	ldw	r7,8(sp)
    d124:	113ffd44 	addi	r4,r2,-11
    d128:	00c00704 	movi	r3,28
    d12c:	19012116 	blt	r3,r4,d5b4 <__divdf3+0x688>
    d130:	00c00744 	movi	r3,29
    d134:	147ffe04 	addi	r17,r2,-8
    d138:	1907c83a 	sub	r3,r3,r4
    d13c:	8460983a 	sll	r16,r16,r17
    d140:	98c6d83a 	srl	r3,r19,r3
    d144:	9c64983a 	sll	r18,r19,r17
    d148:	1c20b03a 	or	r16,r3,r16
    d14c:	1080fcc4 	addi	r2,r2,1011
    d150:	00abc83a 	sub	r21,zero,r2
    d154:	0027883a 	mov	r19,zero
    d158:	0013883a 	mov	r9,zero
    d15c:	003f9106 	br	cfa4 <__divdf3+0x78>
    d160:	3446b03a 	or	r3,r6,r17
    d164:	18001f1e 	bne	r3,zero,d1e4 <__divdf3+0x2b8>
    d168:	0023883a 	mov	r17,zero
    d16c:	0011883a 	mov	r8,zero
    d170:	01c00084 	movi	r7,2
    d174:	003f9d06 	br	cfec <__divdf3+0xc0>
    d178:	3446b03a 	or	r3,r6,r17
    d17c:	18001526 	beq	r3,zero,d1d4 <__divdf3+0x2a8>
    d180:	88011b26 	beq	r17,zero,d5f0 <__divdf3+0x6c4>
    d184:	8809883a 	mov	r4,r17
    d188:	d9800315 	stw	r6,12(sp)
    d18c:	da400115 	stw	r9,4(sp)
    d190:	000ec840 	call	ec84 <__clzsi2>
    d194:	d9800317 	ldw	r6,12(sp)
    d198:	da400117 	ldw	r9,4(sp)
    d19c:	113ffd44 	addi	r4,r2,-11
    d1a0:	00c00704 	movi	r3,28
    d1a4:	19010e16 	blt	r3,r4,d5e0 <__divdf3+0x6b4>
    d1a8:	00c00744 	movi	r3,29
    d1ac:	123ffe04 	addi	r8,r2,-8
    d1b0:	1907c83a 	sub	r3,r3,r4
    d1b4:	8a22983a 	sll	r17,r17,r8
    d1b8:	30c6d83a 	srl	r3,r6,r3
    d1bc:	3210983a 	sll	r8,r6,r8
    d1c0:	1c62b03a 	or	r17,r3,r17
    d1c4:	1080fcc4 	addi	r2,r2,1011
    d1c8:	0085c83a 	sub	r2,zero,r2
    d1cc:	000f883a 	mov	r7,zero
    d1d0:	003f8606 	br	cfec <__divdf3+0xc0>
    d1d4:	0023883a 	mov	r17,zero
    d1d8:	0011883a 	mov	r8,zero
    d1dc:	01c00044 	movi	r7,1
    d1e0:	003f8206 	br	cfec <__divdf3+0xc0>
    d1e4:	01c000c4 	movi	r7,3
    d1e8:	003f8006 	br	cfec <__divdf3+0xc0>
    d1ec:	04c00104 	movi	r19,4
    d1f0:	0021883a 	mov	r16,zero
    d1f4:	0025883a 	mov	r18,zero
    d1f8:	02400044 	movi	r9,1
    d1fc:	003f6906 	br	cfa4 <__divdf3+0x78>
    d200:	04c00304 	movi	r19,12
    d204:	024000c4 	movi	r9,3
    d208:	003f6606 	br	cfa4 <__divdf3+0x78>
    d20c:	01400434 	movhi	r5,16
    d210:	0007883a 	mov	r3,zero
    d214:	297fffc4 	addi	r5,r5,-1
    d218:	04bfffc4 	movi	r18,-1
    d21c:	0081ffc4 	movi	r2,2047
    d220:	003fa106 	br	d0a8 <__divdf3+0x17c>
    d224:	00c00044 	movi	r3,1
    d228:	1887c83a 	sub	r3,r3,r2
    d22c:	01000e04 	movi	r4,56
    d230:	20c1210e 	bge	r4,r3,d6b8 <__divdf3+0x78c>
    d234:	98c0004c 	andi	r3,r19,1
    d238:	0005883a 	mov	r2,zero
    d23c:	000b883a 	mov	r5,zero
    d240:	0025883a 	mov	r18,zero
    d244:	003f9806 	br	d0a8 <__divdf3+0x17c>
    d248:	8c00fd36 	bltu	r17,r16,d640 <__divdf3+0x714>
    d24c:	8440fb26 	beq	r16,r17,d63c <__divdf3+0x710>
    d250:	8007883a 	mov	r3,r16
    d254:	ad7fffc4 	addi	r21,r21,-1
    d258:	0021883a 	mov	r16,zero
    d25c:	4004d63a 	srli	r2,r8,24
    d260:	8822923a 	slli	r17,r17,8
    d264:	1809883a 	mov	r4,r3
    d268:	402c923a 	slli	r22,r8,8
    d26c:	88b8b03a 	or	fp,r17,r2
    d270:	e028d43a 	srli	r20,fp,16
    d274:	d8c00015 	stw	r3,0(sp)
    d278:	e5ffffcc 	andi	r23,fp,65535
    d27c:	a00b883a 	mov	r5,r20
    d280:	000c5c40 	call	c5c4 <__udivsi3>
    d284:	d8c00017 	ldw	r3,0(sp)
    d288:	a00b883a 	mov	r5,r20
    d28c:	d8800315 	stw	r2,12(sp)
    d290:	1809883a 	mov	r4,r3
    d294:	000c6280 	call	c628 <__umodsi3>
    d298:	d9800317 	ldw	r6,12(sp)
    d29c:	1006943a 	slli	r3,r2,16
    d2a0:	9004d43a 	srli	r2,r18,16
    d2a4:	b9a3383a 	mul	r17,r23,r6
    d2a8:	10c4b03a 	or	r2,r2,r3
    d2ac:	1440062e 	bgeu	r2,r17,d2c8 <__divdf3+0x39c>
    d2b0:	1705883a 	add	r2,r2,fp
    d2b4:	30ffffc4 	addi	r3,r6,-1
    d2b8:	1700ee36 	bltu	r2,fp,d674 <__divdf3+0x748>
    d2bc:	1440ed2e 	bgeu	r2,r17,d674 <__divdf3+0x748>
    d2c0:	31bfff84 	addi	r6,r6,-2
    d2c4:	1705883a 	add	r2,r2,fp
    d2c8:	1463c83a 	sub	r17,r2,r17
    d2cc:	a00b883a 	mov	r5,r20
    d2d0:	8809883a 	mov	r4,r17
    d2d4:	d9800315 	stw	r6,12(sp)
    d2d8:	000c5c40 	call	c5c4 <__udivsi3>
    d2dc:	a00b883a 	mov	r5,r20
    d2e0:	8809883a 	mov	r4,r17
    d2e4:	d8800215 	stw	r2,8(sp)
    d2e8:	000c6280 	call	c628 <__umodsi3>
    d2ec:	d9c00217 	ldw	r7,8(sp)
    d2f0:	1004943a 	slli	r2,r2,16
    d2f4:	94bfffcc 	andi	r18,r18,65535
    d2f8:	b9d1383a 	mul	r8,r23,r7
    d2fc:	90a4b03a 	or	r18,r18,r2
    d300:	d9800317 	ldw	r6,12(sp)
    d304:	9200062e 	bgeu	r18,r8,d320 <__divdf3+0x3f4>
    d308:	9725883a 	add	r18,r18,fp
    d30c:	38bfffc4 	addi	r2,r7,-1
    d310:	9700d636 	bltu	r18,fp,d66c <__divdf3+0x740>
    d314:	9200d52e 	bgeu	r18,r8,d66c <__divdf3+0x740>
    d318:	39ffff84 	addi	r7,r7,-2
    d31c:	9725883a 	add	r18,r18,fp
    d320:	3004943a 	slli	r2,r6,16
    d324:	b012d43a 	srli	r9,r22,16
    d328:	b1bfffcc 	andi	r6,r22,65535
    d32c:	11e2b03a 	or	r17,r2,r7
    d330:	8806d43a 	srli	r3,r17,16
    d334:	893fffcc 	andi	r4,r17,65535
    d338:	218b383a 	mul	r5,r4,r6
    d33c:	30c5383a 	mul	r2,r6,r3
    d340:	2249383a 	mul	r4,r4,r9
    d344:	280ed43a 	srli	r7,r5,16
    d348:	9225c83a 	sub	r18,r18,r8
    d34c:	2089883a 	add	r4,r4,r2
    d350:	3909883a 	add	r4,r7,r4
    d354:	1a47383a 	mul	r3,r3,r9
    d358:	2080022e 	bgeu	r4,r2,d364 <__divdf3+0x438>
    d35c:	00800074 	movhi	r2,1
    d360:	1887883a 	add	r3,r3,r2
    d364:	2004d43a 	srli	r2,r4,16
    d368:	2008943a 	slli	r4,r4,16
    d36c:	297fffcc 	andi	r5,r5,65535
    d370:	10c7883a 	add	r3,r2,r3
    d374:	2149883a 	add	r4,r4,r5
    d378:	90c0a536 	bltu	r18,r3,d610 <__divdf3+0x6e4>
    d37c:	90c0bf26 	beq	r18,r3,d67c <__divdf3+0x750>
    d380:	90c7c83a 	sub	r3,r18,r3
    d384:	810fc83a 	sub	r7,r16,r4
    d388:	81e5803a 	cmpltu	r18,r16,r7
    d38c:	1ca5c83a 	sub	r18,r3,r18
    d390:	e480c126 	beq	fp,r18,d698 <__divdf3+0x76c>
    d394:	a00b883a 	mov	r5,r20
    d398:	9009883a 	mov	r4,r18
    d39c:	d9800315 	stw	r6,12(sp)
    d3a0:	d9c00215 	stw	r7,8(sp)
    d3a4:	da400115 	stw	r9,4(sp)
    d3a8:	000c5c40 	call	c5c4 <__udivsi3>
    d3ac:	a00b883a 	mov	r5,r20
    d3b0:	9009883a 	mov	r4,r18
    d3b4:	d8800015 	stw	r2,0(sp)
    d3b8:	000c6280 	call	c628 <__umodsi3>
    d3bc:	d9c00217 	ldw	r7,8(sp)
    d3c0:	da000017 	ldw	r8,0(sp)
    d3c4:	1006943a 	slli	r3,r2,16
    d3c8:	3804d43a 	srli	r2,r7,16
    d3cc:	ba21383a 	mul	r16,r23,r8
    d3d0:	d9800317 	ldw	r6,12(sp)
    d3d4:	10c4b03a 	or	r2,r2,r3
    d3d8:	da400117 	ldw	r9,4(sp)
    d3dc:	1400062e 	bgeu	r2,r16,d3f8 <__divdf3+0x4cc>
    d3e0:	1705883a 	add	r2,r2,fp
    d3e4:	40ffffc4 	addi	r3,r8,-1
    d3e8:	1700ad36 	bltu	r2,fp,d6a0 <__divdf3+0x774>
    d3ec:	1400ac2e 	bgeu	r2,r16,d6a0 <__divdf3+0x774>
    d3f0:	423fff84 	addi	r8,r8,-2
    d3f4:	1705883a 	add	r2,r2,fp
    d3f8:	1421c83a 	sub	r16,r2,r16
    d3fc:	a00b883a 	mov	r5,r20
    d400:	8009883a 	mov	r4,r16
    d404:	d9800315 	stw	r6,12(sp)
    d408:	d9c00215 	stw	r7,8(sp)
    d40c:	da000015 	stw	r8,0(sp)
    d410:	da400115 	stw	r9,4(sp)
    d414:	000c5c40 	call	c5c4 <__udivsi3>
    d418:	8009883a 	mov	r4,r16
    d41c:	a00b883a 	mov	r5,r20
    d420:	1025883a 	mov	r18,r2
    d424:	000c6280 	call	c628 <__umodsi3>
    d428:	d9c00217 	ldw	r7,8(sp)
    d42c:	1004943a 	slli	r2,r2,16
    d430:	bcaf383a 	mul	r23,r23,r18
    d434:	393fffcc 	andi	r4,r7,65535
    d438:	2088b03a 	or	r4,r4,r2
    d43c:	d9800317 	ldw	r6,12(sp)
    d440:	da000017 	ldw	r8,0(sp)
    d444:	da400117 	ldw	r9,4(sp)
    d448:	25c0062e 	bgeu	r4,r23,d464 <__divdf3+0x538>
    d44c:	2709883a 	add	r4,r4,fp
    d450:	90bfffc4 	addi	r2,r18,-1
    d454:	27009436 	bltu	r4,fp,d6a8 <__divdf3+0x77c>
    d458:	25c0932e 	bgeu	r4,r23,d6a8 <__divdf3+0x77c>
    d45c:	94bfff84 	addi	r18,r18,-2
    d460:	2709883a 	add	r4,r4,fp
    d464:	4004943a 	slli	r2,r8,16
    d468:	25efc83a 	sub	r23,r4,r23
    d46c:	1490b03a 	or	r8,r2,r18
    d470:	4008d43a 	srli	r4,r8,16
    d474:	40ffffcc 	andi	r3,r8,65535
    d478:	30c5383a 	mul	r2,r6,r3
    d47c:	1a47383a 	mul	r3,r3,r9
    d480:	310d383a 	mul	r6,r6,r4
    d484:	100ad43a 	srli	r5,r2,16
    d488:	4913383a 	mul	r9,r9,r4
    d48c:	1987883a 	add	r3,r3,r6
    d490:	28c7883a 	add	r3,r5,r3
    d494:	1980022e 	bgeu	r3,r6,d4a0 <__divdf3+0x574>
    d498:	01000074 	movhi	r4,1
    d49c:	4913883a 	add	r9,r9,r4
    d4a0:	1808d43a 	srli	r4,r3,16
    d4a4:	1806943a 	slli	r3,r3,16
    d4a8:	10bfffcc 	andi	r2,r2,65535
    d4ac:	2253883a 	add	r9,r4,r9
    d4b0:	1887883a 	add	r3,r3,r2
    d4b4:	ba403836 	bltu	r23,r9,d598 <__divdf3+0x66c>
    d4b8:	ba403626 	beq	r23,r9,d594 <__divdf3+0x668>
    d4bc:	42000054 	ori	r8,r8,1
    d4c0:	a880ffc4 	addi	r2,r21,1023
    d4c4:	00bf570e 	bge	zero,r2,d224 <__divdf3+0x2f8>
    d4c8:	40c001cc 	andi	r3,r8,7
    d4cc:	18000726 	beq	r3,zero,d4ec <__divdf3+0x5c0>
    d4d0:	40c003cc 	andi	r3,r8,15
    d4d4:	01000104 	movi	r4,4
    d4d8:	19000426 	beq	r3,r4,d4ec <__divdf3+0x5c0>
    d4dc:	4107883a 	add	r3,r8,r4
    d4e0:	1a11803a 	cmpltu	r8,r3,r8
    d4e4:	8a23883a 	add	r17,r17,r8
    d4e8:	1811883a 	mov	r8,r3
    d4ec:	88c0402c 	andhi	r3,r17,256
    d4f0:	18000426 	beq	r3,zero,d504 <__divdf3+0x5d8>
    d4f4:	00ffc034 	movhi	r3,65280
    d4f8:	18ffffc4 	addi	r3,r3,-1
    d4fc:	a8810004 	addi	r2,r21,1024
    d500:	88e2703a 	and	r17,r17,r3
    d504:	00c1ff84 	movi	r3,2046
    d508:	18bee316 	blt	r3,r2,d098 <__divdf3+0x16c>
    d50c:	8824977a 	slli	r18,r17,29
    d510:	4010d0fa 	srli	r8,r8,3
    d514:	8822927a 	slli	r17,r17,9
    d518:	1081ffcc 	andi	r2,r2,2047
    d51c:	9224b03a 	or	r18,r18,r8
    d520:	880ad33a 	srli	r5,r17,12
    d524:	98c0004c 	andi	r3,r19,1
    d528:	003edf06 	br	d0a8 <__divdf3+0x17c>
    d52c:	8080022c 	andhi	r2,r16,8
    d530:	10001226 	beq	r2,zero,d57c <__divdf3+0x650>
    d534:	8880022c 	andhi	r2,r17,8
    d538:	1000101e 	bne	r2,zero,d57c <__divdf3+0x650>
    d53c:	00800434 	movhi	r2,16
    d540:	89400234 	orhi	r5,r17,8
    d544:	10bfffc4 	addi	r2,r2,-1
    d548:	b007883a 	mov	r3,r22
    d54c:	288a703a 	and	r5,r5,r2
    d550:	4025883a 	mov	r18,r8
    d554:	003f3106 	br	d21c <__divdf3+0x2f0>
    d558:	008000c4 	movi	r2,3
    d55c:	3880a626 	beq	r7,r2,d7f8 <__divdf3+0x8cc>
    d560:	00800044 	movi	r2,1
    d564:	3880521e 	bne	r7,r2,d6b0 <__divdf3+0x784>
    d568:	b807883a 	mov	r3,r23
    d56c:	0005883a 	mov	r2,zero
    d570:	000b883a 	mov	r5,zero
    d574:	0025883a 	mov	r18,zero
    d578:	003ecb06 	br	d0a8 <__divdf3+0x17c>
    d57c:	00800434 	movhi	r2,16
    d580:	81400234 	orhi	r5,r16,8
    d584:	10bfffc4 	addi	r2,r2,-1
    d588:	a007883a 	mov	r3,r20
    d58c:	288a703a 	and	r5,r5,r2
    d590:	003f2206 	br	d21c <__divdf3+0x2f0>
    d594:	183fca26 	beq	r3,zero,d4c0 <__divdf3+0x594>
    d598:	e5ef883a 	add	r23,fp,r23
    d59c:	40bfffc4 	addi	r2,r8,-1
    d5a0:	bf00392e 	bgeu	r23,fp,d688 <__divdf3+0x75c>
    d5a4:	1011883a 	mov	r8,r2
    d5a8:	ba7fc41e 	bne	r23,r9,d4bc <__divdf3+0x590>
    d5ac:	b0ffc31e 	bne	r22,r3,d4bc <__divdf3+0x590>
    d5b0:	003fc306 	br	d4c0 <__divdf3+0x594>
    d5b4:	143ff604 	addi	r16,r2,-40
    d5b8:	9c20983a 	sll	r16,r19,r16
    d5bc:	0025883a 	mov	r18,zero
    d5c0:	003ee206 	br	d14c <__divdf3+0x220>
    d5c4:	d9800315 	stw	r6,12(sp)
    d5c8:	d9c00215 	stw	r7,8(sp)
    d5cc:	000ec840 	call	ec84 <__clzsi2>
    d5d0:	10800804 	addi	r2,r2,32
    d5d4:	d9c00217 	ldw	r7,8(sp)
    d5d8:	d9800317 	ldw	r6,12(sp)
    d5dc:	003ed106 	br	d124 <__divdf3+0x1f8>
    d5e0:	147ff604 	addi	r17,r2,-40
    d5e4:	3462983a 	sll	r17,r6,r17
    d5e8:	0011883a 	mov	r8,zero
    d5ec:	003ef506 	br	d1c4 <__divdf3+0x298>
    d5f0:	3009883a 	mov	r4,r6
    d5f4:	d9800315 	stw	r6,12(sp)
    d5f8:	da400115 	stw	r9,4(sp)
    d5fc:	000ec840 	call	ec84 <__clzsi2>
    d600:	10800804 	addi	r2,r2,32
    d604:	da400117 	ldw	r9,4(sp)
    d608:	d9800317 	ldw	r6,12(sp)
    d60c:	003ee306 	br	d19c <__divdf3+0x270>
    d610:	85a1883a 	add	r16,r16,r22
    d614:	8585803a 	cmpltu	r2,r16,r22
    d618:	1705883a 	add	r2,r2,fp
    d61c:	14a5883a 	add	r18,r2,r18
    d620:	88bfffc4 	addi	r2,r17,-1
    d624:	e4800c2e 	bgeu	fp,r18,d658 <__divdf3+0x72c>
    d628:	90c03e36 	bltu	r18,r3,d724 <__divdf3+0x7f8>
    d62c:	1c806926 	beq	r3,r18,d7d4 <__divdf3+0x8a8>
    d630:	90c7c83a 	sub	r3,r18,r3
    d634:	1023883a 	mov	r17,r2
    d638:	003f5206 	br	d384 <__divdf3+0x458>
    d63c:	923f0436 	bltu	r18,r8,d250 <__divdf3+0x324>
    d640:	800897fa 	slli	r4,r16,31
    d644:	9004d07a 	srli	r2,r18,1
    d648:	8006d07a 	srli	r3,r16,1
    d64c:	902097fa 	slli	r16,r18,31
    d650:	20a4b03a 	or	r18,r4,r2
    d654:	003f0106 	br	d25c <__divdf3+0x330>
    d658:	e4bff51e 	bne	fp,r18,d630 <__divdf3+0x704>
    d65c:	85bff22e 	bgeu	r16,r22,d628 <__divdf3+0x6fc>
    d660:	e0c7c83a 	sub	r3,fp,r3
    d664:	1023883a 	mov	r17,r2
    d668:	003f4606 	br	d384 <__divdf3+0x458>
    d66c:	100f883a 	mov	r7,r2
    d670:	003f2b06 	br	d320 <__divdf3+0x3f4>
    d674:	180d883a 	mov	r6,r3
    d678:	003f1306 	br	d2c8 <__divdf3+0x39c>
    d67c:	813fe436 	bltu	r16,r4,d610 <__divdf3+0x6e4>
    d680:	0007883a 	mov	r3,zero
    d684:	003f3f06 	br	d384 <__divdf3+0x458>
    d688:	ba402c36 	bltu	r23,r9,d73c <__divdf3+0x810>
    d68c:	4dc05426 	beq	r9,r23,d7e0 <__divdf3+0x8b4>
    d690:	1011883a 	mov	r8,r2
    d694:	003f8906 	br	d4bc <__divdf3+0x590>
    d698:	023fffc4 	movi	r8,-1
    d69c:	003f8806 	br	d4c0 <__divdf3+0x594>
    d6a0:	1811883a 	mov	r8,r3
    d6a4:	003f5406 	br	d3f8 <__divdf3+0x4cc>
    d6a8:	1025883a 	mov	r18,r2
    d6ac:	003f6d06 	br	d464 <__divdf3+0x538>
    d6b0:	b827883a 	mov	r19,r23
    d6b4:	003f8206 	br	d4c0 <__divdf3+0x594>
    d6b8:	010007c4 	movi	r4,31
    d6bc:	20c02616 	blt	r4,r3,d758 <__divdf3+0x82c>
    d6c0:	00800804 	movi	r2,32
    d6c4:	10c5c83a 	sub	r2,r2,r3
    d6c8:	888a983a 	sll	r5,r17,r2
    d6cc:	40c8d83a 	srl	r4,r8,r3
    d6d0:	4084983a 	sll	r2,r8,r2
    d6d4:	88e2d83a 	srl	r17,r17,r3
    d6d8:	2906b03a 	or	r3,r5,r4
    d6dc:	1004c03a 	cmpne	r2,r2,zero
    d6e0:	1886b03a 	or	r3,r3,r2
    d6e4:	188001cc 	andi	r2,r3,7
    d6e8:	10000726 	beq	r2,zero,d708 <__divdf3+0x7dc>
    d6ec:	188003cc 	andi	r2,r3,15
    d6f0:	01000104 	movi	r4,4
    d6f4:	11000426 	beq	r2,r4,d708 <__divdf3+0x7dc>
    d6f8:	1805883a 	mov	r2,r3
    d6fc:	10c00104 	addi	r3,r2,4
    d700:	1885803a 	cmpltu	r2,r3,r2
    d704:	88a3883a 	add	r17,r17,r2
    d708:	8880202c 	andhi	r2,r17,128
    d70c:	10002726 	beq	r2,zero,d7ac <__divdf3+0x880>
    d710:	98c0004c 	andi	r3,r19,1
    d714:	00800044 	movi	r2,1
    d718:	000b883a 	mov	r5,zero
    d71c:	0025883a 	mov	r18,zero
    d720:	003e6106 	br	d0a8 <__divdf3+0x17c>
    d724:	85a1883a 	add	r16,r16,r22
    d728:	8585803a 	cmpltu	r2,r16,r22
    d72c:	1705883a 	add	r2,r2,fp
    d730:	14a5883a 	add	r18,r2,r18
    d734:	8c7fff84 	addi	r17,r17,-2
    d738:	003f1106 	br	d380 <__divdf3+0x454>
    d73c:	b589883a 	add	r4,r22,r22
    d740:	25ad803a 	cmpltu	r22,r4,r22
    d744:	b739883a 	add	fp,r22,fp
    d748:	40bfff84 	addi	r2,r8,-2
    d74c:	bf2f883a 	add	r23,r23,fp
    d750:	202d883a 	mov	r22,r4
    d754:	003f9306 	br	d5a4 <__divdf3+0x678>
    d758:	013ff844 	movi	r4,-31
    d75c:	2085c83a 	sub	r2,r4,r2
    d760:	8888d83a 	srl	r4,r17,r2
    d764:	00800804 	movi	r2,32
    d768:	18802126 	beq	r3,r2,d7f0 <__divdf3+0x8c4>
    d76c:	00801004 	movi	r2,64
    d770:	10c5c83a 	sub	r2,r2,r3
    d774:	8884983a 	sll	r2,r17,r2
    d778:	1204b03a 	or	r2,r2,r8
    d77c:	1004c03a 	cmpne	r2,r2,zero
    d780:	2084b03a 	or	r2,r4,r2
    d784:	144001cc 	andi	r17,r2,7
    d788:	88000d1e 	bne	r17,zero,d7c0 <__divdf3+0x894>
    d78c:	000b883a 	mov	r5,zero
    d790:	1024d0fa 	srli	r18,r2,3
    d794:	98c0004c 	andi	r3,r19,1
    d798:	0005883a 	mov	r2,zero
    d79c:	9464b03a 	or	r18,r18,r17
    d7a0:	003e4106 	br	d0a8 <__divdf3+0x17c>
    d7a4:	1007883a 	mov	r3,r2
    d7a8:	0023883a 	mov	r17,zero
    d7ac:	880a927a 	slli	r5,r17,9
    d7b0:	1805883a 	mov	r2,r3
    d7b4:	8822977a 	slli	r17,r17,29
    d7b8:	280ad33a 	srli	r5,r5,12
    d7bc:	003ff406 	br	d790 <__divdf3+0x864>
    d7c0:	10c003cc 	andi	r3,r2,15
    d7c4:	01000104 	movi	r4,4
    d7c8:	193ff626 	beq	r3,r4,d7a4 <__divdf3+0x878>
    d7cc:	0023883a 	mov	r17,zero
    d7d0:	003fca06 	br	d6fc <__divdf3+0x7d0>
    d7d4:	813fd336 	bltu	r16,r4,d724 <__divdf3+0x7f8>
    d7d8:	1023883a 	mov	r17,r2
    d7dc:	003fa806 	br	d680 <__divdf3+0x754>
    d7e0:	b0ffd636 	bltu	r22,r3,d73c <__divdf3+0x810>
    d7e4:	1011883a 	mov	r8,r2
    d7e8:	b0ff341e 	bne	r22,r3,d4bc <__divdf3+0x590>
    d7ec:	003f3406 	br	d4c0 <__divdf3+0x594>
    d7f0:	0005883a 	mov	r2,zero
    d7f4:	003fe006 	br	d778 <__divdf3+0x84c>
    d7f8:	00800434 	movhi	r2,16
    d7fc:	89400234 	orhi	r5,r17,8
    d800:	10bfffc4 	addi	r2,r2,-1
    d804:	b807883a 	mov	r3,r23
    d808:	288a703a 	and	r5,r5,r2
    d80c:	4025883a 	mov	r18,r8
    d810:	003e8206 	br	d21c <__divdf3+0x2f0>

0000d814 <__eqdf2>:
    d814:	2804d53a 	srli	r2,r5,20
    d818:	3806d53a 	srli	r3,r7,20
    d81c:	02000434 	movhi	r8,16
    d820:	423fffc4 	addi	r8,r8,-1
    d824:	1081ffcc 	andi	r2,r2,2047
    d828:	0281ffc4 	movi	r10,2047
    d82c:	2a12703a 	and	r9,r5,r8
    d830:	18c1ffcc 	andi	r3,r3,2047
    d834:	3a10703a 	and	r8,r7,r8
    d838:	280ad7fa 	srli	r5,r5,31
    d83c:	380ed7fa 	srli	r7,r7,31
    d840:	12801026 	beq	r2,r10,d884 <__eqdf2+0x70>
    d844:	0281ffc4 	movi	r10,2047
    d848:	1a800a26 	beq	r3,r10,d874 <__eqdf2+0x60>
    d84c:	10c00226 	beq	r2,r3,d858 <__eqdf2+0x44>
    d850:	00800044 	movi	r2,1
    d854:	f800283a 	ret
    d858:	4a3ffd1e 	bne	r9,r8,d850 <__eqdf2+0x3c>
    d85c:	21bffc1e 	bne	r4,r6,d850 <__eqdf2+0x3c>
    d860:	29c00c26 	beq	r5,r7,d894 <__eqdf2+0x80>
    d864:	103ffa1e 	bne	r2,zero,d850 <__eqdf2+0x3c>
    d868:	2244b03a 	or	r2,r4,r9
    d86c:	1004c03a 	cmpne	r2,r2,zero
    d870:	f800283a 	ret
    d874:	3214b03a 	or	r10,r6,r8
    d878:	503ff426 	beq	r10,zero,d84c <__eqdf2+0x38>
    d87c:	00800044 	movi	r2,1
    d880:	f800283a 	ret
    d884:	2254b03a 	or	r10,r4,r9
    d888:	503fee26 	beq	r10,zero,d844 <__eqdf2+0x30>
    d88c:	00800044 	movi	r2,1
    d890:	f800283a 	ret
    d894:	0005883a 	mov	r2,zero
    d898:	f800283a 	ret

0000d89c <__gedf2>:
    d89c:	2804d53a 	srli	r2,r5,20
    d8a0:	3806d53a 	srli	r3,r7,20
    d8a4:	02000434 	movhi	r8,16
    d8a8:	423fffc4 	addi	r8,r8,-1
    d8ac:	1081ffcc 	andi	r2,r2,2047
    d8b0:	0241ffc4 	movi	r9,2047
    d8b4:	2a14703a 	and	r10,r5,r8
    d8b8:	18c1ffcc 	andi	r3,r3,2047
    d8bc:	3a10703a 	and	r8,r7,r8
    d8c0:	280ad7fa 	srli	r5,r5,31
    d8c4:	380ed7fa 	srli	r7,r7,31
    d8c8:	12401d26 	beq	r2,r9,d940 <__gedf2+0xa4>
    d8cc:	0241ffc4 	movi	r9,2047
    d8d0:	1a401226 	beq	r3,r9,d91c <__gedf2+0x80>
    d8d4:	1000081e 	bne	r2,zero,d8f8 <__gedf2+0x5c>
    d8d8:	2296b03a 	or	r11,r4,r10
    d8dc:	5813003a 	cmpeq	r9,r11,zero
    d8e0:	1800091e 	bne	r3,zero,d908 <__gedf2+0x6c>
    d8e4:	3218b03a 	or	r12,r6,r8
    d8e8:	6000071e 	bne	r12,zero,d908 <__gedf2+0x6c>
    d8ec:	0005883a 	mov	r2,zero
    d8f0:	5800101e 	bne	r11,zero,d934 <__gedf2+0x98>
    d8f4:	f800283a 	ret
    d8f8:	18000c1e 	bne	r3,zero,d92c <__gedf2+0x90>
    d8fc:	3212b03a 	or	r9,r6,r8
    d900:	48000c26 	beq	r9,zero,d934 <__gedf2+0x98>
    d904:	0013883a 	mov	r9,zero
    d908:	39c03fcc 	andi	r7,r7,255
    d90c:	48000826 	beq	r9,zero,d930 <__gedf2+0x94>
    d910:	38000926 	beq	r7,zero,d938 <__gedf2+0x9c>
    d914:	00800044 	movi	r2,1
    d918:	f800283a 	ret
    d91c:	3212b03a 	or	r9,r6,r8
    d920:	483fec26 	beq	r9,zero,d8d4 <__gedf2+0x38>
    d924:	00bfff84 	movi	r2,-2
    d928:	f800283a 	ret
    d92c:	39c03fcc 	andi	r7,r7,255
    d930:	29c00626 	beq	r5,r7,d94c <__gedf2+0xb0>
    d934:	283ff726 	beq	r5,zero,d914 <__gedf2+0x78>
    d938:	00bfffc4 	movi	r2,-1
    d93c:	f800283a 	ret
    d940:	2292b03a 	or	r9,r4,r10
    d944:	483fe126 	beq	r9,zero,d8cc <__gedf2+0x30>
    d948:	003ff606 	br	d924 <__gedf2+0x88>
    d94c:	18bff916 	blt	r3,r2,d934 <__gedf2+0x98>
    d950:	10c00316 	blt	r2,r3,d960 <__gedf2+0xc4>
    d954:	42bff736 	bltu	r8,r10,d934 <__gedf2+0x98>
    d958:	52000326 	beq	r10,r8,d968 <__gedf2+0xcc>
    d95c:	5200042e 	bgeu	r10,r8,d970 <__gedf2+0xd4>
    d960:	283fec1e 	bne	r5,zero,d914 <__gedf2+0x78>
    d964:	003ff406 	br	d938 <__gedf2+0x9c>
    d968:	313ff236 	bltu	r6,r4,d934 <__gedf2+0x98>
    d96c:	21bffc36 	bltu	r4,r6,d960 <__gedf2+0xc4>
    d970:	0005883a 	mov	r2,zero
    d974:	f800283a 	ret

0000d978 <__ledf2>:
    d978:	2804d53a 	srli	r2,r5,20
    d97c:	3810d53a 	srli	r8,r7,20
    d980:	00c00434 	movhi	r3,16
    d984:	18ffffc4 	addi	r3,r3,-1
    d988:	1081ffcc 	andi	r2,r2,2047
    d98c:	0241ffc4 	movi	r9,2047
    d990:	28d4703a 	and	r10,r5,r3
    d994:	4201ffcc 	andi	r8,r8,2047
    d998:	38c6703a 	and	r3,r7,r3
    d99c:	280ad7fa 	srli	r5,r5,31
    d9a0:	380ed7fa 	srli	r7,r7,31
    d9a4:	12401f26 	beq	r2,r9,da24 <__ledf2+0xac>
    d9a8:	0241ffc4 	movi	r9,2047
    d9ac:	42401426 	beq	r8,r9,da00 <__ledf2+0x88>
    d9b0:	1000091e 	bne	r2,zero,d9d8 <__ledf2+0x60>
    d9b4:	2296b03a 	or	r11,r4,r10
    d9b8:	5813003a 	cmpeq	r9,r11,zero
    d9bc:	29403fcc 	andi	r5,r5,255
    d9c0:	40000a1e 	bne	r8,zero,d9ec <__ledf2+0x74>
    d9c4:	30d8b03a 	or	r12,r6,r3
    d9c8:	6000081e 	bne	r12,zero,d9ec <__ledf2+0x74>
    d9cc:	0005883a 	mov	r2,zero
    d9d0:	5800111e 	bne	r11,zero,da18 <__ledf2+0xa0>
    d9d4:	f800283a 	ret
    d9d8:	29403fcc 	andi	r5,r5,255
    d9dc:	40000c1e 	bne	r8,zero,da10 <__ledf2+0x98>
    d9e0:	30d2b03a 	or	r9,r6,r3
    d9e4:	48000c26 	beq	r9,zero,da18 <__ledf2+0xa0>
    d9e8:	0013883a 	mov	r9,zero
    d9ec:	39c03fcc 	andi	r7,r7,255
    d9f0:	48000826 	beq	r9,zero,da14 <__ledf2+0x9c>
    d9f4:	38001126 	beq	r7,zero,da3c <__ledf2+0xc4>
    d9f8:	00800044 	movi	r2,1
    d9fc:	f800283a 	ret
    da00:	30d2b03a 	or	r9,r6,r3
    da04:	483fea26 	beq	r9,zero,d9b0 <__ledf2+0x38>
    da08:	00800084 	movi	r2,2
    da0c:	f800283a 	ret
    da10:	39c03fcc 	andi	r7,r7,255
    da14:	39400726 	beq	r7,r5,da34 <__ledf2+0xbc>
    da18:	2800081e 	bne	r5,zero,da3c <__ledf2+0xc4>
    da1c:	00800044 	movi	r2,1
    da20:	f800283a 	ret
    da24:	2292b03a 	or	r9,r4,r10
    da28:	483fdf26 	beq	r9,zero,d9a8 <__ledf2+0x30>
    da2c:	00800084 	movi	r2,2
    da30:	f800283a 	ret
    da34:	4080030e 	bge	r8,r2,da44 <__ledf2+0xcc>
    da38:	383fef26 	beq	r7,zero,d9f8 <__ledf2+0x80>
    da3c:	00bfffc4 	movi	r2,-1
    da40:	f800283a 	ret
    da44:	123feb16 	blt	r2,r8,d9f4 <__ledf2+0x7c>
    da48:	1abff336 	bltu	r3,r10,da18 <__ledf2+0xa0>
    da4c:	50c00326 	beq	r10,r3,da5c <__ledf2+0xe4>
    da50:	50c0042e 	bgeu	r10,r3,da64 <__ledf2+0xec>
    da54:	283fe81e 	bne	r5,zero,d9f8 <__ledf2+0x80>
    da58:	003ff806 	br	da3c <__ledf2+0xc4>
    da5c:	313fee36 	bltu	r6,r4,da18 <__ledf2+0xa0>
    da60:	21bffc36 	bltu	r4,r6,da54 <__ledf2+0xdc>
    da64:	0005883a 	mov	r2,zero
    da68:	f800283a 	ret

0000da6c <__muldf3>:
    da6c:	defff304 	addi	sp,sp,-52
    da70:	2804d53a 	srli	r2,r5,20
    da74:	dd800915 	stw	r22,36(sp)
    da78:	282cd7fa 	srli	r22,r5,31
    da7c:	dc000315 	stw	r16,12(sp)
    da80:	04000434 	movhi	r16,16
    da84:	dd400815 	stw	r21,32(sp)
    da88:	dc800515 	stw	r18,20(sp)
    da8c:	843fffc4 	addi	r16,r16,-1
    da90:	dfc00c15 	stw	ra,48(sp)
    da94:	df000b15 	stw	fp,44(sp)
    da98:	ddc00a15 	stw	r23,40(sp)
    da9c:	dd000715 	stw	r20,28(sp)
    daa0:	dcc00615 	stw	r19,24(sp)
    daa4:	dc400415 	stw	r17,16(sp)
    daa8:	1481ffcc 	andi	r18,r2,2047
    daac:	2c20703a 	and	r16,r5,r16
    dab0:	b02b883a 	mov	r21,r22
    dab4:	b2403fcc 	andi	r9,r22,255
    dab8:	90006026 	beq	r18,zero,dc3c <__muldf3+0x1d0>
    dabc:	0081ffc4 	movi	r2,2047
    dac0:	2029883a 	mov	r20,r4
    dac4:	90803626 	beq	r18,r2,dba0 <__muldf3+0x134>
    dac8:	80800434 	orhi	r2,r16,16
    dacc:	100490fa 	slli	r2,r2,3
    dad0:	2020d77a 	srli	r16,r4,29
    dad4:	202890fa 	slli	r20,r4,3
    dad8:	94bf0044 	addi	r18,r18,-1023
    dadc:	80a0b03a 	or	r16,r16,r2
    dae0:	0027883a 	mov	r19,zero
    dae4:	0039883a 	mov	fp,zero
    dae8:	3804d53a 	srli	r2,r7,20
    daec:	382ed7fa 	srli	r23,r7,31
    daf0:	04400434 	movhi	r17,16
    daf4:	8c7fffc4 	addi	r17,r17,-1
    daf8:	1081ffcc 	andi	r2,r2,2047
    dafc:	3011883a 	mov	r8,r6
    db00:	3c62703a 	and	r17,r7,r17
    db04:	ba803fcc 	andi	r10,r23,255
    db08:	10006d26 	beq	r2,zero,dcc0 <__muldf3+0x254>
    db0c:	00c1ffc4 	movi	r3,2047
    db10:	10c06526 	beq	r2,r3,dca8 <__muldf3+0x23c>
    db14:	88c00434 	orhi	r3,r17,16
    db18:	180690fa 	slli	r3,r3,3
    db1c:	3022d77a 	srli	r17,r6,29
    db20:	301090fa 	slli	r8,r6,3
    db24:	10bf0044 	addi	r2,r2,-1023
    db28:	88e2b03a 	or	r17,r17,r3
    db2c:	000b883a 	mov	r5,zero
    db30:	9085883a 	add	r2,r18,r2
    db34:	2cc8b03a 	or	r4,r5,r19
    db38:	00c003c4 	movi	r3,15
    db3c:	bdacf03a 	xor	r22,r23,r22
    db40:	12c00044 	addi	r11,r2,1
    db44:	19009936 	bltu	r3,r4,ddac <__muldf3+0x340>
    db48:	200890ba 	slli	r4,r4,2
    db4c:	00c00074 	movhi	r3,1
    db50:	18f6d804 	addi	r3,r3,-9376
    db54:	20c9883a 	add	r4,r4,r3
    db58:	20c00017 	ldw	r3,0(r4)
    db5c:	1800683a 	jmp	r3
    db60:	0000ddac 	andhi	zero,zero,886
    db64:	0000dbc0 	call	dbc <init_LCD+0x3b8>
    db68:	0000dbc0 	call	dbc <init_LCD+0x3b8>
    db6c:	0000dbbc 	xorhi	zero,zero,878
    db70:	0000dd88 	cmpgei	zero,zero,886
    db74:	0000dd88 	cmpgei	zero,zero,886
    db78:	0000dd70 	cmpltui	zero,zero,885
    db7c:	0000dbbc 	xorhi	zero,zero,878
    db80:	0000dd88 	cmpgei	zero,zero,886
    db84:	0000dd70 	cmpltui	zero,zero,885
    db88:	0000dd88 	cmpgei	zero,zero,886
    db8c:	0000dbbc 	xorhi	zero,zero,878
    db90:	0000dd98 	cmpnei	zero,zero,886
    db94:	0000dd98 	cmpnei	zero,zero,886
    db98:	0000dd98 	cmpnei	zero,zero,886
    db9c:	0000dfb4 	movhi	zero,894
    dba0:	2404b03a 	or	r2,r4,r16
    dba4:	10006f1e 	bne	r2,zero,dd64 <__muldf3+0x2f8>
    dba8:	04c00204 	movi	r19,8
    dbac:	0021883a 	mov	r16,zero
    dbb0:	0029883a 	mov	r20,zero
    dbb4:	07000084 	movi	fp,2
    dbb8:	003fcb06 	br	dae8 <__muldf3+0x7c>
    dbbc:	502d883a 	mov	r22,r10
    dbc0:	00800084 	movi	r2,2
    dbc4:	28805726 	beq	r5,r2,dd24 <__muldf3+0x2b8>
    dbc8:	008000c4 	movi	r2,3
    dbcc:	28816626 	beq	r5,r2,e168 <__muldf3+0x6fc>
    dbd0:	00800044 	movi	r2,1
    dbd4:	2881411e 	bne	r5,r2,e0dc <__muldf3+0x670>
    dbd8:	b02b883a 	mov	r21,r22
    dbdc:	0005883a 	mov	r2,zero
    dbe0:	000b883a 	mov	r5,zero
    dbe4:	0029883a 	mov	r20,zero
    dbe8:	1004953a 	slli	r2,r2,20
    dbec:	a8c03fcc 	andi	r3,r21,255
    dbf0:	04400434 	movhi	r17,16
    dbf4:	8c7fffc4 	addi	r17,r17,-1
    dbf8:	180697fa 	slli	r3,r3,31
    dbfc:	2c4a703a 	and	r5,r5,r17
    dc00:	288ab03a 	or	r5,r5,r2
    dc04:	28c6b03a 	or	r3,r5,r3
    dc08:	a005883a 	mov	r2,r20
    dc0c:	dfc00c17 	ldw	ra,48(sp)
    dc10:	df000b17 	ldw	fp,44(sp)
    dc14:	ddc00a17 	ldw	r23,40(sp)
    dc18:	dd800917 	ldw	r22,36(sp)
    dc1c:	dd400817 	ldw	r21,32(sp)
    dc20:	dd000717 	ldw	r20,28(sp)
    dc24:	dcc00617 	ldw	r19,24(sp)
    dc28:	dc800517 	ldw	r18,20(sp)
    dc2c:	dc400417 	ldw	r17,16(sp)
    dc30:	dc000317 	ldw	r16,12(sp)
    dc34:	dec00d04 	addi	sp,sp,52
    dc38:	f800283a 	ret
    dc3c:	2404b03a 	or	r2,r4,r16
    dc40:	2027883a 	mov	r19,r4
    dc44:	10004226 	beq	r2,zero,dd50 <__muldf3+0x2e4>
    dc48:	8000fc26 	beq	r16,zero,e03c <__muldf3+0x5d0>
    dc4c:	8009883a 	mov	r4,r16
    dc50:	d9800215 	stw	r6,8(sp)
    dc54:	d9c00015 	stw	r7,0(sp)
    dc58:	da400115 	stw	r9,4(sp)
    dc5c:	000ec840 	call	ec84 <__clzsi2>
    dc60:	d9800217 	ldw	r6,8(sp)
    dc64:	d9c00017 	ldw	r7,0(sp)
    dc68:	da400117 	ldw	r9,4(sp)
    dc6c:	113ffd44 	addi	r4,r2,-11
    dc70:	00c00704 	movi	r3,28
    dc74:	1900ed16 	blt	r3,r4,e02c <__muldf3+0x5c0>
    dc78:	00c00744 	movi	r3,29
    dc7c:	147ffe04 	addi	r17,r2,-8
    dc80:	1907c83a 	sub	r3,r3,r4
    dc84:	8460983a 	sll	r16,r16,r17
    dc88:	98c6d83a 	srl	r3,r19,r3
    dc8c:	9c68983a 	sll	r20,r19,r17
    dc90:	1c20b03a 	or	r16,r3,r16
    dc94:	1080fcc4 	addi	r2,r2,1011
    dc98:	00a5c83a 	sub	r18,zero,r2
    dc9c:	0027883a 	mov	r19,zero
    dca0:	0039883a 	mov	fp,zero
    dca4:	003f9006 	br	dae8 <__muldf3+0x7c>
    dca8:	3446b03a 	or	r3,r6,r17
    dcac:	1800261e 	bne	r3,zero,dd48 <__muldf3+0x2dc>
    dcb0:	0023883a 	mov	r17,zero
    dcb4:	0011883a 	mov	r8,zero
    dcb8:	01400084 	movi	r5,2
    dcbc:	003f9c06 	br	db30 <__muldf3+0xc4>
    dcc0:	3446b03a 	or	r3,r6,r17
    dcc4:	18001c26 	beq	r3,zero,dd38 <__muldf3+0x2cc>
    dcc8:	8800ce26 	beq	r17,zero,e004 <__muldf3+0x598>
    dccc:	8809883a 	mov	r4,r17
    dcd0:	d9800215 	stw	r6,8(sp)
    dcd4:	da400115 	stw	r9,4(sp)
    dcd8:	da800015 	stw	r10,0(sp)
    dcdc:	000ec840 	call	ec84 <__clzsi2>
    dce0:	d9800217 	ldw	r6,8(sp)
    dce4:	da400117 	ldw	r9,4(sp)
    dce8:	da800017 	ldw	r10,0(sp)
    dcec:	113ffd44 	addi	r4,r2,-11
    dcf0:	00c00704 	movi	r3,28
    dcf4:	1900bf16 	blt	r3,r4,dff4 <__muldf3+0x588>
    dcf8:	00c00744 	movi	r3,29
    dcfc:	123ffe04 	addi	r8,r2,-8
    dd00:	1907c83a 	sub	r3,r3,r4
    dd04:	8a22983a 	sll	r17,r17,r8
    dd08:	30c6d83a 	srl	r3,r6,r3
    dd0c:	3210983a 	sll	r8,r6,r8
    dd10:	1c62b03a 	or	r17,r3,r17
    dd14:	1080fcc4 	addi	r2,r2,1011
    dd18:	0085c83a 	sub	r2,zero,r2
    dd1c:	000b883a 	mov	r5,zero
    dd20:	003f8306 	br	db30 <__muldf3+0xc4>
    dd24:	b02b883a 	mov	r21,r22
    dd28:	0081ffc4 	movi	r2,2047
    dd2c:	000b883a 	mov	r5,zero
    dd30:	0029883a 	mov	r20,zero
    dd34:	003fac06 	br	dbe8 <__muldf3+0x17c>
    dd38:	0023883a 	mov	r17,zero
    dd3c:	0011883a 	mov	r8,zero
    dd40:	01400044 	movi	r5,1
    dd44:	003f7a06 	br	db30 <__muldf3+0xc4>
    dd48:	014000c4 	movi	r5,3
    dd4c:	003f7806 	br	db30 <__muldf3+0xc4>
    dd50:	04c00104 	movi	r19,4
    dd54:	0021883a 	mov	r16,zero
    dd58:	0029883a 	mov	r20,zero
    dd5c:	07000044 	movi	fp,1
    dd60:	003f6106 	br	dae8 <__muldf3+0x7c>
    dd64:	04c00304 	movi	r19,12
    dd68:	070000c4 	movi	fp,3
    dd6c:	003f5e06 	br	dae8 <__muldf3+0x7c>
    dd70:	01400434 	movhi	r5,16
    dd74:	002b883a 	mov	r21,zero
    dd78:	297fffc4 	addi	r5,r5,-1
    dd7c:	053fffc4 	movi	r20,-1
    dd80:	0081ffc4 	movi	r2,2047
    dd84:	003f9806 	br	dbe8 <__muldf3+0x17c>
    dd88:	8023883a 	mov	r17,r16
    dd8c:	a011883a 	mov	r8,r20
    dd90:	e00b883a 	mov	r5,fp
    dd94:	003f8a06 	br	dbc0 <__muldf3+0x154>
    dd98:	8023883a 	mov	r17,r16
    dd9c:	a011883a 	mov	r8,r20
    dda0:	482d883a 	mov	r22,r9
    dda4:	e00b883a 	mov	r5,fp
    dda8:	003f8506 	br	dbc0 <__muldf3+0x154>
    ddac:	a00ad43a 	srli	r5,r20,16
    ddb0:	401ad43a 	srli	r13,r8,16
    ddb4:	a53fffcc 	andi	r20,r20,65535
    ddb8:	423fffcc 	andi	r8,r8,65535
    ddbc:	4519383a 	mul	r12,r8,r20
    ddc0:	4147383a 	mul	r3,r8,r5
    ddc4:	6d09383a 	mul	r4,r13,r20
    ddc8:	600cd43a 	srli	r6,r12,16
    ddcc:	2b5d383a 	mul	r14,r5,r13
    ddd0:	20c9883a 	add	r4,r4,r3
    ddd4:	310d883a 	add	r6,r6,r4
    ddd8:	30c0022e 	bgeu	r6,r3,dde4 <__muldf3+0x378>
    dddc:	00c00074 	movhi	r3,1
    dde0:	70dd883a 	add	r14,r14,r3
    dde4:	8826d43a 	srli	r19,r17,16
    dde8:	8bffffcc 	andi	r15,r17,65535
    ddec:	7d23383a 	mul	r17,r15,r20
    ddf0:	7949383a 	mul	r4,r15,r5
    ddf4:	9d29383a 	mul	r20,r19,r20
    ddf8:	8814d43a 	srli	r10,r17,16
    ddfc:	3012943a 	slli	r9,r6,16
    de00:	a129883a 	add	r20,r20,r4
    de04:	633fffcc 	andi	r12,r12,65535
    de08:	5515883a 	add	r10,r10,r20
    de0c:	3006d43a 	srli	r3,r6,16
    de10:	4b13883a 	add	r9,r9,r12
    de14:	2ccb383a 	mul	r5,r5,r19
    de18:	5100022e 	bgeu	r10,r4,de24 <__muldf3+0x3b8>
    de1c:	01000074 	movhi	r4,1
    de20:	290b883a 	add	r5,r5,r4
    de24:	802ad43a 	srli	r21,r16,16
    de28:	843fffcc 	andi	r16,r16,65535
    de2c:	440d383a 	mul	r6,r8,r16
    de30:	4565383a 	mul	r18,r8,r21
    de34:	8349383a 	mul	r4,r16,r13
    de38:	500e943a 	slli	r7,r10,16
    de3c:	3010d43a 	srli	r8,r6,16
    de40:	5028d43a 	srli	r20,r10,16
    de44:	2489883a 	add	r4,r4,r18
    de48:	8abfffcc 	andi	r10,r17,65535
    de4c:	3a95883a 	add	r10,r7,r10
    de50:	4119883a 	add	r12,r8,r4
    de54:	a169883a 	add	r20,r20,r5
    de58:	1a87883a 	add	r3,r3,r10
    de5c:	6d5b383a 	mul	r13,r13,r21
    de60:	6480022e 	bgeu	r12,r18,de6c <__muldf3+0x400>
    de64:	01000074 	movhi	r4,1
    de68:	691b883a 	add	r13,r13,r4
    de6c:	7c25383a 	mul	r18,r15,r16
    de70:	7d4b383a 	mul	r5,r15,r21
    de74:	84cf383a 	mul	r7,r16,r19
    de78:	901ed43a 	srli	r15,r18,16
    de7c:	6008d43a 	srli	r4,r12,16
    de80:	6010943a 	slli	r8,r12,16
    de84:	394f883a 	add	r7,r7,r5
    de88:	333fffcc 	andi	r12,r6,65535
    de8c:	79df883a 	add	r15,r15,r7
    de90:	235b883a 	add	r13,r4,r13
    de94:	9d63383a 	mul	r17,r19,r21
    de98:	4309883a 	add	r4,r8,r12
    de9c:	7940022e 	bgeu	r15,r5,dea8 <__muldf3+0x43c>
    dea0:	01400074 	movhi	r5,1
    dea4:	8963883a 	add	r17,r17,r5
    dea8:	780a943a 	slli	r5,r15,16
    deac:	91bfffcc 	andi	r6,r18,65535
    deb0:	70c7883a 	add	r3,r14,r3
    deb4:	298d883a 	add	r6,r5,r6
    deb8:	1a8f803a 	cmpltu	r7,r3,r10
    debc:	350b883a 	add	r5,r6,r20
    dec0:	20c7883a 	add	r3,r4,r3
    dec4:	3955883a 	add	r10,r7,r5
    dec8:	1909803a 	cmpltu	r4,r3,r4
    decc:	6a91883a 	add	r8,r13,r10
    ded0:	780cd43a 	srli	r6,r15,16
    ded4:	2219883a 	add	r12,r4,r8
    ded8:	2d0b803a 	cmpltu	r5,r5,r20
    dedc:	51cf803a 	cmpltu	r7,r10,r7
    dee0:	29ceb03a 	or	r7,r5,r7
    dee4:	4351803a 	cmpltu	r8,r8,r13
    dee8:	610b803a 	cmpltu	r5,r12,r4
    deec:	4148b03a 	or	r4,r8,r5
    def0:	398f883a 	add	r7,r7,r6
    def4:	3909883a 	add	r4,r7,r4
    def8:	1810927a 	slli	r8,r3,9
    defc:	2449883a 	add	r4,r4,r17
    df00:	2008927a 	slli	r4,r4,9
    df04:	6022d5fa 	srli	r17,r12,23
    df08:	1806d5fa 	srli	r3,r3,23
    df0c:	4252b03a 	or	r9,r8,r9
    df10:	600a927a 	slli	r5,r12,9
    df14:	4810c03a 	cmpne	r8,r9,zero
    df18:	2462b03a 	or	r17,r4,r17
    df1c:	40c6b03a 	or	r3,r8,r3
    df20:	8900402c 	andhi	r4,r17,256
    df24:	1950b03a 	or	r8,r3,r5
    df28:	20000726 	beq	r4,zero,df48 <__muldf3+0x4dc>
    df2c:	4006d07a 	srli	r3,r8,1
    df30:	880497fa 	slli	r2,r17,31
    df34:	4200004c 	andi	r8,r8,1
    df38:	8822d07a 	srli	r17,r17,1
    df3c:	1a10b03a 	or	r8,r3,r8
    df40:	1210b03a 	or	r8,r2,r8
    df44:	5805883a 	mov	r2,r11
    df48:	1140ffc4 	addi	r5,r2,1023
    df4c:	0140440e 	bge	zero,r5,e060 <__muldf3+0x5f4>
    df50:	40c001cc 	andi	r3,r8,7
    df54:	18000726 	beq	r3,zero,df74 <__muldf3+0x508>
    df58:	40c003cc 	andi	r3,r8,15
    df5c:	01000104 	movi	r4,4
    df60:	19000426 	beq	r3,r4,df74 <__muldf3+0x508>
    df64:	4107883a 	add	r3,r8,r4
    df68:	1a11803a 	cmpltu	r8,r3,r8
    df6c:	8a23883a 	add	r17,r17,r8
    df70:	1811883a 	mov	r8,r3
    df74:	88c0402c 	andhi	r3,r17,256
    df78:	18000426 	beq	r3,zero,df8c <__muldf3+0x520>
    df7c:	11410004 	addi	r5,r2,1024
    df80:	00bfc034 	movhi	r2,65280
    df84:	10bfffc4 	addi	r2,r2,-1
    df88:	88a2703a 	and	r17,r17,r2
    df8c:	0081ff84 	movi	r2,2046
    df90:	117f6416 	blt	r2,r5,dd24 <__muldf3+0x2b8>
    df94:	8828977a 	slli	r20,r17,29
    df98:	4010d0fa 	srli	r8,r8,3
    df9c:	8822927a 	slli	r17,r17,9
    dfa0:	2881ffcc 	andi	r2,r5,2047
    dfa4:	a228b03a 	or	r20,r20,r8
    dfa8:	880ad33a 	srli	r5,r17,12
    dfac:	b02b883a 	mov	r21,r22
    dfb0:	003f0d06 	br	dbe8 <__muldf3+0x17c>
    dfb4:	8080022c 	andhi	r2,r16,8
    dfb8:	10000926 	beq	r2,zero,dfe0 <__muldf3+0x574>
    dfbc:	8880022c 	andhi	r2,r17,8
    dfc0:	1000071e 	bne	r2,zero,dfe0 <__muldf3+0x574>
    dfc4:	00800434 	movhi	r2,16
    dfc8:	89400234 	orhi	r5,r17,8
    dfcc:	10bfffc4 	addi	r2,r2,-1
    dfd0:	b82b883a 	mov	r21,r23
    dfd4:	288a703a 	and	r5,r5,r2
    dfd8:	4029883a 	mov	r20,r8
    dfdc:	003f6806 	br	dd80 <__muldf3+0x314>
    dfe0:	00800434 	movhi	r2,16
    dfe4:	81400234 	orhi	r5,r16,8
    dfe8:	10bfffc4 	addi	r2,r2,-1
    dfec:	288a703a 	and	r5,r5,r2
    dff0:	003f6306 	br	dd80 <__muldf3+0x314>
    dff4:	147ff604 	addi	r17,r2,-40
    dff8:	3462983a 	sll	r17,r6,r17
    dffc:	0011883a 	mov	r8,zero
    e000:	003f4406 	br	dd14 <__muldf3+0x2a8>
    e004:	3009883a 	mov	r4,r6
    e008:	d9800215 	stw	r6,8(sp)
    e00c:	da400115 	stw	r9,4(sp)
    e010:	da800015 	stw	r10,0(sp)
    e014:	000ec840 	call	ec84 <__clzsi2>
    e018:	10800804 	addi	r2,r2,32
    e01c:	da800017 	ldw	r10,0(sp)
    e020:	da400117 	ldw	r9,4(sp)
    e024:	d9800217 	ldw	r6,8(sp)
    e028:	003f3006 	br	dcec <__muldf3+0x280>
    e02c:	143ff604 	addi	r16,r2,-40
    e030:	9c20983a 	sll	r16,r19,r16
    e034:	0029883a 	mov	r20,zero
    e038:	003f1606 	br	dc94 <__muldf3+0x228>
    e03c:	d9800215 	stw	r6,8(sp)
    e040:	d9c00015 	stw	r7,0(sp)
    e044:	da400115 	stw	r9,4(sp)
    e048:	000ec840 	call	ec84 <__clzsi2>
    e04c:	10800804 	addi	r2,r2,32
    e050:	da400117 	ldw	r9,4(sp)
    e054:	d9c00017 	ldw	r7,0(sp)
    e058:	d9800217 	ldw	r6,8(sp)
    e05c:	003f0306 	br	dc6c <__muldf3+0x200>
    e060:	00c00044 	movi	r3,1
    e064:	1947c83a 	sub	r3,r3,r5
    e068:	00800e04 	movi	r2,56
    e06c:	10feda16 	blt	r2,r3,dbd8 <__muldf3+0x16c>
    e070:	008007c4 	movi	r2,31
    e074:	10c01b16 	blt	r2,r3,e0e4 <__muldf3+0x678>
    e078:	00800804 	movi	r2,32
    e07c:	10c5c83a 	sub	r2,r2,r3
    e080:	888a983a 	sll	r5,r17,r2
    e084:	40c8d83a 	srl	r4,r8,r3
    e088:	4084983a 	sll	r2,r8,r2
    e08c:	88e2d83a 	srl	r17,r17,r3
    e090:	2906b03a 	or	r3,r5,r4
    e094:	1004c03a 	cmpne	r2,r2,zero
    e098:	1886b03a 	or	r3,r3,r2
    e09c:	188001cc 	andi	r2,r3,7
    e0a0:	10000726 	beq	r2,zero,e0c0 <__muldf3+0x654>
    e0a4:	188003cc 	andi	r2,r3,15
    e0a8:	01000104 	movi	r4,4
    e0ac:	11000426 	beq	r2,r4,e0c0 <__muldf3+0x654>
    e0b0:	1805883a 	mov	r2,r3
    e0b4:	10c00104 	addi	r3,r2,4
    e0b8:	1885803a 	cmpltu	r2,r3,r2
    e0bc:	88a3883a 	add	r17,r17,r2
    e0c0:	8880202c 	andhi	r2,r17,128
    e0c4:	10001c26 	beq	r2,zero,e138 <__muldf3+0x6cc>
    e0c8:	b02b883a 	mov	r21,r22
    e0cc:	00800044 	movi	r2,1
    e0d0:	000b883a 	mov	r5,zero
    e0d4:	0029883a 	mov	r20,zero
    e0d8:	003ec306 	br	dbe8 <__muldf3+0x17c>
    e0dc:	5805883a 	mov	r2,r11
    e0e0:	003f9906 	br	df48 <__muldf3+0x4dc>
    e0e4:	00bff844 	movi	r2,-31
    e0e8:	1145c83a 	sub	r2,r2,r5
    e0ec:	8888d83a 	srl	r4,r17,r2
    e0f0:	00800804 	movi	r2,32
    e0f4:	18801a26 	beq	r3,r2,e160 <__muldf3+0x6f4>
    e0f8:	00801004 	movi	r2,64
    e0fc:	10c5c83a 	sub	r2,r2,r3
    e100:	8884983a 	sll	r2,r17,r2
    e104:	1204b03a 	or	r2,r2,r8
    e108:	1004c03a 	cmpne	r2,r2,zero
    e10c:	2084b03a 	or	r2,r4,r2
    e110:	144001cc 	andi	r17,r2,7
    e114:	88000d1e 	bne	r17,zero,e14c <__muldf3+0x6e0>
    e118:	000b883a 	mov	r5,zero
    e11c:	1028d0fa 	srli	r20,r2,3
    e120:	b02b883a 	mov	r21,r22
    e124:	0005883a 	mov	r2,zero
    e128:	a468b03a 	or	r20,r20,r17
    e12c:	003eae06 	br	dbe8 <__muldf3+0x17c>
    e130:	1007883a 	mov	r3,r2
    e134:	0023883a 	mov	r17,zero
    e138:	880a927a 	slli	r5,r17,9
    e13c:	1805883a 	mov	r2,r3
    e140:	8822977a 	slli	r17,r17,29
    e144:	280ad33a 	srli	r5,r5,12
    e148:	003ff406 	br	e11c <__muldf3+0x6b0>
    e14c:	10c003cc 	andi	r3,r2,15
    e150:	01000104 	movi	r4,4
    e154:	193ff626 	beq	r3,r4,e130 <__muldf3+0x6c4>
    e158:	0023883a 	mov	r17,zero
    e15c:	003fd506 	br	e0b4 <__muldf3+0x648>
    e160:	0005883a 	mov	r2,zero
    e164:	003fe706 	br	e104 <__muldf3+0x698>
    e168:	00800434 	movhi	r2,16
    e16c:	89400234 	orhi	r5,r17,8
    e170:	10bfffc4 	addi	r2,r2,-1
    e174:	b02b883a 	mov	r21,r22
    e178:	288a703a 	and	r5,r5,r2
    e17c:	4029883a 	mov	r20,r8
    e180:	003eff06 	br	dd80 <__muldf3+0x314>

0000e184 <__subdf3>:
    e184:	02000434 	movhi	r8,16
    e188:	423fffc4 	addi	r8,r8,-1
    e18c:	defffb04 	addi	sp,sp,-20
    e190:	2a14703a 	and	r10,r5,r8
    e194:	3812d53a 	srli	r9,r7,20
    e198:	3a10703a 	and	r8,r7,r8
    e19c:	2006d77a 	srli	r3,r4,29
    e1a0:	3004d77a 	srli	r2,r6,29
    e1a4:	dc000015 	stw	r16,0(sp)
    e1a8:	501490fa 	slli	r10,r10,3
    e1ac:	2820d53a 	srli	r16,r5,20
    e1b0:	401090fa 	slli	r8,r8,3
    e1b4:	dc800215 	stw	r18,8(sp)
    e1b8:	dc400115 	stw	r17,4(sp)
    e1bc:	dfc00415 	stw	ra,16(sp)
    e1c0:	202290fa 	slli	r17,r4,3
    e1c4:	dcc00315 	stw	r19,12(sp)
    e1c8:	4a41ffcc 	andi	r9,r9,2047
    e1cc:	0101ffc4 	movi	r4,2047
    e1d0:	2824d7fa 	srli	r18,r5,31
    e1d4:	8401ffcc 	andi	r16,r16,2047
    e1d8:	50c6b03a 	or	r3,r10,r3
    e1dc:	380ed7fa 	srli	r7,r7,31
    e1e0:	408ab03a 	or	r5,r8,r2
    e1e4:	300c90fa 	slli	r6,r6,3
    e1e8:	49009626 	beq	r9,r4,e444 <__subdf3+0x2c0>
    e1ec:	39c0005c 	xori	r7,r7,1
    e1f0:	8245c83a 	sub	r2,r16,r9
    e1f4:	3c807426 	beq	r7,r18,e3c8 <__subdf3+0x244>
    e1f8:	0080af0e 	bge	zero,r2,e4b8 <__subdf3+0x334>
    e1fc:	48002a1e 	bne	r9,zero,e2a8 <__subdf3+0x124>
    e200:	2988b03a 	or	r4,r5,r6
    e204:	20009a1e 	bne	r4,zero,e470 <__subdf3+0x2ec>
    e208:	888001cc 	andi	r2,r17,7
    e20c:	10000726 	beq	r2,zero,e22c <__subdf3+0xa8>
    e210:	888003cc 	andi	r2,r17,15
    e214:	01000104 	movi	r4,4
    e218:	11000426 	beq	r2,r4,e22c <__subdf3+0xa8>
    e21c:	890b883a 	add	r5,r17,r4
    e220:	2c63803a 	cmpltu	r17,r5,r17
    e224:	1c47883a 	add	r3,r3,r17
    e228:	2823883a 	mov	r17,r5
    e22c:	1880202c 	andhi	r2,r3,128
    e230:	10005926 	beq	r2,zero,e398 <__subdf3+0x214>
    e234:	84000044 	addi	r16,r16,1
    e238:	0081ffc4 	movi	r2,2047
    e23c:	8080be26 	beq	r16,r2,e538 <__subdf3+0x3b4>
    e240:	017fe034 	movhi	r5,65408
    e244:	297fffc4 	addi	r5,r5,-1
    e248:	1946703a 	and	r3,r3,r5
    e24c:	1804977a 	slli	r2,r3,29
    e250:	1806927a 	slli	r3,r3,9
    e254:	8822d0fa 	srli	r17,r17,3
    e258:	8401ffcc 	andi	r16,r16,2047
    e25c:	180ad33a 	srli	r5,r3,12
    e260:	9100004c 	andi	r4,r18,1
    e264:	1444b03a 	or	r2,r2,r17
    e268:	80c1ffcc 	andi	r3,r16,2047
    e26c:	1820953a 	slli	r16,r3,20
    e270:	20c03fcc 	andi	r3,r4,255
    e274:	180897fa 	slli	r4,r3,31
    e278:	00c00434 	movhi	r3,16
    e27c:	18ffffc4 	addi	r3,r3,-1
    e280:	28c6703a 	and	r3,r5,r3
    e284:	1c06b03a 	or	r3,r3,r16
    e288:	1906b03a 	or	r3,r3,r4
    e28c:	dfc00417 	ldw	ra,16(sp)
    e290:	dcc00317 	ldw	r19,12(sp)
    e294:	dc800217 	ldw	r18,8(sp)
    e298:	dc400117 	ldw	r17,4(sp)
    e29c:	dc000017 	ldw	r16,0(sp)
    e2a0:	dec00504 	addi	sp,sp,20
    e2a4:	f800283a 	ret
    e2a8:	0101ffc4 	movi	r4,2047
    e2ac:	813fd626 	beq	r16,r4,e208 <__subdf3+0x84>
    e2b0:	29402034 	orhi	r5,r5,128
    e2b4:	01000e04 	movi	r4,56
    e2b8:	2080a316 	blt	r4,r2,e548 <__subdf3+0x3c4>
    e2bc:	010007c4 	movi	r4,31
    e2c0:	2080c616 	blt	r4,r2,e5dc <__subdf3+0x458>
    e2c4:	01000804 	movi	r4,32
    e2c8:	2089c83a 	sub	r4,r4,r2
    e2cc:	2910983a 	sll	r8,r5,r4
    e2d0:	308ed83a 	srl	r7,r6,r2
    e2d4:	3108983a 	sll	r4,r6,r4
    e2d8:	2884d83a 	srl	r2,r5,r2
    e2dc:	41ccb03a 	or	r6,r8,r7
    e2e0:	2008c03a 	cmpne	r4,r4,zero
    e2e4:	310cb03a 	or	r6,r6,r4
    e2e8:	898dc83a 	sub	r6,r17,r6
    e2ec:	89a3803a 	cmpltu	r17,r17,r6
    e2f0:	1887c83a 	sub	r3,r3,r2
    e2f4:	1c47c83a 	sub	r3,r3,r17
    e2f8:	3023883a 	mov	r17,r6
    e2fc:	1880202c 	andhi	r2,r3,128
    e300:	10002326 	beq	r2,zero,e390 <__subdf3+0x20c>
    e304:	04c02034 	movhi	r19,128
    e308:	9cffffc4 	addi	r19,r19,-1
    e30c:	1ce6703a 	and	r19,r3,r19
    e310:	98007a26 	beq	r19,zero,e4fc <__subdf3+0x378>
    e314:	9809883a 	mov	r4,r19
    e318:	000ec840 	call	ec84 <__clzsi2>
    e31c:	113ffe04 	addi	r4,r2,-8
    e320:	00c007c4 	movi	r3,31
    e324:	19007b16 	blt	r3,r4,e514 <__subdf3+0x390>
    e328:	00800804 	movi	r2,32
    e32c:	1105c83a 	sub	r2,r2,r4
    e330:	8884d83a 	srl	r2,r17,r2
    e334:	9906983a 	sll	r3,r19,r4
    e338:	8922983a 	sll	r17,r17,r4
    e33c:	10c4b03a 	or	r2,r2,r3
    e340:	24007816 	blt	r4,r16,e524 <__subdf3+0x3a0>
    e344:	2421c83a 	sub	r16,r4,r16
    e348:	80c00044 	addi	r3,r16,1
    e34c:	010007c4 	movi	r4,31
    e350:	20c09516 	blt	r4,r3,e5a8 <__subdf3+0x424>
    e354:	01400804 	movi	r5,32
    e358:	28cbc83a 	sub	r5,r5,r3
    e35c:	88c8d83a 	srl	r4,r17,r3
    e360:	8962983a 	sll	r17,r17,r5
    e364:	114a983a 	sll	r5,r2,r5
    e368:	10c6d83a 	srl	r3,r2,r3
    e36c:	8804c03a 	cmpne	r2,r17,zero
    e370:	290ab03a 	or	r5,r5,r4
    e374:	28a2b03a 	or	r17,r5,r2
    e378:	0021883a 	mov	r16,zero
    e37c:	003fa206 	br	e208 <__subdf3+0x84>
    e380:	2090b03a 	or	r8,r4,r2
    e384:	40018e26 	beq	r8,zero,e9c0 <__subdf3+0x83c>
    e388:	1007883a 	mov	r3,r2
    e38c:	2023883a 	mov	r17,r4
    e390:	888001cc 	andi	r2,r17,7
    e394:	103f9e1e 	bne	r2,zero,e210 <__subdf3+0x8c>
    e398:	1804977a 	slli	r2,r3,29
    e39c:	8822d0fa 	srli	r17,r17,3
    e3a0:	1810d0fa 	srli	r8,r3,3
    e3a4:	9100004c 	andi	r4,r18,1
    e3a8:	1444b03a 	or	r2,r2,r17
    e3ac:	00c1ffc4 	movi	r3,2047
    e3b0:	80c02826 	beq	r16,r3,e454 <__subdf3+0x2d0>
    e3b4:	01400434 	movhi	r5,16
    e3b8:	297fffc4 	addi	r5,r5,-1
    e3bc:	80e0703a 	and	r16,r16,r3
    e3c0:	414a703a 	and	r5,r8,r5
    e3c4:	003fa806 	br	e268 <__subdf3+0xe4>
    e3c8:	0080630e 	bge	zero,r2,e558 <__subdf3+0x3d4>
    e3cc:	48003026 	beq	r9,zero,e490 <__subdf3+0x30c>
    e3d0:	0101ffc4 	movi	r4,2047
    e3d4:	813f8c26 	beq	r16,r4,e208 <__subdf3+0x84>
    e3d8:	29402034 	orhi	r5,r5,128
    e3dc:	01000e04 	movi	r4,56
    e3e0:	2080a90e 	bge	r4,r2,e688 <__subdf3+0x504>
    e3e4:	298cb03a 	or	r6,r5,r6
    e3e8:	3012c03a 	cmpne	r9,r6,zero
    e3ec:	0005883a 	mov	r2,zero
    e3f0:	4c53883a 	add	r9,r9,r17
    e3f4:	4c63803a 	cmpltu	r17,r9,r17
    e3f8:	10c7883a 	add	r3,r2,r3
    e3fc:	88c7883a 	add	r3,r17,r3
    e400:	4823883a 	mov	r17,r9
    e404:	1880202c 	andhi	r2,r3,128
    e408:	1000d026 	beq	r2,zero,e74c <__subdf3+0x5c8>
    e40c:	84000044 	addi	r16,r16,1
    e410:	0081ffc4 	movi	r2,2047
    e414:	8080fe26 	beq	r16,r2,e810 <__subdf3+0x68c>
    e418:	00bfe034 	movhi	r2,65408
    e41c:	10bfffc4 	addi	r2,r2,-1
    e420:	1886703a 	and	r3,r3,r2
    e424:	880ad07a 	srli	r5,r17,1
    e428:	180497fa 	slli	r2,r3,31
    e42c:	8900004c 	andi	r4,r17,1
    e430:	2922b03a 	or	r17,r5,r4
    e434:	1806d07a 	srli	r3,r3,1
    e438:	1462b03a 	or	r17,r2,r17
    e43c:	3825883a 	mov	r18,r7
    e440:	003f7106 	br	e208 <__subdf3+0x84>
    e444:	2984b03a 	or	r2,r5,r6
    e448:	103f6826 	beq	r2,zero,e1ec <__subdf3+0x68>
    e44c:	39c03fcc 	andi	r7,r7,255
    e450:	003f6706 	br	e1f0 <__subdf3+0x6c>
    e454:	4086b03a 	or	r3,r8,r2
    e458:	18015226 	beq	r3,zero,e9a4 <__subdf3+0x820>
    e45c:	00c00434 	movhi	r3,16
    e460:	41400234 	orhi	r5,r8,8
    e464:	18ffffc4 	addi	r3,r3,-1
    e468:	28ca703a 	and	r5,r5,r3
    e46c:	003f7e06 	br	e268 <__subdf3+0xe4>
    e470:	10bfffc4 	addi	r2,r2,-1
    e474:	1000491e 	bne	r2,zero,e59c <__subdf3+0x418>
    e478:	898fc83a 	sub	r7,r17,r6
    e47c:	89e3803a 	cmpltu	r17,r17,r7
    e480:	1947c83a 	sub	r3,r3,r5
    e484:	1c47c83a 	sub	r3,r3,r17
    e488:	3823883a 	mov	r17,r7
    e48c:	003f9b06 	br	e2fc <__subdf3+0x178>
    e490:	2988b03a 	or	r4,r5,r6
    e494:	203f5c26 	beq	r4,zero,e208 <__subdf3+0x84>
    e498:	10bfffc4 	addi	r2,r2,-1
    e49c:	1000931e 	bne	r2,zero,e6ec <__subdf3+0x568>
    e4a0:	898d883a 	add	r6,r17,r6
    e4a4:	3463803a 	cmpltu	r17,r6,r17
    e4a8:	1947883a 	add	r3,r3,r5
    e4ac:	88c7883a 	add	r3,r17,r3
    e4b0:	3023883a 	mov	r17,r6
    e4b4:	003fd306 	br	e404 <__subdf3+0x280>
    e4b8:	1000541e 	bne	r2,zero,e60c <__subdf3+0x488>
    e4bc:	80800044 	addi	r2,r16,1
    e4c0:	1081ffcc 	andi	r2,r2,2047
    e4c4:	01000044 	movi	r4,1
    e4c8:	2080a20e 	bge	r4,r2,e754 <__subdf3+0x5d0>
    e4cc:	8989c83a 	sub	r4,r17,r6
    e4d0:	8905803a 	cmpltu	r2,r17,r4
    e4d4:	1967c83a 	sub	r19,r3,r5
    e4d8:	98a7c83a 	sub	r19,r19,r2
    e4dc:	9880202c 	andhi	r2,r19,128
    e4e0:	10006326 	beq	r2,zero,e670 <__subdf3+0x4ec>
    e4e4:	3463c83a 	sub	r17,r6,r17
    e4e8:	28c7c83a 	sub	r3,r5,r3
    e4ec:	344d803a 	cmpltu	r6,r6,r17
    e4f0:	19a7c83a 	sub	r19,r3,r6
    e4f4:	3825883a 	mov	r18,r7
    e4f8:	983f861e 	bne	r19,zero,e314 <__subdf3+0x190>
    e4fc:	8809883a 	mov	r4,r17
    e500:	000ec840 	call	ec84 <__clzsi2>
    e504:	10800804 	addi	r2,r2,32
    e508:	113ffe04 	addi	r4,r2,-8
    e50c:	00c007c4 	movi	r3,31
    e510:	193f850e 	bge	r3,r4,e328 <__subdf3+0x1a4>
    e514:	10bff604 	addi	r2,r2,-40
    e518:	8884983a 	sll	r2,r17,r2
    e51c:	0023883a 	mov	r17,zero
    e520:	243f880e 	bge	r4,r16,e344 <__subdf3+0x1c0>
    e524:	00ffe034 	movhi	r3,65408
    e528:	18ffffc4 	addi	r3,r3,-1
    e52c:	8121c83a 	sub	r16,r16,r4
    e530:	10c6703a 	and	r3,r2,r3
    e534:	003f3406 	br	e208 <__subdf3+0x84>
    e538:	9100004c 	andi	r4,r18,1
    e53c:	000b883a 	mov	r5,zero
    e540:	0005883a 	mov	r2,zero
    e544:	003f4806 	br	e268 <__subdf3+0xe4>
    e548:	298cb03a 	or	r6,r5,r6
    e54c:	300cc03a 	cmpne	r6,r6,zero
    e550:	0005883a 	mov	r2,zero
    e554:	003f6406 	br	e2e8 <__subdf3+0x164>
    e558:	10009a1e 	bne	r2,zero,e7c4 <__subdf3+0x640>
    e55c:	82400044 	addi	r9,r16,1
    e560:	4881ffcc 	andi	r2,r9,2047
    e564:	02800044 	movi	r10,1
    e568:	5080670e 	bge	r10,r2,e708 <__subdf3+0x584>
    e56c:	0081ffc4 	movi	r2,2047
    e570:	4880af26 	beq	r9,r2,e830 <__subdf3+0x6ac>
    e574:	898d883a 	add	r6,r17,r6
    e578:	1945883a 	add	r2,r3,r5
    e57c:	3447803a 	cmpltu	r3,r6,r17
    e580:	1887883a 	add	r3,r3,r2
    e584:	182297fa 	slli	r17,r3,31
    e588:	300cd07a 	srli	r6,r6,1
    e58c:	1806d07a 	srli	r3,r3,1
    e590:	4821883a 	mov	r16,r9
    e594:	89a2b03a 	or	r17,r17,r6
    e598:	003f1b06 	br	e208 <__subdf3+0x84>
    e59c:	0101ffc4 	movi	r4,2047
    e5a0:	813f441e 	bne	r16,r4,e2b4 <__subdf3+0x130>
    e5a4:	003f1806 	br	e208 <__subdf3+0x84>
    e5a8:	843ff844 	addi	r16,r16,-31
    e5ac:	01400804 	movi	r5,32
    e5b0:	1408d83a 	srl	r4,r2,r16
    e5b4:	19405026 	beq	r3,r5,e6f8 <__subdf3+0x574>
    e5b8:	01401004 	movi	r5,64
    e5bc:	28c7c83a 	sub	r3,r5,r3
    e5c0:	10c4983a 	sll	r2,r2,r3
    e5c4:	88a2b03a 	or	r17,r17,r2
    e5c8:	8822c03a 	cmpne	r17,r17,zero
    e5cc:	2462b03a 	or	r17,r4,r17
    e5d0:	0007883a 	mov	r3,zero
    e5d4:	0021883a 	mov	r16,zero
    e5d8:	003f6d06 	br	e390 <__subdf3+0x20c>
    e5dc:	11fff804 	addi	r7,r2,-32
    e5e0:	01000804 	movi	r4,32
    e5e4:	29ced83a 	srl	r7,r5,r7
    e5e8:	11004526 	beq	r2,r4,e700 <__subdf3+0x57c>
    e5ec:	01001004 	movi	r4,64
    e5f0:	2089c83a 	sub	r4,r4,r2
    e5f4:	2904983a 	sll	r2,r5,r4
    e5f8:	118cb03a 	or	r6,r2,r6
    e5fc:	300cc03a 	cmpne	r6,r6,zero
    e600:	398cb03a 	or	r6,r7,r6
    e604:	0005883a 	mov	r2,zero
    e608:	003f3706 	br	e2e8 <__subdf3+0x164>
    e60c:	80002a26 	beq	r16,zero,e6b8 <__subdf3+0x534>
    e610:	0101ffc4 	movi	r4,2047
    e614:	49006626 	beq	r9,r4,e7b0 <__subdf3+0x62c>
    e618:	0085c83a 	sub	r2,zero,r2
    e61c:	18c02034 	orhi	r3,r3,128
    e620:	01000e04 	movi	r4,56
    e624:	20807e16 	blt	r4,r2,e820 <__subdf3+0x69c>
    e628:	010007c4 	movi	r4,31
    e62c:	2080e716 	blt	r4,r2,e9cc <__subdf3+0x848>
    e630:	01000804 	movi	r4,32
    e634:	2089c83a 	sub	r4,r4,r2
    e638:	1914983a 	sll	r10,r3,r4
    e63c:	8890d83a 	srl	r8,r17,r2
    e640:	8908983a 	sll	r4,r17,r4
    e644:	1884d83a 	srl	r2,r3,r2
    e648:	5222b03a 	or	r17,r10,r8
    e64c:	2006c03a 	cmpne	r3,r4,zero
    e650:	88e2b03a 	or	r17,r17,r3
    e654:	3463c83a 	sub	r17,r6,r17
    e658:	2885c83a 	sub	r2,r5,r2
    e65c:	344d803a 	cmpltu	r6,r6,r17
    e660:	1187c83a 	sub	r3,r2,r6
    e664:	4821883a 	mov	r16,r9
    e668:	3825883a 	mov	r18,r7
    e66c:	003f2306 	br	e2fc <__subdf3+0x178>
    e670:	24d0b03a 	or	r8,r4,r19
    e674:	40001b1e 	bne	r8,zero,e6e4 <__subdf3+0x560>
    e678:	0005883a 	mov	r2,zero
    e67c:	0009883a 	mov	r4,zero
    e680:	0021883a 	mov	r16,zero
    e684:	003f4906 	br	e3ac <__subdf3+0x228>
    e688:	010007c4 	movi	r4,31
    e68c:	20803a16 	blt	r4,r2,e778 <__subdf3+0x5f4>
    e690:	01000804 	movi	r4,32
    e694:	2089c83a 	sub	r4,r4,r2
    e698:	2912983a 	sll	r9,r5,r4
    e69c:	3090d83a 	srl	r8,r6,r2
    e6a0:	3108983a 	sll	r4,r6,r4
    e6a4:	2884d83a 	srl	r2,r5,r2
    e6a8:	4a12b03a 	or	r9,r9,r8
    e6ac:	2008c03a 	cmpne	r4,r4,zero
    e6b0:	4912b03a 	or	r9,r9,r4
    e6b4:	003f4e06 	br	e3f0 <__subdf3+0x26c>
    e6b8:	1c48b03a 	or	r4,r3,r17
    e6bc:	20003c26 	beq	r4,zero,e7b0 <__subdf3+0x62c>
    e6c0:	0084303a 	nor	r2,zero,r2
    e6c4:	1000381e 	bne	r2,zero,e7a8 <__subdf3+0x624>
    e6c8:	3463c83a 	sub	r17,r6,r17
    e6cc:	28c5c83a 	sub	r2,r5,r3
    e6d0:	344d803a 	cmpltu	r6,r6,r17
    e6d4:	1187c83a 	sub	r3,r2,r6
    e6d8:	4821883a 	mov	r16,r9
    e6dc:	3825883a 	mov	r18,r7
    e6e0:	003f0606 	br	e2fc <__subdf3+0x178>
    e6e4:	2023883a 	mov	r17,r4
    e6e8:	003f0906 	br	e310 <__subdf3+0x18c>
    e6ec:	0101ffc4 	movi	r4,2047
    e6f0:	813f3a1e 	bne	r16,r4,e3dc <__subdf3+0x258>
    e6f4:	003ec406 	br	e208 <__subdf3+0x84>
    e6f8:	0005883a 	mov	r2,zero
    e6fc:	003fb106 	br	e5c4 <__subdf3+0x440>
    e700:	0005883a 	mov	r2,zero
    e704:	003fbc06 	br	e5f8 <__subdf3+0x474>
    e708:	1c44b03a 	or	r2,r3,r17
    e70c:	80008e1e 	bne	r16,zero,e948 <__subdf3+0x7c4>
    e710:	1000c826 	beq	r2,zero,ea34 <__subdf3+0x8b0>
    e714:	2984b03a 	or	r2,r5,r6
    e718:	103ebb26 	beq	r2,zero,e208 <__subdf3+0x84>
    e71c:	8989883a 	add	r4,r17,r6
    e720:	1945883a 	add	r2,r3,r5
    e724:	2447803a 	cmpltu	r3,r4,r17
    e728:	1887883a 	add	r3,r3,r2
    e72c:	1880202c 	andhi	r2,r3,128
    e730:	2023883a 	mov	r17,r4
    e734:	103f1626 	beq	r2,zero,e390 <__subdf3+0x20c>
    e738:	00bfe034 	movhi	r2,65408
    e73c:	10bfffc4 	addi	r2,r2,-1
    e740:	5021883a 	mov	r16,r10
    e744:	1886703a 	and	r3,r3,r2
    e748:	003eaf06 	br	e208 <__subdf3+0x84>
    e74c:	3825883a 	mov	r18,r7
    e750:	003f0f06 	br	e390 <__subdf3+0x20c>
    e754:	1c44b03a 	or	r2,r3,r17
    e758:	8000251e 	bne	r16,zero,e7f0 <__subdf3+0x66c>
    e75c:	1000661e 	bne	r2,zero,e8f8 <__subdf3+0x774>
    e760:	2990b03a 	or	r8,r5,r6
    e764:	40009626 	beq	r8,zero,e9c0 <__subdf3+0x83c>
    e768:	2807883a 	mov	r3,r5
    e76c:	3023883a 	mov	r17,r6
    e770:	3825883a 	mov	r18,r7
    e774:	003ea406 	br	e208 <__subdf3+0x84>
    e778:	127ff804 	addi	r9,r2,-32
    e77c:	01000804 	movi	r4,32
    e780:	2a52d83a 	srl	r9,r5,r9
    e784:	11008c26 	beq	r2,r4,e9b8 <__subdf3+0x834>
    e788:	01001004 	movi	r4,64
    e78c:	2085c83a 	sub	r2,r4,r2
    e790:	2884983a 	sll	r2,r5,r2
    e794:	118cb03a 	or	r6,r2,r6
    e798:	300cc03a 	cmpne	r6,r6,zero
    e79c:	4992b03a 	or	r9,r9,r6
    e7a0:	0005883a 	mov	r2,zero
    e7a4:	003f1206 	br	e3f0 <__subdf3+0x26c>
    e7a8:	0101ffc4 	movi	r4,2047
    e7ac:	493f9c1e 	bne	r9,r4,e620 <__subdf3+0x49c>
    e7b0:	2807883a 	mov	r3,r5
    e7b4:	3023883a 	mov	r17,r6
    e7b8:	4821883a 	mov	r16,r9
    e7bc:	3825883a 	mov	r18,r7
    e7c0:	003e9106 	br	e208 <__subdf3+0x84>
    e7c4:	80001f1e 	bne	r16,zero,e844 <__subdf3+0x6c0>
    e7c8:	1c48b03a 	or	r4,r3,r17
    e7cc:	20005a26 	beq	r4,zero,e938 <__subdf3+0x7b4>
    e7d0:	0084303a 	nor	r2,zero,r2
    e7d4:	1000561e 	bne	r2,zero,e930 <__subdf3+0x7ac>
    e7d8:	89a3883a 	add	r17,r17,r6
    e7dc:	1945883a 	add	r2,r3,r5
    e7e0:	898d803a 	cmpltu	r6,r17,r6
    e7e4:	3087883a 	add	r3,r6,r2
    e7e8:	4821883a 	mov	r16,r9
    e7ec:	003f0506 	br	e404 <__subdf3+0x280>
    e7f0:	10002b1e 	bne	r2,zero,e8a0 <__subdf3+0x71c>
    e7f4:	2984b03a 	or	r2,r5,r6
    e7f8:	10008026 	beq	r2,zero,e9fc <__subdf3+0x878>
    e7fc:	2807883a 	mov	r3,r5
    e800:	3023883a 	mov	r17,r6
    e804:	3825883a 	mov	r18,r7
    e808:	0401ffc4 	movi	r16,2047
    e80c:	003e7e06 	br	e208 <__subdf3+0x84>
    e810:	3809883a 	mov	r4,r7
    e814:	0011883a 	mov	r8,zero
    e818:	0005883a 	mov	r2,zero
    e81c:	003ee306 	br	e3ac <__subdf3+0x228>
    e820:	1c62b03a 	or	r17,r3,r17
    e824:	8822c03a 	cmpne	r17,r17,zero
    e828:	0005883a 	mov	r2,zero
    e82c:	003f8906 	br	e654 <__subdf3+0x4d0>
    e830:	3809883a 	mov	r4,r7
    e834:	4821883a 	mov	r16,r9
    e838:	0011883a 	mov	r8,zero
    e83c:	0005883a 	mov	r2,zero
    e840:	003eda06 	br	e3ac <__subdf3+0x228>
    e844:	0101ffc4 	movi	r4,2047
    e848:	49003b26 	beq	r9,r4,e938 <__subdf3+0x7b4>
    e84c:	0085c83a 	sub	r2,zero,r2
    e850:	18c02034 	orhi	r3,r3,128
    e854:	01000e04 	movi	r4,56
    e858:	20806e16 	blt	r4,r2,ea14 <__subdf3+0x890>
    e85c:	010007c4 	movi	r4,31
    e860:	20807716 	blt	r4,r2,ea40 <__subdf3+0x8bc>
    e864:	01000804 	movi	r4,32
    e868:	2089c83a 	sub	r4,r4,r2
    e86c:	1914983a 	sll	r10,r3,r4
    e870:	8890d83a 	srl	r8,r17,r2
    e874:	8908983a 	sll	r4,r17,r4
    e878:	1884d83a 	srl	r2,r3,r2
    e87c:	5222b03a 	or	r17,r10,r8
    e880:	2006c03a 	cmpne	r3,r4,zero
    e884:	88e2b03a 	or	r17,r17,r3
    e888:	89a3883a 	add	r17,r17,r6
    e88c:	1145883a 	add	r2,r2,r5
    e890:	898d803a 	cmpltu	r6,r17,r6
    e894:	3087883a 	add	r3,r6,r2
    e898:	4821883a 	mov	r16,r9
    e89c:	003ed906 	br	e404 <__subdf3+0x280>
    e8a0:	2984b03a 	or	r2,r5,r6
    e8a4:	10004226 	beq	r2,zero,e9b0 <__subdf3+0x82c>
    e8a8:	1808d0fa 	srli	r4,r3,3
    e8ac:	8822d0fa 	srli	r17,r17,3
    e8b0:	1806977a 	slli	r3,r3,29
    e8b4:	2080022c 	andhi	r2,r4,8
    e8b8:	1c62b03a 	or	r17,r3,r17
    e8bc:	10000826 	beq	r2,zero,e8e0 <__subdf3+0x75c>
    e8c0:	2812d0fa 	srli	r9,r5,3
    e8c4:	4880022c 	andhi	r2,r9,8
    e8c8:	1000051e 	bne	r2,zero,e8e0 <__subdf3+0x75c>
    e8cc:	300cd0fa 	srli	r6,r6,3
    e8d0:	2804977a 	slli	r2,r5,29
    e8d4:	4809883a 	mov	r4,r9
    e8d8:	3825883a 	mov	r18,r7
    e8dc:	11a2b03a 	or	r17,r2,r6
    e8e0:	8806d77a 	srli	r3,r17,29
    e8e4:	200890fa 	slli	r4,r4,3
    e8e8:	882290fa 	slli	r17,r17,3
    e8ec:	0401ffc4 	movi	r16,2047
    e8f0:	1906b03a 	or	r3,r3,r4
    e8f4:	003e4406 	br	e208 <__subdf3+0x84>
    e8f8:	2984b03a 	or	r2,r5,r6
    e8fc:	103e4226 	beq	r2,zero,e208 <__subdf3+0x84>
    e900:	8989c83a 	sub	r4,r17,r6
    e904:	8911803a 	cmpltu	r8,r17,r4
    e908:	1945c83a 	sub	r2,r3,r5
    e90c:	1205c83a 	sub	r2,r2,r8
    e910:	1200202c 	andhi	r8,r2,128
    e914:	403e9a26 	beq	r8,zero,e380 <__subdf3+0x1fc>
    e918:	3463c83a 	sub	r17,r6,r17
    e91c:	28c5c83a 	sub	r2,r5,r3
    e920:	344d803a 	cmpltu	r6,r6,r17
    e924:	1187c83a 	sub	r3,r2,r6
    e928:	3825883a 	mov	r18,r7
    e92c:	003e3606 	br	e208 <__subdf3+0x84>
    e930:	0101ffc4 	movi	r4,2047
    e934:	493fc71e 	bne	r9,r4,e854 <__subdf3+0x6d0>
    e938:	2807883a 	mov	r3,r5
    e93c:	3023883a 	mov	r17,r6
    e940:	4821883a 	mov	r16,r9
    e944:	003e3006 	br	e208 <__subdf3+0x84>
    e948:	10003626 	beq	r2,zero,ea24 <__subdf3+0x8a0>
    e94c:	2984b03a 	or	r2,r5,r6
    e950:	10001726 	beq	r2,zero,e9b0 <__subdf3+0x82c>
    e954:	1808d0fa 	srli	r4,r3,3
    e958:	8822d0fa 	srli	r17,r17,3
    e95c:	1806977a 	slli	r3,r3,29
    e960:	2080022c 	andhi	r2,r4,8
    e964:	1c62b03a 	or	r17,r3,r17
    e968:	10000726 	beq	r2,zero,e988 <__subdf3+0x804>
    e96c:	2812d0fa 	srli	r9,r5,3
    e970:	4880022c 	andhi	r2,r9,8
    e974:	1000041e 	bne	r2,zero,e988 <__subdf3+0x804>
    e978:	300cd0fa 	srli	r6,r6,3
    e97c:	2804977a 	slli	r2,r5,29
    e980:	4809883a 	mov	r4,r9
    e984:	11a2b03a 	or	r17,r2,r6
    e988:	8806d77a 	srli	r3,r17,29
    e98c:	200890fa 	slli	r4,r4,3
    e990:	882290fa 	slli	r17,r17,3
    e994:	3825883a 	mov	r18,r7
    e998:	1906b03a 	or	r3,r3,r4
    e99c:	0401ffc4 	movi	r16,2047
    e9a0:	003e1906 	br	e208 <__subdf3+0x84>
    e9a4:	000b883a 	mov	r5,zero
    e9a8:	0005883a 	mov	r2,zero
    e9ac:	003e2e06 	br	e268 <__subdf3+0xe4>
    e9b0:	0401ffc4 	movi	r16,2047
    e9b4:	003e1406 	br	e208 <__subdf3+0x84>
    e9b8:	0005883a 	mov	r2,zero
    e9bc:	003f7506 	br	e794 <__subdf3+0x610>
    e9c0:	0005883a 	mov	r2,zero
    e9c4:	0009883a 	mov	r4,zero
    e9c8:	003e7806 	br	e3ac <__subdf3+0x228>
    e9cc:	123ff804 	addi	r8,r2,-32
    e9d0:	01000804 	movi	r4,32
    e9d4:	1a10d83a 	srl	r8,r3,r8
    e9d8:	11002526 	beq	r2,r4,ea70 <__subdf3+0x8ec>
    e9dc:	01001004 	movi	r4,64
    e9e0:	2085c83a 	sub	r2,r4,r2
    e9e4:	1884983a 	sll	r2,r3,r2
    e9e8:	1444b03a 	or	r2,r2,r17
    e9ec:	1004c03a 	cmpne	r2,r2,zero
    e9f0:	40a2b03a 	or	r17,r8,r2
    e9f4:	0005883a 	mov	r2,zero
    e9f8:	003f1606 	br	e654 <__subdf3+0x4d0>
    e9fc:	02000434 	movhi	r8,16
    ea00:	0009883a 	mov	r4,zero
    ea04:	423fffc4 	addi	r8,r8,-1
    ea08:	00bfffc4 	movi	r2,-1
    ea0c:	0401ffc4 	movi	r16,2047
    ea10:	003e6606 	br	e3ac <__subdf3+0x228>
    ea14:	1c62b03a 	or	r17,r3,r17
    ea18:	8822c03a 	cmpne	r17,r17,zero
    ea1c:	0005883a 	mov	r2,zero
    ea20:	003f9906 	br	e888 <__subdf3+0x704>
    ea24:	2807883a 	mov	r3,r5
    ea28:	3023883a 	mov	r17,r6
    ea2c:	0401ffc4 	movi	r16,2047
    ea30:	003df506 	br	e208 <__subdf3+0x84>
    ea34:	2807883a 	mov	r3,r5
    ea38:	3023883a 	mov	r17,r6
    ea3c:	003df206 	br	e208 <__subdf3+0x84>
    ea40:	123ff804 	addi	r8,r2,-32
    ea44:	01000804 	movi	r4,32
    ea48:	1a10d83a 	srl	r8,r3,r8
    ea4c:	11000a26 	beq	r2,r4,ea78 <__subdf3+0x8f4>
    ea50:	01001004 	movi	r4,64
    ea54:	2085c83a 	sub	r2,r4,r2
    ea58:	1884983a 	sll	r2,r3,r2
    ea5c:	1444b03a 	or	r2,r2,r17
    ea60:	1004c03a 	cmpne	r2,r2,zero
    ea64:	40a2b03a 	or	r17,r8,r2
    ea68:	0005883a 	mov	r2,zero
    ea6c:	003f8606 	br	e888 <__subdf3+0x704>
    ea70:	0005883a 	mov	r2,zero
    ea74:	003fdc06 	br	e9e8 <__subdf3+0x864>
    ea78:	0005883a 	mov	r2,zero
    ea7c:	003ff706 	br	ea5c <__subdf3+0x8d8>

0000ea80 <__fixdfsi>:
    ea80:	280cd53a 	srli	r6,r5,20
    ea84:	00c00434 	movhi	r3,16
    ea88:	18ffffc4 	addi	r3,r3,-1
    ea8c:	3181ffcc 	andi	r6,r6,2047
    ea90:	01c0ff84 	movi	r7,1022
    ea94:	28c6703a 	and	r3,r5,r3
    ea98:	280ad7fa 	srli	r5,r5,31
    ea9c:	3980120e 	bge	r7,r6,eae8 <__fixdfsi+0x68>
    eaa0:	00810744 	movi	r2,1053
    eaa4:	11800c16 	blt	r2,r6,ead8 <__fixdfsi+0x58>
    eaa8:	00810cc4 	movi	r2,1075
    eaac:	1185c83a 	sub	r2,r2,r6
    eab0:	01c007c4 	movi	r7,31
    eab4:	18c00434 	orhi	r3,r3,16
    eab8:	38800d16 	blt	r7,r2,eaf0 <__fixdfsi+0x70>
    eabc:	31befb44 	addi	r6,r6,-1043
    eac0:	2084d83a 	srl	r2,r4,r2
    eac4:	1986983a 	sll	r3,r3,r6
    eac8:	1884b03a 	or	r2,r3,r2
    eacc:	28000726 	beq	r5,zero,eaec <__fixdfsi+0x6c>
    ead0:	0085c83a 	sub	r2,zero,r2
    ead4:	f800283a 	ret
    ead8:	00a00034 	movhi	r2,32768
    eadc:	10bfffc4 	addi	r2,r2,-1
    eae0:	2885883a 	add	r2,r5,r2
    eae4:	f800283a 	ret
    eae8:	0005883a 	mov	r2,zero
    eaec:	f800283a 	ret
    eaf0:	008104c4 	movi	r2,1043
    eaf4:	1185c83a 	sub	r2,r2,r6
    eaf8:	1884d83a 	srl	r2,r3,r2
    eafc:	003ff306 	br	eacc <__fixdfsi+0x4c>

0000eb00 <__floatsidf>:
    eb00:	defffd04 	addi	sp,sp,-12
    eb04:	dfc00215 	stw	ra,8(sp)
    eb08:	dc400115 	stw	r17,4(sp)
    eb0c:	dc000015 	stw	r16,0(sp)
    eb10:	20002b26 	beq	r4,zero,ebc0 <__floatsidf+0xc0>
    eb14:	2023883a 	mov	r17,r4
    eb18:	2020d7fa 	srli	r16,r4,31
    eb1c:	20002d16 	blt	r4,zero,ebd4 <__floatsidf+0xd4>
    eb20:	8809883a 	mov	r4,r17
    eb24:	000ec840 	call	ec84 <__clzsi2>
    eb28:	01410784 	movi	r5,1054
    eb2c:	288bc83a 	sub	r5,r5,r2
    eb30:	01010cc4 	movi	r4,1075
    eb34:	2149c83a 	sub	r4,r4,r5
    eb38:	00c007c4 	movi	r3,31
    eb3c:	1900160e 	bge	r3,r4,eb98 <__floatsidf+0x98>
    eb40:	00c104c4 	movi	r3,1043
    eb44:	1947c83a 	sub	r3,r3,r5
    eb48:	88c6983a 	sll	r3,r17,r3
    eb4c:	00800434 	movhi	r2,16
    eb50:	10bfffc4 	addi	r2,r2,-1
    eb54:	1886703a 	and	r3,r3,r2
    eb58:	2941ffcc 	andi	r5,r5,2047
    eb5c:	800d883a 	mov	r6,r16
    eb60:	0005883a 	mov	r2,zero
    eb64:	280a953a 	slli	r5,r5,20
    eb68:	31803fcc 	andi	r6,r6,255
    eb6c:	01000434 	movhi	r4,16
    eb70:	300c97fa 	slli	r6,r6,31
    eb74:	213fffc4 	addi	r4,r4,-1
    eb78:	1906703a 	and	r3,r3,r4
    eb7c:	1946b03a 	or	r3,r3,r5
    eb80:	1986b03a 	or	r3,r3,r6
    eb84:	dfc00217 	ldw	ra,8(sp)
    eb88:	dc400117 	ldw	r17,4(sp)
    eb8c:	dc000017 	ldw	r16,0(sp)
    eb90:	dec00304 	addi	sp,sp,12
    eb94:	f800283a 	ret
    eb98:	00c002c4 	movi	r3,11
    eb9c:	1887c83a 	sub	r3,r3,r2
    eba0:	88c6d83a 	srl	r3,r17,r3
    eba4:	8904983a 	sll	r2,r17,r4
    eba8:	01000434 	movhi	r4,16
    ebac:	213fffc4 	addi	r4,r4,-1
    ebb0:	2941ffcc 	andi	r5,r5,2047
    ebb4:	1906703a 	and	r3,r3,r4
    ebb8:	800d883a 	mov	r6,r16
    ebbc:	003fe906 	br	eb64 <__floatsidf+0x64>
    ebc0:	000d883a 	mov	r6,zero
    ebc4:	000b883a 	mov	r5,zero
    ebc8:	0007883a 	mov	r3,zero
    ebcc:	0005883a 	mov	r2,zero
    ebd0:	003fe406 	br	eb64 <__floatsidf+0x64>
    ebd4:	0123c83a 	sub	r17,zero,r4
    ebd8:	003fd106 	br	eb20 <__floatsidf+0x20>

0000ebdc <__floatunsidf>:
    ebdc:	defffe04 	addi	sp,sp,-8
    ebe0:	dc000015 	stw	r16,0(sp)
    ebe4:	dfc00115 	stw	ra,4(sp)
    ebe8:	2021883a 	mov	r16,r4
    ebec:	20002226 	beq	r4,zero,ec78 <__floatunsidf+0x9c>
    ebf0:	000ec840 	call	ec84 <__clzsi2>
    ebf4:	01010784 	movi	r4,1054
    ebf8:	2089c83a 	sub	r4,r4,r2
    ebfc:	01810cc4 	movi	r6,1075
    ec00:	310dc83a 	sub	r6,r6,r4
    ec04:	00c007c4 	movi	r3,31
    ec08:	1980120e 	bge	r3,r6,ec54 <__floatunsidf+0x78>
    ec0c:	00c104c4 	movi	r3,1043
    ec10:	1907c83a 	sub	r3,r3,r4
    ec14:	80ca983a 	sll	r5,r16,r3
    ec18:	00800434 	movhi	r2,16
    ec1c:	10bfffc4 	addi	r2,r2,-1
    ec20:	2101ffcc 	andi	r4,r4,2047
    ec24:	0021883a 	mov	r16,zero
    ec28:	288a703a 	and	r5,r5,r2
    ec2c:	2008953a 	slli	r4,r4,20
    ec30:	00c00434 	movhi	r3,16
    ec34:	18ffffc4 	addi	r3,r3,-1
    ec38:	28c6703a 	and	r3,r5,r3
    ec3c:	8005883a 	mov	r2,r16
    ec40:	1906b03a 	or	r3,r3,r4
    ec44:	dfc00117 	ldw	ra,4(sp)
    ec48:	dc000017 	ldw	r16,0(sp)
    ec4c:	dec00204 	addi	sp,sp,8
    ec50:	f800283a 	ret
    ec54:	00c002c4 	movi	r3,11
    ec58:	188bc83a 	sub	r5,r3,r2
    ec5c:	814ad83a 	srl	r5,r16,r5
    ec60:	00c00434 	movhi	r3,16
    ec64:	18ffffc4 	addi	r3,r3,-1
    ec68:	81a0983a 	sll	r16,r16,r6
    ec6c:	2101ffcc 	andi	r4,r4,2047
    ec70:	28ca703a 	and	r5,r5,r3
    ec74:	003fed06 	br	ec2c <__floatunsidf+0x50>
    ec78:	0009883a 	mov	r4,zero
    ec7c:	000b883a 	mov	r5,zero
    ec80:	003fea06 	br	ec2c <__floatunsidf+0x50>

0000ec84 <__clzsi2>:
    ec84:	00bfffd4 	movui	r2,65535
    ec88:	11000536 	bltu	r2,r4,eca0 <__clzsi2+0x1c>
    ec8c:	00803fc4 	movi	r2,255
    ec90:	11000f36 	bltu	r2,r4,ecd0 <__clzsi2+0x4c>
    ec94:	00800804 	movi	r2,32
    ec98:	0007883a 	mov	r3,zero
    ec9c:	00000506 	br	ecb4 <__clzsi2+0x30>
    eca0:	00804034 	movhi	r2,256
    eca4:	10bfffc4 	addi	r2,r2,-1
    eca8:	11000c2e 	bgeu	r2,r4,ecdc <__clzsi2+0x58>
    ecac:	00800204 	movi	r2,8
    ecb0:	00c00604 	movi	r3,24
    ecb4:	20c8d83a 	srl	r4,r4,r3
    ecb8:	00c00074 	movhi	r3,1
    ecbc:	18c76904 	addi	r3,r3,7588
    ecc0:	1909883a 	add	r4,r3,r4
    ecc4:	20c00003 	ldbu	r3,0(r4)
    ecc8:	10c5c83a 	sub	r2,r2,r3
    eccc:	f800283a 	ret
    ecd0:	00800604 	movi	r2,24
    ecd4:	00c00204 	movi	r3,8
    ecd8:	003ff606 	br	ecb4 <__clzsi2+0x30>
    ecdc:	00800404 	movi	r2,16
    ece0:	1007883a 	mov	r3,r2
    ece4:	003ff306 	br	ecb4 <__clzsi2+0x30>

0000ece8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ece8:	defffe04 	addi	sp,sp,-8
    ecec:	dfc00115 	stw	ra,4(sp)
    ecf0:	df000015 	stw	fp,0(sp)
    ecf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ecf8:	d0a00b17 	ldw	r2,-32724(gp)
    ecfc:	10000326 	beq	r2,zero,ed0c <alt_get_errno+0x24>
    ed00:	d0a00b17 	ldw	r2,-32724(gp)
    ed04:	103ee83a 	callr	r2
    ed08:	00000106 	br	ed10 <alt_get_errno+0x28>
    ed0c:	d0a6d804 	addi	r2,gp,-25760
}
    ed10:	e037883a 	mov	sp,fp
    ed14:	dfc00117 	ldw	ra,4(sp)
    ed18:	df000017 	ldw	fp,0(sp)
    ed1c:	dec00204 	addi	sp,sp,8
    ed20:	f800283a 	ret

0000ed24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ed24:	defffb04 	addi	sp,sp,-20
    ed28:	dfc00415 	stw	ra,16(sp)
    ed2c:	df000315 	stw	fp,12(sp)
    ed30:	df000304 	addi	fp,sp,12
    ed34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ed38:	e0bfff17 	ldw	r2,-4(fp)
    ed3c:	10000616 	blt	r2,zero,ed58 <close+0x34>
    ed40:	e0bfff17 	ldw	r2,-4(fp)
    ed44:	10c00324 	muli	r3,r2,12
    ed48:	00800074 	movhi	r2,1
    ed4c:	1089e704 	addi	r2,r2,10140
    ed50:	1885883a 	add	r2,r3,r2
    ed54:	00000106 	br	ed5c <close+0x38>
    ed58:	0005883a 	mov	r2,zero
    ed5c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ed60:	e0bffd17 	ldw	r2,-12(fp)
    ed64:	10001926 	beq	r2,zero,edcc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ed68:	e0bffd17 	ldw	r2,-12(fp)
    ed6c:	10800017 	ldw	r2,0(r2)
    ed70:	10800417 	ldw	r2,16(r2)
    ed74:	10000626 	beq	r2,zero,ed90 <close+0x6c>
    ed78:	e0bffd17 	ldw	r2,-12(fp)
    ed7c:	10800017 	ldw	r2,0(r2)
    ed80:	10800417 	ldw	r2,16(r2)
    ed84:	e13ffd17 	ldw	r4,-12(fp)
    ed88:	103ee83a 	callr	r2
    ed8c:	00000106 	br	ed94 <close+0x70>
    ed90:	0005883a 	mov	r2,zero
    ed94:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ed98:	e13fff17 	ldw	r4,-4(fp)
    ed9c:	000f3e40 	call	f3e4 <alt_release_fd>
    if (rval < 0)
    eda0:	e0bffe17 	ldw	r2,-8(fp)
    eda4:	1000070e 	bge	r2,zero,edc4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    eda8:	000ece80 	call	ece8 <alt_get_errno>
    edac:	1007883a 	mov	r3,r2
    edb0:	e0bffe17 	ldw	r2,-8(fp)
    edb4:	0085c83a 	sub	r2,zero,r2
    edb8:	18800015 	stw	r2,0(r3)
      return -1;
    edbc:	00bfffc4 	movi	r2,-1
    edc0:	00000706 	br	ede0 <close+0xbc>
    }
    return 0;
    edc4:	0005883a 	mov	r2,zero
    edc8:	00000506 	br	ede0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    edcc:	000ece80 	call	ece8 <alt_get_errno>
    edd0:	1007883a 	mov	r3,r2
    edd4:	00801444 	movi	r2,81
    edd8:	18800015 	stw	r2,0(r3)
    return -1;
    eddc:	00bfffc4 	movi	r2,-1
  }
}
    ede0:	e037883a 	mov	sp,fp
    ede4:	dfc00117 	ldw	ra,4(sp)
    ede8:	df000017 	ldw	fp,0(sp)
    edec:	dec00204 	addi	sp,sp,8
    edf0:	f800283a 	ret

0000edf4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    edf4:	defffc04 	addi	sp,sp,-16
    edf8:	df000315 	stw	fp,12(sp)
    edfc:	df000304 	addi	fp,sp,12
    ee00:	e13ffd15 	stw	r4,-12(fp)
    ee04:	e17ffe15 	stw	r5,-8(fp)
    ee08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ee0c:	e0bfff17 	ldw	r2,-4(fp)
}
    ee10:	e037883a 	mov	sp,fp
    ee14:	df000017 	ldw	fp,0(sp)
    ee18:	dec00104 	addi	sp,sp,4
    ee1c:	f800283a 	ret

0000ee20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee20:	defffe04 	addi	sp,sp,-8
    ee24:	dfc00115 	stw	ra,4(sp)
    ee28:	df000015 	stw	fp,0(sp)
    ee2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee30:	d0a00b17 	ldw	r2,-32724(gp)
    ee34:	10000326 	beq	r2,zero,ee44 <alt_get_errno+0x24>
    ee38:	d0a00b17 	ldw	r2,-32724(gp)
    ee3c:	103ee83a 	callr	r2
    ee40:	00000106 	br	ee48 <alt_get_errno+0x28>
    ee44:	d0a6d804 	addi	r2,gp,-25760
}
    ee48:	e037883a 	mov	sp,fp
    ee4c:	dfc00117 	ldw	ra,4(sp)
    ee50:	df000017 	ldw	fp,0(sp)
    ee54:	dec00204 	addi	sp,sp,8
    ee58:	f800283a 	ret

0000ee5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ee5c:	defffb04 	addi	sp,sp,-20
    ee60:	dfc00415 	stw	ra,16(sp)
    ee64:	df000315 	stw	fp,12(sp)
    ee68:	df000304 	addi	fp,sp,12
    ee6c:	e13ffe15 	stw	r4,-8(fp)
    ee70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee74:	e0bffe17 	ldw	r2,-8(fp)
    ee78:	10000616 	blt	r2,zero,ee94 <fstat+0x38>
    ee7c:	e0bffe17 	ldw	r2,-8(fp)
    ee80:	10c00324 	muli	r3,r2,12
    ee84:	00800074 	movhi	r2,1
    ee88:	1089e704 	addi	r2,r2,10140
    ee8c:	1885883a 	add	r2,r3,r2
    ee90:	00000106 	br	ee98 <fstat+0x3c>
    ee94:	0005883a 	mov	r2,zero
    ee98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ee9c:	e0bffd17 	ldw	r2,-12(fp)
    eea0:	10001026 	beq	r2,zero,eee4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    eea4:	e0bffd17 	ldw	r2,-12(fp)
    eea8:	10800017 	ldw	r2,0(r2)
    eeac:	10800817 	ldw	r2,32(r2)
    eeb0:	10000726 	beq	r2,zero,eed0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    eeb4:	e0bffd17 	ldw	r2,-12(fp)
    eeb8:	10800017 	ldw	r2,0(r2)
    eebc:	10800817 	ldw	r2,32(r2)
    eec0:	e17fff17 	ldw	r5,-4(fp)
    eec4:	e13ffd17 	ldw	r4,-12(fp)
    eec8:	103ee83a 	callr	r2
    eecc:	00000a06 	br	eef8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    eed0:	e0bfff17 	ldw	r2,-4(fp)
    eed4:	00c80004 	movi	r3,8192
    eed8:	10c00115 	stw	r3,4(r2)
      return 0;
    eedc:	0005883a 	mov	r2,zero
    eee0:	00000506 	br	eef8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eee4:	000ee200 	call	ee20 <alt_get_errno>
    eee8:	1007883a 	mov	r3,r2
    eeec:	00801444 	movi	r2,81
    eef0:	18800015 	stw	r2,0(r3)
    return -1;
    eef4:	00bfffc4 	movi	r2,-1
  }
}
    eef8:	e037883a 	mov	sp,fp
    eefc:	dfc00117 	ldw	ra,4(sp)
    ef00:	df000017 	ldw	fp,0(sp)
    ef04:	dec00204 	addi	sp,sp,8
    ef08:	f800283a 	ret

0000ef0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef0c:	defffe04 	addi	sp,sp,-8
    ef10:	dfc00115 	stw	ra,4(sp)
    ef14:	df000015 	stw	fp,0(sp)
    ef18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef1c:	d0a00b17 	ldw	r2,-32724(gp)
    ef20:	10000326 	beq	r2,zero,ef30 <alt_get_errno+0x24>
    ef24:	d0a00b17 	ldw	r2,-32724(gp)
    ef28:	103ee83a 	callr	r2
    ef2c:	00000106 	br	ef34 <alt_get_errno+0x28>
    ef30:	d0a6d804 	addi	r2,gp,-25760
}
    ef34:	e037883a 	mov	sp,fp
    ef38:	dfc00117 	ldw	ra,4(sp)
    ef3c:	df000017 	ldw	fp,0(sp)
    ef40:	dec00204 	addi	sp,sp,8
    ef44:	f800283a 	ret

0000ef48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ef48:	deffed04 	addi	sp,sp,-76
    ef4c:	dfc01215 	stw	ra,72(sp)
    ef50:	df001115 	stw	fp,68(sp)
    ef54:	df001104 	addi	fp,sp,68
    ef58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ef5c:	e0bfff17 	ldw	r2,-4(fp)
    ef60:	10000616 	blt	r2,zero,ef7c <isatty+0x34>
    ef64:	e0bfff17 	ldw	r2,-4(fp)
    ef68:	10c00324 	muli	r3,r2,12
    ef6c:	00800074 	movhi	r2,1
    ef70:	1089e704 	addi	r2,r2,10140
    ef74:	1885883a 	add	r2,r3,r2
    ef78:	00000106 	br	ef80 <isatty+0x38>
    ef7c:	0005883a 	mov	r2,zero
    ef80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ef84:	e0bfef17 	ldw	r2,-68(fp)
    ef88:	10000e26 	beq	r2,zero,efc4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ef8c:	e0bfef17 	ldw	r2,-68(fp)
    ef90:	10800017 	ldw	r2,0(r2)
    ef94:	10800817 	ldw	r2,32(r2)
    ef98:	1000021e 	bne	r2,zero,efa4 <isatty+0x5c>
    {
      return 1;
    ef9c:	00800044 	movi	r2,1
    efa0:	00000d06 	br	efd8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    efa4:	e0bff004 	addi	r2,fp,-64
    efa8:	100b883a 	mov	r5,r2
    efac:	e13fff17 	ldw	r4,-4(fp)
    efb0:	000ee5c0 	call	ee5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    efb4:	e0bff117 	ldw	r2,-60(fp)
    efb8:	10880020 	cmpeqi	r2,r2,8192
    efbc:	10803fcc 	andi	r2,r2,255
    efc0:	00000506 	br	efd8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    efc4:	000ef0c0 	call	ef0c <alt_get_errno>
    efc8:	1007883a 	mov	r3,r2
    efcc:	00801444 	movi	r2,81
    efd0:	18800015 	stw	r2,0(r3)
    return 0;
    efd4:	0005883a 	mov	r2,zero
  }
}
    efd8:	e037883a 	mov	sp,fp
    efdc:	dfc00117 	ldw	ra,4(sp)
    efe0:	df000017 	ldw	fp,0(sp)
    efe4:	dec00204 	addi	sp,sp,8
    efe8:	f800283a 	ret

0000efec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    efec:	defffc04 	addi	sp,sp,-16
    eff0:	df000315 	stw	fp,12(sp)
    eff4:	df000304 	addi	fp,sp,12
    eff8:	e13ffd15 	stw	r4,-12(fp)
    effc:	e17ffe15 	stw	r5,-8(fp)
    f000:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f004:	e0fffe17 	ldw	r3,-8(fp)
    f008:	e0bffd17 	ldw	r2,-12(fp)
    f00c:	18800c26 	beq	r3,r2,f040 <alt_load_section+0x54>
  {
    while( to != end )
    f010:	00000806 	br	f034 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f014:	e0bffe17 	ldw	r2,-8(fp)
    f018:	10c00104 	addi	r3,r2,4
    f01c:	e0fffe15 	stw	r3,-8(fp)
    f020:	e0fffd17 	ldw	r3,-12(fp)
    f024:	19000104 	addi	r4,r3,4
    f028:	e13ffd15 	stw	r4,-12(fp)
    f02c:	18c00017 	ldw	r3,0(r3)
    f030:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f034:	e0fffe17 	ldw	r3,-8(fp)
    f038:	e0bfff17 	ldw	r2,-4(fp)
    f03c:	18bff51e 	bne	r3,r2,f014 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    f040:	0001883a 	nop
    f044:	e037883a 	mov	sp,fp
    f048:	df000017 	ldw	fp,0(sp)
    f04c:	dec00104 	addi	sp,sp,4
    f050:	f800283a 	ret

0000f054 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f054:	defffe04 	addi	sp,sp,-8
    f058:	dfc00115 	stw	ra,4(sp)
    f05c:	df000015 	stw	fp,0(sp)
    f060:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f064:	01800074 	movhi	r6,1
    f068:	318e6f04 	addi	r6,r6,14780
    f06c:	01400074 	movhi	r5,1
    f070:	2947b404 	addi	r5,r5,7888
    f074:	01000074 	movhi	r4,1
    f078:	210e6f04 	addi	r4,r4,14780
    f07c:	000efec0 	call	efec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f080:	01800034 	movhi	r6,0
    f084:	31809104 	addi	r6,r6,580
    f088:	01400034 	movhi	r5,0
    f08c:	29400804 	addi	r5,r5,32
    f090:	01000034 	movhi	r4,0
    f094:	21000804 	addi	r4,r4,32
    f098:	000efec0 	call	efec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f09c:	01800074 	movhi	r6,1
    f0a0:	3187b404 	addi	r6,r6,7888
    f0a4:	01400074 	movhi	r5,1
    f0a8:	2945d404 	addi	r5,r5,5968
    f0ac:	01000074 	movhi	r4,1
    f0b0:	2105d404 	addi	r4,r4,5968
    f0b4:	000efec0 	call	efec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f0b8:	001063c0 	call	1063c <alt_dcache_flush_all>
  alt_icache_flush_all();
    f0bc:	00108240 	call	10824 <alt_icache_flush_all>
}
    f0c0:	0001883a 	nop
    f0c4:	e037883a 	mov	sp,fp
    f0c8:	dfc00117 	ldw	ra,4(sp)
    f0cc:	df000017 	ldw	fp,0(sp)
    f0d0:	dec00204 	addi	sp,sp,8
    f0d4:	f800283a 	ret

0000f0d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f0d8:	defffe04 	addi	sp,sp,-8
    f0dc:	dfc00115 	stw	ra,4(sp)
    f0e0:	df000015 	stw	fp,0(sp)
    f0e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f0e8:	d0a00b17 	ldw	r2,-32724(gp)
    f0ec:	10000326 	beq	r2,zero,f0fc <alt_get_errno+0x24>
    f0f0:	d0a00b17 	ldw	r2,-32724(gp)
    f0f4:	103ee83a 	callr	r2
    f0f8:	00000106 	br	f100 <alt_get_errno+0x28>
    f0fc:	d0a6d804 	addi	r2,gp,-25760
}
    f100:	e037883a 	mov	sp,fp
    f104:	dfc00117 	ldw	ra,4(sp)
    f108:	df000017 	ldw	fp,0(sp)
    f10c:	dec00204 	addi	sp,sp,8
    f110:	f800283a 	ret

0000f114 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f114:	defff904 	addi	sp,sp,-28
    f118:	dfc00615 	stw	ra,24(sp)
    f11c:	df000515 	stw	fp,20(sp)
    f120:	df000504 	addi	fp,sp,20
    f124:	e13ffd15 	stw	r4,-12(fp)
    f128:	e17ffe15 	stw	r5,-8(fp)
    f12c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f130:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f134:	e0bffd17 	ldw	r2,-12(fp)
    f138:	10000616 	blt	r2,zero,f154 <lseek+0x40>
    f13c:	e0bffd17 	ldw	r2,-12(fp)
    f140:	10c00324 	muli	r3,r2,12
    f144:	00800074 	movhi	r2,1
    f148:	1089e704 	addi	r2,r2,10140
    f14c:	1885883a 	add	r2,r3,r2
    f150:	00000106 	br	f158 <lseek+0x44>
    f154:	0005883a 	mov	r2,zero
    f158:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f15c:	e0bffc17 	ldw	r2,-16(fp)
    f160:	10001026 	beq	r2,zero,f1a4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f164:	e0bffc17 	ldw	r2,-16(fp)
    f168:	10800017 	ldw	r2,0(r2)
    f16c:	10800717 	ldw	r2,28(r2)
    f170:	10000926 	beq	r2,zero,f198 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f174:	e0bffc17 	ldw	r2,-16(fp)
    f178:	10800017 	ldw	r2,0(r2)
    f17c:	10800717 	ldw	r2,28(r2)
    f180:	e1bfff17 	ldw	r6,-4(fp)
    f184:	e17ffe17 	ldw	r5,-8(fp)
    f188:	e13ffc17 	ldw	r4,-16(fp)
    f18c:	103ee83a 	callr	r2
    f190:	e0bffb15 	stw	r2,-20(fp)
    f194:	00000506 	br	f1ac <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f198:	00bfde84 	movi	r2,-134
    f19c:	e0bffb15 	stw	r2,-20(fp)
    f1a0:	00000206 	br	f1ac <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f1a4:	00bfebc4 	movi	r2,-81
    f1a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f1ac:	e0bffb17 	ldw	r2,-20(fp)
    f1b0:	1000070e 	bge	r2,zero,f1d0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f1b4:	000f0d80 	call	f0d8 <alt_get_errno>
    f1b8:	1007883a 	mov	r3,r2
    f1bc:	e0bffb17 	ldw	r2,-20(fp)
    f1c0:	0085c83a 	sub	r2,zero,r2
    f1c4:	18800015 	stw	r2,0(r3)
    rc = -1;
    f1c8:	00bfffc4 	movi	r2,-1
    f1cc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f1d0:	e0bffb17 	ldw	r2,-20(fp)
}
    f1d4:	e037883a 	mov	sp,fp
    f1d8:	dfc00117 	ldw	ra,4(sp)
    f1dc:	df000017 	ldw	fp,0(sp)
    f1e0:	dec00204 	addi	sp,sp,8
    f1e4:	f800283a 	ret

0000f1e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f1e8:	defffd04 	addi	sp,sp,-12
    f1ec:	dfc00215 	stw	ra,8(sp)
    f1f0:	df000115 	stw	fp,4(sp)
    f1f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f1f8:	0009883a 	mov	r4,zero
    f1fc:	000f6900 	call	f690 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f200:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f204:	000f6c80 	call	f6c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f208:	01800074 	movhi	r6,1
    f20c:	3187ac04 	addi	r6,r6,7856
    f210:	01400074 	movhi	r5,1
    f214:	2947ac04 	addi	r5,r5,7856
    f218:	01000074 	movhi	r4,1
    f21c:	2107ac04 	addi	r4,r4,7856
    f220:	0010bbc0 	call	10bbc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f224:	00107640 	call	10764 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f228:	01000074 	movhi	r4,1
    f22c:	2101f104 	addi	r4,r4,1988
    f230:	00113bc0 	call	113bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f234:	d0a6dc17 	ldw	r2,-25744(gp)
    f238:	d0e6dd17 	ldw	r3,-25740(gp)
    f23c:	d126de17 	ldw	r4,-25736(gp)
    f240:	200d883a 	mov	r6,r4
    f244:	180b883a 	mov	r5,r3
    f248:	1009883a 	mov	r4,r2
    f24c:	0000f1c0 	call	f1c <main>
    f250:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f254:	01000044 	movi	r4,1
    f258:	000ed240 	call	ed24 <close>
  exit (result);
    f25c:	e13fff17 	ldw	r4,-4(fp)
    f260:	00113d00 	call	113d0 <exit>

0000f264 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f264:	defffe04 	addi	sp,sp,-8
    f268:	df000115 	stw	fp,4(sp)
    f26c:	df000104 	addi	fp,sp,4
    f270:	e13fff15 	stw	r4,-4(fp)
}
    f274:	0001883a 	nop
    f278:	e037883a 	mov	sp,fp
    f27c:	df000017 	ldw	fp,0(sp)
    f280:	dec00104 	addi	sp,sp,4
    f284:	f800283a 	ret

0000f288 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f288:	defffe04 	addi	sp,sp,-8
    f28c:	df000115 	stw	fp,4(sp)
    f290:	df000104 	addi	fp,sp,4
    f294:	e13fff15 	stw	r4,-4(fp)
}
    f298:	0001883a 	nop
    f29c:	e037883a 	mov	sp,fp
    f2a0:	df000017 	ldw	fp,0(sp)
    f2a4:	dec00104 	addi	sp,sp,4
    f2a8:	f800283a 	ret

0000f2ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2ac:	defffe04 	addi	sp,sp,-8
    f2b0:	dfc00115 	stw	ra,4(sp)
    f2b4:	df000015 	stw	fp,0(sp)
    f2b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2bc:	d0a00b17 	ldw	r2,-32724(gp)
    f2c0:	10000326 	beq	r2,zero,f2d0 <alt_get_errno+0x24>
    f2c4:	d0a00b17 	ldw	r2,-32724(gp)
    f2c8:	103ee83a 	callr	r2
    f2cc:	00000106 	br	f2d4 <alt_get_errno+0x28>
    f2d0:	d0a6d804 	addi	r2,gp,-25760
}
    f2d4:	e037883a 	mov	sp,fp
    f2d8:	dfc00117 	ldw	ra,4(sp)
    f2dc:	df000017 	ldw	fp,0(sp)
    f2e0:	dec00204 	addi	sp,sp,8
    f2e4:	f800283a 	ret

0000f2e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f2e8:	defff904 	addi	sp,sp,-28
    f2ec:	dfc00615 	stw	ra,24(sp)
    f2f0:	df000515 	stw	fp,20(sp)
    f2f4:	df000504 	addi	fp,sp,20
    f2f8:	e13ffd15 	stw	r4,-12(fp)
    f2fc:	e17ffe15 	stw	r5,-8(fp)
    f300:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f304:	e0bffd17 	ldw	r2,-12(fp)
    f308:	10000616 	blt	r2,zero,f324 <read+0x3c>
    f30c:	e0bffd17 	ldw	r2,-12(fp)
    f310:	10c00324 	muli	r3,r2,12
    f314:	00800074 	movhi	r2,1
    f318:	1089e704 	addi	r2,r2,10140
    f31c:	1885883a 	add	r2,r3,r2
    f320:	00000106 	br	f328 <read+0x40>
    f324:	0005883a 	mov	r2,zero
    f328:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f32c:	e0bffb17 	ldw	r2,-20(fp)
    f330:	10002226 	beq	r2,zero,f3bc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f334:	e0bffb17 	ldw	r2,-20(fp)
    f338:	10800217 	ldw	r2,8(r2)
    f33c:	108000cc 	andi	r2,r2,3
    f340:	10800060 	cmpeqi	r2,r2,1
    f344:	1000181e 	bne	r2,zero,f3a8 <read+0xc0>
        (fd->dev->read))
    f348:	e0bffb17 	ldw	r2,-20(fp)
    f34c:	10800017 	ldw	r2,0(r2)
    f350:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f354:	10001426 	beq	r2,zero,f3a8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f358:	e0bffb17 	ldw	r2,-20(fp)
    f35c:	10800017 	ldw	r2,0(r2)
    f360:	10800517 	ldw	r2,20(r2)
    f364:	e0ffff17 	ldw	r3,-4(fp)
    f368:	180d883a 	mov	r6,r3
    f36c:	e17ffe17 	ldw	r5,-8(fp)
    f370:	e13ffb17 	ldw	r4,-20(fp)
    f374:	103ee83a 	callr	r2
    f378:	e0bffc15 	stw	r2,-16(fp)
    f37c:	e0bffc17 	ldw	r2,-16(fp)
    f380:	1000070e 	bge	r2,zero,f3a0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f384:	000f2ac0 	call	f2ac <alt_get_errno>
    f388:	1007883a 	mov	r3,r2
    f38c:	e0bffc17 	ldw	r2,-16(fp)
    f390:	0085c83a 	sub	r2,zero,r2
    f394:	18800015 	stw	r2,0(r3)
          return -1;
    f398:	00bfffc4 	movi	r2,-1
    f39c:	00000c06 	br	f3d0 <read+0xe8>
        }
        return rval;
    f3a0:	e0bffc17 	ldw	r2,-16(fp)
    f3a4:	00000a06 	br	f3d0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f3a8:	000f2ac0 	call	f2ac <alt_get_errno>
    f3ac:	1007883a 	mov	r3,r2
    f3b0:	00800344 	movi	r2,13
    f3b4:	18800015 	stw	r2,0(r3)
    f3b8:	00000406 	br	f3cc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f3bc:	000f2ac0 	call	f2ac <alt_get_errno>
    f3c0:	1007883a 	mov	r3,r2
    f3c4:	00801444 	movi	r2,81
    f3c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f3cc:	00bfffc4 	movi	r2,-1
}
    f3d0:	e037883a 	mov	sp,fp
    f3d4:	dfc00117 	ldw	ra,4(sp)
    f3d8:	df000017 	ldw	fp,0(sp)
    f3dc:	dec00204 	addi	sp,sp,8
    f3e0:	f800283a 	ret

0000f3e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f3e4:	defffe04 	addi	sp,sp,-8
    f3e8:	df000115 	stw	fp,4(sp)
    f3ec:	df000104 	addi	fp,sp,4
    f3f0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f3f4:	e0bfff17 	ldw	r2,-4(fp)
    f3f8:	108000d0 	cmplti	r2,r2,3
    f3fc:	10000d1e 	bne	r2,zero,f434 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f400:	00800074 	movhi	r2,1
    f404:	1089e704 	addi	r2,r2,10140
    f408:	e0ffff17 	ldw	r3,-4(fp)
    f40c:	18c00324 	muli	r3,r3,12
    f410:	10c5883a 	add	r2,r2,r3
    f414:	10800204 	addi	r2,r2,8
    f418:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f41c:	00800074 	movhi	r2,1
    f420:	1089e704 	addi	r2,r2,10140
    f424:	e0ffff17 	ldw	r3,-4(fp)
    f428:	18c00324 	muli	r3,r3,12
    f42c:	10c5883a 	add	r2,r2,r3
    f430:	10000015 	stw	zero,0(r2)
  }
}
    f434:	0001883a 	nop
    f438:	e037883a 	mov	sp,fp
    f43c:	df000017 	ldw	fp,0(sp)
    f440:	dec00104 	addi	sp,sp,4
    f444:	f800283a 	ret

0000f448 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f448:	defff904 	addi	sp,sp,-28
    f44c:	df000615 	stw	fp,24(sp)
    f450:	df000604 	addi	fp,sp,24
    f454:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f458:	0005303a 	rdctl	r2,status
    f45c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f460:	e0fffe17 	ldw	r3,-8(fp)
    f464:	00bfff84 	movi	r2,-2
    f468:	1884703a 	and	r2,r3,r2
    f46c:	1001703a 	wrctl	status,r2
  
  return context;
    f470:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f474:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f478:	d0a00c17 	ldw	r2,-32720(gp)
    f47c:	10c000c4 	addi	r3,r2,3
    f480:	00bfff04 	movi	r2,-4
    f484:	1884703a 	and	r2,r3,r2
    f488:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f48c:	d0e00c17 	ldw	r3,-32720(gp)
    f490:	e0bfff17 	ldw	r2,-4(fp)
    f494:	1887883a 	add	r3,r3,r2
    f498:	00804034 	movhi	r2,256
    f49c:	10800004 	addi	r2,r2,0
    f4a0:	10c0062e 	bgeu	r2,r3,f4bc <sbrk+0x74>
    f4a4:	e0bffb17 	ldw	r2,-20(fp)
    f4a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4ac:	e0bffa17 	ldw	r2,-24(fp)
    f4b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f4b4:	00bfffc4 	movi	r2,-1
    f4b8:	00000b06 	br	f4e8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f4bc:	d0a00c17 	ldw	r2,-32720(gp)
    f4c0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f4c4:	d0e00c17 	ldw	r3,-32720(gp)
    f4c8:	e0bfff17 	ldw	r2,-4(fp)
    f4cc:	1885883a 	add	r2,r3,r2
    f4d0:	d0a00c15 	stw	r2,-32720(gp)
    f4d4:	e0bffb17 	ldw	r2,-20(fp)
    f4d8:	e0bffc15 	stw	r2,-16(fp)
    f4dc:	e0bffc17 	ldw	r2,-16(fp)
    f4e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f4e4:	e0bffd17 	ldw	r2,-12(fp)
} 
    f4e8:	e037883a 	mov	sp,fp
    f4ec:	df000017 	ldw	fp,0(sp)
    f4f0:	dec00104 	addi	sp,sp,4
    f4f4:	f800283a 	ret

0000f4f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f4f8:	defffd04 	addi	sp,sp,-12
    f4fc:	dfc00215 	stw	ra,8(sp)
    f500:	df000115 	stw	fp,4(sp)
    f504:	df000104 	addi	fp,sp,4
    f508:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f50c:	e13fff17 	ldw	r4,-4(fp)
    f510:	00104e40 	call	104e4 <alt_busy_sleep>
}
    f514:	e037883a 	mov	sp,fp
    f518:	dfc00117 	ldw	ra,4(sp)
    f51c:	df000017 	ldw	fp,0(sp)
    f520:	dec00204 	addi	sp,sp,8
    f524:	f800283a 	ret

0000f528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f528:	defffe04 	addi	sp,sp,-8
    f52c:	dfc00115 	stw	ra,4(sp)
    f530:	df000015 	stw	fp,0(sp)
    f534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f538:	d0a00b17 	ldw	r2,-32724(gp)
    f53c:	10000326 	beq	r2,zero,f54c <alt_get_errno+0x24>
    f540:	d0a00b17 	ldw	r2,-32724(gp)
    f544:	103ee83a 	callr	r2
    f548:	00000106 	br	f550 <alt_get_errno+0x28>
    f54c:	d0a6d804 	addi	r2,gp,-25760
}
    f550:	e037883a 	mov	sp,fp
    f554:	dfc00117 	ldw	ra,4(sp)
    f558:	df000017 	ldw	fp,0(sp)
    f55c:	dec00204 	addi	sp,sp,8
    f560:	f800283a 	ret

0000f564 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f564:	defff904 	addi	sp,sp,-28
    f568:	dfc00615 	stw	ra,24(sp)
    f56c:	df000515 	stw	fp,20(sp)
    f570:	df000504 	addi	fp,sp,20
    f574:	e13ffd15 	stw	r4,-12(fp)
    f578:	e17ffe15 	stw	r5,-8(fp)
    f57c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f580:	e0bffd17 	ldw	r2,-12(fp)
    f584:	10000616 	blt	r2,zero,f5a0 <write+0x3c>
    f588:	e0bffd17 	ldw	r2,-12(fp)
    f58c:	10c00324 	muli	r3,r2,12
    f590:	00800074 	movhi	r2,1
    f594:	1089e704 	addi	r2,r2,10140
    f598:	1885883a 	add	r2,r3,r2
    f59c:	00000106 	br	f5a4 <write+0x40>
    f5a0:	0005883a 	mov	r2,zero
    f5a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f5a8:	e0bffb17 	ldw	r2,-20(fp)
    f5ac:	10002126 	beq	r2,zero,f634 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f5b0:	e0bffb17 	ldw	r2,-20(fp)
    f5b4:	10800217 	ldw	r2,8(r2)
    f5b8:	108000cc 	andi	r2,r2,3
    f5bc:	10001826 	beq	r2,zero,f620 <write+0xbc>
    f5c0:	e0bffb17 	ldw	r2,-20(fp)
    f5c4:	10800017 	ldw	r2,0(r2)
    f5c8:	10800617 	ldw	r2,24(r2)
    f5cc:	10001426 	beq	r2,zero,f620 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f5d0:	e0bffb17 	ldw	r2,-20(fp)
    f5d4:	10800017 	ldw	r2,0(r2)
    f5d8:	10800617 	ldw	r2,24(r2)
    f5dc:	e0ffff17 	ldw	r3,-4(fp)
    f5e0:	180d883a 	mov	r6,r3
    f5e4:	e17ffe17 	ldw	r5,-8(fp)
    f5e8:	e13ffb17 	ldw	r4,-20(fp)
    f5ec:	103ee83a 	callr	r2
    f5f0:	e0bffc15 	stw	r2,-16(fp)
    f5f4:	e0bffc17 	ldw	r2,-16(fp)
    f5f8:	1000070e 	bge	r2,zero,f618 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f5fc:	000f5280 	call	f528 <alt_get_errno>
    f600:	1007883a 	mov	r3,r2
    f604:	e0bffc17 	ldw	r2,-16(fp)
    f608:	0085c83a 	sub	r2,zero,r2
    f60c:	18800015 	stw	r2,0(r3)
        return -1;
    f610:	00bfffc4 	movi	r2,-1
    f614:	00000c06 	br	f648 <write+0xe4>
      }
      return rval;
    f618:	e0bffc17 	ldw	r2,-16(fp)
    f61c:	00000a06 	br	f648 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f620:	000f5280 	call	f528 <alt_get_errno>
    f624:	1007883a 	mov	r3,r2
    f628:	00800344 	movi	r2,13
    f62c:	18800015 	stw	r2,0(r3)
    f630:	00000406 	br	f644 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f634:	000f5280 	call	f528 <alt_get_errno>
    f638:	1007883a 	mov	r3,r2
    f63c:	00801444 	movi	r2,81
    f640:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f644:	00bfffc4 	movi	r2,-1
}
    f648:	e037883a 	mov	sp,fp
    f64c:	dfc00117 	ldw	ra,4(sp)
    f650:	df000017 	ldw	fp,0(sp)
    f654:	dec00204 	addi	sp,sp,8
    f658:	f800283a 	ret

0000f65c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f65c:	defffd04 	addi	sp,sp,-12
    f660:	dfc00215 	stw	ra,8(sp)
    f664:	df000115 	stw	fp,4(sp)
    f668:	df000104 	addi	fp,sp,4
    f66c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f670:	d1600804 	addi	r5,gp,-32736
    f674:	e13fff17 	ldw	r4,-4(fp)
    f678:	00106c00 	call	106c0 <alt_dev_llist_insert>
}
    f67c:	e037883a 	mov	sp,fp
    f680:	dfc00117 	ldw	ra,4(sp)
    f684:	df000017 	ldw	fp,0(sp)
    f688:	dec00204 	addi	sp,sp,8
    f68c:	f800283a 	ret

0000f690 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f690:	defffd04 	addi	sp,sp,-12
    f694:	dfc00215 	stw	ra,8(sp)
    f698:	df000115 	stw	fp,4(sp)
    f69c:	df000104 	addi	fp,sp,4
    f6a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f6a4:	00110300 	call	11030 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f6a8:	00800044 	movi	r2,1
    f6ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f6b0:	0001883a 	nop
    f6b4:	e037883a 	mov	sp,fp
    f6b8:	dfc00117 	ldw	ra,4(sp)
    f6bc:	df000017 	ldw	fp,0(sp)
    f6c0:	dec00204 	addi	sp,sp,8
    f6c4:	f800283a 	ret

0000f6c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f6c8:	defffe04 	addi	sp,sp,-8
    f6cc:	dfc00115 	stw	ra,4(sp)
    f6d0:	df000015 	stw	fp,0(sp)
    f6d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f6d8:	00804034 	movhi	r2,256
    f6dc:	10881004 	addi	r2,r2,8256
    f6e0:	d0a6df15 	stw	r2,-25732(gp)
    f6e4:	0080bef4 	movhi	r2,763
    f6e8:	10bc2004 	addi	r2,r2,-3968
    f6ec:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f6f0:	01c0fa04 	movi	r7,1000
    f6f4:	01800104 	movi	r6,4
    f6f8:	000b883a 	mov	r5,zero
    f6fc:	01004034 	movhi	r4,256
    f700:	21081804 	addi	r4,r4,8288
    f704:	00102240 	call	10224 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f708:	000d883a 	mov	r6,zero
    f70c:	000b883a 	mov	r5,zero
    f710:	01000074 	movhi	r4,1
    f714:	210a5104 	addi	r4,r4,10564
    f718:	000f8a80 	call	f8a8 <altera_avalon_jtag_uart_init>
    f71c:	01000074 	movhi	r4,1
    f720:	210a4704 	addi	r4,r4,10524
    f724:	000f65c0 	call	f65c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f728:	0001883a 	nop
}
    f72c:	0001883a 	nop
    f730:	e037883a 	mov	sp,fp
    f734:	dfc00117 	ldw	ra,4(sp)
    f738:	df000017 	ldw	fp,0(sp)
    f73c:	dec00204 	addi	sp,sp,8
    f740:	f800283a 	ret

0000f744 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f744:	defffa04 	addi	sp,sp,-24
    f748:	dfc00515 	stw	ra,20(sp)
    f74c:	df000415 	stw	fp,16(sp)
    f750:	df000404 	addi	fp,sp,16
    f754:	e13ffd15 	stw	r4,-12(fp)
    f758:	e17ffe15 	stw	r5,-8(fp)
    f75c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f760:	e0bffd17 	ldw	r2,-12(fp)
    f764:	10800017 	ldw	r2,0(r2)
    f768:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f76c:	e0bffc17 	ldw	r2,-16(fp)
    f770:	10c00a04 	addi	r3,r2,40
    f774:	e0bffd17 	ldw	r2,-12(fp)
    f778:	10800217 	ldw	r2,8(r2)
    f77c:	100f883a 	mov	r7,r2
    f780:	e1bfff17 	ldw	r6,-4(fp)
    f784:	e17ffe17 	ldw	r5,-8(fp)
    f788:	1809883a 	mov	r4,r3
    f78c:	000fd6c0 	call	fd6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f790:	e037883a 	mov	sp,fp
    f794:	dfc00117 	ldw	ra,4(sp)
    f798:	df000017 	ldw	fp,0(sp)
    f79c:	dec00204 	addi	sp,sp,8
    f7a0:	f800283a 	ret

0000f7a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f7a4:	defffa04 	addi	sp,sp,-24
    f7a8:	dfc00515 	stw	ra,20(sp)
    f7ac:	df000415 	stw	fp,16(sp)
    f7b0:	df000404 	addi	fp,sp,16
    f7b4:	e13ffd15 	stw	r4,-12(fp)
    f7b8:	e17ffe15 	stw	r5,-8(fp)
    f7bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f7c0:	e0bffd17 	ldw	r2,-12(fp)
    f7c4:	10800017 	ldw	r2,0(r2)
    f7c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f7cc:	e0bffc17 	ldw	r2,-16(fp)
    f7d0:	10c00a04 	addi	r3,r2,40
    f7d4:	e0bffd17 	ldw	r2,-12(fp)
    f7d8:	10800217 	ldw	r2,8(r2)
    f7dc:	100f883a 	mov	r7,r2
    f7e0:	e1bfff17 	ldw	r6,-4(fp)
    f7e4:	e17ffe17 	ldw	r5,-8(fp)
    f7e8:	1809883a 	mov	r4,r3
    f7ec:	000ff880 	call	ff88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f7f0:	e037883a 	mov	sp,fp
    f7f4:	dfc00117 	ldw	ra,4(sp)
    f7f8:	df000017 	ldw	fp,0(sp)
    f7fc:	dec00204 	addi	sp,sp,8
    f800:	f800283a 	ret

0000f804 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f804:	defffc04 	addi	sp,sp,-16
    f808:	dfc00315 	stw	ra,12(sp)
    f80c:	df000215 	stw	fp,8(sp)
    f810:	df000204 	addi	fp,sp,8
    f814:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f818:	e0bfff17 	ldw	r2,-4(fp)
    f81c:	10800017 	ldw	r2,0(r2)
    f820:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f824:	e0bffe17 	ldw	r2,-8(fp)
    f828:	10c00a04 	addi	r3,r2,40
    f82c:	e0bfff17 	ldw	r2,-4(fp)
    f830:	10800217 	ldw	r2,8(r2)
    f834:	100b883a 	mov	r5,r2
    f838:	1809883a 	mov	r4,r3
    f83c:	000fc140 	call	fc14 <altera_avalon_jtag_uart_close>
}
    f840:	e037883a 	mov	sp,fp
    f844:	dfc00117 	ldw	ra,4(sp)
    f848:	df000017 	ldw	fp,0(sp)
    f84c:	dec00204 	addi	sp,sp,8
    f850:	f800283a 	ret

0000f854 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f854:	defffa04 	addi	sp,sp,-24
    f858:	dfc00515 	stw	ra,20(sp)
    f85c:	df000415 	stw	fp,16(sp)
    f860:	df000404 	addi	fp,sp,16
    f864:	e13ffd15 	stw	r4,-12(fp)
    f868:	e17ffe15 	stw	r5,-8(fp)
    f86c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f870:	e0bffd17 	ldw	r2,-12(fp)
    f874:	10800017 	ldw	r2,0(r2)
    f878:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f87c:	e0bffc17 	ldw	r2,-16(fp)
    f880:	10800a04 	addi	r2,r2,40
    f884:	e1bfff17 	ldw	r6,-4(fp)
    f888:	e17ffe17 	ldw	r5,-8(fp)
    f88c:	1009883a 	mov	r4,r2
    f890:	000fc7c0 	call	fc7c <altera_avalon_jtag_uart_ioctl>
}
    f894:	e037883a 	mov	sp,fp
    f898:	dfc00117 	ldw	ra,4(sp)
    f89c:	df000017 	ldw	fp,0(sp)
    f8a0:	dec00204 	addi	sp,sp,8
    f8a4:	f800283a 	ret

0000f8a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f8a8:	defffa04 	addi	sp,sp,-24
    f8ac:	dfc00515 	stw	ra,20(sp)
    f8b0:	df000415 	stw	fp,16(sp)
    f8b4:	df000404 	addi	fp,sp,16
    f8b8:	e13ffd15 	stw	r4,-12(fp)
    f8bc:	e17ffe15 	stw	r5,-8(fp)
    f8c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f8c4:	e0bffd17 	ldw	r2,-12(fp)
    f8c8:	00c00044 	movi	r3,1
    f8cc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f8d0:	e0bffd17 	ldw	r2,-12(fp)
    f8d4:	10800017 	ldw	r2,0(r2)
    f8d8:	10800104 	addi	r2,r2,4
    f8dc:	1007883a 	mov	r3,r2
    f8e0:	e0bffd17 	ldw	r2,-12(fp)
    f8e4:	10800817 	ldw	r2,32(r2)
    f8e8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f8ec:	e0bffe17 	ldw	r2,-8(fp)
    f8f0:	e0ffff17 	ldw	r3,-4(fp)
    f8f4:	d8000015 	stw	zero,0(sp)
    f8f8:	e1fffd17 	ldw	r7,-12(fp)
    f8fc:	01800074 	movhi	r6,1
    f900:	31be5a04 	addi	r6,r6,-1688
    f904:	180b883a 	mov	r5,r3
    f908:	1009883a 	mov	r4,r2
    f90c:	00108580 	call	10858 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f910:	e0bffd17 	ldw	r2,-12(fp)
    f914:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f918:	e0bffd17 	ldw	r2,-12(fp)
    f91c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f920:	d0e6e217 	ldw	r3,-25720(gp)
    f924:	e1fffd17 	ldw	r7,-12(fp)
    f928:	01800074 	movhi	r6,1
    f92c:	31bedd04 	addi	r6,r6,-1164
    f930:	180b883a 	mov	r5,r3
    f934:	1009883a 	mov	r4,r2
    f938:	00103b80 	call	103b8 <alt_alarm_start>
    f93c:	1000040e 	bge	r2,zero,f950 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f940:	e0fffd17 	ldw	r3,-12(fp)
    f944:	00a00034 	movhi	r2,32768
    f948:	10bfffc4 	addi	r2,r2,-1
    f94c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f950:	0001883a 	nop
    f954:	e037883a 	mov	sp,fp
    f958:	dfc00117 	ldw	ra,4(sp)
    f95c:	df000017 	ldw	fp,0(sp)
    f960:	dec00204 	addi	sp,sp,8
    f964:	f800283a 	ret

0000f968 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f968:	defff804 	addi	sp,sp,-32
    f96c:	df000715 	stw	fp,28(sp)
    f970:	df000704 	addi	fp,sp,28
    f974:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f978:	e0bfff17 	ldw	r2,-4(fp)
    f97c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f980:	e0bffb17 	ldw	r2,-20(fp)
    f984:	10800017 	ldw	r2,0(r2)
    f988:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f98c:	e0bffc17 	ldw	r2,-16(fp)
    f990:	10800104 	addi	r2,r2,4
    f994:	10800037 	ldwio	r2,0(r2)
    f998:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f99c:	e0bffd17 	ldw	r2,-12(fp)
    f9a0:	1080c00c 	andi	r2,r2,768
    f9a4:	10006d26 	beq	r2,zero,fb5c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f9a8:	e0bffd17 	ldw	r2,-12(fp)
    f9ac:	1080400c 	andi	r2,r2,256
    f9b0:	10003526 	beq	r2,zero,fa88 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f9b4:	00800074 	movhi	r2,1
    f9b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f9bc:	e0bffb17 	ldw	r2,-20(fp)
    f9c0:	10800a17 	ldw	r2,40(r2)
    f9c4:	10800044 	addi	r2,r2,1
    f9c8:	1081ffcc 	andi	r2,r2,2047
    f9cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f9d0:	e0bffb17 	ldw	r2,-20(fp)
    f9d4:	10c00b17 	ldw	r3,44(r2)
    f9d8:	e0bffe17 	ldw	r2,-8(fp)
    f9dc:	18801526 	beq	r3,r2,fa34 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f9e0:	e0bffc17 	ldw	r2,-16(fp)
    f9e4:	10800037 	ldwio	r2,0(r2)
    f9e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f9ec:	e0bff917 	ldw	r2,-28(fp)
    f9f0:	10a0000c 	andi	r2,r2,32768
    f9f4:	10001126 	beq	r2,zero,fa3c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f9f8:	e0bffb17 	ldw	r2,-20(fp)
    f9fc:	10800a17 	ldw	r2,40(r2)
    fa00:	e0fff917 	ldw	r3,-28(fp)
    fa04:	1809883a 	mov	r4,r3
    fa08:	e0fffb17 	ldw	r3,-20(fp)
    fa0c:	1885883a 	add	r2,r3,r2
    fa10:	10800e04 	addi	r2,r2,56
    fa14:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa18:	e0bffb17 	ldw	r2,-20(fp)
    fa1c:	10800a17 	ldw	r2,40(r2)
    fa20:	10800044 	addi	r2,r2,1
    fa24:	10c1ffcc 	andi	r3,r2,2047
    fa28:	e0bffb17 	ldw	r2,-20(fp)
    fa2c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    fa30:	003fe206 	br	f9bc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    fa34:	0001883a 	nop
    fa38:	00000106 	br	fa40 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    fa3c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fa40:	e0bff917 	ldw	r2,-28(fp)
    fa44:	10bfffec 	andhi	r2,r2,65535
    fa48:	10000f26 	beq	r2,zero,fa88 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fa4c:	e0bffb17 	ldw	r2,-20(fp)
    fa50:	10c00817 	ldw	r3,32(r2)
    fa54:	00bfff84 	movi	r2,-2
    fa58:	1886703a 	and	r3,r3,r2
    fa5c:	e0bffb17 	ldw	r2,-20(fp)
    fa60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fa64:	e0bffc17 	ldw	r2,-16(fp)
    fa68:	10800104 	addi	r2,r2,4
    fa6c:	1007883a 	mov	r3,r2
    fa70:	e0bffb17 	ldw	r2,-20(fp)
    fa74:	10800817 	ldw	r2,32(r2)
    fa78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fa7c:	e0bffc17 	ldw	r2,-16(fp)
    fa80:	10800104 	addi	r2,r2,4
    fa84:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fa88:	e0bffd17 	ldw	r2,-12(fp)
    fa8c:	1080800c 	andi	r2,r2,512
    fa90:	103fbe26 	beq	r2,zero,f98c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fa94:	e0bffd17 	ldw	r2,-12(fp)
    fa98:	1004d43a 	srli	r2,r2,16
    fa9c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    faa0:	00001406 	br	faf4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    faa4:	e0bffc17 	ldw	r2,-16(fp)
    faa8:	e0fffb17 	ldw	r3,-20(fp)
    faac:	18c00d17 	ldw	r3,52(r3)
    fab0:	e13ffb17 	ldw	r4,-20(fp)
    fab4:	20c7883a 	add	r3,r4,r3
    fab8:	18c20e04 	addi	r3,r3,2104
    fabc:	18c00003 	ldbu	r3,0(r3)
    fac0:	18c03fcc 	andi	r3,r3,255
    fac4:	18c0201c 	xori	r3,r3,128
    fac8:	18ffe004 	addi	r3,r3,-128
    facc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fad0:	e0bffb17 	ldw	r2,-20(fp)
    fad4:	10800d17 	ldw	r2,52(r2)
    fad8:	10800044 	addi	r2,r2,1
    fadc:	10c1ffcc 	andi	r3,r2,2047
    fae0:	e0bffb17 	ldw	r2,-20(fp)
    fae4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fae8:	e0bffa17 	ldw	r2,-24(fp)
    faec:	10bfffc4 	addi	r2,r2,-1
    faf0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    faf4:	e0bffa17 	ldw	r2,-24(fp)
    faf8:	10000526 	beq	r2,zero,fb10 <altera_avalon_jtag_uart_irq+0x1a8>
    fafc:	e0bffb17 	ldw	r2,-20(fp)
    fb00:	10c00d17 	ldw	r3,52(r2)
    fb04:	e0bffb17 	ldw	r2,-20(fp)
    fb08:	10800c17 	ldw	r2,48(r2)
    fb0c:	18bfe51e 	bne	r3,r2,faa4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fb10:	e0bffa17 	ldw	r2,-24(fp)
    fb14:	103f9d26 	beq	r2,zero,f98c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fb18:	e0bffb17 	ldw	r2,-20(fp)
    fb1c:	10c00817 	ldw	r3,32(r2)
    fb20:	00bfff44 	movi	r2,-3
    fb24:	1886703a 	and	r3,r3,r2
    fb28:	e0bffb17 	ldw	r2,-20(fp)
    fb2c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb30:	e0bffb17 	ldw	r2,-20(fp)
    fb34:	10800017 	ldw	r2,0(r2)
    fb38:	10800104 	addi	r2,r2,4
    fb3c:	1007883a 	mov	r3,r2
    fb40:	e0bffb17 	ldw	r2,-20(fp)
    fb44:	10800817 	ldw	r2,32(r2)
    fb48:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fb4c:	e0bffc17 	ldw	r2,-16(fp)
    fb50:	10800104 	addi	r2,r2,4
    fb54:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fb58:	003f8c06 	br	f98c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fb5c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fb60:	0001883a 	nop
    fb64:	e037883a 	mov	sp,fp
    fb68:	df000017 	ldw	fp,0(sp)
    fb6c:	dec00104 	addi	sp,sp,4
    fb70:	f800283a 	ret

0000fb74 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fb74:	defff804 	addi	sp,sp,-32
    fb78:	df000715 	stw	fp,28(sp)
    fb7c:	df000704 	addi	fp,sp,28
    fb80:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fb84:	e0bffb17 	ldw	r2,-20(fp)
    fb88:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fb8c:	e0bff917 	ldw	r2,-28(fp)
    fb90:	10800017 	ldw	r2,0(r2)
    fb94:	10800104 	addi	r2,r2,4
    fb98:	10800037 	ldwio	r2,0(r2)
    fb9c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fba0:	e0bffa17 	ldw	r2,-24(fp)
    fba4:	1081000c 	andi	r2,r2,1024
    fba8:	10000b26 	beq	r2,zero,fbd8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fbac:	e0bff917 	ldw	r2,-28(fp)
    fbb0:	10800017 	ldw	r2,0(r2)
    fbb4:	10800104 	addi	r2,r2,4
    fbb8:	1007883a 	mov	r3,r2
    fbbc:	e0bff917 	ldw	r2,-28(fp)
    fbc0:	10800817 	ldw	r2,32(r2)
    fbc4:	10810014 	ori	r2,r2,1024
    fbc8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fbcc:	e0bff917 	ldw	r2,-28(fp)
    fbd0:	10000915 	stw	zero,36(r2)
    fbd4:	00000a06 	br	fc00 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fbd8:	e0bff917 	ldw	r2,-28(fp)
    fbdc:	10c00917 	ldw	r3,36(r2)
    fbe0:	00a00034 	movhi	r2,32768
    fbe4:	10bfff04 	addi	r2,r2,-4
    fbe8:	10c00536 	bltu	r2,r3,fc00 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fbec:	e0bff917 	ldw	r2,-28(fp)
    fbf0:	10800917 	ldw	r2,36(r2)
    fbf4:	10c00044 	addi	r3,r2,1
    fbf8:	e0bff917 	ldw	r2,-28(fp)
    fbfc:	10c00915 	stw	r3,36(r2)
    fc00:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fc04:	e037883a 	mov	sp,fp
    fc08:	df000017 	ldw	fp,0(sp)
    fc0c:	dec00104 	addi	sp,sp,4
    fc10:	f800283a 	ret

0000fc14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fc14:	defffd04 	addi	sp,sp,-12
    fc18:	df000215 	stw	fp,8(sp)
    fc1c:	df000204 	addi	fp,sp,8
    fc20:	e13ffe15 	stw	r4,-8(fp)
    fc24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fc28:	00000506 	br	fc40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fc2c:	e0bfff17 	ldw	r2,-4(fp)
    fc30:	1090000c 	andi	r2,r2,16384
    fc34:	10000226 	beq	r2,zero,fc40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fc38:	00bffd44 	movi	r2,-11
    fc3c:	00000b06 	br	fc6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fc40:	e0bffe17 	ldw	r2,-8(fp)
    fc44:	10c00d17 	ldw	r3,52(r2)
    fc48:	e0bffe17 	ldw	r2,-8(fp)
    fc4c:	10800c17 	ldw	r2,48(r2)
    fc50:	18800526 	beq	r3,r2,fc68 <altera_avalon_jtag_uart_close+0x54>
    fc54:	e0bffe17 	ldw	r2,-8(fp)
    fc58:	10c00917 	ldw	r3,36(r2)
    fc5c:	e0bffe17 	ldw	r2,-8(fp)
    fc60:	10800117 	ldw	r2,4(r2)
    fc64:	18bff136 	bltu	r3,r2,fc2c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fc68:	0005883a 	mov	r2,zero
}
    fc6c:	e037883a 	mov	sp,fp
    fc70:	df000017 	ldw	fp,0(sp)
    fc74:	dec00104 	addi	sp,sp,4
    fc78:	f800283a 	ret

0000fc7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fc7c:	defffa04 	addi	sp,sp,-24
    fc80:	df000515 	stw	fp,20(sp)
    fc84:	df000504 	addi	fp,sp,20
    fc88:	e13ffd15 	stw	r4,-12(fp)
    fc8c:	e17ffe15 	stw	r5,-8(fp)
    fc90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fc94:	00bff9c4 	movi	r2,-25
    fc98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fc9c:	e0bffe17 	ldw	r2,-8(fp)
    fca0:	10da8060 	cmpeqi	r3,r2,27137
    fca4:	1800031e 	bne	r3,zero,fcb4 <altera_avalon_jtag_uart_ioctl+0x38>
    fca8:	109a80a0 	cmpeqi	r2,r2,27138
    fcac:	1000181e 	bne	r2,zero,fd10 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fcb0:	00002906 	br	fd58 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fcb4:	e0bffd17 	ldw	r2,-12(fp)
    fcb8:	10c00117 	ldw	r3,4(r2)
    fcbc:	00a00034 	movhi	r2,32768
    fcc0:	10bfffc4 	addi	r2,r2,-1
    fcc4:	18802126 	beq	r3,r2,fd4c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fcc8:	e0bfff17 	ldw	r2,-4(fp)
    fccc:	10800017 	ldw	r2,0(r2)
    fcd0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fcd4:	e0bffc17 	ldw	r2,-16(fp)
    fcd8:	10800090 	cmplti	r2,r2,2
    fcdc:	1000061e 	bne	r2,zero,fcf8 <altera_avalon_jtag_uart_ioctl+0x7c>
    fce0:	e0fffc17 	ldw	r3,-16(fp)
    fce4:	00a00034 	movhi	r2,32768
    fce8:	10bfffc4 	addi	r2,r2,-1
    fcec:	18800226 	beq	r3,r2,fcf8 <altera_avalon_jtag_uart_ioctl+0x7c>
    fcf0:	e0bffc17 	ldw	r2,-16(fp)
    fcf4:	00000206 	br	fd00 <altera_avalon_jtag_uart_ioctl+0x84>
    fcf8:	00a00034 	movhi	r2,32768
    fcfc:	10bfff84 	addi	r2,r2,-2
    fd00:	e0fffd17 	ldw	r3,-12(fp)
    fd04:	18800115 	stw	r2,4(r3)
      rc = 0;
    fd08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fd0c:	00000f06 	br	fd4c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fd10:	e0bffd17 	ldw	r2,-12(fp)
    fd14:	10c00117 	ldw	r3,4(r2)
    fd18:	00a00034 	movhi	r2,32768
    fd1c:	10bfffc4 	addi	r2,r2,-1
    fd20:	18800c26 	beq	r3,r2,fd54 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fd24:	e0bffd17 	ldw	r2,-12(fp)
    fd28:	10c00917 	ldw	r3,36(r2)
    fd2c:	e0bffd17 	ldw	r2,-12(fp)
    fd30:	10800117 	ldw	r2,4(r2)
    fd34:	1885803a 	cmpltu	r2,r3,r2
    fd38:	10c03fcc 	andi	r3,r2,255
    fd3c:	e0bfff17 	ldw	r2,-4(fp)
    fd40:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fd44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fd48:	00000206 	br	fd54 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fd4c:	0001883a 	nop
    fd50:	00000106 	br	fd58 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fd54:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fd58:	e0bffb17 	ldw	r2,-20(fp)
}
    fd5c:	e037883a 	mov	sp,fp
    fd60:	df000017 	ldw	fp,0(sp)
    fd64:	dec00104 	addi	sp,sp,4
    fd68:	f800283a 	ret

0000fd6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fd6c:	defff304 	addi	sp,sp,-52
    fd70:	dfc00c15 	stw	ra,48(sp)
    fd74:	df000b15 	stw	fp,44(sp)
    fd78:	df000b04 	addi	fp,sp,44
    fd7c:	e13ffc15 	stw	r4,-16(fp)
    fd80:	e17ffd15 	stw	r5,-12(fp)
    fd84:	e1bffe15 	stw	r6,-8(fp)
    fd88:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fd8c:	e0bffd17 	ldw	r2,-12(fp)
    fd90:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fd94:	00004706 	br	feb4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fd98:	e0bffc17 	ldw	r2,-16(fp)
    fd9c:	10800a17 	ldw	r2,40(r2)
    fda0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fda4:	e0bffc17 	ldw	r2,-16(fp)
    fda8:	10800b17 	ldw	r2,44(r2)
    fdac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fdb0:	e0fff717 	ldw	r3,-36(fp)
    fdb4:	e0bff817 	ldw	r2,-32(fp)
    fdb8:	18800536 	bltu	r3,r2,fdd0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fdbc:	e0fff717 	ldw	r3,-36(fp)
    fdc0:	e0bff817 	ldw	r2,-32(fp)
    fdc4:	1885c83a 	sub	r2,r3,r2
    fdc8:	e0bff615 	stw	r2,-40(fp)
    fdcc:	00000406 	br	fde0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fdd0:	00c20004 	movi	r3,2048
    fdd4:	e0bff817 	ldw	r2,-32(fp)
    fdd8:	1885c83a 	sub	r2,r3,r2
    fddc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fde0:	e0bff617 	ldw	r2,-40(fp)
    fde4:	10001e26 	beq	r2,zero,fe60 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fde8:	e0fffe17 	ldw	r3,-8(fp)
    fdec:	e0bff617 	ldw	r2,-40(fp)
    fdf0:	1880022e 	bgeu	r3,r2,fdfc <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fdf4:	e0bffe17 	ldw	r2,-8(fp)
    fdf8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fdfc:	e0bffc17 	ldw	r2,-16(fp)
    fe00:	10c00e04 	addi	r3,r2,56
    fe04:	e0bff817 	ldw	r2,-32(fp)
    fe08:	1885883a 	add	r2,r3,r2
    fe0c:	e1bff617 	ldw	r6,-40(fp)
    fe10:	100b883a 	mov	r5,r2
    fe14:	e13ff517 	ldw	r4,-44(fp)
    fe18:	0007ee80 	call	7ee8 <memcpy>
      ptr   += n;
    fe1c:	e0fff517 	ldw	r3,-44(fp)
    fe20:	e0bff617 	ldw	r2,-40(fp)
    fe24:	1885883a 	add	r2,r3,r2
    fe28:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fe2c:	e0fffe17 	ldw	r3,-8(fp)
    fe30:	e0bff617 	ldw	r2,-40(fp)
    fe34:	1885c83a 	sub	r2,r3,r2
    fe38:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fe3c:	e0fff817 	ldw	r3,-32(fp)
    fe40:	e0bff617 	ldw	r2,-40(fp)
    fe44:	1885883a 	add	r2,r3,r2
    fe48:	10c1ffcc 	andi	r3,r2,2047
    fe4c:	e0bffc17 	ldw	r2,-16(fp)
    fe50:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fe54:	e0bffe17 	ldw	r2,-8(fp)
    fe58:	00bfcf16 	blt	zero,r2,fd98 <altera_avalon_jtag_uart_read+0x2c>
    fe5c:	00000106 	br	fe64 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fe60:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fe64:	e0fff517 	ldw	r3,-44(fp)
    fe68:	e0bffd17 	ldw	r2,-12(fp)
    fe6c:	1880141e 	bne	r3,r2,fec0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fe70:	e0bfff17 	ldw	r2,-4(fp)
    fe74:	1090000c 	andi	r2,r2,16384
    fe78:	1000131e 	bne	r2,zero,fec8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    fe7c:	0001883a 	nop
    fe80:	e0bffc17 	ldw	r2,-16(fp)
    fe84:	10c00a17 	ldw	r3,40(r2)
    fe88:	e0bff717 	ldw	r2,-36(fp)
    fe8c:	1880051e 	bne	r3,r2,fea4 <altera_avalon_jtag_uart_read+0x138>
    fe90:	e0bffc17 	ldw	r2,-16(fp)
    fe94:	10c00917 	ldw	r3,36(r2)
    fe98:	e0bffc17 	ldw	r2,-16(fp)
    fe9c:	10800117 	ldw	r2,4(r2)
    fea0:	18bff736 	bltu	r3,r2,fe80 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fea4:	e0bffc17 	ldw	r2,-16(fp)
    fea8:	10c00a17 	ldw	r3,40(r2)
    feac:	e0bff717 	ldw	r2,-36(fp)
    feb0:	18800726 	beq	r3,r2,fed0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    feb4:	e0bffe17 	ldw	r2,-8(fp)
    feb8:	00bfb716 	blt	zero,r2,fd98 <altera_avalon_jtag_uart_read+0x2c>
    febc:	00000506 	br	fed4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fec0:	0001883a 	nop
    fec4:	00000306 	br	fed4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fec8:	0001883a 	nop
    fecc:	00000106 	br	fed4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    fed0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    fed4:	e0fff517 	ldw	r3,-44(fp)
    fed8:	e0bffd17 	ldw	r2,-12(fp)
    fedc:	18801826 	beq	r3,r2,ff40 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fee0:	0005303a 	rdctl	r2,status
    fee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fee8:	e0fffb17 	ldw	r3,-20(fp)
    feec:	00bfff84 	movi	r2,-2
    fef0:	1884703a 	and	r2,r3,r2
    fef4:	1001703a 	wrctl	status,r2
  
  return context;
    fef8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    fefc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff00:	e0bffc17 	ldw	r2,-16(fp)
    ff04:	10800817 	ldw	r2,32(r2)
    ff08:	10c00054 	ori	r3,r2,1
    ff0c:	e0bffc17 	ldw	r2,-16(fp)
    ff10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ff14:	e0bffc17 	ldw	r2,-16(fp)
    ff18:	10800017 	ldw	r2,0(r2)
    ff1c:	10800104 	addi	r2,r2,4
    ff20:	1007883a 	mov	r3,r2
    ff24:	e0bffc17 	ldw	r2,-16(fp)
    ff28:	10800817 	ldw	r2,32(r2)
    ff2c:	18800035 	stwio	r2,0(r3)
    ff30:	e0bffa17 	ldw	r2,-24(fp)
    ff34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff38:	e0bff917 	ldw	r2,-28(fp)
    ff3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ff40:	e0fff517 	ldw	r3,-44(fp)
    ff44:	e0bffd17 	ldw	r2,-12(fp)
    ff48:	18800426 	beq	r3,r2,ff5c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ff4c:	e0fff517 	ldw	r3,-44(fp)
    ff50:	e0bffd17 	ldw	r2,-12(fp)
    ff54:	1885c83a 	sub	r2,r3,r2
    ff58:	00000606 	br	ff74 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ff5c:	e0bfff17 	ldw	r2,-4(fp)
    ff60:	1090000c 	andi	r2,r2,16384
    ff64:	10000226 	beq	r2,zero,ff70 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ff68:	00bffd44 	movi	r2,-11
    ff6c:	00000106 	br	ff74 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ff70:	00bffec4 	movi	r2,-5
}
    ff74:	e037883a 	mov	sp,fp
    ff78:	dfc00117 	ldw	ra,4(sp)
    ff7c:	df000017 	ldw	fp,0(sp)
    ff80:	dec00204 	addi	sp,sp,8
    ff84:	f800283a 	ret

0000ff88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ff88:	defff304 	addi	sp,sp,-52
    ff8c:	dfc00c15 	stw	ra,48(sp)
    ff90:	df000b15 	stw	fp,44(sp)
    ff94:	df000b04 	addi	fp,sp,44
    ff98:	e13ffc15 	stw	r4,-16(fp)
    ff9c:	e17ffd15 	stw	r5,-12(fp)
    ffa0:	e1bffe15 	stw	r6,-8(fp)
    ffa4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ffa8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ffac:	e0bffd17 	ldw	r2,-12(fp)
    ffb0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ffb4:	00003706 	br	10094 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ffb8:	e0bffc17 	ldw	r2,-16(fp)
    ffbc:	10800c17 	ldw	r2,48(r2)
    ffc0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ffc4:	e0bffc17 	ldw	r2,-16(fp)
    ffc8:	10800d17 	ldw	r2,52(r2)
    ffcc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    ffd0:	e0fff917 	ldw	r3,-28(fp)
    ffd4:	e0bff517 	ldw	r2,-44(fp)
    ffd8:	1880062e 	bgeu	r3,r2,fff4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    ffdc:	e0fff517 	ldw	r3,-44(fp)
    ffe0:	e0bff917 	ldw	r2,-28(fp)
    ffe4:	1885c83a 	sub	r2,r3,r2
    ffe8:	10bfffc4 	addi	r2,r2,-1
    ffec:	e0bff615 	stw	r2,-40(fp)
    fff0:	00000b06 	br	10020 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fff4:	e0bff517 	ldw	r2,-44(fp)
    fff8:	10000526 	beq	r2,zero,10010 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fffc:	00c20004 	movi	r3,2048
   10000:	e0bff917 	ldw	r2,-28(fp)
   10004:	1885c83a 	sub	r2,r3,r2
   10008:	e0bff615 	stw	r2,-40(fp)
   1000c:	00000406 	br	10020 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10010:	00c1ffc4 	movi	r3,2047
   10014:	e0bff917 	ldw	r2,-28(fp)
   10018:	1885c83a 	sub	r2,r3,r2
   1001c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10020:	e0bff617 	ldw	r2,-40(fp)
   10024:	10001e26 	beq	r2,zero,100a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10028:	e0fffe17 	ldw	r3,-8(fp)
   1002c:	e0bff617 	ldw	r2,-40(fp)
   10030:	1880022e 	bgeu	r3,r2,1003c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10034:	e0bffe17 	ldw	r2,-8(fp)
   10038:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1003c:	e0bffc17 	ldw	r2,-16(fp)
   10040:	10c20e04 	addi	r3,r2,2104
   10044:	e0bff917 	ldw	r2,-28(fp)
   10048:	1885883a 	add	r2,r3,r2
   1004c:	e1bff617 	ldw	r6,-40(fp)
   10050:	e17ffd17 	ldw	r5,-12(fp)
   10054:	1009883a 	mov	r4,r2
   10058:	0007ee80 	call	7ee8 <memcpy>
      ptr   += n;
   1005c:	e0fffd17 	ldw	r3,-12(fp)
   10060:	e0bff617 	ldw	r2,-40(fp)
   10064:	1885883a 	add	r2,r3,r2
   10068:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1006c:	e0fffe17 	ldw	r3,-8(fp)
   10070:	e0bff617 	ldw	r2,-40(fp)
   10074:	1885c83a 	sub	r2,r3,r2
   10078:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1007c:	e0fff917 	ldw	r3,-28(fp)
   10080:	e0bff617 	ldw	r2,-40(fp)
   10084:	1885883a 	add	r2,r3,r2
   10088:	10c1ffcc 	andi	r3,r2,2047
   1008c:	e0bffc17 	ldw	r2,-16(fp)
   10090:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10094:	e0bffe17 	ldw	r2,-8(fp)
   10098:	00bfc716 	blt	zero,r2,ffb8 <altera_avalon_jtag_uart_write+0x30>
   1009c:	00000106 	br	100a4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   100a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100a4:	0005303a 	rdctl	r2,status
   100a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100ac:	e0fffb17 	ldw	r3,-20(fp)
   100b0:	00bfff84 	movi	r2,-2
   100b4:	1884703a 	and	r2,r3,r2
   100b8:	1001703a 	wrctl	status,r2
  
  return context;
   100bc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   100c0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   100c4:	e0bffc17 	ldw	r2,-16(fp)
   100c8:	10800817 	ldw	r2,32(r2)
   100cc:	10c00094 	ori	r3,r2,2
   100d0:	e0bffc17 	ldw	r2,-16(fp)
   100d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   100d8:	e0bffc17 	ldw	r2,-16(fp)
   100dc:	10800017 	ldw	r2,0(r2)
   100e0:	10800104 	addi	r2,r2,4
   100e4:	1007883a 	mov	r3,r2
   100e8:	e0bffc17 	ldw	r2,-16(fp)
   100ec:	10800817 	ldw	r2,32(r2)
   100f0:	18800035 	stwio	r2,0(r3)
   100f4:	e0bffa17 	ldw	r2,-24(fp)
   100f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100fc:	e0bff817 	ldw	r2,-32(fp)
   10100:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10104:	e0bffe17 	ldw	r2,-8(fp)
   10108:	0080100e 	bge	zero,r2,1014c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1010c:	e0bfff17 	ldw	r2,-4(fp)
   10110:	1090000c 	andi	r2,r2,16384
   10114:	1000101e 	bne	r2,zero,10158 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10118:	0001883a 	nop
   1011c:	e0bffc17 	ldw	r2,-16(fp)
   10120:	10c00d17 	ldw	r3,52(r2)
   10124:	e0bff517 	ldw	r2,-44(fp)
   10128:	1880051e 	bne	r3,r2,10140 <altera_avalon_jtag_uart_write+0x1b8>
   1012c:	e0bffc17 	ldw	r2,-16(fp)
   10130:	10c00917 	ldw	r3,36(r2)
   10134:	e0bffc17 	ldw	r2,-16(fp)
   10138:	10800117 	ldw	r2,4(r2)
   1013c:	18bff736 	bltu	r3,r2,1011c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10140:	e0bffc17 	ldw	r2,-16(fp)
   10144:	10800917 	ldw	r2,36(r2)
   10148:	1000051e 	bne	r2,zero,10160 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1014c:	e0bffe17 	ldw	r2,-8(fp)
   10150:	00bfd016 	blt	zero,r2,10094 <altera_avalon_jtag_uart_write+0x10c>
   10154:	00000306 	br	10164 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10158:	0001883a 	nop
   1015c:	00000106 	br	10164 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10160:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10164:	e0fffd17 	ldw	r3,-12(fp)
   10168:	e0bff717 	ldw	r2,-36(fp)
   1016c:	18800426 	beq	r3,r2,10180 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10170:	e0fffd17 	ldw	r3,-12(fp)
   10174:	e0bff717 	ldw	r2,-36(fp)
   10178:	1885c83a 	sub	r2,r3,r2
   1017c:	00000606 	br	10198 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10180:	e0bfff17 	ldw	r2,-4(fp)
   10184:	1090000c 	andi	r2,r2,16384
   10188:	10000226 	beq	r2,zero,10194 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1018c:	00bffd44 	movi	r2,-11
   10190:	00000106 	br	10198 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10194:	00bffec4 	movi	r2,-5
}
   10198:	e037883a 	mov	sp,fp
   1019c:	dfc00117 	ldw	ra,4(sp)
   101a0:	df000017 	ldw	fp,0(sp)
   101a4:	dec00204 	addi	sp,sp,8
   101a8:	f800283a 	ret

000101ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   101ac:	defffa04 	addi	sp,sp,-24
   101b0:	dfc00515 	stw	ra,20(sp)
   101b4:	df000415 	stw	fp,16(sp)
   101b8:	df000404 	addi	fp,sp,16
   101bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   101c0:	0007883a 	mov	r3,zero
   101c4:	e0bfff17 	ldw	r2,-4(fp)
   101c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   101cc:	e0bfff17 	ldw	r2,-4(fp)
   101d0:	10800104 	addi	r2,r2,4
   101d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101d8:	0005303a 	rdctl	r2,status
   101dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   101e0:	e0fffd17 	ldw	r3,-12(fp)
   101e4:	00bfff84 	movi	r2,-2
   101e8:	1884703a 	and	r2,r3,r2
   101ec:	1001703a 	wrctl	status,r2
  
  return context;
   101f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   101f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   101f8:	0010f280 	call	10f28 <alt_tick>
   101fc:	e0bffc17 	ldw	r2,-16(fp)
   10200:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10204:	e0bffe17 	ldw	r2,-8(fp)
   10208:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1020c:	0001883a 	nop
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

00010224 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10224:	defff804 	addi	sp,sp,-32
   10228:	dfc00715 	stw	ra,28(sp)
   1022c:	df000615 	stw	fp,24(sp)
   10230:	df000604 	addi	fp,sp,24
   10234:	e13ffc15 	stw	r4,-16(fp)
   10238:	e17ffd15 	stw	r5,-12(fp)
   1023c:	e1bffe15 	stw	r6,-8(fp)
   10240:	e1ffff15 	stw	r7,-4(fp)
   10244:	e0bfff17 	ldw	r2,-4(fp)
   10248:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1024c:	d0a6e217 	ldw	r2,-25720(gp)
   10250:	1000021e 	bne	r2,zero,1025c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10254:	e0bffb17 	ldw	r2,-20(fp)
   10258:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1025c:	e0bffc17 	ldw	r2,-16(fp)
   10260:	10800104 	addi	r2,r2,4
   10264:	00c001c4 	movi	r3,7
   10268:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1026c:	d8000015 	stw	zero,0(sp)
   10270:	e1fffc17 	ldw	r7,-16(fp)
   10274:	01800074 	movhi	r6,1
   10278:	31806b04 	addi	r6,r6,428
   1027c:	e17ffe17 	ldw	r5,-8(fp)
   10280:	e13ffd17 	ldw	r4,-12(fp)
   10284:	00108580 	call	10858 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10288:	0001883a 	nop
   1028c:	e037883a 	mov	sp,fp
   10290:	dfc00117 	ldw	ra,4(sp)
   10294:	df000017 	ldw	fp,0(sp)
   10298:	dec00204 	addi	sp,sp,8
   1029c:	f800283a 	ret

000102a0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   102a0:	defffe04 	addi	sp,sp,-8
   102a4:	df000115 	stw	fp,4(sp)
   102a8:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   102ac:	d0a6df17 	ldw	r2,-25732(gp)
   102b0:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   102b4:	d0a6e017 	ldw	r2,-25728(gp)
   102b8:	1000021e 	bne	r2,zero,102c4 <alt_timestamp_start+0x24>
  {
    return -1;
   102bc:	00bfffc4 	movi	r2,-1
   102c0:	00001106 	br	10308 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   102c4:	e0bfff17 	ldw	r2,-4(fp)
   102c8:	10800104 	addi	r2,r2,4
   102cc:	00c00204 	movi	r3,8
   102d0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   102d4:	e0bfff17 	ldw	r2,-4(fp)
   102d8:	10800204 	addi	r2,r2,8
   102dc:	00ffffd4 	movui	r3,65535
   102e0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   102e4:	e0bfff17 	ldw	r2,-4(fp)
   102e8:	10800304 	addi	r2,r2,12
   102ec:	00ffffd4 	movui	r3,65535
   102f0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   102f4:	e0bfff17 	ldw	r2,-4(fp)
   102f8:	10800104 	addi	r2,r2,4
   102fc:	00c00104 	movi	r3,4
   10300:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   10304:	0005883a 	mov	r2,zero
}
   10308:	e037883a 	mov	sp,fp
   1030c:	df000017 	ldw	fp,0(sp)
   10310:	dec00104 	addi	sp,sp,4
   10314:	f800283a 	ret

00010318 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   10318:	defffc04 	addi	sp,sp,-16
   1031c:	df000315 	stw	fp,12(sp)
   10320:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10324:	d0a6df17 	ldw	r2,-25732(gp)
   10328:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1032c:	d0a6e017 	ldw	r2,-25728(gp)
   10330:	1000021e 	bne	r2,zero,1033c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10334:	00bfffc4 	movi	r2,-1
   10338:	00001306 	br	10388 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1033c:	e0bffd17 	ldw	r2,-12(fp)
   10340:	10800404 	addi	r2,r2,16
   10344:	0007883a 	mov	r3,zero
   10348:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1034c:	e0bffd17 	ldw	r2,-12(fp)
   10350:	10800404 	addi	r2,r2,16
   10354:	10800037 	ldwio	r2,0(r2)
   10358:	10bfffcc 	andi	r2,r2,65535
   1035c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10360:	e0bffd17 	ldw	r2,-12(fp)
   10364:	10800504 	addi	r2,r2,20
   10368:	10800037 	ldwio	r2,0(r2)
   1036c:	10bfffcc 	andi	r2,r2,65535
   10370:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10374:	e0bfff17 	ldw	r2,-4(fp)
   10378:	1006943a 	slli	r3,r2,16
   1037c:	e0bffe17 	ldw	r2,-8(fp)
   10380:	1884b03a 	or	r2,r3,r2
   10384:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10388:	e037883a 	mov	sp,fp
   1038c:	df000017 	ldw	fp,0(sp)
   10390:	dec00104 	addi	sp,sp,4
   10394:	f800283a 	ret

00010398 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10398:	deffff04 	addi	sp,sp,-4
   1039c:	df000015 	stw	fp,0(sp)
   103a0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   103a4:	d0a6e017 	ldw	r2,-25728(gp)
}
   103a8:	e037883a 	mov	sp,fp
   103ac:	df000017 	ldw	fp,0(sp)
   103b0:	dec00104 	addi	sp,sp,4
   103b4:	f800283a 	ret

000103b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   103b8:	defff504 	addi	sp,sp,-44
   103bc:	df000a15 	stw	fp,40(sp)
   103c0:	df000a04 	addi	fp,sp,40
   103c4:	e13ffc15 	stw	r4,-16(fp)
   103c8:	e17ffd15 	stw	r5,-12(fp)
   103cc:	e1bffe15 	stw	r6,-8(fp)
   103d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   103d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   103d8:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
   103dc:	10003c26 	beq	r2,zero,104d0 <alt_alarm_start+0x118>
  {
    if (alarm)
   103e0:	e0bffc17 	ldw	r2,-16(fp)
   103e4:	10003826 	beq	r2,zero,104c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	e0fffe17 	ldw	r3,-8(fp)
   103f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   103f4:	e0bffc17 	ldw	r2,-16(fp)
   103f8:	e0ffff17 	ldw	r3,-4(fp)
   103fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10400:	0005303a 	rdctl	r2,status
   10404:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10408:	e0fff917 	ldw	r3,-28(fp)
   1040c:	00bfff84 	movi	r2,-2
   10410:	1884703a 	and	r2,r3,r2
   10414:	1001703a 	wrctl	status,r2
  
  return context;
   10418:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1041c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10420:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
   10424:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10428:	e0fffd17 	ldw	r3,-12(fp)
   1042c:	e0bff617 	ldw	r2,-40(fp)
   10430:	1885883a 	add	r2,r3,r2
   10434:	10c00044 	addi	r3,r2,1
   10438:	e0bffc17 	ldw	r2,-16(fp)
   1043c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10440:	e0bffc17 	ldw	r2,-16(fp)
   10444:	10c00217 	ldw	r3,8(r2)
   10448:	e0bff617 	ldw	r2,-40(fp)
   1044c:	1880042e 	bgeu	r3,r2,10460 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10450:	e0bffc17 	ldw	r2,-16(fp)
   10454:	00c00044 	movi	r3,1
   10458:	10c00405 	stb	r3,16(r2)
   1045c:	00000206 	br	10468 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10460:	e0bffc17 	ldw	r2,-16(fp)
   10464:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10468:	e0bffc17 	ldw	r2,-16(fp)
   1046c:	d0e00e04 	addi	r3,gp,-32712
   10470:	e0fffa15 	stw	r3,-24(fp)
   10474:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10478:	e0bffb17 	ldw	r2,-20(fp)
   1047c:	e0fffa17 	ldw	r3,-24(fp)
   10480:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10484:	e0bffa17 	ldw	r2,-24(fp)
   10488:	10c00017 	ldw	r3,0(r2)
   1048c:	e0bffb17 	ldw	r2,-20(fp)
   10490:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10494:	e0bffa17 	ldw	r2,-24(fp)
   10498:	10800017 	ldw	r2,0(r2)
   1049c:	e0fffb17 	ldw	r3,-20(fp)
   104a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   104a4:	e0bffa17 	ldw	r2,-24(fp)
   104a8:	e0fffb17 	ldw	r3,-20(fp)
   104ac:	10c00015 	stw	r3,0(r2)
   104b0:	e0bff817 	ldw	r2,-32(fp)
   104b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104b8:	e0bff717 	ldw	r2,-36(fp)
   104bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   104c0:	0005883a 	mov	r2,zero
   104c4:	00000306 	br	104d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   104c8:	00bffa84 	movi	r2,-22
   104cc:	00000106 	br	104d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   104d0:	00bfde84 	movi	r2,-134
  }
}
   104d4:	e037883a 	mov	sp,fp
   104d8:	df000017 	ldw	fp,0(sp)
   104dc:	dec00104 	addi	sp,sp,4
   104e0:	f800283a 	ret

000104e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   104e4:	defffa04 	addi	sp,sp,-24
   104e8:	dfc00515 	stw	ra,20(sp)
   104ec:	df000415 	stw	fp,16(sp)
   104f0:	df000404 	addi	fp,sp,16
   104f4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   104f8:	008000c4 	movi	r2,3
   104fc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10500:	e0fffd17 	ldw	r3,-12(fp)
   10504:	008003f4 	movhi	r2,15
   10508:	10909004 	addi	r2,r2,16960
   1050c:	1885383a 	mul	r2,r3,r2
   10510:	100b883a 	mov	r5,r2
   10514:	0100bef4 	movhi	r4,763
   10518:	213c2004 	addi	r4,r4,-3968
   1051c:	000c5c40 	call	c5c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10520:	100b883a 	mov	r5,r2
   10524:	01200034 	movhi	r4,32768
   10528:	213fffc4 	addi	r4,r4,-1
   1052c:	000c5c40 	call	c5c4 <__udivsi3>
   10530:	100b883a 	mov	r5,r2
   10534:	e13fff17 	ldw	r4,-4(fp)
   10538:	000c5c40 	call	c5c4 <__udivsi3>
   1053c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10540:	e0bffe17 	ldw	r2,-8(fp)
   10544:	10002a26 	beq	r2,zero,105f0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10548:	e03ffc15 	stw	zero,-16(fp)
   1054c:	00001706 	br	105ac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10550:	00a00034 	movhi	r2,32768
   10554:	10bfffc4 	addi	r2,r2,-1
   10558:	10bfffc4 	addi	r2,r2,-1
   1055c:	103ffe1e 	bne	r2,zero,10558 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10560:	e0fffd17 	ldw	r3,-12(fp)
   10564:	008003f4 	movhi	r2,15
   10568:	10909004 	addi	r2,r2,16960
   1056c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10570:	100b883a 	mov	r5,r2
   10574:	0100bef4 	movhi	r4,763
   10578:	213c2004 	addi	r4,r4,-3968
   1057c:	000c5c40 	call	c5c4 <__udivsi3>
   10580:	100b883a 	mov	r5,r2
   10584:	01200034 	movhi	r4,32768
   10588:	213fffc4 	addi	r4,r4,-1
   1058c:	000c5c40 	call	c5c4 <__udivsi3>
   10590:	1007883a 	mov	r3,r2
   10594:	e0bfff17 	ldw	r2,-4(fp)
   10598:	10c5c83a 	sub	r2,r2,r3
   1059c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   105a0:	e0bffc17 	ldw	r2,-16(fp)
   105a4:	10800044 	addi	r2,r2,1
   105a8:	e0bffc15 	stw	r2,-16(fp)
   105ac:	e0fffc17 	ldw	r3,-16(fp)
   105b0:	e0bffe17 	ldw	r2,-8(fp)
   105b4:	18bfe616 	blt	r3,r2,10550 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   105b8:	e0fffd17 	ldw	r3,-12(fp)
   105bc:	008003f4 	movhi	r2,15
   105c0:	10909004 	addi	r2,r2,16960
   105c4:	1885383a 	mul	r2,r3,r2
   105c8:	100b883a 	mov	r5,r2
   105cc:	0100bef4 	movhi	r4,763
   105d0:	213c2004 	addi	r4,r4,-3968
   105d4:	000c5c40 	call	c5c4 <__udivsi3>
   105d8:	1007883a 	mov	r3,r2
   105dc:	e0bfff17 	ldw	r2,-4(fp)
   105e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   105e4:	10bfffc4 	addi	r2,r2,-1
   105e8:	103ffe1e 	bne	r2,zero,105e4 <alt_busy_sleep+0x100>
   105ec:	00000d06 	br	10624 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   105f0:	e0fffd17 	ldw	r3,-12(fp)
   105f4:	008003f4 	movhi	r2,15
   105f8:	10909004 	addi	r2,r2,16960
   105fc:	1885383a 	mul	r2,r3,r2
   10600:	100b883a 	mov	r5,r2
   10604:	0100bef4 	movhi	r4,763
   10608:	213c2004 	addi	r4,r4,-3968
   1060c:	000c5c40 	call	c5c4 <__udivsi3>
   10610:	1007883a 	mov	r3,r2
   10614:	e0bfff17 	ldw	r2,-4(fp)
   10618:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1061c:	10bfffc4 	addi	r2,r2,-1
   10620:	00bffe16 	blt	zero,r2,1061c <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10624:	0005883a 	mov	r2,zero
}
   10628:	e037883a 	mov	sp,fp
   1062c:	dfc00117 	ldw	ra,4(sp)
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00204 	addi	sp,sp,8
   10638:	f800283a 	ret

0001063c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1063c:	defffe04 	addi	sp,sp,-8
   10640:	df000115 	stw	fp,4(sp)
   10644:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10648:	e03fff15 	stw	zero,-4(fp)
   1064c:	00000506 	br	10664 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10650:	e0bfff17 	ldw	r2,-4(fp)
   10654:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10658:	e0bfff17 	ldw	r2,-4(fp)
   1065c:	10800804 	addi	r2,r2,32
   10660:	e0bfff15 	stw	r2,-4(fp)
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	10a00030 	cmpltui	r2,r2,32768
   1066c:	103ff81e 	bne	r2,zero,10650 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10670:	0001883a 	nop
   10674:	e037883a 	mov	sp,fp
   10678:	df000017 	ldw	fp,0(sp)
   1067c:	dec00104 	addi	sp,sp,4
   10680:	f800283a 	ret

00010684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10684:	defffe04 	addi	sp,sp,-8
   10688:	dfc00115 	stw	ra,4(sp)
   1068c:	df000015 	stw	fp,0(sp)
   10690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10694:	d0a00b17 	ldw	r2,-32724(gp)
   10698:	10000326 	beq	r2,zero,106a8 <alt_get_errno+0x24>
   1069c:	d0a00b17 	ldw	r2,-32724(gp)
   106a0:	103ee83a 	callr	r2
   106a4:	00000106 	br	106ac <alt_get_errno+0x28>
   106a8:	d0a6d804 	addi	r2,gp,-25760
}
   106ac:	e037883a 	mov	sp,fp
   106b0:	dfc00117 	ldw	ra,4(sp)
   106b4:	df000017 	ldw	fp,0(sp)
   106b8:	dec00204 	addi	sp,sp,8
   106bc:	f800283a 	ret

000106c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   106c0:	defffa04 	addi	sp,sp,-24
   106c4:	dfc00515 	stw	ra,20(sp)
   106c8:	df000415 	stw	fp,16(sp)
   106cc:	df000404 	addi	fp,sp,16
   106d0:	e13ffe15 	stw	r4,-8(fp)
   106d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   106d8:	e0bffe17 	ldw	r2,-8(fp)
   106dc:	10000326 	beq	r2,zero,106ec <alt_dev_llist_insert+0x2c>
   106e0:	e0bffe17 	ldw	r2,-8(fp)
   106e4:	10800217 	ldw	r2,8(r2)
   106e8:	1000061e 	bne	r2,zero,10704 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   106ec:	00106840 	call	10684 <alt_get_errno>
   106f0:	1007883a 	mov	r3,r2
   106f4:	00800584 	movi	r2,22
   106f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   106fc:	00bffa84 	movi	r2,-22
   10700:	00001306 	br	10750 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10704:	e0bffe17 	ldw	r2,-8(fp)
   10708:	e0ffff17 	ldw	r3,-4(fp)
   1070c:	e0fffc15 	stw	r3,-16(fp)
   10710:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10714:	e0bffd17 	ldw	r2,-12(fp)
   10718:	e0fffc17 	ldw	r3,-16(fp)
   1071c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10720:	e0bffc17 	ldw	r2,-16(fp)
   10724:	10c00017 	ldw	r3,0(r2)
   10728:	e0bffd17 	ldw	r2,-12(fp)
   1072c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10730:	e0bffc17 	ldw	r2,-16(fp)
   10734:	10800017 	ldw	r2,0(r2)
   10738:	e0fffd17 	ldw	r3,-12(fp)
   1073c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10740:	e0bffc17 	ldw	r2,-16(fp)
   10744:	e0fffd17 	ldw	r3,-12(fp)
   10748:	10c00015 	stw	r3,0(r2)

  return 0;  
   1074c:	0005883a 	mov	r2,zero
}
   10750:	e037883a 	mov	sp,fp
   10754:	dfc00117 	ldw	ra,4(sp)
   10758:	df000017 	ldw	fp,0(sp)
   1075c:	dec00204 	addi	sp,sp,8
   10760:	f800283a 	ret

00010764 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10764:	defffd04 	addi	sp,sp,-12
   10768:	dfc00215 	stw	ra,8(sp)
   1076c:	df000115 	stw	fp,4(sp)
   10770:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10774:	00800074 	movhi	r2,1
   10778:	1085d304 	addi	r2,r2,5964
   1077c:	e0bfff15 	stw	r2,-4(fp)
   10780:	00000606 	br	1079c <_do_ctors+0x38>
        (*ctor) (); 
   10784:	e0bfff17 	ldw	r2,-4(fp)
   10788:	10800017 	ldw	r2,0(r2)
   1078c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10790:	e0bfff17 	ldw	r2,-4(fp)
   10794:	10bfff04 	addi	r2,r2,-4
   10798:	e0bfff15 	stw	r2,-4(fp)
   1079c:	e0ffff17 	ldw	r3,-4(fp)
   107a0:	00800074 	movhi	r2,1
   107a4:	1085d404 	addi	r2,r2,5968
   107a8:	18bff62e 	bgeu	r3,r2,10784 <_do_ctors+0x20>
        (*ctor) (); 
}
   107ac:	0001883a 	nop
   107b0:	e037883a 	mov	sp,fp
   107b4:	dfc00117 	ldw	ra,4(sp)
   107b8:	df000017 	ldw	fp,0(sp)
   107bc:	dec00204 	addi	sp,sp,8
   107c0:	f800283a 	ret

000107c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   107c4:	defffd04 	addi	sp,sp,-12
   107c8:	dfc00215 	stw	ra,8(sp)
   107cc:	df000115 	stw	fp,4(sp)
   107d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   107d4:	00800074 	movhi	r2,1
   107d8:	1085d304 	addi	r2,r2,5964
   107dc:	e0bfff15 	stw	r2,-4(fp)
   107e0:	00000606 	br	107fc <_do_dtors+0x38>
        (*dtor) (); 
   107e4:	e0bfff17 	ldw	r2,-4(fp)
   107e8:	10800017 	ldw	r2,0(r2)
   107ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   107f0:	e0bfff17 	ldw	r2,-4(fp)
   107f4:	10bfff04 	addi	r2,r2,-4
   107f8:	e0bfff15 	stw	r2,-4(fp)
   107fc:	e0ffff17 	ldw	r3,-4(fp)
   10800:	00800074 	movhi	r2,1
   10804:	1085d404 	addi	r2,r2,5968
   10808:	18bff62e 	bgeu	r3,r2,107e4 <_do_dtors+0x20>
        (*dtor) (); 
}
   1080c:	0001883a 	nop
   10810:	e037883a 	mov	sp,fp
   10814:	dfc00117 	ldw	ra,4(sp)
   10818:	df000017 	ldw	fp,0(sp)
   1081c:	dec00204 	addi	sp,sp,8
   10820:	f800283a 	ret

00010824 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10824:	defffe04 	addi	sp,sp,-8
   10828:	dfc00115 	stw	ra,4(sp)
   1082c:	df000015 	stw	fp,0(sp)
   10830:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10834:	01440004 	movi	r5,4096
   10838:	0009883a 	mov	r4,zero
   1083c:	00112900 	call	11290 <alt_icache_flush>
#endif
}
   10840:	0001883a 	nop
   10844:	e037883a 	mov	sp,fp
   10848:	dfc00117 	ldw	ra,4(sp)
   1084c:	df000017 	ldw	fp,0(sp)
   10850:	dec00204 	addi	sp,sp,8
   10854:	f800283a 	ret

00010858 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10858:	defff904 	addi	sp,sp,-28
   1085c:	dfc00615 	stw	ra,24(sp)
   10860:	df000515 	stw	fp,20(sp)
   10864:	df000504 	addi	fp,sp,20
   10868:	e13ffc15 	stw	r4,-16(fp)
   1086c:	e17ffd15 	stw	r5,-12(fp)
   10870:	e1bffe15 	stw	r6,-8(fp)
   10874:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10878:	e0800217 	ldw	r2,8(fp)
   1087c:	d8800015 	stw	r2,0(sp)
   10880:	e1ffff17 	ldw	r7,-4(fp)
   10884:	e1bffe17 	ldw	r6,-8(fp)
   10888:	e17ffd17 	ldw	r5,-12(fp)
   1088c:	e13ffc17 	ldw	r4,-16(fp)
   10890:	0010a080 	call	10a08 <alt_iic_isr_register>
}  
   10894:	e037883a 	mov	sp,fp
   10898:	dfc00117 	ldw	ra,4(sp)
   1089c:	df000017 	ldw	fp,0(sp)
   108a0:	dec00204 	addi	sp,sp,8
   108a4:	f800283a 	ret

000108a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   108a8:	defff904 	addi	sp,sp,-28
   108ac:	df000615 	stw	fp,24(sp)
   108b0:	df000604 	addi	fp,sp,24
   108b4:	e13ffe15 	stw	r4,-8(fp)
   108b8:	e17fff15 	stw	r5,-4(fp)
   108bc:	e0bfff17 	ldw	r2,-4(fp)
   108c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108c4:	0005303a 	rdctl	r2,status
   108c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108cc:	e0fffb17 	ldw	r3,-20(fp)
   108d0:	00bfff84 	movi	r2,-2
   108d4:	1884703a 	and	r2,r3,r2
   108d8:	1001703a 	wrctl	status,r2
  
  return context;
   108dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   108e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   108e4:	00c00044 	movi	r3,1
   108e8:	e0bffa17 	ldw	r2,-24(fp)
   108ec:	1884983a 	sll	r2,r3,r2
   108f0:	1007883a 	mov	r3,r2
   108f4:	d0a6e117 	ldw	r2,-25724(gp)
   108f8:	1884b03a 	or	r2,r3,r2
   108fc:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10900:	d0a6e117 	ldw	r2,-25724(gp)
   10904:	100170fa 	wrctl	ienable,r2
   10908:	e0bffc17 	ldw	r2,-16(fp)
   1090c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10910:	e0bffd17 	ldw	r2,-12(fp)
   10914:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10918:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1091c:	0001883a 	nop
}
   10920:	e037883a 	mov	sp,fp
   10924:	df000017 	ldw	fp,0(sp)
   10928:	dec00104 	addi	sp,sp,4
   1092c:	f800283a 	ret

00010930 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10930:	defff904 	addi	sp,sp,-28
   10934:	df000615 	stw	fp,24(sp)
   10938:	df000604 	addi	fp,sp,24
   1093c:	e13ffe15 	stw	r4,-8(fp)
   10940:	e17fff15 	stw	r5,-4(fp)
   10944:	e0bfff17 	ldw	r2,-4(fp)
   10948:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1094c:	0005303a 	rdctl	r2,status
   10950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10954:	e0fffb17 	ldw	r3,-20(fp)
   10958:	00bfff84 	movi	r2,-2
   1095c:	1884703a 	and	r2,r3,r2
   10960:	1001703a 	wrctl	status,r2
  
  return context;
   10964:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10968:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1096c:	00c00044 	movi	r3,1
   10970:	e0bffa17 	ldw	r2,-24(fp)
   10974:	1884983a 	sll	r2,r3,r2
   10978:	0084303a 	nor	r2,zero,r2
   1097c:	1007883a 	mov	r3,r2
   10980:	d0a6e117 	ldw	r2,-25724(gp)
   10984:	1884703a 	and	r2,r3,r2
   10988:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1098c:	d0a6e117 	ldw	r2,-25724(gp)
   10990:	100170fa 	wrctl	ienable,r2
   10994:	e0bffc17 	ldw	r2,-16(fp)
   10998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1099c:	e0bffd17 	ldw	r2,-12(fp)
   109a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   109a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   109a8:	0001883a 	nop
}
   109ac:	e037883a 	mov	sp,fp
   109b0:	df000017 	ldw	fp,0(sp)
   109b4:	dec00104 	addi	sp,sp,4
   109b8:	f800283a 	ret

000109bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   109bc:	defffc04 	addi	sp,sp,-16
   109c0:	df000315 	stw	fp,12(sp)
   109c4:	df000304 	addi	fp,sp,12
   109c8:	e13ffe15 	stw	r4,-8(fp)
   109cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   109d0:	000530fa 	rdctl	r2,ienable
   109d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   109d8:	00c00044 	movi	r3,1
   109dc:	e0bfff17 	ldw	r2,-4(fp)
   109e0:	1884983a 	sll	r2,r3,r2
   109e4:	1007883a 	mov	r3,r2
   109e8:	e0bffd17 	ldw	r2,-12(fp)
   109ec:	1884703a 	and	r2,r3,r2
   109f0:	1004c03a 	cmpne	r2,r2,zero
   109f4:	10803fcc 	andi	r2,r2,255
}
   109f8:	e037883a 	mov	sp,fp
   109fc:	df000017 	ldw	fp,0(sp)
   10a00:	dec00104 	addi	sp,sp,4
   10a04:	f800283a 	ret

00010a08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10a08:	defff504 	addi	sp,sp,-44
   10a0c:	dfc00a15 	stw	ra,40(sp)
   10a10:	df000915 	stw	fp,36(sp)
   10a14:	df000904 	addi	fp,sp,36
   10a18:	e13ffc15 	stw	r4,-16(fp)
   10a1c:	e17ffd15 	stw	r5,-12(fp)
   10a20:	e1bffe15 	stw	r6,-8(fp)
   10a24:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10a28:	00bffa84 	movi	r2,-22
   10a2c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10a38:	e0bff817 	ldw	r2,-32(fp)
   10a3c:	10800808 	cmpgei	r2,r2,32
   10a40:	1000271e 	bne	r2,zero,10ae0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a44:	0005303a 	rdctl	r2,status
   10a48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a4c:	e0fffb17 	ldw	r3,-20(fp)
   10a50:	00bfff84 	movi	r2,-2
   10a54:	1884703a 	and	r2,r3,r2
   10a58:	1001703a 	wrctl	status,r2
  
  return context;
   10a5c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10a60:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10a64:	00800074 	movhi	r2,1
   10a68:	10954e04 	addi	r2,r2,21816
   10a6c:	e0fff817 	ldw	r3,-32(fp)
   10a70:	180690fa 	slli	r3,r3,3
   10a74:	10c5883a 	add	r2,r2,r3
   10a78:	e0fffe17 	ldw	r3,-8(fp)
   10a7c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10a80:	00800074 	movhi	r2,1
   10a84:	10954e04 	addi	r2,r2,21816
   10a88:	e0fff817 	ldw	r3,-32(fp)
   10a8c:	180690fa 	slli	r3,r3,3
   10a90:	10c5883a 	add	r2,r2,r3
   10a94:	10800104 	addi	r2,r2,4
   10a98:	e0ffff17 	ldw	r3,-4(fp)
   10a9c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10aa0:	e0bffe17 	ldw	r2,-8(fp)
   10aa4:	10000526 	beq	r2,zero,10abc <alt_iic_isr_register+0xb4>
   10aa8:	e0bff817 	ldw	r2,-32(fp)
   10aac:	100b883a 	mov	r5,r2
   10ab0:	e13ffc17 	ldw	r4,-16(fp)
   10ab4:	00108a80 	call	108a8 <alt_ic_irq_enable>
   10ab8:	00000406 	br	10acc <alt_iic_isr_register+0xc4>
   10abc:	e0bff817 	ldw	r2,-32(fp)
   10ac0:	100b883a 	mov	r5,r2
   10ac4:	e13ffc17 	ldw	r4,-16(fp)
   10ac8:	00109300 	call	10930 <alt_ic_irq_disable>
   10acc:	e0bff715 	stw	r2,-36(fp)
   10ad0:	e0bffa17 	ldw	r2,-24(fp)
   10ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ad8:	e0bff917 	ldw	r2,-28(fp)
   10adc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10ae0:	e0bff717 	ldw	r2,-36(fp)
}
   10ae4:	e037883a 	mov	sp,fp
   10ae8:	dfc00117 	ldw	ra,4(sp)
   10aec:	df000017 	ldw	fp,0(sp)
   10af0:	dec00204 	addi	sp,sp,8
   10af4:	f800283a 	ret

00010af8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10af8:	defff904 	addi	sp,sp,-28
   10afc:	dfc00615 	stw	ra,24(sp)
   10b00:	df000515 	stw	fp,20(sp)
   10b04:	df000504 	addi	fp,sp,20
   10b08:	e13ffc15 	stw	r4,-16(fp)
   10b0c:	e17ffd15 	stw	r5,-12(fp)
   10b10:	e1bffe15 	stw	r6,-8(fp)
   10b14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10b18:	e1bfff17 	ldw	r6,-4(fp)
   10b1c:	e17ffe17 	ldw	r5,-8(fp)
   10b20:	e13ffd17 	ldw	r4,-12(fp)
   10b24:	0010d380 	call	10d38 <open>
   10b28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10b2c:	e0bffb17 	ldw	r2,-20(fp)
   10b30:	10001c16 	blt	r2,zero,10ba4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10b34:	00800074 	movhi	r2,1
   10b38:	1089e704 	addi	r2,r2,10140
   10b3c:	e0fffb17 	ldw	r3,-20(fp)
   10b40:	18c00324 	muli	r3,r3,12
   10b44:	10c5883a 	add	r2,r2,r3
   10b48:	10c00017 	ldw	r3,0(r2)
   10b4c:	e0bffc17 	ldw	r2,-16(fp)
   10b50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10b54:	00800074 	movhi	r2,1
   10b58:	1089e704 	addi	r2,r2,10140
   10b5c:	e0fffb17 	ldw	r3,-20(fp)
   10b60:	18c00324 	muli	r3,r3,12
   10b64:	10c5883a 	add	r2,r2,r3
   10b68:	10800104 	addi	r2,r2,4
   10b6c:	10c00017 	ldw	r3,0(r2)
   10b70:	e0bffc17 	ldw	r2,-16(fp)
   10b74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10b78:	00800074 	movhi	r2,1
   10b7c:	1089e704 	addi	r2,r2,10140
   10b80:	e0fffb17 	ldw	r3,-20(fp)
   10b84:	18c00324 	muli	r3,r3,12
   10b88:	10c5883a 	add	r2,r2,r3
   10b8c:	10800204 	addi	r2,r2,8
   10b90:	10c00017 	ldw	r3,0(r2)
   10b94:	e0bffc17 	ldw	r2,-16(fp)
   10b98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10b9c:	e13ffb17 	ldw	r4,-20(fp)
   10ba0:	000f3e40 	call	f3e4 <alt_release_fd>
  }
} 
   10ba4:	0001883a 	nop
   10ba8:	e037883a 	mov	sp,fp
   10bac:	dfc00117 	ldw	ra,4(sp)
   10bb0:	df000017 	ldw	fp,0(sp)
   10bb4:	dec00204 	addi	sp,sp,8
   10bb8:	f800283a 	ret

00010bbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10bbc:	defffb04 	addi	sp,sp,-20
   10bc0:	dfc00415 	stw	ra,16(sp)
   10bc4:	df000315 	stw	fp,12(sp)
   10bc8:	df000304 	addi	fp,sp,12
   10bcc:	e13ffd15 	stw	r4,-12(fp)
   10bd0:	e17ffe15 	stw	r5,-8(fp)
   10bd4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10bd8:	01c07fc4 	movi	r7,511
   10bdc:	01800044 	movi	r6,1
   10be0:	e17ffd17 	ldw	r5,-12(fp)
   10be4:	01000074 	movhi	r4,1
   10be8:	2109ea04 	addi	r4,r4,10152
   10bec:	0010af80 	call	10af8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10bf0:	01c07fc4 	movi	r7,511
   10bf4:	000d883a 	mov	r6,zero
   10bf8:	e17ffe17 	ldw	r5,-8(fp)
   10bfc:	01000074 	movhi	r4,1
   10c00:	2109e704 	addi	r4,r4,10140
   10c04:	0010af80 	call	10af8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10c08:	01c07fc4 	movi	r7,511
   10c0c:	01800044 	movi	r6,1
   10c10:	e17fff17 	ldw	r5,-4(fp)
   10c14:	01000074 	movhi	r4,1
   10c18:	2109ed04 	addi	r4,r4,10164
   10c1c:	0010af80 	call	10af8 <alt_open_fd>
}  
   10c20:	0001883a 	nop
   10c24:	e037883a 	mov	sp,fp
   10c28:	dfc00117 	ldw	ra,4(sp)
   10c2c:	df000017 	ldw	fp,0(sp)
   10c30:	dec00204 	addi	sp,sp,8
   10c34:	f800283a 	ret

00010c38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c38:	defffe04 	addi	sp,sp,-8
   10c3c:	dfc00115 	stw	ra,4(sp)
   10c40:	df000015 	stw	fp,0(sp)
   10c44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10c48:	d0a00b17 	ldw	r2,-32724(gp)
   10c4c:	10000326 	beq	r2,zero,10c5c <alt_get_errno+0x24>
   10c50:	d0a00b17 	ldw	r2,-32724(gp)
   10c54:	103ee83a 	callr	r2
   10c58:	00000106 	br	10c60 <alt_get_errno+0x28>
   10c5c:	d0a6d804 	addi	r2,gp,-25760
}
   10c60:	e037883a 	mov	sp,fp
   10c64:	dfc00117 	ldw	ra,4(sp)
   10c68:	df000017 	ldw	fp,0(sp)
   10c6c:	dec00204 	addi	sp,sp,8
   10c70:	f800283a 	ret

00010c74 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10c74:	defffd04 	addi	sp,sp,-12
   10c78:	df000215 	stw	fp,8(sp)
   10c7c:	df000204 	addi	fp,sp,8
   10c80:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10c84:	e0bfff17 	ldw	r2,-4(fp)
   10c88:	10800217 	ldw	r2,8(r2)
   10c8c:	10d00034 	orhi	r3,r2,16384
   10c90:	e0bfff17 	ldw	r2,-4(fp)
   10c94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10c98:	e03ffe15 	stw	zero,-8(fp)
   10c9c:	00001d06 	br	10d14 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10ca0:	00800074 	movhi	r2,1
   10ca4:	1089e704 	addi	r2,r2,10140
   10ca8:	e0fffe17 	ldw	r3,-8(fp)
   10cac:	18c00324 	muli	r3,r3,12
   10cb0:	10c5883a 	add	r2,r2,r3
   10cb4:	10c00017 	ldw	r3,0(r2)
   10cb8:	e0bfff17 	ldw	r2,-4(fp)
   10cbc:	10800017 	ldw	r2,0(r2)
   10cc0:	1880111e 	bne	r3,r2,10d08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10cc4:	00800074 	movhi	r2,1
   10cc8:	1089e704 	addi	r2,r2,10140
   10ccc:	e0fffe17 	ldw	r3,-8(fp)
   10cd0:	18c00324 	muli	r3,r3,12
   10cd4:	10c5883a 	add	r2,r2,r3
   10cd8:	10800204 	addi	r2,r2,8
   10cdc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10ce0:	1000090e 	bge	r2,zero,10d08 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10ce4:	e0bffe17 	ldw	r2,-8(fp)
   10ce8:	10c00324 	muli	r3,r2,12
   10cec:	00800074 	movhi	r2,1
   10cf0:	1089e704 	addi	r2,r2,10140
   10cf4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10cf8:	e0bfff17 	ldw	r2,-4(fp)
   10cfc:	18800226 	beq	r3,r2,10d08 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10d00:	00bffcc4 	movi	r2,-13
   10d04:	00000806 	br	10d28 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10d08:	e0bffe17 	ldw	r2,-8(fp)
   10d0c:	10800044 	addi	r2,r2,1
   10d10:	e0bffe15 	stw	r2,-8(fp)
   10d14:	d0a00a17 	ldw	r2,-32728(gp)
   10d18:	1007883a 	mov	r3,r2
   10d1c:	e0bffe17 	ldw	r2,-8(fp)
   10d20:	18bfdf2e 	bgeu	r3,r2,10ca0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10d24:	0005883a 	mov	r2,zero
}
   10d28:	e037883a 	mov	sp,fp
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00104 	addi	sp,sp,4
   10d34:	f800283a 	ret

00010d38 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10d38:	defff604 	addi	sp,sp,-40
   10d3c:	dfc00915 	stw	ra,36(sp)
   10d40:	df000815 	stw	fp,32(sp)
   10d44:	df000804 	addi	fp,sp,32
   10d48:	e13ffd15 	stw	r4,-12(fp)
   10d4c:	e17ffe15 	stw	r5,-8(fp)
   10d50:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10d54:	00bfffc4 	movi	r2,-1
   10d58:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10d5c:	00bffb44 	movi	r2,-19
   10d60:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10d64:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10d68:	d1600804 	addi	r5,gp,-32736
   10d6c:	e13ffd17 	ldw	r4,-12(fp)
   10d70:	00110540 	call	11054 <alt_find_dev>
   10d74:	e0bff815 	stw	r2,-32(fp)
   10d78:	e0bff817 	ldw	r2,-32(fp)
   10d7c:	1000051e 	bne	r2,zero,10d94 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10d80:	e13ffd17 	ldw	r4,-12(fp)
   10d84:	00110e40 	call	110e4 <alt_find_file>
   10d88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10d8c:	00800044 	movi	r2,1
   10d90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10d94:	e0bff817 	ldw	r2,-32(fp)
   10d98:	10002926 	beq	r2,zero,10e40 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10d9c:	e13ff817 	ldw	r4,-32(fp)
   10da0:	00111ec0 	call	111ec <alt_get_fd>
   10da4:	e0bff915 	stw	r2,-28(fp)
   10da8:	e0bff917 	ldw	r2,-28(fp)
   10dac:	1000030e 	bge	r2,zero,10dbc <open+0x84>
    {
      status = index;
   10db0:	e0bff917 	ldw	r2,-28(fp)
   10db4:	e0bffa15 	stw	r2,-24(fp)
   10db8:	00002306 	br	10e48 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10dbc:	e0bff917 	ldw	r2,-28(fp)
   10dc0:	10c00324 	muli	r3,r2,12
   10dc4:	00800074 	movhi	r2,1
   10dc8:	1089e704 	addi	r2,r2,10140
   10dcc:	1885883a 	add	r2,r3,r2
   10dd0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10dd4:	e0fffe17 	ldw	r3,-8(fp)
   10dd8:	00900034 	movhi	r2,16384
   10ddc:	10bfffc4 	addi	r2,r2,-1
   10de0:	1886703a 	and	r3,r3,r2
   10de4:	e0bffc17 	ldw	r2,-16(fp)
   10de8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10dec:	e0bffb17 	ldw	r2,-20(fp)
   10df0:	1000051e 	bne	r2,zero,10e08 <open+0xd0>
   10df4:	e13ffc17 	ldw	r4,-16(fp)
   10df8:	0010c740 	call	10c74 <alt_file_locked>
   10dfc:	e0bffa15 	stw	r2,-24(fp)
   10e00:	e0bffa17 	ldw	r2,-24(fp)
   10e04:	10001016 	blt	r2,zero,10e48 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10e08:	e0bff817 	ldw	r2,-32(fp)
   10e0c:	10800317 	ldw	r2,12(r2)
   10e10:	10000826 	beq	r2,zero,10e34 <open+0xfc>
   10e14:	e0bff817 	ldw	r2,-32(fp)
   10e18:	10800317 	ldw	r2,12(r2)
   10e1c:	e1ffff17 	ldw	r7,-4(fp)
   10e20:	e1bffe17 	ldw	r6,-8(fp)
   10e24:	e17ffd17 	ldw	r5,-12(fp)
   10e28:	e13ffc17 	ldw	r4,-16(fp)
   10e2c:	103ee83a 	callr	r2
   10e30:	00000106 	br	10e38 <open+0x100>
   10e34:	0005883a 	mov	r2,zero
   10e38:	e0bffa15 	stw	r2,-24(fp)
   10e3c:	00000206 	br	10e48 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10e40:	00bffb44 	movi	r2,-19
   10e44:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10e48:	e0bffa17 	ldw	r2,-24(fp)
   10e4c:	1000090e 	bge	r2,zero,10e74 <open+0x13c>
  {
    alt_release_fd (index);  
   10e50:	e13ff917 	ldw	r4,-28(fp)
   10e54:	000f3e40 	call	f3e4 <alt_release_fd>
    ALT_ERRNO = -status;
   10e58:	0010c380 	call	10c38 <alt_get_errno>
   10e5c:	1007883a 	mov	r3,r2
   10e60:	e0bffa17 	ldw	r2,-24(fp)
   10e64:	0085c83a 	sub	r2,zero,r2
   10e68:	18800015 	stw	r2,0(r3)
    return -1;
   10e6c:	00bfffc4 	movi	r2,-1
   10e70:	00000106 	br	10e78 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10e74:	e0bff917 	ldw	r2,-28(fp)
}
   10e78:	e037883a 	mov	sp,fp
   10e7c:	dfc00117 	ldw	ra,4(sp)
   10e80:	df000017 	ldw	fp,0(sp)
   10e84:	dec00204 	addi	sp,sp,8
   10e88:	f800283a 	ret

00010e8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10e8c:	defffa04 	addi	sp,sp,-24
   10e90:	df000515 	stw	fp,20(sp)
   10e94:	df000504 	addi	fp,sp,20
   10e98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e9c:	0005303a 	rdctl	r2,status
   10ea0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ea4:	e0fffc17 	ldw	r3,-16(fp)
   10ea8:	00bfff84 	movi	r2,-2
   10eac:	1884703a 	and	r2,r3,r2
   10eb0:	1001703a 	wrctl	status,r2
  
  return context;
   10eb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10eb8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10ebc:	e0bfff17 	ldw	r2,-4(fp)
   10ec0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10ec4:	e0bffd17 	ldw	r2,-12(fp)
   10ec8:	10800017 	ldw	r2,0(r2)
   10ecc:	e0fffd17 	ldw	r3,-12(fp)
   10ed0:	18c00117 	ldw	r3,4(r3)
   10ed4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10ed8:	e0bffd17 	ldw	r2,-12(fp)
   10edc:	10800117 	ldw	r2,4(r2)
   10ee0:	e0fffd17 	ldw	r3,-12(fp)
   10ee4:	18c00017 	ldw	r3,0(r3)
   10ee8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10eec:	e0bffd17 	ldw	r2,-12(fp)
   10ef0:	e0fffd17 	ldw	r3,-12(fp)
   10ef4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10ef8:	e0bffd17 	ldw	r2,-12(fp)
   10efc:	e0fffd17 	ldw	r3,-12(fp)
   10f00:	10c00015 	stw	r3,0(r2)
   10f04:	e0bffb17 	ldw	r2,-20(fp)
   10f08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f0c:	e0bffe17 	ldw	r2,-8(fp)
   10f10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10f14:	0001883a 	nop
   10f18:	e037883a 	mov	sp,fp
   10f1c:	df000017 	ldw	fp,0(sp)
   10f20:	dec00104 	addi	sp,sp,4
   10f24:	f800283a 	ret

00010f28 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10f28:	defffb04 	addi	sp,sp,-20
   10f2c:	dfc00415 	stw	ra,16(sp)
   10f30:	df000315 	stw	fp,12(sp)
   10f34:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10f38:	d0a00e17 	ldw	r2,-32712(gp)
   10f3c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10f40:	d0a6e317 	ldw	r2,-25716(gp)
   10f44:	10800044 	addi	r2,r2,1
   10f48:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10f4c:	00002e06 	br	11008 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10f50:	e0bffd17 	ldw	r2,-12(fp)
   10f54:	10800017 	ldw	r2,0(r2)
   10f58:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10f5c:	e0bffd17 	ldw	r2,-12(fp)
   10f60:	10800403 	ldbu	r2,16(r2)
   10f64:	10803fcc 	andi	r2,r2,255
   10f68:	10000426 	beq	r2,zero,10f7c <alt_tick+0x54>
   10f6c:	d0a6e317 	ldw	r2,-25716(gp)
   10f70:	1000021e 	bne	r2,zero,10f7c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10f74:	e0bffd17 	ldw	r2,-12(fp)
   10f78:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10f7c:	e0bffd17 	ldw	r2,-12(fp)
   10f80:	10800217 	ldw	r2,8(r2)
   10f84:	d0e6e317 	ldw	r3,-25716(gp)
   10f88:	18801d36 	bltu	r3,r2,11000 <alt_tick+0xd8>
   10f8c:	e0bffd17 	ldw	r2,-12(fp)
   10f90:	10800403 	ldbu	r2,16(r2)
   10f94:	10803fcc 	andi	r2,r2,255
   10f98:	1000191e 	bne	r2,zero,11000 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10f9c:	e0bffd17 	ldw	r2,-12(fp)
   10fa0:	10800317 	ldw	r2,12(r2)
   10fa4:	e0fffd17 	ldw	r3,-12(fp)
   10fa8:	18c00517 	ldw	r3,20(r3)
   10fac:	1809883a 	mov	r4,r3
   10fb0:	103ee83a 	callr	r2
   10fb4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10fb8:	e0bfff17 	ldw	r2,-4(fp)
   10fbc:	1000031e 	bne	r2,zero,10fcc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10fc0:	e13ffd17 	ldw	r4,-12(fp)
   10fc4:	0010e8c0 	call	10e8c <alt_alarm_stop>
   10fc8:	00000d06 	br	11000 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10fcc:	e0bffd17 	ldw	r2,-12(fp)
   10fd0:	10c00217 	ldw	r3,8(r2)
   10fd4:	e0bfff17 	ldw	r2,-4(fp)
   10fd8:	1887883a 	add	r3,r3,r2
   10fdc:	e0bffd17 	ldw	r2,-12(fp)
   10fe0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10fe4:	e0bffd17 	ldw	r2,-12(fp)
   10fe8:	10c00217 	ldw	r3,8(r2)
   10fec:	d0a6e317 	ldw	r2,-25716(gp)
   10ff0:	1880032e 	bgeu	r3,r2,11000 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10ff4:	e0bffd17 	ldw	r2,-12(fp)
   10ff8:	00c00044 	movi	r3,1
   10ffc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11000:	e0bffe17 	ldw	r2,-8(fp)
   11004:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11008:	e0fffd17 	ldw	r3,-12(fp)
   1100c:	d0a00e04 	addi	r2,gp,-32712
   11010:	18bfcf1e 	bne	r3,r2,10f50 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11014:	0001883a 	nop
}
   11018:	0001883a 	nop
   1101c:	e037883a 	mov	sp,fp
   11020:	dfc00117 	ldw	ra,4(sp)
   11024:	df000017 	ldw	fp,0(sp)
   11028:	dec00204 	addi	sp,sp,8
   1102c:	f800283a 	ret

00011030 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11030:	deffff04 	addi	sp,sp,-4
   11034:	df000015 	stw	fp,0(sp)
   11038:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1103c:	000170fa 	wrctl	ienable,zero
}
   11040:	0001883a 	nop
   11044:	e037883a 	mov	sp,fp
   11048:	df000017 	ldw	fp,0(sp)
   1104c:	dec00104 	addi	sp,sp,4
   11050:	f800283a 	ret

00011054 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11054:	defffa04 	addi	sp,sp,-24
   11058:	dfc00515 	stw	ra,20(sp)
   1105c:	df000415 	stw	fp,16(sp)
   11060:	df000404 	addi	fp,sp,16
   11064:	e13ffe15 	stw	r4,-8(fp)
   11068:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1106c:	e0bfff17 	ldw	r2,-4(fp)
   11070:	10800017 	ldw	r2,0(r2)
   11074:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11078:	e13ffe17 	ldw	r4,-8(fp)
   1107c:	0002d680 	call	2d68 <strlen>
   11080:	10800044 	addi	r2,r2,1
   11084:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11088:	00000d06 	br	110c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1108c:	e0bffc17 	ldw	r2,-16(fp)
   11090:	10800217 	ldw	r2,8(r2)
   11094:	e0fffd17 	ldw	r3,-12(fp)
   11098:	180d883a 	mov	r6,r3
   1109c:	e17ffe17 	ldw	r5,-8(fp)
   110a0:	1009883a 	mov	r4,r2
   110a4:	00114080 	call	11408 <memcmp>
   110a8:	1000021e 	bne	r2,zero,110b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   110ac:	e0bffc17 	ldw	r2,-16(fp)
   110b0:	00000706 	br	110d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   110b4:	e0bffc17 	ldw	r2,-16(fp)
   110b8:	10800017 	ldw	r2,0(r2)
   110bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   110c0:	e0fffc17 	ldw	r3,-16(fp)
   110c4:	e0bfff17 	ldw	r2,-4(fp)
   110c8:	18bff01e 	bne	r3,r2,1108c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   110cc:	0005883a 	mov	r2,zero
}
   110d0:	e037883a 	mov	sp,fp
   110d4:	dfc00117 	ldw	ra,4(sp)
   110d8:	df000017 	ldw	fp,0(sp)
   110dc:	dec00204 	addi	sp,sp,8
   110e0:	f800283a 	ret

000110e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   110e4:	defffb04 	addi	sp,sp,-20
   110e8:	dfc00415 	stw	ra,16(sp)
   110ec:	df000315 	stw	fp,12(sp)
   110f0:	df000304 	addi	fp,sp,12
   110f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   110f8:	d0a00617 	ldw	r2,-32744(gp)
   110fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11100:	00003106 	br	111c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11104:	e0bffd17 	ldw	r2,-12(fp)
   11108:	10800217 	ldw	r2,8(r2)
   1110c:	1009883a 	mov	r4,r2
   11110:	0002d680 	call	2d68 <strlen>
   11114:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11118:	e0bffd17 	ldw	r2,-12(fp)
   1111c:	10c00217 	ldw	r3,8(r2)
   11120:	e0bffe17 	ldw	r2,-8(fp)
   11124:	10bfffc4 	addi	r2,r2,-1
   11128:	1885883a 	add	r2,r3,r2
   1112c:	10800003 	ldbu	r2,0(r2)
   11130:	10803fcc 	andi	r2,r2,255
   11134:	1080201c 	xori	r2,r2,128
   11138:	10bfe004 	addi	r2,r2,-128
   1113c:	10800bd8 	cmpnei	r2,r2,47
   11140:	1000031e 	bne	r2,zero,11150 <alt_find_file+0x6c>
    {
      len -= 1;
   11144:	e0bffe17 	ldw	r2,-8(fp)
   11148:	10bfffc4 	addi	r2,r2,-1
   1114c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11150:	e0bffe17 	ldw	r2,-8(fp)
   11154:	e0ffff17 	ldw	r3,-4(fp)
   11158:	1885883a 	add	r2,r3,r2
   1115c:	10800003 	ldbu	r2,0(r2)
   11160:	10803fcc 	andi	r2,r2,255
   11164:	1080201c 	xori	r2,r2,128
   11168:	10bfe004 	addi	r2,r2,-128
   1116c:	10800be0 	cmpeqi	r2,r2,47
   11170:	1000081e 	bne	r2,zero,11194 <alt_find_file+0xb0>
   11174:	e0bffe17 	ldw	r2,-8(fp)
   11178:	e0ffff17 	ldw	r3,-4(fp)
   1117c:	1885883a 	add	r2,r3,r2
   11180:	10800003 	ldbu	r2,0(r2)
   11184:	10803fcc 	andi	r2,r2,255
   11188:	1080201c 	xori	r2,r2,128
   1118c:	10bfe004 	addi	r2,r2,-128
   11190:	10000a1e 	bne	r2,zero,111bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11194:	e0bffd17 	ldw	r2,-12(fp)
   11198:	10800217 	ldw	r2,8(r2)
   1119c:	e0fffe17 	ldw	r3,-8(fp)
   111a0:	180d883a 	mov	r6,r3
   111a4:	e17fff17 	ldw	r5,-4(fp)
   111a8:	1009883a 	mov	r4,r2
   111ac:	00114080 	call	11408 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   111b0:	1000021e 	bne	r2,zero,111bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   111b4:	e0bffd17 	ldw	r2,-12(fp)
   111b8:	00000706 	br	111d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   111bc:	e0bffd17 	ldw	r2,-12(fp)
   111c0:	10800017 	ldw	r2,0(r2)
   111c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   111c8:	e0fffd17 	ldw	r3,-12(fp)
   111cc:	d0a00604 	addi	r2,gp,-32744
   111d0:	18bfcc1e 	bne	r3,r2,11104 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   111d4:	0005883a 	mov	r2,zero
}
   111d8:	e037883a 	mov	sp,fp
   111dc:	dfc00117 	ldw	ra,4(sp)
   111e0:	df000017 	ldw	fp,0(sp)
   111e4:	dec00204 	addi	sp,sp,8
   111e8:	f800283a 	ret

000111ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   111ec:	defffc04 	addi	sp,sp,-16
   111f0:	df000315 	stw	fp,12(sp)
   111f4:	df000304 	addi	fp,sp,12
   111f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   111fc:	00bffa04 	movi	r2,-24
   11200:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11204:	e03ffd15 	stw	zero,-12(fp)
   11208:	00001906 	br	11270 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   1120c:	00800074 	movhi	r2,1
   11210:	1089e704 	addi	r2,r2,10140
   11214:	e0fffd17 	ldw	r3,-12(fp)
   11218:	18c00324 	muli	r3,r3,12
   1121c:	10c5883a 	add	r2,r2,r3
   11220:	10800017 	ldw	r2,0(r2)
   11224:	10000f1e 	bne	r2,zero,11264 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11228:	00800074 	movhi	r2,1
   1122c:	1089e704 	addi	r2,r2,10140
   11230:	e0fffd17 	ldw	r3,-12(fp)
   11234:	18c00324 	muli	r3,r3,12
   11238:	10c5883a 	add	r2,r2,r3
   1123c:	e0ffff17 	ldw	r3,-4(fp)
   11240:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11244:	d0e00a17 	ldw	r3,-32728(gp)
   11248:	e0bffd17 	ldw	r2,-12(fp)
   1124c:	1880020e 	bge	r3,r2,11258 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11250:	e0bffd17 	ldw	r2,-12(fp)
   11254:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11258:	e0bffd17 	ldw	r2,-12(fp)
   1125c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11260:	00000606 	br	1127c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11264:	e0bffd17 	ldw	r2,-12(fp)
   11268:	10800044 	addi	r2,r2,1
   1126c:	e0bffd15 	stw	r2,-12(fp)
   11270:	e0bffd17 	ldw	r2,-12(fp)
   11274:	10800810 	cmplti	r2,r2,32
   11278:	103fe41e 	bne	r2,zero,1120c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1127c:	e0bffe17 	ldw	r2,-8(fp)
}
   11280:	e037883a 	mov	sp,fp
   11284:	df000017 	ldw	fp,0(sp)
   11288:	dec00104 	addi	sp,sp,4
   1128c:	f800283a 	ret

00011290 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11290:	defffb04 	addi	sp,sp,-20
   11294:	df000415 	stw	fp,16(sp)
   11298:	df000404 	addi	fp,sp,16
   1129c:	e13ffe15 	stw	r4,-8(fp)
   112a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   112a4:	e0bfff17 	ldw	r2,-4(fp)
   112a8:	10840070 	cmpltui	r2,r2,4097
   112ac:	1000021e 	bne	r2,zero,112b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   112b0:	00840004 	movi	r2,4096
   112b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   112b8:	e0fffe17 	ldw	r3,-8(fp)
   112bc:	e0bfff17 	ldw	r2,-4(fp)
   112c0:	1885883a 	add	r2,r3,r2
   112c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	e0bffc15 	stw	r2,-16(fp)
   112d0:	00000506 	br	112e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   112d4:	e0bffc17 	ldw	r2,-16(fp)
   112d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   112dc:	e0bffc17 	ldw	r2,-16(fp)
   112e0:	10800804 	addi	r2,r2,32
   112e4:	e0bffc15 	stw	r2,-16(fp)
   112e8:	e0fffc17 	ldw	r3,-16(fp)
   112ec:	e0bffd17 	ldw	r2,-12(fp)
   112f0:	18bff836 	bltu	r3,r2,112d4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   112f4:	e0bffe17 	ldw	r2,-8(fp)
   112f8:	108007cc 	andi	r2,r2,31
   112fc:	10000226 	beq	r2,zero,11308 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11300:	e0bffc17 	ldw	r2,-16(fp)
   11304:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11308:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1130c:	0001883a 	nop
   11310:	e037883a 	mov	sp,fp
   11314:	df000017 	ldw	fp,0(sp)
   11318:	dec00104 	addi	sp,sp,4
   1131c:	f800283a 	ret

00011320 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11320:	defffe04 	addi	sp,sp,-8
   11324:	df000115 	stw	fp,4(sp)
   11328:	df000104 	addi	fp,sp,4
   1132c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11330:	e0bfff17 	ldw	r2,-4(fp)
   11334:	10bffe84 	addi	r2,r2,-6
   11338:	10c00428 	cmpgeui	r3,r2,16
   1133c:	18001a1e 	bne	r3,zero,113a8 <alt_exception_cause_generated_bad_addr+0x88>
   11340:	100690ba 	slli	r3,r2,2
   11344:	00800074 	movhi	r2,1
   11348:	1084d604 	addi	r2,r2,4952
   1134c:	1885883a 	add	r2,r3,r2
   11350:	10800017 	ldw	r2,0(r2)
   11354:	1000683a 	jmp	r2
   11358:	00011398 	cmpnei	zero,zero,1102
   1135c:	00011398 	cmpnei	zero,zero,1102
   11360:	000113a8 	cmpgeui	zero,zero,1102
   11364:	000113a8 	cmpgeui	zero,zero,1102
   11368:	000113a8 	cmpgeui	zero,zero,1102
   1136c:	00011398 	cmpnei	zero,zero,1102
   11370:	000113a0 	cmpeqi	zero,zero,1102
   11374:	000113a8 	cmpgeui	zero,zero,1102
   11378:	00011398 	cmpnei	zero,zero,1102
   1137c:	00011398 	cmpnei	zero,zero,1102
   11380:	000113a8 	cmpgeui	zero,zero,1102
   11384:	00011398 	cmpnei	zero,zero,1102
   11388:	000113a0 	cmpeqi	zero,zero,1102
   1138c:	000113a8 	cmpgeui	zero,zero,1102
   11390:	000113a8 	cmpgeui	zero,zero,1102
   11394:	00011398 	cmpnei	zero,zero,1102
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11398:	00800044 	movi	r2,1
   1139c:	00000306 	br	113ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   113a0:	0005883a 	mov	r2,zero
   113a4:	00000106 	br	113ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   113a8:	0005883a 	mov	r2,zero
  }
}
   113ac:	e037883a 	mov	sp,fp
   113b0:	df000017 	ldw	fp,0(sp)
   113b4:	dec00104 	addi	sp,sp,4
   113b8:	f800283a 	ret

000113bc <atexit>:
   113bc:	200b883a 	mov	r5,r4
   113c0:	000f883a 	mov	r7,zero
   113c4:	000d883a 	mov	r6,zero
   113c8:	0009883a 	mov	r4,zero
   113cc:	00114841 	jmpi	11484 <__register_exitproc>

000113d0 <exit>:
   113d0:	defffe04 	addi	sp,sp,-8
   113d4:	000b883a 	mov	r5,zero
   113d8:	dc000015 	stw	r16,0(sp)
   113dc:	dfc00115 	stw	ra,4(sp)
   113e0:	2021883a 	mov	r16,r4
   113e4:	001159c0 	call	1159c <__call_exitprocs>
   113e8:	00800074 	movhi	r2,1
   113ec:	108e6104 	addi	r2,r2,14724
   113f0:	11000017 	ldw	r4,0(r2)
   113f4:	20800f17 	ldw	r2,60(r4)
   113f8:	10000126 	beq	r2,zero,11400 <exit+0x30>
   113fc:	103ee83a 	callr	r2
   11400:	8009883a 	mov	r4,r16
   11404:	001171c0 	call	1171c <_exit>

00011408 <memcmp>:
   11408:	01c000c4 	movi	r7,3
   1140c:	3980192e 	bgeu	r7,r6,11474 <memcmp+0x6c>
   11410:	2144b03a 	or	r2,r4,r5
   11414:	11c4703a 	and	r2,r2,r7
   11418:	10000f26 	beq	r2,zero,11458 <memcmp+0x50>
   1141c:	20800003 	ldbu	r2,0(r4)
   11420:	28c00003 	ldbu	r3,0(r5)
   11424:	10c0151e 	bne	r2,r3,1147c <memcmp+0x74>
   11428:	31bfff84 	addi	r6,r6,-2
   1142c:	01ffffc4 	movi	r7,-1
   11430:	00000406 	br	11444 <memcmp+0x3c>
   11434:	20800003 	ldbu	r2,0(r4)
   11438:	28c00003 	ldbu	r3,0(r5)
   1143c:	31bfffc4 	addi	r6,r6,-1
   11440:	10c00e1e 	bne	r2,r3,1147c <memcmp+0x74>
   11444:	21000044 	addi	r4,r4,1
   11448:	29400044 	addi	r5,r5,1
   1144c:	31fff91e 	bne	r6,r7,11434 <memcmp+0x2c>
   11450:	0005883a 	mov	r2,zero
   11454:	f800283a 	ret
   11458:	20c00017 	ldw	r3,0(r4)
   1145c:	28800017 	ldw	r2,0(r5)
   11460:	18bfee1e 	bne	r3,r2,1141c <memcmp+0x14>
   11464:	31bfff04 	addi	r6,r6,-4
   11468:	21000104 	addi	r4,r4,4
   1146c:	29400104 	addi	r5,r5,4
   11470:	39bff936 	bltu	r7,r6,11458 <memcmp+0x50>
   11474:	303fe91e 	bne	r6,zero,1141c <memcmp+0x14>
   11478:	003ff506 	br	11450 <memcmp+0x48>
   1147c:	10c5c83a 	sub	r2,r2,r3
   11480:	f800283a 	ret

00011484 <__register_exitproc>:
   11484:	defffa04 	addi	sp,sp,-24
   11488:	dc000315 	stw	r16,12(sp)
   1148c:	04000074 	movhi	r16,1
   11490:	840e6104 	addi	r16,r16,14724
   11494:	80c00017 	ldw	r3,0(r16)
   11498:	dc400415 	stw	r17,16(sp)
   1149c:	dfc00515 	stw	ra,20(sp)
   114a0:	18805217 	ldw	r2,328(r3)
   114a4:	2023883a 	mov	r17,r4
   114a8:	10003726 	beq	r2,zero,11588 <__register_exitproc+0x104>
   114ac:	10c00117 	ldw	r3,4(r2)
   114b0:	010007c4 	movi	r4,31
   114b4:	20c00e16 	blt	r4,r3,114f0 <__register_exitproc+0x6c>
   114b8:	1a000044 	addi	r8,r3,1
   114bc:	8800221e 	bne	r17,zero,11548 <__register_exitproc+0xc4>
   114c0:	18c00084 	addi	r3,r3,2
   114c4:	18c7883a 	add	r3,r3,r3
   114c8:	18c7883a 	add	r3,r3,r3
   114cc:	12000115 	stw	r8,4(r2)
   114d0:	10c7883a 	add	r3,r2,r3
   114d4:	19400015 	stw	r5,0(r3)
   114d8:	0005883a 	mov	r2,zero
   114dc:	dfc00517 	ldw	ra,20(sp)
   114e0:	dc400417 	ldw	r17,16(sp)
   114e4:	dc000317 	ldw	r16,12(sp)
   114e8:	dec00604 	addi	sp,sp,24
   114ec:	f800283a 	ret
   114f0:	00800034 	movhi	r2,0
   114f4:	1088e804 	addi	r2,r2,9120
   114f8:	10002626 	beq	r2,zero,11594 <__register_exitproc+0x110>
   114fc:	01006404 	movi	r4,400
   11500:	d9400015 	stw	r5,0(sp)
   11504:	d9800115 	stw	r6,4(sp)
   11508:	d9c00215 	stw	r7,8(sp)
   1150c:	00023a00 	call	23a0 <malloc>
   11510:	d9400017 	ldw	r5,0(sp)
   11514:	d9800117 	ldw	r6,4(sp)
   11518:	d9c00217 	ldw	r7,8(sp)
   1151c:	10001d26 	beq	r2,zero,11594 <__register_exitproc+0x110>
   11520:	81000017 	ldw	r4,0(r16)
   11524:	10000115 	stw	zero,4(r2)
   11528:	02000044 	movi	r8,1
   1152c:	22405217 	ldw	r9,328(r4)
   11530:	0007883a 	mov	r3,zero
   11534:	12400015 	stw	r9,0(r2)
   11538:	20805215 	stw	r2,328(r4)
   1153c:	10006215 	stw	zero,392(r2)
   11540:	10006315 	stw	zero,396(r2)
   11544:	883fde26 	beq	r17,zero,114c0 <__register_exitproc+0x3c>
   11548:	18c9883a 	add	r4,r3,r3
   1154c:	2109883a 	add	r4,r4,r4
   11550:	1109883a 	add	r4,r2,r4
   11554:	21802215 	stw	r6,136(r4)
   11558:	01800044 	movi	r6,1
   1155c:	12406217 	ldw	r9,392(r2)
   11560:	30cc983a 	sll	r6,r6,r3
   11564:	4992b03a 	or	r9,r9,r6
   11568:	12406215 	stw	r9,392(r2)
   1156c:	21c04215 	stw	r7,264(r4)
   11570:	01000084 	movi	r4,2
   11574:	893fd21e 	bne	r17,r4,114c0 <__register_exitproc+0x3c>
   11578:	11006317 	ldw	r4,396(r2)
   1157c:	218cb03a 	or	r6,r4,r6
   11580:	11806315 	stw	r6,396(r2)
   11584:	003fce06 	br	114c0 <__register_exitproc+0x3c>
   11588:	18805304 	addi	r2,r3,332
   1158c:	18805215 	stw	r2,328(r3)
   11590:	003fc606 	br	114ac <__register_exitproc+0x28>
   11594:	00bfffc4 	movi	r2,-1
   11598:	003fd006 	br	114dc <__register_exitproc+0x58>

0001159c <__call_exitprocs>:
   1159c:	defff504 	addi	sp,sp,-44
   115a0:	df000915 	stw	fp,36(sp)
   115a4:	dd400615 	stw	r21,24(sp)
   115a8:	dc800315 	stw	r18,12(sp)
   115ac:	dfc00a15 	stw	ra,40(sp)
   115b0:	ddc00815 	stw	r23,32(sp)
   115b4:	dd800715 	stw	r22,28(sp)
   115b8:	dd000515 	stw	r20,20(sp)
   115bc:	dcc00415 	stw	r19,16(sp)
   115c0:	dc400215 	stw	r17,8(sp)
   115c4:	dc000115 	stw	r16,4(sp)
   115c8:	d9000015 	stw	r4,0(sp)
   115cc:	2839883a 	mov	fp,r5
   115d0:	04800044 	movi	r18,1
   115d4:	057fffc4 	movi	r21,-1
   115d8:	00800074 	movhi	r2,1
   115dc:	108e6104 	addi	r2,r2,14724
   115e0:	12000017 	ldw	r8,0(r2)
   115e4:	45005217 	ldw	r20,328(r8)
   115e8:	44c05204 	addi	r19,r8,328
   115ec:	a0001c26 	beq	r20,zero,11660 <__call_exitprocs+0xc4>
   115f0:	a0800117 	ldw	r2,4(r20)
   115f4:	15ffffc4 	addi	r23,r2,-1
   115f8:	b8000d16 	blt	r23,zero,11630 <__call_exitprocs+0x94>
   115fc:	14000044 	addi	r16,r2,1
   11600:	8421883a 	add	r16,r16,r16
   11604:	8421883a 	add	r16,r16,r16
   11608:	84402004 	addi	r17,r16,128
   1160c:	a463883a 	add	r17,r20,r17
   11610:	a421883a 	add	r16,r20,r16
   11614:	e0001e26 	beq	fp,zero,11690 <__call_exitprocs+0xf4>
   11618:	80804017 	ldw	r2,256(r16)
   1161c:	e0801c26 	beq	fp,r2,11690 <__call_exitprocs+0xf4>
   11620:	bdffffc4 	addi	r23,r23,-1
   11624:	843fff04 	addi	r16,r16,-4
   11628:	8c7fff04 	addi	r17,r17,-4
   1162c:	bd7ff91e 	bne	r23,r21,11614 <__call_exitprocs+0x78>
   11630:	00800034 	movhi	r2,0
   11634:	1088ed04 	addi	r2,r2,9140
   11638:	10000926 	beq	r2,zero,11660 <__call_exitprocs+0xc4>
   1163c:	a0800117 	ldw	r2,4(r20)
   11640:	1000301e 	bne	r2,zero,11704 <__call_exitprocs+0x168>
   11644:	a0800017 	ldw	r2,0(r20)
   11648:	10003226 	beq	r2,zero,11714 <__call_exitprocs+0x178>
   1164c:	a009883a 	mov	r4,r20
   11650:	98800015 	stw	r2,0(r19)
   11654:	00023b40 	call	23b4 <free>
   11658:	9d000017 	ldw	r20,0(r19)
   1165c:	a03fe41e 	bne	r20,zero,115f0 <__call_exitprocs+0x54>
   11660:	dfc00a17 	ldw	ra,40(sp)
   11664:	df000917 	ldw	fp,36(sp)
   11668:	ddc00817 	ldw	r23,32(sp)
   1166c:	dd800717 	ldw	r22,28(sp)
   11670:	dd400617 	ldw	r21,24(sp)
   11674:	dd000517 	ldw	r20,20(sp)
   11678:	dcc00417 	ldw	r19,16(sp)
   1167c:	dc800317 	ldw	r18,12(sp)
   11680:	dc400217 	ldw	r17,8(sp)
   11684:	dc000117 	ldw	r16,4(sp)
   11688:	dec00b04 	addi	sp,sp,44
   1168c:	f800283a 	ret
   11690:	a0800117 	ldw	r2,4(r20)
   11694:	80c00017 	ldw	r3,0(r16)
   11698:	10bfffc4 	addi	r2,r2,-1
   1169c:	15c01426 	beq	r2,r23,116f0 <__call_exitprocs+0x154>
   116a0:	80000015 	stw	zero,0(r16)
   116a4:	183fde26 	beq	r3,zero,11620 <__call_exitprocs+0x84>
   116a8:	95c8983a 	sll	r4,r18,r23
   116ac:	a0806217 	ldw	r2,392(r20)
   116b0:	a5800117 	ldw	r22,4(r20)
   116b4:	2084703a 	and	r2,r4,r2
   116b8:	10000b26 	beq	r2,zero,116e8 <__call_exitprocs+0x14c>
   116bc:	a0806317 	ldw	r2,396(r20)
   116c0:	2088703a 	and	r4,r4,r2
   116c4:	20000c1e 	bne	r4,zero,116f8 <__call_exitprocs+0x15c>
   116c8:	89400017 	ldw	r5,0(r17)
   116cc:	d9000017 	ldw	r4,0(sp)
   116d0:	183ee83a 	callr	r3
   116d4:	a0800117 	ldw	r2,4(r20)
   116d8:	15bfbf1e 	bne	r2,r22,115d8 <__call_exitprocs+0x3c>
   116dc:	98800017 	ldw	r2,0(r19)
   116e0:	153fcf26 	beq	r2,r20,11620 <__call_exitprocs+0x84>
   116e4:	003fbc06 	br	115d8 <__call_exitprocs+0x3c>
   116e8:	183ee83a 	callr	r3
   116ec:	003ff906 	br	116d4 <__call_exitprocs+0x138>
   116f0:	a5c00115 	stw	r23,4(r20)
   116f4:	003feb06 	br	116a4 <__call_exitprocs+0x108>
   116f8:	89000017 	ldw	r4,0(r17)
   116fc:	183ee83a 	callr	r3
   11700:	003ff406 	br	116d4 <__call_exitprocs+0x138>
   11704:	a0800017 	ldw	r2,0(r20)
   11708:	a027883a 	mov	r19,r20
   1170c:	1029883a 	mov	r20,r2
   11710:	003fb606 	br	115ec <__call_exitprocs+0x50>
   11714:	0005883a 	mov	r2,zero
   11718:	003ffb06 	br	11708 <__call_exitprocs+0x16c>

0001171c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1171c:	defffd04 	addi	sp,sp,-12
   11720:	df000215 	stw	fp,8(sp)
   11724:	df000204 	addi	fp,sp,8
   11728:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1172c:	0001883a 	nop
   11730:	e0bfff17 	ldw	r2,-4(fp)
   11734:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11738:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1173c:	10000226 	beq	r2,zero,11748 <_exit+0x2c>
    ALT_SIM_FAIL();
   11740:	002af070 	cmpltui	zero,zero,43969
   11744:	00000106 	br	1174c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11748:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1174c:	003fff06 	br	1174c <_exit+0x30>
