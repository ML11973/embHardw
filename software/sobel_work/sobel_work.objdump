
sobel_work.elf:     file format elf32-littlenios2
sobel_work.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011ee0 memsz 0x00011ee0 flags r-x
    LOAD off    0x00012f00 vaddr 0x00011f00 paddr 0x000139ec align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000154d8 vaddr 0x000154d8 paddr 0x000154d8 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001153c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000780  00011780  00011780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00011f00  000139ec  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  000154d8  000154d8  000154d8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015668  00015668  000149ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000149ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  00014a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026b8c  00000000  00000000  00015a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009ca2  00000000  00000000  0003c5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c6d1  00000000  00000000  00046276  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026ec  00000000  00000000  00052948  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e56  00000000  00000000  00055034  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ab82  00000000  00000000  00058e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00073a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001980  00000000  00000000  00073a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078eb6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00078eb9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078ec5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078ec6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00078ec7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00078ecb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078ecf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00078ed3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00078edc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00078ee5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00078eee  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000065  00000000  00000000  00078ef9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a3e  00000000  00000000  00078f5e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00074a73  00000000  00000000  0007e99c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011780 l    d  .rodata	00000000 .rodata
00011f00 l    d  .rwdata	00000000 .rwdata
000154d8 l    d  .bss	00000000 .bss
00015668 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /run/media/leemarc/Shared/Switchdrive/Private/Documents/Master/1_S1/EmbHardw/mse_demo/software/sobel_work_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011c4e l     O .rodata	00000010 zeroes.4404
00005044 l     F .text	000000bc __sbprintf
00011c5e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005254 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006d84 l     F .text	00000008 __fp_unlock
00006d98 l     F .text	0000019c __sinit.part.1
00006f34 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012308 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001274c l     O .rwdata	00000020 lc_ctype_charset
0001272c l     O .rwdata	00000020 lc_message_charset
0001276c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00011c90 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009ad0 l     F .text	000000fc __sprint_r.part.0
00011dc4 l     O .rodata	00000010 blanks.4348
00011db4 l     O .rodata	00000010 zeroes.4349
0000b05c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ed18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ee24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ee50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ef3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f01c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f108 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f2dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000139dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000f558 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f68c l     F .text	00000034 alt_dev_reg
0001294c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f998 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000fba4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000101dc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000106b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00010b28 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00010c68 l     F .text	0000003c alt_get_errno
00010ca4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001553c g     O .bss	00000004 alt_instruction_exception_handler
00009168 g     F .text	00000074 _mprec_log10
00009254 g     F .text	0000008c __any_on
0000b5f8 g     F .text	00000054 _isatty_r
00011c9c g     O .rodata	00000028 __mprec_tinytens
0000f218 g     F .text	0000007c alt_main
00002c70 g     F .text	000000c0 _puts_r
00015568 g     O .bss	00000100 alt_irq
0000b64c g     F .text	00000060 _lseek_r
00011bfa g     O .rodata	00000009 gy_array
000139ec g       *ABS*	00000000 __flash_rwdata_start
0000d844 g     F .text	00000088 .hidden __eqdf2
00015668 g       *ABS*	00000000 __alt_heap_start
00002c34 g     F .text	0000003c printf
0000b864 g     F .text	0000009c _wcrtomb_r
00009990 g     F .text	0000005c __sseek
000070d4 g     F .text	00000010 __sinit
0000b70c g     F .text	00000140 __swbuf_r
00007b9c g     F .text	0000007c _setlocale_r
00006f3c g     F .text	00000068 __sfmoreglue
0000f2b8 g     F .text	00000024 __malloc_unlock
000009dc g     F .text	00000014 LCD_Write_Command
000154e8 g     O .bss	00000004 sobel_width
0001552c g     O .bss	00000004 altera_avalon_timer_ts_freq
00008060 g     F .text	0000015c memmove
000009f0 g     F .text	00000014 LCD_Write_Data
000070bc g     F .text	00000018 _cleanup
000082e4 g     F .text	000000a8 _Balloc
0000d8cc g     F .text	000000dc .hidden __gtdf2
00011060 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000b59c g     F .text	0000005c _fstat_r
0001550c g     O .bss	00000004 errno
0000990c g     F .text	00000008 __seofread
00015520 g     O .bss	00000004 alt_argv
0001b9ac g       *ABS*	00000000 _gp
0000f528 g     F .text	00000030 usleep
00000668 g     F .text	00000074 cam_set_image_pointer
000127cc g     O .rwdata	00000180 alt_fd_list
000023b0 g     F .text	00000010 vga_set_pointer
00011084 g     F .text	00000090 alt_find_dev
00007f18 g     F .text	00000148 memcpy
00006d8c g     F .text	0000000c _cleanup_r
0000eb30 g     F .text	000000dc .hidden __floatsidf
00010bec g     F .text	0000007c alt_io_redirect
0000d9a8 g     F .text	000000f4 .hidden __ltdf2
00011780 g       *ABS*	00000000 __DTOR_END__
00002d30 g     F .text	00000014 puts
00011350 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009844 g     F .text	00000074 __fpclassifyd
000090c4 g     F .text	000000a4 __ratio
0000b040 g     F .text	0000001c __vfiprintf_internal
0000fd9c g     F .text	0000021c altera_avalon_jtag_uart_read
000023d0 g     F .text	00000014 malloc
00002c04 g     F .text	00000030 _printf_r
00000830 g     F .text	00000008 get_grayscale_picture
0000c5f4 g     F .text	00000064 .hidden __udivsi3
000117e0 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000ef78 g     F .text	000000a4 isatty
00011cec g     O .rodata	000000c8 __mprec_tens
00007c18 g     F .text	0000000c __locale_charset
000112c0 g     F .text	00000090 alt_icache_flush
00015508 g     O .bss	00000004 __malloc_top_pad
000139bc g     O .rwdata	00000004 __mb_cur_max
00007c48 g     F .text	0000000c _localeconv_r
000017a8 g     F .text	00000138 sobel_x
000086f0 g     F .text	0000003c __i2b
00007558 g     F .text	000004bc __sfvwrite_r
00000a04 g     F .text	00000414 init_LCD
00002d44 g     F .text	00000054 _sbrk_r
000005f0 g     F .text	00000078 cam_get_profiling
0000b6ac g     F .text	00000060 _read_r
000154ec g     O .bss	00000004 sobel_result
000139d4 g     O .rwdata	00000004 alt_max_fd
0000b290 g     F .text	000000f0 _fclose_r
00006d54 g     F .text	00000030 fflush
00015504 g     O .bss	00000004 __malloc_max_sbrked_mem
000154e0 g     O .bss	00000004 grayscale_array
0000c6b0 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00008e6c g     F .text	0000010c __b2d
0000bfc4 g     F .text	00000538 .hidden __umoddi3
0000f144 g     F .text	000000d4 lseek
000008f8 g     F .text	0000008c i2c_short_read
000139b4 g     O .rwdata	00000004 _global_impure_ptr
000092e0 g     F .text	00000564 _realloc_r
00015668 g       *ABS*	00000000 __bss_end
00010a38 g     F .text	000000f0 alt_iic_isr_register
00010f58 g     F .text	00000108 alt_tick
0000ba4c g     F .text	00000578 .hidden __udivdi3
0000b4f8 g     F .text	00000024 _fputwc_r
00011cc4 g     O .rodata	00000028 __mprec_bigtens
000084d4 g     F .text	00000104 __s2b
0000ec0c g     F .text	000000a8 .hidden __floatunsidf
00008bac g     F .text	00000060 __mcmp
000070f4 g     F .text	00000018 __fp_lock_all
000109ec g     F .text	0000004c alt_ic_irq_enabled
000154d8 g     O .bss	00000004 grayscape_height
00010ebc g     F .text	0000009c alt_alarm_stop
00015530 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
000127a4 g     O .rwdata	00000028 alt_dev_null
00000ea4 g     F .text	00000078 transfer_LCD_with_dma
00001374 g     F .text	00000158 sobel_complete
0001066c g     F .text	00000048 alt_dcache_flush_all
000085d8 g     F .text	00000068 __hi0bits
0000eab0 g     F .text	00000080 .hidden __fixdfsi
000139ec g       *ABS*	00000000 __ram_rwdata_end
000139cc g     O .rwdata	00000008 alt_dev_list
0000f594 g     F .text	000000f8 write
000103c8 g     F .text	00000020 alt_timestamp_freq
00011f00 g       *ABS*	00000000 __ram_rodata_end
0000ee8c g     F .text	000000b0 fstat
0000d9a8 g     F .text	000000f4 .hidden __ledf2
00008924 g     F .text	00000140 __pow5mult
00009be4 g     F .text	0000145c ___vfiprintf_internal_r
00015518 g     O .bss	00000004 __nlocale_changed
0000c658 g     F .text	00000058 .hidden __umodsi3
000023a0 g     F .text	00000008 GetSobel_rgb
00015668 g       *ABS*	00000000 end
000023a8 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
000020bc g     F .text	00000184 sobel_y_with_rgb
0000f8d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00011780 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010254 g     F .text	0000007c alt_avalon_timer_sc_init
0000ecb4 g     F .text	00000064 .hidden __clzsi2
0000ffb8 g     F .text	00000224 altera_avalon_jtag_uart_write
000070e4 g     F .text	00000004 __sfp_lock_acquire
00007e34 g     F .text	000000e4 memchr
00002e30 g     F .text	000021f8 ___vfprintf_internal_r
00007248 g     F .text	00000310 _free_r
00007c24 g     F .text	00000010 __locale_mb_cur_max
00001cf4 g     F .text	0000011c sobel_y
00011908 g     O .rodata	00000140 noise_reduction_reg_settings_array
000115cc g     F .text	00000180 __call_exitprocs
00015514 g     O .bss	00000004 __mlocale_changed
000139ac g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015534 g     O .bss	00000004 _alt_tick_rate
00008a64 g     F .text	00000148 __lshift
00015538 g     O .bss	00000004 _alt_nticks
0000f318 g     F .text	000000fc read
0000f6f8 g     F .text	0000007c alt_sys_init
000016ec g     F .text	000000bc sobel_mac_unroll
00001b8c g     F .text	00000168 sobel_x_with_rgb
000114b4 g     F .text	00000118 __register_exitproc
0000872c g     F .text	000001f8 __multiply
0000fc44 g     F .text	00000068 altera_avalon_jtag_uart_close
00011f00 g       *ABS*	00000000 __ram_rwdata_start
00011780 g       *ABS*	00000000 __ram_rodata_start
00015540 g     O .bss	00000028 __malloc_current_mallinfo
00008f78 g     F .text	0000014c __d2b
000154f0 g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000f774 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001290 g     F .text	000000e4 init_sobel_arrays
0001121c g     F .text	000000a4 alt_get_fd
00010514 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b178 g     F .text	00000054 _close_r
00011438 g     F .text	0000007c memcmp
0000f834 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015668 g       *ABS*	00000000 __alt_stack_base
0000f884 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005100 g     F .text	00000154 __swsetup_r
0000cf5c g     F .text	000008e8 .hidden __divdf3
00006fa4 g     F .text	00000118 __sfp
000091dc g     F .text	00000078 __copybits
00011f00 g     O .rwdata	00000408 __malloc_av_
000070f0 g     F .text	00000004 __sinit_lock_release
0000da9c g     F .text	00000718 .hidden __muldf3
000098b8 g     F .text	00000054 __sread
00011114 g     F .text	00000108 alt_find_file
000106f0 g     F .text	000000a4 alt_dev_llist_insert
0000f294 g     F .text	00000024 __malloc_lock
0000f478 g     F .text	000000b0 sbrk
00006cf8 g     F .text	0000005c _fflush_r
0000b1cc g     F .text	000000c4 _calloc_r
000018e0 g     F .text	000002ac sobel_x_inline
000154d8 g       *ABS*	00000000 __bss_start
000015f4 g     F .text	000000f8 sobel_mac_unrollx
000081bc g     F .text	00000128 memset
00000f1c g     F .text	00000374 main
00015524 g     O .bss	00000004 alt_envp
00015500 g     O .bss	00000004 __malloc_max_total_mem
00000820 g     F .text	00000008 get_grayscale_width
0000f7d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b84c g     F .text	00000018 __swbuf
000154f4 g     O .bss	00000004 sobel_x_result
000099ec g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000b380 g     F .text	00000014 fclose
000102d0 g     F .text	00000078 alt_timestamp_start
00005454 g     F .text	00001688 _dtoa_r
000023f8 g     F .text	0000080c _malloc_r
0000b9c0 g     F .text	00000030 __ascii_wctomb
000139d8 g     O .rwdata	00000004 alt_errno
00007a14 g     F .text	000000c4 _fwalk
0000c4fc g     F .text	00000084 .hidden __divsi3
00007124 g     F .text	00000124 _malloc_trim_r
00011780 g       *ABS*	00000000 __CTOR_END__
000154dc g     O .bss	00000004 grayscale_width
000099f4 g     F .text	000000dc strcmp
00000e18 g     F .text	0000008c transfer_LCD_no_dma
00011780 g       *ABS*	00000000 __flash_rodata_start
00011780 g       *ABS*	00000000 __DTOR_LIST__
0000d844 g     F .text	00000088 .hidden __nedf2
00011a48 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f6c0 g     F .text	00000038 alt_irq_init
0000f414 g     F .text	00000064 alt_release_fd
00000850 g     F .text	000000a8 i2c_auto_detect
00011dd4 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
00015510 g     O .bss	00000004 _PathLocale
00000838 g     F .text	00000018 i2c_busy_wait
000113ec g     F .text	00000014 atexit
0000b118 g     F .text	00000060 _write_r
00007c54 g     F .text	00000018 setlocale
00001e10 g     F .text	000002ac sobel_y_inline
000139b8 g     O .rwdata	00000004 _impure_ptr
0001551c g     O .bss	00000004 alt_argc
00006adc g     F .text	0000021c __sflush_r
00015528 g     O .bss	00000004 altera_avalon_timer_ts_base
000107f4 g     F .text	00000060 _do_dtors
00007c40 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008e08 g     F .text	00000064 __ulp
0000710c g     F .text	00000018 __fp_unlock_all
000139c4 g     O .rwdata	00000008 alt_fs_list
000154f8 g     O .bss	00000004 sobel_y_result
00000984 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
000154e4 g     O .bss	00000002 LCD_height
00007c6c g     F .text	0000000c localeconv
00010348 g     F .text	00000080 alt_timestamp
000023c0 g     F .text	00000010 vga_set_swap
00010888 g     F .text	00000050 alt_ic_isr_register
00002240 g     F .text	000000b4 sobel_threshold
000139ec g       *ABS*	00000000 _edata
00015668 g       *ABS*	00000000 _end
0000b394 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000fcac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00011c03 g     O .rodata	00000009 gx_array
00010960 g     F .text	0000008c alt_ic_irq_disable
00009914 g     F .text	0000007c __swrite
000139b0 g     O .rwdata	00000004 __malloc_trim_threshold
000154e6 g     O .bss	00000002 LCD_width
00000774 g     F .text	000000ac conv_grayscale
00007c34 g     F .text	0000000c __locale_msgcharset
00011400 g     F .text	00000038 exit
00007ad8 g     F .text	000000c4 _fwalk_reent
00008c0c g     F .text	000001fc __mdiff
0000c580 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000070e8 g     F .text	00000004 __sfp_lock_release
00000828 g     F .text	00000008 get_grayscale_height
0001174c g     F .text	00000034 _exit
000014cc g     F .text	00000128 sobel_mac
000103e8 g     F .text	0000012c alt_alarm_start
00007c78 g     F .text	000001bc __smakebuf_r
000154fc g     O .bss	00000004 sobel_rgb565
00002d98 g     F .text	00000098 strlen
00010d68 g     F .text	00000154 open
0000d8cc g     F .text	000000dc .hidden __gedf2
000139c0 g     O .rwdata	00000004 __wctomb
00009bcc g     F .text	00000018 __sprint_r
00010854 g     F .text	00000034 alt_icache_flush_all
000139e0 g     O .rwdata	00000004 alt_priority_mask
000022f4 g     F .text	000000ac sobel_threshold128
000108d8 g     F .text	00000088 alt_ic_irq_enable
00005028 g     F .text	0000001c __vfprintf_internal
0000b9f0 g     F .text	0000005c _wctomb_r
0000e1b4 g     F .text	000008fc .hidden __subdf3
00008640 g     F .text	000000b0 __lo0bits
000139e4 g     O .rwdata	00000008 alt_alarm_list
00010794 g     F .text	00000060 _do_ctors
0000b900 g     F .text	000000c0 wcrtomb
0000ed54 g     F .text	000000d0 close
0000f084 g     F .text	00000084 alt_load
0000b51c g     F .text	00000080 fputwc
000023e4 g     F .text	00000014 free
000070ec g     F .text	00000004 __sinit_lock_acquire
000083b4 g     F .text	00000120 __multadd
0000838c g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10955a04 	addi	r2,r2,21864
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10955a04 	addi	r2,r2,21864
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e417 	ldw	r2,-25712(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e417 	ldw	r2,-25712(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ae6b14 	ori	gp,gp,47532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10953614 	ori	r2,r2,21720

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d59a14 	ori	r3,r3,22120

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000f0840 	call	f084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000f2180 	call	f218 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10882744 	addi	r2,r2,8349
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10880304 	addi	r2,r2,8204
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <init_camera+0x28>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10880304 	addi	r2,r2,8204
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <init_camera+0x48>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	00009840 	call	984 <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <init_camera+0x90>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	00009840 	call	984 <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <init_camera+0xd4>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	00009840 	call	984 <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <init_camera+0x118>
     3b4:	04000074 	movhi	r16,1
     3b8:	84069204 	addi	r16,r16,6728
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	00009840 	call	984 <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	00009840 	call	984 <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <init_camera+0x144>
     3f0:	04000074 	movhi	r16,1
     3f4:	84064204 	addi	r16,r16,6408
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	00009840 	call	984 <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <init_camera+0x170>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	00009840 	call	984 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	00009840 	call	984 <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <init_camera+0x1c4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	00009840 	call	984 <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <init_camera+0x1f8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	00009840 	call	984 <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <init_camera+0x22c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	00009840 	call	984 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	00009840 	call	984 <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <init_camera+0x260>
     4fc:	04000074 	movhi	r16,1
     500:	8405f804 	addi	r16,r16,6112
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	00009840 	call	984 <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <init_camera+0x27c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <init_camera+0x2a0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	00009840 	call	984 <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <init_camera+0x2c4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	00009840 	call	984 <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <init_camera+0x2e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	00009841 	jmpi	984 <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c80304 	addi	r3,r3,8204
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <cam_get_xsize+0x8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10880004 	addi	r2,r2,8192
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c80304 	addi	r3,r3,8204
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <cam_get_ysize+0x8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10880104 	addi	r2,r2,8196
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c80304 	addi	r3,r3,8204
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <cam_get_profiling+0x8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10880004 	addi	r2,r2,8192
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2105e004 	addi	r4,r4,6016
     620:	297fffcc 	andi	r5,r5,65535
     624:	0002c340 	call	2c34 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10880104 	addi	r2,r2,8196
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2105e804 	addi	r4,r4,6048
     63c:	297fffcc 	andi	r5,r5,65535
     640:	0002c340 	call	2c34 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10880204 	addi	r2,r2,8200
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2105f004 	addi	r4,r4,6080
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	0002c341 	jmpi	2c34 <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10880704 	addi	r2,r2,8220
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10880604 	addi	r2,r2,8216
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10880404 	addi	r2,r2,8208
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10880504 	addi	r2,r2,8212
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10880304 	addi	r2,r2,8204
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10880404 	addi	r2,r2,8208
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c80304 	addi	r3,r3,8204
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <take_picture_blocking+0x10>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10880304 	addi	r2,r2,8204
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c80304 	addi	r3,r3,8204
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10882804 	addi	r2,r2,8352
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     774:	d0a6cd17 	ldw	r2,-25804(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     778:	defffc04 	addi	sp,sp,-16
     77c:	dc800215 	stw	r18,8(sp)
     780:	dc400115 	stw	r17,4(sp)
     784:	dc000015 	stw	r16,0(sp)
     788:	dfc00315 	stw	ra,12(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     78c:	d166cc15 	stw	r5,-25808(gp)
	grayscape_height = height;
     790:	d1a6cb15 	stw	r6,-25812(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     794:	2821883a 	mov	r16,r5
     798:	3025883a 	mov	r18,r6
     79c:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     7a0:	10000226 	beq	r2,zero,7ac <conv_grayscale+0x38>
		free(grayscale_array);
     7a4:	1009883a 	mov	r4,r2
     7a8:	00023e40 	call	23e4 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     7ac:	8489383a 	mul	r4,r16,r18
     7b0:	00023d00 	call	23d0 <malloc>
     7b4:	d0a6cd15 	stw	r2,-25804(gp)
	for (y = 0 ; y < height ; y++) {
     7b8:	0480130e 	bge	zero,r18,808 <conv_grayscale+0x94>
     7bc:	840d883a 	add	r6,r16,r16
     7c0:	8809883a 	mov	r4,r17
     7c4:	8013883a 	mov	r9,r16
     7c8:	000b883a 	mov	r5,zero
		for (x = 0 ; x < width ; x++) {
     7cc:	04000a0e 	bge	zero,r16,7f8 <conv_grayscale+0x84>
     7d0:	4c05c83a 	sub	r2,r9,r16
     7d4:	2011883a 	mov	r8,r4
			/*
			gray = ((rgb&0xF100)>>10)// red part
				 + ((rgb&0x07E0)>>4)  // green part
				 + ((rgb&0x001F)<<2); // blue part
			*/
			gray=ALT_CI_CONV_GRAYSCALE_CI_0(rgb);
     7d8:	41c0000b 	ldhu	r7,0(r8)
     7dc:	380fc032 	custom	0,r7,r7,zero

			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     7e0:	d0e6cd17 	ldw	r3,-25804(gp)
     7e4:	1887883a 	add	r3,r3,r2
     7e8:	19c00025 	stbio	r7,0(r3)
     7ec:	10800044 	addi	r2,r2,1
     7f0:	42000084 	addi	r8,r8,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7f4:	48bff81e 	bne	r9,r2,7d8 <conv_grayscale+0x64>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7f8:	29400044 	addi	r5,r5,1
     7fc:	2189883a 	add	r4,r4,r6
     800:	4c13883a 	add	r9,r9,r16
     804:	917ff11e 	bne	r18,r5,7cc <conv_grayscale+0x58>
			gray=ALT_CI_CONV_GRAYSCALE_CI_0(rgb);

			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     808:	dfc00317 	ldw	ra,12(sp)
     80c:	dc800217 	ldw	r18,8(sp)
     810:	dc400117 	ldw	r17,4(sp)
     814:	dc000017 	ldw	r16,0(sp)
     818:	dec00404 	addi	sp,sp,16
     81c:	f800283a 	ret

00000820 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     820:	d0a6cc17 	ldw	r2,-25808(gp)
     824:	f800283a 	ret

00000828 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     828:	d0a6cb17 	ldw	r2,-25812(gp)
     82c:	f800283a 	ret

00000830 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     830:	d0a6cd17 	ldw	r2,-25804(gp)
     834:	f800283a 	ret

00000838 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	00c04034 	movhi	r3,256
     83c:	18c82704 	addi	r3,r3,8348
     840:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     844:	108000cc 	andi	r2,r2,3
     848:	103ffd1e 	bne	r2,zero,840 <i2c_busy_wait+0x8>
}
     84c:	f800283a 	ret

00000850 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     850:	01004034 	movhi	r4,256
     854:	21082704 	addi	r4,r4,8348
     858:	00c04034 	movhi	r3,256
     85c:	18c82704 	addi	r3,r3,8348
     860:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     864:	108000cc 	andi	r2,r2,3
     868:	103ffb1e 	bne	r2,zero,858 <i2c_auto_detect+0x8>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     86c:	00800104 	movi	r2,4
     870:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     874:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffd1e 	bne	r2,zero,874 <i2c_auto_detect+0x24>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     880:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     884:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     888:	10882504 	addi	r2,r2,8340
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     88c:	dfc00315 	stw	ra,12(sp)
     890:	dc800215 	stw	r18,8(sp)
     894:	dc400115 	stw	r17,4(sp)
     898:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     89c:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     8a0:	01000074 	movhi	r4,1
     8a4:	2106d804 	addi	r4,r4,7008
     8a8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8ac:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8b0:	0002c340 	call	2c34 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8b4:	04800a0e 	bge	zero,r18,8e0 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8b8:	04404034 	movhi	r17,256
     8bc:	8c482404 	addi	r17,r17,8336
     8c0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8c4:	89800037 	ldwio	r6,0(r17)
     8c8:	01000074 	movhi	r4,1
     8cc:	800b883a 	mov	r5,r16
     8d0:	2106e104 	addi	r4,r4,7044
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8d4:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8d8:	0002c340 	call	2c34 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8dc:	943ff81e 	bne	r18,r16,8c0 <i2c_auto_detect+0x70>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     8e0:	dfc00317 	ldw	ra,12(sp)
     8e4:	dc800217 	ldw	r18,8(sp)
     8e8:	dc400117 	ldw	r17,4(sp)
     8ec:	dc000017 	ldw	r16,0(sp)
     8f0:	dec00404 	addi	sp,sp,16
     8f4:	f800283a 	ret

000008f8 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f8:	01804034 	movhi	r6,256
     8fc:	31882704 	addi	r6,r6,8348
     900:	00c04034 	movhi	r3,256
     904:	18c82704 	addi	r3,r3,8348
     908:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     90c:	108000cc 	andi	r2,r2,3
     910:	103ffb1e 	bne	r2,zero,900 <i2c_short_read+0x8>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     914:	00804034 	movhi	r2,256
     918:	21003fcc 	andi	r4,r4,255
     91c:	10882404 	addi	r2,r2,8336
     920:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     924:	00804034 	movhi	r2,256
     928:	10882504 	addi	r2,r2,8340
     92c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     930:	008010c4 	movi	r2,67
     934:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     938:	180b883a 	mov	r5,r3
     93c:	00c04034 	movhi	r3,256
     940:	18c82704 	addi	r3,r3,8348
     944:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     948:	108000cc 	andi	r2,r2,3
     94c:	103ffb1e 	bne	r2,zero,93c <i2c_short_read+0x44>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     950:	00804034 	movhi	r2,256
     954:	21000044 	addi	r4,r4,1
     958:	10882404 	addi	r2,r2,8336
     95c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     960:	00800884 	movi	r2,34
     964:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     968:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     96c:	108000cc 	andi	r2,r2,3
     970:	103ffd1e 	bne	r2,zero,968 <i2c_short_read+0x70>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     974:	00804034 	movhi	r2,256
     978:	10882604 	addi	r2,r2,8344
}
     97c:	10800037 	ldwio	r2,0(r2)
     980:	f800283a 	ret

00000984 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     984:	01c04034 	movhi	r7,256
     988:	39c82704 	addi	r7,r7,8348
     98c:	00c04034 	movhi	r3,256
     990:	18c82704 	addi	r3,r3,8348
     994:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     998:	108000cc 	andi	r2,r2,3
     99c:	103ffb1e 	bne	r2,zero,98c <i2c_short_write+0x8>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     9a0:	00804034 	movhi	r2,256
     9a4:	10882404 	addi	r2,r2,8336
     9a8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9ac:	00804034 	movhi	r2,256
     9b0:	10882504 	addi	r2,r2,8340
     9b4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9b8:	00804034 	movhi	r2,256
     9bc:	10882604 	addi	r2,r2,8344
     9c0:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9c4:	00801084 	movi	r2,66
     9c8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9cc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9d0:	108000cc 	andi	r2,r2,3
     9d4:	103ffd1e 	bne	r2,zero,9cc <i2c_short_write+0x48>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     9d8:	f800283a 	ret

000009dc <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9dc:	00804034 	movhi	r2,256
     9e0:	10880804 	addi	r2,r2,8224
     9e4:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9e8:	01000284 	movi	r4,10
     9ec:	000f5281 	jmpi	f528 <usleep>

000009f0 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	00804034 	movhi	r2,256
     9f4:	10880904 	addi	r2,r2,8228
     9f8:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9fc:	01000284 	movi	r4,10
     a00:	000f5281 	jmpi	f528 <usleep>

00000a04 <init_LCD>:
}


void init_LCD() {
     a04:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a08:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a0c:	dd400515 	stw	r21,20(sp)
     a10:	dfc00815 	stw	ra,32(sp)
     a14:	ddc00715 	stw	r23,28(sp)
     a18:	dd800615 	stw	r22,24(sp)
     a1c:	dd000415 	stw	r20,16(sp)
     a20:	dcc00315 	stw	r19,12(sp)
     a24:	dc800215 	stw	r18,8(sp)
     a28:	dc400115 	stw	r17,4(sp)
     a2c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a30:	05400084 	movi	r21,2
     a34:	10880a04 	addi	r2,r2,8232
     a38:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a3c:	04804034 	movhi	r18,256
     a40:	94880804 	addi	r18,r18,8224
     a44:	00800a04 	movi	r2,40
     a48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a4c:	04000284 	movi	r16,10
     a50:	8009883a 	mov	r4,r16
     a54:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a58:	05c00444 	movi	r23,17
     a5c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a60:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	04404034 	movhi	r17,256
     a68:	8c480904 	addi	r17,r17,8228
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a6c:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a70:	0027883a 	mov	r19,zero
     a74:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a78:	8009883a 	mov	r4,r16
     a7c:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a80:	008032c4 	movi	r2,203
     a84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a88:	8009883a 	mov	r4,r16
     a8c:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a90:	00800e44 	movi	r2,57
     a94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a98:	8009883a 	mov	r4,r16
     a9c:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa0:	00800b04 	movi	r2,44
     aa4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	00800d04 	movi	r2,52
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ad0:	8009883a 	mov	r4,r16
     ad4:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ad8:	008033c4 	movi	r2,207
     adc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ae0:	8009883a 	mov	r4,r16
     ae4:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aec:	8009883a 	mov	r4,r16
     af0:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af4:	05802044 	movi	r22,129
     af8:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     afc:	8009883a 	mov	r4,r16
     b00:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b04:	00800c04 	movi	r2,48
     b08:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b0c:	8009883a 	mov	r4,r16
     b10:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b14:	00803a04 	movi	r2,232
     b18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b1c:	8009883a 	mov	r4,r16
     b20:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b24:	00802144 	movi	r2,133
     b28:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b2c:	8009883a 	mov	r4,r16
     b30:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b34:	05000044 	movi	r20,1
     b38:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b3c:	8009883a 	mov	r4,r16
     b40:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b44:	00801e44 	movi	r2,121
     b48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b54:	00803a84 	movi	r2,234
     b58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b68:	8009883a 	mov	r4,r16
     b6c:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b70:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b74:	8009883a 	mov	r4,r16
     b78:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b7c:	00801904 	movi	r2,100
     b80:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b84:	8009883a 	mov	r4,r16
     b88:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b8c:	008000c4 	movi	r2,3
     b90:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b94:	8009883a 	mov	r4,r16
     b98:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b9c:	00800484 	movi	r2,18
     ba0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba4:	8009883a 	mov	r4,r16
     ba8:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bac:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb8:	00803dc4 	movi	r2,247
     bbc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bc0:	8009883a 	mov	r4,r16
     bc4:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc8:	00800804 	movi	r2,32
     bcc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd0:	8009883a 	mov	r4,r16
     bd4:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd8:	00803004 	movi	r2,192
     bdc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be0:	8009883a 	mov	r4,r16
     be4:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be8:	05800984 	movi	r22,38
     bec:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bf0:	8009883a 	mov	r4,r16
     bf4:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf8:	00800104 	movi	r2,4
     bfc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c00:	8009883a 	mov	r4,r16
     c04:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c08:	00803044 	movi	r2,193
     c0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c10:	8009883a 	mov	r4,r16
     c14:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c18:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c1c:	8009883a 	mov	r4,r16
     c20:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c24:	00803144 	movi	r2,197
     c28:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c2c:	8009883a 	mov	r4,r16
     c30:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c34:	00800d44 	movi	r2,53
     c38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c44:	00800f84 	movi	r2,62
     c48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c54:	008031c4 	movi	r2,199
     c58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c5c:	8009883a 	mov	r4,r16
     c60:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c64:	00802f84 	movi	r2,190
     c68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c6c:	8009883a 	mov	r4,r16
     c70:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c74:	00802c44 	movi	r2,177
     c78:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c7c:	8009883a 	mov	r4,r16
     c80:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c84:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c88:	8009883a 	mov	r4,r16
     c8c:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c90:	00800404 	movi	r2,16
     c94:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca0:	00800e84 	movi	r2,58
     ca4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00801544 	movi	r2,85
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	00802d84 	movi	r2,182
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	00802884 	movi	r2,162
     ce0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ce4:	8009883a 	mov	r4,r16
     ce8:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cec:	00803c84 	movi	r2,242
     cf0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cf4:	8009883a 	mov	r4,r16
     cf8:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cfc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     d00:	8009883a 	mov	r4,r16
     d04:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d08:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d0c:	8009883a 	mov	r4,r16
     d10:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d14:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
     d1c:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00800d84 	movi	r2,54
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
     d2c:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d30:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d34:	8009883a 	mov	r4,r16
     d38:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d3c:	00800a84 	movi	r2,42
     d40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d44:	8009883a 	mov	r4,r16
     d48:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d4c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d58:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d5c:	8009883a 	mov	r4,r16
     d60:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d68:	8009883a 	mov	r4,r16
     d6c:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d70:	00803bc4 	movi	r2,239
     d74:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d78:	8009883a 	mov	r4,r16
     d7c:	000f5280 	call	f528 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d80:	00800ac4 	movi	r2,43
     d84:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d88:	8009883a 	mov	r4,r16
     d8c:	000f5280 	call	f528 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     da0:	8009883a 	mov	r4,r16
     da4:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     dac:	8009883a 	mov	r4,r16
     db0:	000f5280 	call	f528 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     db4:	00800fc4 	movi	r2,63
     db8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     dbc:	8009883a 	mov	r4,r16
     dc0:	000f5280 	call	f528 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dc4:	00c04034 	movhi	r3,256
     dc8:	00803c04 	movi	r2,240
     dcc:	18c80d04 	addi	r3,r3,8244
     dd0:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     dd4:	d0a6ce8d 	sth	r2,-25798(gp)
	LCD_height = 320;
     dd8:	00805004 	movi	r2,320
     ddc:	d0a6ce0d 	sth	r2,-25800(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     de0:	00800a44 	movi	r2,41
     de4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de8:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     dec:	dfc00817 	ldw	ra,32(sp)
     df0:	ddc00717 	ldw	r23,28(sp)
     df4:	dd800617 	ldw	r22,24(sp)
     df8:	dd400517 	ldw	r21,20(sp)
     dfc:	dd000417 	ldw	r20,16(sp)
     e00:	dcc00317 	ldw	r19,12(sp)
     e04:	dc800217 	ldw	r18,8(sp)
     e08:	dc400117 	ldw	r17,4(sp)
     e0c:	dc000017 	ldw	r16,0(sp)
     e10:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e14:	000f5281 	jmpi	f528 <usleep>

00000e18 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e18:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e1c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e20:	dc000015 	stw	r16,0(sp)
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	dcc00315 	stw	r19,12(sp)
     e2c:	dc800215 	stw	r18,8(sp)
     e30:	dc400115 	stw	r17,4(sp)
     e34:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e38:	10880e04 	addi	r2,r2,8248
     e3c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e40:	00804034 	movhi	r2,256
     e44:	10880804 	addi	r2,r2,8224
     e48:	00c00b04 	movi	r3,44
     e4c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e50:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e54:	01000284 	movi	r4,10
     e58:	000f5280 	call	f528 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e5c:	90000a26 	beq	r18,zero,e88 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e60:	04c04034 	movhi	r19,256
     e64:	9cc80904 	addi	r19,r19,8228
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e68:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e6c:	8080000b 	ldhu	r2,0(r16)
     e70:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e74:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e78:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     e7c:	000f5280 	call	f528 <usleep>
     e80:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e84:	8cbff91e 	bne	r17,r18,e6c <transfer_LCD_no_dma+0x54>
		LCD_Write_Data(data_array[pixels]);
}
     e88:	dfc00417 	ldw	ra,16(sp)
     e8c:	dcc00317 	ldw	r19,12(sp)
     e90:	dc800217 	ldw	r18,8(sp)
     e94:	dc400117 	ldw	r17,4(sp)
     e98:	dc000017 	ldw	r16,0(sp)
     e9c:	dec00504 	addi	sp,sp,20
     ea0:	f800283a 	ret

00000ea4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     ea4:	d0a6ce0b 	ldhu	r2,-25800(gp)
     ea8:	3080010e 	bge	r6,r2,eb0 <transfer_LCD_with_dma+0xc>
     eac:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     eb0:	d0e6ce8b 	ldhu	r3,-25798(gp)
     eb4:	28c0010e 	bge	r5,r3,ebc <transfer_LCD_with_dma+0x18>
     eb8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ebc:	01804034 	movhi	r6,256
     ec0:	31880e04 	addi	r6,r6,8248
     ec4:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     ec8:	01404034 	movhi	r5,256
     ecc:	29480b04 	addi	r5,r5,8236
     ed0:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     ed4:	18ffffcc 	andi	r3,r3,65535
     ed8:	10bfffcc 	andi	r2,r2,65535
     edc:	1885383a 	mul	r2,r3,r2
     ee0:	00c04034 	movhi	r3,256
     ee4:	18c80c04 	addi	r3,r3,8240
     ee8:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     eec:	39c03fcc 	andi	r7,r7,255
     ef0:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ef4:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ef8:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     efc:	10880a04 	addi	r2,r2,8232
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     f00:	38000326 	beq	r7,zero,f10 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f04:	00c04404 	movi	r3,272
     f08:	10c0002d 	sthio	r3,0(r2)
     f0c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f10:	00c04004 	movi	r3,256
     f14:	10c0002d 	sthio	r3,0(r2)
     f18:	f800283a 	ret

00000f1c <main>:
#include "vga.h"
#include "dipswitch.h"
#include "sobel.h"

int main()
{
     f1c:	defff704 	addi	sp,sp,-36
     f20:	dfc00815 	stw	ra,32(sp)
     f24:	ddc00715 	stw	r23,28(sp)
     f28:	dd800615 	stw	r22,24(sp)
     f2c:	dd400515 	stw	r21,20(sp)
     f30:	dd000415 	stw	r20,16(sp)
     f34:	dcc00315 	stw	r19,12(sp)
     f38:	dc800215 	stw	r18,8(sp)
     f3c:	dc400115 	stw	r17,4(sp)
     f40:	dc000015 	stw	r16,0(sp)
  unsigned char mode;

	alt_u32 timestampStart = 0;
	alt_u32 timestampStop = 0;

	alt_timestamp_start();
     f44:	00102d00 	call	102d0 <alt_timestamp_start>

  init_LCD();
     f48:	0000a040 	call	a04 <init_LCD>
  init_camera();
     f4c:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f50:	01000604 	movi	r4,24
     f54:	00023c00 	call	23c0 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f58:	01000074 	movhi	r4,1
     f5c:	2106ea04 	addi	r4,r4,7080
     f60:	0002d300 	call	2d30 <puts>
  cam_get_profiling();
     f64:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f68:	00005a80 	call	5a8 <cam_get_xsize>
     f6c:	1021883a 	mov	r16,r2
     f70:	00005cc0 	call	5cc <cam_get_ysize>
     f74:	10bfffcc 	andi	r2,r2,65535
     f78:	813fffcc 	andi	r4,r16,65535
     f7c:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     f80:	04400044 	movi	r17,1
     f84:	04800084 	movi	r18,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f88:	00023d00 	call	23d0 <malloc>
     f8c:	102f883a 	mov	r23,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f90:	00005a80 	call	5a8 <cam_get_xsize>
     f94:	1021883a 	mov	r16,r2
     f98:	00005cc0 	call	5cc <cam_get_ysize>
     f9c:	10bfffcc 	andi	r2,r2,65535
     fa0:	813fffcc 	andi	r4,r16,65535
     fa4:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     fa8:	04c000c4 	movi	r19,3
		      case 0 : transfer_LCD_with_dma(&image[16520],
     fac:	05204414 	movui	r20,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb0:	00023d00 	call	23d0 <malloc>
     fb4:	102d883a 	mov	r22,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb8:	00005a80 	call	5a8 <cam_get_xsize>
     fbc:	1021883a 	mov	r16,r2
     fc0:	00005cc0 	call	5cc <cam_get_ysize>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	813fffcc 	andi	r4,r16,65535
     fcc:	2089383a 	mul	r4,r4,r2
     fd0:	00023d00 	call	23d0 <malloc>
     fd4:	102b883a 	mov	r21,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fd8:	00005a80 	call	5a8 <cam_get_xsize>
     fdc:	1021883a 	mov	r16,r2
     fe0:	00005cc0 	call	5cc <cam_get_ysize>
     fe4:	10bfffcc 	andi	r2,r2,65535
     fe8:	813fffcc 	andi	r4,r16,65535
     fec:	2089383a 	mul	r4,r4,r2
     ff0:	00023d00 	call	23d0 <malloc>
  cam_set_image_pointer(0,buffer1);
     ff4:	b80b883a 	mov	r5,r23
     ff8:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ffc:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
    1000:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1004:	b00b883a 	mov	r5,r22
    1008:	8809883a 	mov	r4,r17
    100c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1010:	a80b883a 	mov	r5,r21
    1014:	9009883a 	mov	r4,r18
    1018:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    101c:	800b883a 	mov	r5,r16
    1020:	9809883a 	mov	r4,r19
    1024:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    1028:	00007200 	call	720 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    102c:	00005a80 	call	5a8 <cam_get_xsize>
    1030:	1021883a 	mov	r16,r2
    1034:	00005cc0 	call	5cc <cam_get_ysize>
    1038:	813fffcc 	andi	r4,r16,65535
    103c:	2448d83a 	srl	r4,r4,r17
    1040:	117fffcc 	andi	r5,r2,65535
    1044:	00012900 	call	1290 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1048:	00007340 	call	734 <new_image_available>
    104c:	10803fcc 	andi	r2,r2,255
    1050:	1080201c 	xori	r2,r2,128
    1054:	10bfe004 	addi	r2,r2,-128
    1058:	103ffb26 	beq	r2,zero,1048 <main+0x12c>
		  if (current_image_valid()!=0) {
    105c:	00006dc0 	call	6dc <current_image_valid>
    1060:	10bfffcc 	andi	r2,r2,65535
    1064:	10a0001c 	xori	r2,r2,32768
    1068:	10a00004 	addi	r2,r2,-32768
    106c:	103ff626 	beq	r2,zero,1048 <main+0x12c>
			  current_mode = DIPSW_get_value();
    1070:	00007600 	call	760 <DIPSW_get_value>
    1074:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1078:	00006f00 	call	6f0 <current_image_pointer>
    107c:	102b883a 	mov	r21,r2
		      switch (mode) {
    1080:	808001cc 	andi	r2,r16,7
    1084:	14407126 	beq	r2,r17,124c <main+0x330>
    1088:	10005e26 	beq	r2,zero,1204 <main+0x2e8>
    108c:	14805126 	beq	r2,r18,11d4 <main+0x2b8>
    1090:	14c0221e 	bne	r2,r19,111c <main+0x200>
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1094:	00005a80 	call	5a8 <cam_get_xsize>
    1098:	102d883a 	mov	r22,r2
		    		                  cam_get_ysize());
    109c:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
    10a0:	b17fffcc 	andi	r5,r22,65535
    10a4:	280ad07a 	srli	r5,r5,1
    10a8:	a809883a 	mov	r4,r21
    10ac:	11bfffcc 	andi	r6,r2,65535
    10b0:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    10b4:	00008300 	call	830 <get_grayscale_picture>
		               sobel_x(grayscale);
    10b8:	1009883a 	mov	r4,r2
		      	  	   }
		      	  	   break;
		      case 3 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    10bc:	102b883a 	mov	r21,r2
		               sobel_x(grayscale);
    10c0:	00017a80 	call	17a8 <sobel_x>
		               sobel_y_with_rgb(grayscale);
    10c4:	a809883a 	mov	r4,r21
    10c8:	00020bc0 	call	20bc <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    10cc:	00023a00 	call	23a0 <GetSobel_rgb>
    10d0:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    10d4:	00005a80 	call	5a8 <cam_get_xsize>
    10d8:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),0);
    10dc:	00005cc0 	call	5cc <cam_get_ysize>
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    10e0:	a97fffcc 	andi	r5,r21,65535
    10e4:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10e8:	84003fcc 	andi	r16,r16,255
    10ec:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    10f0:	000f883a 	mov	r7,zero
    10f4:	11bfffcc 	andi	r6,r2,65535
    10f8:	b509883a 	add	r4,r22,r20
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10fc:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               sobel_x(grayscale);
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1100:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1104:	803fd00e 	bge	r16,zero,1048 <main+0x12c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1108:	01000204 	movi	r4,8
    110c:	00023c00 	call	23c0 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1110:	b009883a 	mov	r4,r22
    1114:	00023b00 	call	23b0 <vga_set_pointer>
    1118:	003fcb06 	br	1048 <main+0x12c>
		      	  	   }
		      	  	   break;
		      default:
		    	  timestampStart = alt_timestamp();
    111c:	00103480 	call	10348 <alt_timestamp>
    1120:	102f883a 	mov	r23,r2
		    	  conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1124:	00005a80 	call	5a8 <cam_get_xsize>
    1128:	102d883a 	mov	r22,r2
	                                  cam_get_ysize());
    112c:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default:
		    	  timestampStart = alt_timestamp();
		    	  conv_grayscale((void *)image,
    1130:	b17fffcc 	andi	r5,r22,65535
    1134:	280ad07a 	srli	r5,r5,1
    1138:	11bfffcc 	andi	r6,r2,65535
    113c:	a809883a 	mov	r4,r21
    1140:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  timestampStop = alt_timestamp();
    1144:	00103480 	call	10348 <alt_timestamp>
		    	  printf("conv_grayscale (cycles) : %u\n", timestampStop-timestampStart);
    1148:	01000074 	movhi	r4,1
    114c:	15cbc83a 	sub	r5,r2,r23
    1150:	2106ef04 	addi	r4,r4,7100
    1154:	0002c340 	call	2c34 <printf>

                       grayscale = get_grayscale_picture();
    1158:	00008300 	call	830 <get_grayscale_picture>
    115c:	102d883a 	mov	r22,r2


     		    	  timestampStart = alt_timestamp();
    1160:	00103480 	call	10348 <alt_timestamp>
                      //sobel_x(grayscale);
     		    	  //sobel_x_inline(grayscale);
     		    	  sobel_complete(grayscale);
    1164:	b009883a 	mov	r4,r22
		    	  printf("conv_grayscale (cycles) : %u\n", timestampStop-timestampStart);

                       grayscale = get_grayscale_picture();


     		    	  timestampStart = alt_timestamp();
    1168:	102b883a 	mov	r21,r2
                      //sobel_x(grayscale);
     		    	  //sobel_x_inline(grayscale);
     		    	  sobel_complete(grayscale);
    116c:	00013740 	call	1374 <sobel_complete>
     		    	  timestampStop = alt_timestamp();
    1170:	00103480 	call	10348 <alt_timestamp>
     		    	  printf("sobel_complete (cycles) : %u\n", timestampStop-timestampStart);
    1174:	01000074 	movhi	r4,1
    1178:	154bc83a 	sub	r5,r2,r21
    117c:	2106f704 	addi	r4,r4,7132
    1180:	0002c340 	call	2c34 <printf>
    		    	  //sobel_threshold128();
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
    1184:	00023a80 	call	23a8 <GetSobelResult>
    1188:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    118c:	00005a80 	call	5a8 <cam_get_xsize>
    1190:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    1194:	00005cc0 	call	5cc <cam_get_ysize>
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1198:	a97fffcc 	andi	r5,r21,65535
    119c:	280ad07a 	srli	r5,r5,1
    11a0:	01c00044 	movi	r7,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11a4:	84003fcc 	andi	r16,r16,255
    11a8:	8400201c 	xori	r16,r16,128
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11ac:	11bfffcc 	andi	r6,r2,65535
    11b0:	b1102204 	addi	r4,r22,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b4:	843fe004 	addi	r16,r16,-128
                      //timestampStop = alt_timestamp();
      		    	  //printf("sobel_threshold (cycles) : %u\n", timestampStop-timestampStart);


                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11b8:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11bc:	803fa20e 	bge	r16,zero,1048 <main+0x12c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    11c0:	01000604 	movi	r4,24
    11c4:	00023c00 	call	23c0 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    11c8:	b009883a 	mov	r4,r22
    11cc:	00023b00 	call	23b0 <vga_set_pointer>
    11d0:	003f9d06 	br	1048 <main+0x12c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11d4:	00005a80 	call	5a8 <cam_get_xsize>
    11d8:	102d883a 	mov	r22,r2
		    		                  cam_get_ysize());
    11dc:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : conv_grayscale((void *)image,
    11e0:	b17fffcc 	andi	r5,r22,65535
    11e4:	280ad07a 	srli	r5,r5,1
    11e8:	a809883a 	mov	r4,r21
    11ec:	11bfffcc 	andi	r6,r2,65535
    11f0:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    11f4:	00008300 	call	830 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    11f8:	1009883a 	mov	r4,r2
    11fc:	0001b8c0 	call	1b8c <sobel_x_with_rgb>
    1200:	003fb206 	br	10cc <main+0x1b0>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1204:	00005a80 	call	5a8 <cam_get_xsize>
    1208:	102d883a 	mov	r22,r2
		                	cam_get_ysize(),0);
    120c:	00005cc0 	call	5cc <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1210:	b17fffcc 	andi	r5,r22,65535
    1214:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1218:	84003fcc 	andi	r16,r16,255
    121c:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1220:	000f883a 	mov	r7,zero
    1224:	11bfffcc 	andi	r6,r2,65535
    1228:	ad09883a 	add	r4,r21,r20
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    122c:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1230:	0000ea40 	call	ea4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1234:	803f840e 	bge	r16,zero,1048 <main+0x12c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1238:	01000204 	movi	r4,8
    123c:	00023c00 	call	23c0 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1240:	a809883a 	mov	r4,r21
    1244:	00023b00 	call	23b0 <vga_set_pointer>
    1248:	003f7f06 	br	1048 <main+0x12c>
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    124c:	00005a80 	call	5a8 <cam_get_xsize>
    1250:	102d883a 	mov	r22,r2
		    		                  cam_get_ysize());
    1254:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
    1258:	b17fffcc 	andi	r5,r22,65535
    125c:	280ad07a 	srli	r5,r5,1
    1260:	a809883a 	mov	r4,r21
    1264:	11bfffcc 	andi	r6,r2,65535
    1268:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
    126c:	00008300 	call	830 <get_grayscale_picture>
    1270:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1274:	00005a80 	call	5a8 <cam_get_xsize>
    1278:	102b883a 	mov	r21,r2
		      		                	cam_get_ysize(),1);
    127c:	00005cc0 	call	5cc <cam_get_ysize>
		      	  	   break;
		      case 1 : conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1280:	a97fffcc 	andi	r5,r21,65535
    1284:	280ad07a 	srli	r5,r5,1
    1288:	880f883a 	mov	r7,r17
    128c:	003fc506 	br	11a4 <main+0x288>

00001290 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1290:	d0a6d217 	ldw	r2,-25784(gp)
unsigned short *sobel_rgb565;
volatile unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1294:	defffd04 	addi	sp,sp,-12
    1298:	dc400115 	stw	r17,4(sp)
    129c:	dc000015 	stw	r16,0(sp)
    12a0:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    12a4:	d126cf15 	stw	r4,-25796(gp)
	sobel_height = height;
    12a8:	d166d115 	stw	r5,-25788(gp)
unsigned short *sobel_rgb565;
volatile unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    12ac:	2023883a 	mov	r17,r4
    12b0:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12b4:	10000226 	beq	r2,zero,12c0 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    12b8:	1009883a 	mov	r4,r2
    12bc:	00023e40 	call	23e4 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12c0:	8c21383a 	mul	r16,r17,r16
    12c4:	8423883a 	add	r17,r16,r16
    12c8:	8809883a 	mov	r4,r17
    12cc:	00023d00 	call	23d0 <malloc>
	if (sobel_y_result != NULL)
    12d0:	d126d317 	ldw	r4,-25780(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12d4:	d0a6d215 	stw	r2,-25784(gp)
	if (sobel_y_result != NULL)
    12d8:	20000126 	beq	r4,zero,12e0 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    12dc:	00023e40 	call	23e4 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12e0:	8809883a 	mov	r4,r17
    12e4:	00023d00 	call	23d0 <malloc>
	if (sobel_result != NULL)
    12e8:	d126d017 	ldw	r4,-25792(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    12ec:	d0a6d315 	stw	r2,-25780(gp)
	if (sobel_result != NULL)
    12f0:	20000126 	beq	r4,zero,12f8 <init_sobel_arrays+0x68>
		free(sobel_result);
    12f4:	00023e40 	call	23e4 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    12f8:	8009883a 	mov	r4,r16
    12fc:	00023d00 	call	23d0 <malloc>
	if (sobel_rgb565 != NULL)
    1300:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1304:	d0a6d015 	stw	r2,-25792(gp)
	if (sobel_rgb565 != NULL)
    1308:	20000126 	beq	r4,zero,1310 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    130c:	00023e40 	call	23e4 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1310:	8809883a 	mov	r4,r17
    1314:	00023d00 	call	23d0 <malloc>
    1318:	d0a6d415 	stw	r2,-25776(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    131c:	0005883a 	mov	r2,zero
    1320:	04000f0e 	bge	zero,r16,1360 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1324:	d226d217 	ldw	r8,-25784(gp)
		sobel_y_result[loop] = 0;
    1328:	d1e6d317 	ldw	r7,-25780(gp)
		sobel_result[loop] = 0;
    132c:	d1a6d017 	ldw	r6,-25792(gp)
    1330:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1334:	40d1883a 	add	r8,r8,r3
    1338:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    133c:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    1340:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1344:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1348:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    134c:	d1a6d417 	ldw	r6,-25776(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1350:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1354:	30c7883a 	add	r3,r6,r3
    1358:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    135c:	80bff11e 	bne	r16,r2,1324 <init_sobel_arrays+0x94>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1360:	dfc00217 	ldw	ra,8(sp)
    1364:	dc400117 	ldw	r17,4(sp)
    1368:	dc000017 	ldw	r16,0(sp)
    136c:	dec00304 	addi	sp,sp,12
    1370:	f800283a 	ret

00001374 <sobel_complete>:
	   short resultx = 0;
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1374:	d166d117 	ldw	r5,-25788(gp)
    1378:	01c00084 	movi	r7,2
    137c:	39404e0e 	bge	r7,r5,14b8 <sobel_complete+0x144>
    1380:	d0a6cf17 	ldw	r2,-25796(gp)
		sobel_rgb565[loop] = 0;
	}
}


void sobel_complete(unsigned char *source){
    1384:	defffb04 	addi	sp,sp,-20
    1388:	dfc00415 	stw	ra,16(sp)
    138c:	dcc00315 	stw	r19,12(sp)
    1390:	dc800215 	stw	r18,8(sp)
    1394:	dc400115 	stw	r17,4(sp)
    1398:	dc000015 	stw	r16,0(sp)
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
    139c:	3817883a 	mov	r11,r7
    13a0:	3a3fffc4 	addi	r8,r7,-1
    13a4:	3815883a 	mov	r10,r7
    13a8:	58803a0e 	bge	r11,r2,1494 <sobel_complete+0x120>
    13ac:	3a7fff84 	addi	r9,r7,-2
    13b0:	3815883a 	mov	r10,r7
    13b4:	03800044 	movi	r14,1
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
    13b8:	124d383a 	mul	r6,r2,r9
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
					  + filterx[3] * source[(y)*sobel_width+(x-1)]
					  + filterx[5] * source[(y)*sobel_width+(x+1)]
    13bc:	1219383a 	mul	r12,r2,r8
					  + filterx[6] * source[(y+1)*sobel_width+(x-1)]
					  + filterx[8] * source[(y+1)*sobel_width+(x+1)];
    13c0:	11c5383a 	mul	r2,r2,r7

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
    13c4:	73400044 	addi	r13,r14,1
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
    13c8:	218d883a 	add	r6,r4,r6
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
					  + filterx[3] * source[(y)*sobel_width+(x-1)]
					  + filterx[5] * source[(y)*sobel_width+(x+1)]
					  + filterx[6] * source[(y+1)*sobel_width+(x-1)]
					  + filterx[8] * source[(y+1)*sobel_width+(x+1)];
    13cc:	2347883a 	add	r3,r4,r13
    13d0:	188b883a 	add	r5,r3,r2

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
    13d4:	335f883a 	add	r15,r6,r13
					  + filterx[3] * source[(y)*sobel_width+(x-1)]
					  + filterx[5] * source[(y)*sobel_width+(x+1)]
    13d8:	1b07883a 	add	r3,r3,r12
    13dc:	77ffffc4 	addi	ra,r14,-1
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
    13e0:	7c000003 	ldbu	r16,0(r15)
    13e4:	2c800003 	ldbu	r18,0(r5)

				sum = (resultx < 0 ? -resultx:resultx)
					+ (resulty < 0 ? -resulty:resulty);

				// If sum is greater than 128
				sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    13e8:	1c400003 	ldbu	r17,0(r3)
	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
					  + filterx[3] * source[(y)*sobel_width+(x-1)]
    13ec:	2307883a 	add	r3,r4,r12
    13f0:	1fc7883a 	add	r3,r3,ra

				sum = (resultx < 0 ? -resultx:resultx)
					+ (resulty < 0 ? -resulty:resulty);

				// If sum is greater than 128
				sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    13f4:	1cc00003 	ldbu	r19,0(r3)
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
    13f8:	37df883a 	add	r15,r6,ra
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
					  + filterx[3] * source[(y)*sobel_width+(x-1)]
					  + filterx[5] * source[(y)*sobel_width+(x+1)]
					  + filterx[6] * source[(y+1)*sobel_width+(x-1)]
    13fc:	2085883a 	add	r2,r4,r2

				sum = (resultx < 0 ? -resultx:resultx)
					+ (resulty < 0 ? -resulty:resulty);

				// If sum is greater than 128
				sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    1400:	848d883a 	add	r6,r16,r18
    1404:	8c63883a 	add	r17,r17,r17
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
    1408:	78c00003 	ldbu	r3,0(r15)
					  + filterx[2] * source[(y-1)*sobel_width+(x+1)]
					  + filterx[3] * source[(y)*sobel_width+(x-1)]
					  + filterx[5] * source[(y)*sobel_width+(x+1)]
					  + filterx[6] * source[(y+1)*sobel_width+(x-1)]
    140c:	17c5883a 	add	r2,r2,ra

				sum = (resultx < 0 ? -resultx:resultx)
					+ (resulty < 0 ? -resulty:resulty);

				// If sum is greater than 128
				sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    1410:	898b883a 	add	r5,r17,r6
    1414:	2ccbc83a 	sub	r5,r5,r19
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
	    	  // Sobel X
	    	   resultx = filterx[0] * source[(y-1)*sobel_width+(x-1)]
    1418:	11800003 	ldbu	r6,0(r2)

				sum = (resultx < 0 ? -resultx:resultx)
					+ (resulty < 0 ? -resulty:resulty);

				// If sum is greater than 128
				sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    141c:	2ccbc83a 	sub	r5,r5,r19
    1420:	28cbc83a 	sub	r5,r5,r3
    1424:	84a1c83a 	sub	r16,r16,r18
    1428:	2985c83a 	sub	r2,r5,r6
    142c:	80c7883a 	add	r3,r16,r3
    1430:	6399883a 	add	r12,r12,r14
    1434:	117fffcc 	andi	r5,r2,65535
    1438:	1987c83a 	sub	r3,r3,r6
    143c:	d3a6d017 	ldw	r14,-25792(gp)
    1440:	2960001c 	xori	r5,r5,32768
    1444:	18bfffcc 	andi	r2,r3,65535
    1448:	10a0001c 	xori	r2,r2,32768
    144c:	29600004 	addi	r5,r5,-32768
    1450:	10a00004 	addi	r2,r2,-32768
    1454:	7319883a 	add	r12,r14,r12
    1458:	28001816 	blt	r5,zero,14bc <sobel_complete+0x148>
    145c:	10001916 	blt	r2,zero,14c4 <sobel_complete+0x150>
    1460:	2885883a 	add	r2,r5,r2
    1464:	10bfffcc 	andi	r2,r2,65535
    1468:	10a0001c 	xori	r2,r2,32768
    146c:	10a00004 	addi	r2,r2,-32768
    1470:	1005d1fa 	srai	r2,r2,7
    1474:	681d883a 	mov	r14,r13
    1478:	1004c03a 	cmpne	r2,r2,zero
    147c:	0085c83a 	sub	r2,zero,r2
    1480:	60800005 	stb	r2,0(r12)
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
	      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1484:	d0a6cf17 	ldw	r2,-25796(gp)
    1488:	10ffffc4 	addi	r3,r2,-1
    148c:	68ffca16 	blt	r13,r3,13b8 <sobel_complete+0x44>
    1490:	d166d117 	ldw	r5,-25788(gp)
	   short resultx = 0;
	   short resulty = 0;
	   const char * filterx = gx_array;
	   const char * filtery = gy_array;

	   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1494:	28ffffc4 	addi	r3,r5,-1
    1498:	39c00044 	addi	r7,r7,1
    149c:	50ffc016 	blt	r10,r3,13a0 <sobel_complete+0x2c>


	      }
	   }
	   return;
}
    14a0:	dfc00417 	ldw	ra,16(sp)
    14a4:	dcc00317 	ldw	r19,12(sp)
    14a8:	dc800217 	ldw	r18,8(sp)
    14ac:	dc400117 	ldw	r17,4(sp)
    14b0:	dc000017 	ldw	r16,0(sp)
    14b4:	dec00504 	addi	sp,sp,20
    14b8:	f800283a 	ret

				sum = (resultx < 0 ? -resultx:resultx)
					+ (resulty < 0 ? -resulty:resulty);

				// If sum is greater than 128
				sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    14bc:	014bc83a 	sub	r5,zero,r5
    14c0:	103fe70e 	bge	r2,zero,1460 <sobel_complete+0xec>
    14c4:	0085c83a 	sub	r2,zero,r2
    14c8:	003fe506 	br	1460 <sobel_complete+0xec>

000014cc <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    14cc:	defff904 	addi	sp,sp,-28
    14d0:	da400717 	ldw	r9,28(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    14d4:	30ffffc4 	addi	r3,r6,-1
    14d8:	30800044 	addi	r2,r6,1
    14dc:	3251383a 	mul	r8,r6,r9
    14e0:	1a47383a 	mul	r3,r3,r9
    14e4:	1245383a 	mul	r2,r2,r9
    14e8:	29bfffc4 	addi	r6,r5,-1
    14ec:	2b000044 	addi	r12,r5,1
    14f0:	2211883a 	add	r8,r4,r8
    14f4:	2155883a 	add	r10,r4,r5
    14f8:	2193883a 	add	r9,r4,r6

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    14fc:	dfc00615 	stw	ra,24(sp)
    1500:	dd400515 	stw	r21,20(sp)
    1504:	dd000415 	stw	r20,16(sp)
    1508:	dcc00315 	stw	r19,12(sp)
    150c:	dc800215 	stw	r18,8(sp)
    1510:	dc400115 	stw	r17,4(sp)
    1514:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1518:	2085883a 	add	r2,r4,r2
    151c:	415b883a 	add	r13,r8,r5
    1520:	4197883a 	add	r11,r8,r6
    1524:	50d5883a 	add	r10,r10,r3
    1528:	48d3883a 	add	r9,r9,r3
    152c:	2309883a 	add	r4,r4,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1530:	54400003 	ldbu	r17,0(r10)
    1534:	4c000003 	ldbu	r16,0(r9)
    1538:	3a800007 	ldb	r10,0(r7)
                   pixels[(y+dy)*width+(x+dx)];
    153c:	20c9883a 	add	r4,r4,r3
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1540:	6c800003 	ldbu	r18,0(r13)
    1544:	5fc00003 	ldbu	ra,0(r11)
    1548:	3b400107 	ldb	r13,4(r7)
                   pixels[(y+dy)*width+(x+dx)];
    154c:	4317883a 	add	r11,r8,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1550:	3a4000c7 	ldb	r9,3(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1554:	118d883a 	add	r6,r2,r6
    1558:	114b883a 	add	r5,r2,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    155c:	3b800047 	ldb	r14,1(r7)
    1560:	25000003 	ldbu	r20,0(r4)
    1564:	3a000087 	ldb	r8,2(r7)
    1568:	5cc00003 	ldbu	r19,0(r11)
    156c:	39000147 	ldb	r4,5(r7)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    1570:	33c00003 	ldbu	r15,0(r6)
    1574:	3ac00187 	ldb	r11,6(r7)
    1578:	2d400003 	ldbu	r21,0(r5)
    157c:	398001c7 	ldb	r6,7(r7)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1580:	130b883a 	add	r5,r2,r12
      }
   }
   return result;
    1584:	2b000003 	ldbu	r12,0(r5)
    1588:	39400207 	ldb	r5,8(r7)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    158c:	8295383a 	mul	r10,r16,r10
    1590:	8b8f383a 	mul	r7,r17,r14
    1594:	9347383a 	mul	r3,r18,r13
    1598:	fa53383a 	mul	r9,ra,r9
    159c:	a211383a 	mul	r8,r20,r8
    15a0:	9909383a 	mul	r4,r19,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15a4:	7ac5383a 	mul	r2,r15,r11
    15a8:	a98d383a 	mul	r6,r21,r6
    15ac:	614b383a 	mul	r5,r12,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15b0:	3a8f883a 	add	r7,r7,r10
    15b4:	1a47883a 	add	r3,r3,r9
    15b8:	3a0f883a 	add	r7,r7,r8
    15bc:	1907883a 	add	r3,r3,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15c0:	1185883a 	add	r2,r2,r6
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15c4:	38c7883a 	add	r3,r7,r3
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15c8:	1145883a 	add	r2,r2,r5
}
    15cc:	1885883a 	add	r2,r3,r2
    15d0:	dfc00617 	ldw	ra,24(sp)
    15d4:	dd400517 	ldw	r21,20(sp)
    15d8:	dd000417 	ldw	r20,16(sp)
    15dc:	dcc00317 	ldw	r19,12(sp)
    15e0:	dc800217 	ldw	r18,8(sp)
    15e4:	dc400117 	ldw	r17,4(sp)
    15e8:	dc000017 	ldw	r16,0(sp)
    15ec:	dec00704 	addi	sp,sp,28
    15f0:	f800283a 	ret

000015f4 <sobel_mac_unrollx>:

short sobel_mac_unrollx( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    15f4:	defffa04 	addi	sp,sp,-24
    15f8:	d8c00617 	ldw	r3,24(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    15fc:	30bfffc4 	addi	r2,r6,-1

short sobel_mac_unrollx( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1600:	dfc00515 	stw	ra,20(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1604:	30d1383a 	mul	r8,r6,r3
    1608:	10c5383a 	mul	r2,r2,r3
    160c:	31800044 	addi	r6,r6,1
    1610:	30c7383a 	mul	r3,r6,r3
    1614:	1145883a 	add	r2,r2,r5
    1618:	4151883a 	add	r8,r8,r5

short sobel_mac_unrollx( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    161c:	dd000415 	stw	r20,16(sp)
    1620:	dcc00315 	stw	r19,12(sp)
    1624:	dc800215 	stw	r18,8(sp)
    1628:	dc400115 	stw	r17,4(sp)
    162c:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1630:	2211883a 	add	r8,r4,r8
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1634:	2085883a 	add	r2,r4,r2
    1638:	194b883a 	add	r5,r3,r5
    163c:	2149883a 	add	r4,r4,r5
    1640:	10ffffc3 	ldbu	r3,-1(r2)
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1644:	45000043 	ldbu	r20,1(r8)
    1648:	3b800147 	ldb	r14,5(r7)
    164c:	44ffffc3 	ldbu	r19,-1(r8)
    1650:	3ac000c7 	ldb	r11,3(r7)
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1654:	3b400007 	ldb	r13,0(r7)
    1658:	14800003 	ldbu	r18,0(r2)
    165c:	3a800047 	ldb	r10,1(r7)
    1660:	39400087 	ldb	r5,2(r7)
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1664:	44400003 	ldbu	r17,0(r8)
    1668:	3a400107 	ldb	r9,4(r7)
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    166c:	14000043 	ldbu	r16,1(r2)
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
   }
   return result;
    1670:	3b000187 	ldb	r12,6(r7)
    1674:	20bfffc3 	ldbu	r2,-1(r4)
    1678:	27c00043 	ldbu	ra,1(r4)
    167c:	3a000207 	ldb	r8,8(r7)
    1680:	398001c7 	ldb	r6,7(r7)
    1684:	23c00003 	ldbu	r15,0(r4)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    1688:	a39d383a 	mul	r14,r20,r14
    168c:	9ad7383a 	mul	r11,r19,r11
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    1690:	1b5b383a 	mul	r13,r3,r13
    1694:	9295383a 	mul	r10,r18,r10
    1698:	8149383a 	mul	r4,r16,r5
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    169c:	8a53383a 	mul	r9,r17,r9
   }
   return result;
    16a0:	1319383a 	mul	r12,r2,r12
    16a4:	fa0f383a 	mul	r7,ra,r8
    16a8:	798b383a 	mul	r5,r15,r6
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    16ac:	6a87883a 	add	r3,r13,r10
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    16b0:	72cd883a 	add	r6,r14,r11
    16b4:	324d883a 	add	r6,r6,r9
                 const char *filter,
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
    16b8:	1907883a 	add	r3,r3,r4
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
   }
   return result;
    16bc:	61c5883a 	add	r2,r12,r7
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
       result += filter[(dy+1)*3+(0)]*pixels[(y+dy)*width+(x-1)];
       result += filter[(dy+1)*3+(1)]*pixels[(y+dy)*width+(x)];
       result += filter[(dy+1)*3+(2)]*pixels[(y+dy)*width+(x+1)];
    16c0:	30c7883a 	add	r3,r6,r3
   }
   return result;
    16c4:	1145883a 	add	r2,r2,r5
}
    16c8:	1885883a 	add	r2,r3,r2
    16cc:	dfc00517 	ldw	ra,20(sp)
    16d0:	dd000417 	ldw	r20,16(sp)
    16d4:	dcc00317 	ldw	r19,12(sp)
    16d8:	dc800217 	ldw	r18,8(sp)
    16dc:	dc400117 	ldw	r17,4(sp)
    16e0:	dc000017 	ldw	r16,0(sp)
    16e4:	dec00604 	addi	sp,sp,24
    16e8:	f800283a 	ret

000016ec <sobel_mac_unroll>:

short sobel_mac_unroll( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    16ec:	da800017 	ldw	r10,0(sp)
   short result = 0;

   // dy = -1, dx from -1 to 1

   result += filter[0] * pixels[(y-1)*width+(x-1)];
    16f0:	31bfffc4 	addi	r6,r6,-1

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16f4:	38c00047 	ldb	r3,1(r7)
                 unsigned int width ) {
   short result = 0;

   // dy = -1, dx from -1 to 1

   result += filter[0] * pixels[(y-1)*width+(x-1)];
    16f8:	328d383a 	mul	r6,r6,r10

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    16fc:	3b8000c7 	ldb	r14,3(r7)
    1700:	3a000107 	ldb	r8,4(r7)

   result += filter[0] * pixels[(y-1)*width+(x-1)];
   result += filter[1] * pixels[(y-1)*width+(x+0)];
   result += filter[2] * pixels[(y-1)*width+(x+1)];

   result += filter[3] * pixels[(y)*width+(x-1)];
    1704:	5185883a 	add	r2,r10,r6
    1708:	2893883a 	add	r9,r5,r2
                 unsigned int width ) {
   short result = 0;

   // dy = -1, dx from -1 to 1

   result += filter[0] * pixels[(y-1)*width+(x-1)];
    170c:	314d883a 	add	r6,r6,r5
   result += filter[1] * pixels[(y-1)*width+(x+0)];
    1710:	218d883a 	add	r6,r4,r6
   result += filter[2] * pixels[(y-1)*width+(x+1)];

   result += filter[3] * pixels[(y)*width+(x-1)];
    1714:	2253883a 	add	r9,r4,r9

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    1718:	33000003 	ldbu	r12,0(r6)

   result += filter[3] * pixels[(y)*width+(x-1)];
   result += filter[4] * pixels[(y)*width+(x+0)];
   result += filter[5] * pixels[(y)*width+(x+1)];

   result += filter[6] * pixels[(y+1)*width+(x-1)];
    171c:	5095883a 	add	r10,r10,r2
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    1720:	48bfffc3 	ldbu	r2,-1(r9)

   result += filter[3] * pixels[(y)*width+(x-1)];
   result += filter[4] * pixels[(y)*width+(x+0)];
   result += filter[5] * pixels[(y)*width+(x+1)];

   result += filter[6] * pixels[(y+1)*width+(x-1)];
    1724:	5155883a 	add	r10,r10,r5
   result += filter[7] * pixels[(y+1)*width+(x+0)];
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    1728:	4ac00003 	ldbu	r11,0(r9)
   result += filter[3] * pixels[(y)*width+(x-1)];
   result += filter[4] * pixels[(y)*width+(x+0)];
   result += filter[5] * pixels[(y)*width+(x+1)];

   result += filter[6] * pixels[(y+1)*width+(x-1)];
   result += filter[7] * pixels[(y+1)*width+(x+0)];
    172c:	229b883a 	add	r13,r4,r10
   result += filter[8] * pixels[(y+1)*width+(x+1)];

   return result;
    1730:	49000043 	ldbu	r4,1(r9)
    1734:	3a800147 	ldb	r10,5(r7)
    1738:	139d383a 	mul	r14,r2,r14
    173c:	60d9383a 	mul	r12,r12,r3
    1740:	68800003 	ldbu	r2,0(r13)
    1744:	38c001c7 	ldb	r3,7(r7)
    1748:	5a17383a 	mul	r11,r11,r8
    174c:	33ffffc3 	ldbu	r15,-1(r6)
    1750:	3a000007 	ldb	r8,0(r7)
    1754:	2295383a 	mul	r10,r4,r10
    1758:	31000043 	ldbu	r4,1(r6)
    175c:	39800087 	ldb	r6,2(r7)
    1760:	730b883a 	add	r5,r14,r12
    1764:	10d3383a 	mul	r9,r2,r3
    1768:	6b3fffc3 	ldbu	r12,-1(r13)
    176c:	38c00187 	ldb	r3,6(r7)
    1770:	2acb883a 	add	r5,r5,r11
    1774:	7a11383a 	mul	r8,r15,r8
    1778:	6ac00043 	ldbu	r11,1(r13)
    177c:	39c00207 	ldb	r7,8(r7)
    1780:	2a8b883a 	add	r5,r5,r10
    1784:	2189383a 	mul	r4,r4,r6
    1788:	2a45883a 	add	r2,r5,r9
    178c:	60c7383a 	mul	r3,r12,r3
    1790:	1205883a 	add	r2,r2,r8
    1794:	59cb383a 	mul	r5,r11,r7
    1798:	1105883a 	add	r2,r2,r4
    179c:	10c5883a 	add	r2,r2,r3
}
    17a0:	1145883a 	add	r2,r2,r5
    17a4:	f800283a 	ret

000017a8 <sobel_x>:


void sobel_x( unsigned char *source ) {
    17a8:	defff704 	addi	sp,sp,-36
    17ac:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17b0:	d466d117 	ldw	r17,-25788(gp)

   return result;
}


void sobel_x( unsigned char *source ) {
    17b4:	dfc00815 	stw	ra,32(sp)
    17b8:	ddc00715 	stw	r23,28(sp)
    17bc:	dd800615 	stw	r22,24(sp)
    17c0:	dd400515 	stw	r21,20(sp)
    17c4:	dd000415 	stw	r20,16(sp)
    17c8:	dcc00315 	stw	r19,12(sp)
    17cc:	dc800215 	stw	r18,8(sp)
    17d0:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17d4:	8c7fffc4 	addi	r17,r17,-1
    17d8:	00800044 	movi	r2,1
    17dc:	14402e0e 	bge	r2,r17,1898 <sobel_x+0xf0>
    17e0:	d366cf17 	ldw	r13,-25796(gp)
    17e4:	d3e6d217 	ldw	r15,-25784(gp)
    17e8:	03800084 	movi	r14,2
    17ec:	6b65883a 	add	r18,r13,r13
    17f0:	9385883a 	add	r2,r18,r14
    17f4:	2359883a 	add	r12,r4,r13
    17f8:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17fc:	7027883a 	mov	r19,r14
    1800:	736bc83a 	sub	r21,r14,r13
    1804:	6ba9883a 	add	r20,r13,r14
    1808:	9b402e0e 	bge	r19,r13,18c4 <sobel_x+0x11c>
    180c:	637f883a 	add	ra,r12,r13
    1810:	7021883a 	mov	r16,r14
    1814:	6357c83a 	sub	r11,r12,r13
    1818:	ab0b883a 	add	r5,r21,r12
    181c:	62800084 	addi	r10,r12,2
    1820:	f813883a 	mov	r9,ra
    1824:	a311883a 	add	r8,r20,r12
    1828:	780f883a 	mov	r7,r15
    182c:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1830:	2d800003 	ldbu	r22,0(r5)
    1834:	40c00003 	ldbu	r3,0(r8)
    1838:	31000003 	ldbu	r4,0(r6)
    183c:	50800003 	ldbu	r2,0(r10)
    1840:	b0c7883a 	add	r3,r22,r3
    1844:	5dc00003 	ldbu	r23,0(r11)
    1848:	1907c83a 	sub	r3,r3,r4
    184c:	4d800003 	ldbu	r22,0(r9)
    1850:	1909c83a 	sub	r4,r3,r4
    1854:	1087883a 	add	r3,r2,r2
    1858:	20c7883a 	add	r3,r4,r3
    185c:	1dc5c83a 	sub	r2,r3,r23
    1860:	1585c83a 	sub	r2,r2,r22
    1864:	3880000d 	sth	r2,0(r7)
    1868:	29400044 	addi	r5,r5,1
    186c:	5ac00044 	addi	r11,r11,1
    1870:	31800044 	addi	r6,r6,1
    1874:	52800044 	addi	r10,r10,1
    1878:	4a400044 	addi	r9,r9,1
    187c:	42000044 	addi	r8,r8,1
    1880:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1884:	617fea1e 	bne	r12,r5,1830 <sobel_x+0x88>
    1888:	73800044 	addi	r14,r14,1
    188c:	f819883a 	mov	r12,ra
    1890:	7c9f883a 	add	r15,r15,r18


void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1894:	847fdc16 	blt	r16,r17,1808 <sobel_x+0x60>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1898:	dfc00817 	ldw	ra,32(sp)
    189c:	ddc00717 	ldw	r23,28(sp)
    18a0:	dd800617 	ldw	r22,24(sp)
    18a4:	dd400517 	ldw	r21,20(sp)
    18a8:	dd000417 	ldw	r20,16(sp)
    18ac:	dcc00317 	ldw	r19,12(sp)
    18b0:	dc800217 	ldw	r18,8(sp)
    18b4:	dc400117 	ldw	r17,4(sp)
    18b8:	dc000017 	ldw	r16,0(sp)
    18bc:	dec00904 	addi	sp,sp,36
    18c0:	f800283a 	ret
    18c4:	7021883a 	mov	r16,r14
    18c8:	637f883a 	add	ra,r12,r13
    18cc:	73800044 	addi	r14,r14,1
    18d0:	f819883a 	mov	r12,ra
    18d4:	7c9f883a 	add	r15,r15,r18


void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18d8:	847fcb16 	blt	r16,r17,1808 <sobel_x+0x60>
    18dc:	003fee06 	br	1898 <sobel_x+0xf0>

000018e0 <sobel_x_inline>:
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18e0:	d0a6d117 	ldw	r2,-25788(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_inline(unsigned char *source){
    18e4:	deffe904 	addi	sp,sp,-92
    18e8:	dfc01615 	stw	ra,88(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18ec:	10bfffc4 	addi	r2,r2,-1
    18f0:	d8800c15 	stw	r2,48(sp)
    18f4:	d8c00c17 	ldw	r3,48(sp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_inline(unsigned char *source){
    18f8:	df001515 	stw	fp,84(sp)
    18fc:	ddc01415 	stw	r23,80(sp)
    1900:	dd801315 	stw	r22,76(sp)
    1904:	dd401215 	stw	r21,72(sp)
    1908:	dd001115 	stw	r20,68(sp)
    190c:	dcc01015 	stw	r19,64(sp)
    1910:	dc800f15 	stw	r18,60(sp)
    1914:	dc400e15 	stw	r17,56(sp)
    1918:	dc000d15 	stw	r16,52(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    191c:	00800044 	movi	r2,1
    1920:	10c0850e 	bge	r2,r3,1b38 <sobel_x_inline+0x258>
    1924:	d0a6cf17 	ldw	r2,-25796(gp)
    1928:	05000074 	movhi	r20,1
    192c:	a50700c4 	addi	r20,r20,7171
    1930:	1087883a 	add	r3,r2,r2
    1934:	2017883a 	mov	r11,r4
    1938:	a24000c4 	addi	r9,r20,3
    193c:	01000084 	movi	r4,2
    1940:	a2000184 	addi	r8,r20,6
    1944:	a1c00244 	addi	r7,r20,9
    1948:	a1800304 	addi	r6,r20,12
    194c:	d3a6d217 	ldw	r14,-25784(gp)
    1950:	1a800084 	addi	r10,r3,2
    1954:	a14003c4 	addi	r5,r20,15
    1958:	d8800415 	stw	r2,16(sp)
    195c:	d8c00b15 	stw	r3,44(sp)
    1960:	a0800604 	addi	r2,r20,24
    1964:	a0c00544 	addi	r3,r20,21
    1968:	d9000815 	stw	r4,32(sp)
    196c:	4a403fcc 	andi	r9,r9,255
    1970:	a1000484 	addi	r4,r20,18
    1974:	42003fcc 	andi	r8,r8,255
    1978:	39c03fcc 	andi	r7,r7,255
    197c:	31803fcc 	andi	r6,r6,255
    1980:	a5003fcc 	andi	r20,r20,255
    1984:	4a40201c 	xori	r9,r9,128
    1988:	4200201c 	xori	r8,r8,128
    198c:	39c0201c 	xori	r7,r7,128
    1990:	3180201c 	xori	r6,r6,128
    1994:	2dc03fcc 	andi	r23,r5,255
    1998:	25803fcc 	andi	r22,r4,255
    199c:	1d403fcc 	andi	r21,r3,255
    19a0:	17003fcc 	andi	fp,r2,255
    19a4:	5b000084 	addi	r12,r11,2
    19a8:	729d883a 	add	r14,r14,r10
    19ac:	5b400044 	addi	r13,r11,1
    19b0:	a500201c 	xori	r20,r20,128
    19b4:	4a7fe004 	addi	r9,r9,-128
    19b8:	423fe004 	addi	r8,r8,-128
    19bc:	39ffe004 	addi	r7,r7,-128
    19c0:	31bfe004 	addi	r6,r6,-128
    19c4:	bdc0201c 	xori	r23,r23,128
    19c8:	b580201c 	xori	r22,r22,128
    19cc:	ad40201c 	xori	r21,r21,128
    19d0:	e700201c 	xori	fp,fp,128
    19d4:	db800915 	stw	r14,36(sp)
    19d8:	a53fe004 	addi	r20,r20,-128
    19dc:	601d883a 	mov	r14,r12
    19e0:	da40000d 	sth	r9,0(sp)
    19e4:	da00010d 	sth	r8,4(sp)
    19e8:	d9c0020d 	sth	r7,8(sp)
    19ec:	d980030d 	sth	r6,12(sp)
    19f0:	bdffe004 	addi	r23,r23,-128
    19f4:	b5bfe004 	addi	r22,r22,-128
    19f8:	ad7fe004 	addi	r21,r21,-128
    19fc:	e73fe004 	addi	fp,fp,-128
    1a00:	6819883a 	mov	r12,r13
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a04:	d9000417 	ldw	r4,16(sp)
    1a08:	00c00084 	movi	r3,2
    1a0c:	1900560e 	bge	r3,r4,1b68 <sobel_x_inline+0x288>
    1a10:	5907883a 	add	r3,r11,r4
    1a14:	2005883a 	mov	r2,r4
    1a18:	d9000417 	ldw	r4,16(sp)
    1a1c:	1385883a 	add	r2,r2,r14
    1a20:	d8800615 	stw	r2,24(sp)
    1a24:	6109883a 	add	r4,r12,r4
    1a28:	d9000715 	stw	r4,28(sp)
    1a2c:	d9000417 	ldw	r4,16(sp)
    1a30:	d8800817 	ldw	r2,32(sp)
    1a34:	dcc00717 	ldw	r19,28(sp)
    1a38:	da800617 	ldw	r10,24(sp)
    1a3c:	dc000917 	ldw	r16,36(sp)
    1a40:	191b883a 	add	r13,r3,r4
    1a44:	d8c00515 	stw	r3,20(sp)
    1a48:	d8800a15 	stw	r2,40(sp)
    1a4c:	183f883a 	mov	ra,r3
    1a50:	9925883a 	add	r18,r19,r4
    1a54:	5123883a 	add	r17,r10,r4
    1a58:	681f883a 	mov	r15,r13
		    	  maskValue = gx_array[(dy+1)*3+(dx+1)];
		         result += source[(y+dy)*sobel_width+(x+dx)] * maskValue;
		      }
		   }

		 sobel_x_result[y*sobel_width+x] = result;
    1a5c:	60c00003 	ldbu	r3,0(r12)
    1a60:	d900000b 	ldhu	r4,0(sp)
    1a64:	58800003 	ldbu	r2,0(r11)
    1a68:	72400003 	ldbu	r9,0(r14)
    1a6c:	1907383a 	mul	r3,r3,r4
    1a70:	d900010b 	ldhu	r4,4(sp)
    1a74:	1505383a 	mul	r2,r2,r20
    1a78:	fa000003 	ldbu	r8,0(ra)
    1a7c:	4913383a 	mul	r9,r9,r4
    1a80:	d900020b 	ldhu	r4,8(sp)
    1a84:	99c00003 	ldbu	r7,0(r19)
    1a88:	10c5883a 	add	r2,r2,r3
    1a8c:	d8c0030b 	ldhu	r3,12(sp)
    1a90:	51800003 	ldbu	r6,0(r10)
    1a94:	79400003 	ldbu	r5,0(r15)
    1a98:	4111383a 	mul	r8,r8,r4
    1a9c:	38cf383a 	mul	r7,r7,r3
    1aa0:	91000003 	ldbu	r4,0(r18)
    1aa4:	88c00003 	ldbu	r3,0(r17)
    1aa8:	1245883a 	add	r2,r2,r9
    1aac:	35cd383a 	mul	r6,r6,r23
    1ab0:	1205883a 	add	r2,r2,r8
    1ab4:	2d8b383a 	mul	r5,r5,r22
    1ab8:	11c5883a 	add	r2,r2,r7
    1abc:	2549383a 	mul	r4,r4,r21
    1ac0:	1185883a 	add	r2,r2,r6
    1ac4:	1f07383a 	mul	r3,r3,fp
    1ac8:	1145883a 	add	r2,r2,r5
    1acc:	1109883a 	add	r4,r2,r4
    1ad0:	20c9883a 	add	r4,r4,r3
    1ad4:	8100000d 	sth	r4,0(r16)
    1ad8:	52800044 	addi	r10,r10,1
    1adc:	5ac00044 	addi	r11,r11,1
    1ae0:	63000044 	addi	r12,r12,1
    1ae4:	73800044 	addi	r14,r14,1
    1ae8:	ffc00044 	addi	ra,ra,1
    1aec:	9cc00044 	addi	r19,r19,1
    1af0:	7bc00044 	addi	r15,r15,1
    1af4:	94800044 	addi	r18,r18,1
    1af8:	8c400044 	addi	r17,r17,1
    1afc:	84000084 	addi	r16,r16,2
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b00:	6abfd61e 	bne	r13,r10,1a5c <sobel_x_inline+0x17c>
    1b04:	d9000817 	ldw	r4,32(sp)
    1b08:	d8800917 	ldw	r2,36(sp)
    1b0c:	d8c00b17 	ldw	r3,44(sp)
    1b10:	21000044 	addi	r4,r4,1
    1b14:	d9000815 	stw	r4,32(sp)
    1b18:	10c5883a 	add	r2,r2,r3
    1b1c:	d8800915 	stw	r2,36(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b20:	d9000a17 	ldw	r4,40(sp)
    1b24:	d8800c17 	ldw	r2,48(sp)
    1b28:	dac00517 	ldw	r11,20(sp)
    1b2c:	db000717 	ldw	r12,28(sp)
    1b30:	db800617 	ldw	r14,24(sp)
    1b34:	20bfb316 	blt	r4,r2,1a04 <sobel_x_inline+0x124>
		   }

		 sobel_x_result[y*sobel_width+x] = result;
	  }
   }
}
    1b38:	dfc01617 	ldw	ra,88(sp)
    1b3c:	df001517 	ldw	fp,84(sp)
    1b40:	ddc01417 	ldw	r23,80(sp)
    1b44:	dd801317 	ldw	r22,76(sp)
    1b48:	dd401217 	ldw	r21,72(sp)
    1b4c:	dd001117 	ldw	r20,68(sp)
    1b50:	dcc01017 	ldw	r19,64(sp)
    1b54:	dc800f17 	ldw	r18,60(sp)
    1b58:	dc400e17 	ldw	r17,56(sp)
    1b5c:	dc000d17 	ldw	r16,52(sp)
    1b60:	dec01704 	addi	sp,sp,92
    1b64:	f800283a 	ret
    1b68:	d8800817 	ldw	r2,32(sp)
    1b6c:	5917883a 	add	r11,r11,r4
    1b70:	6119883a 	add	r12,r12,r4
    1b74:	711d883a 	add	r14,r14,r4
    1b78:	d8800a15 	stw	r2,40(sp)
    1b7c:	dac00515 	stw	r11,20(sp)
    1b80:	db000715 	stw	r12,28(sp)
    1b84:	db800615 	stw	r14,24(sp)
    1b88:	003fde06 	br	1b04 <sobel_x_inline+0x224>

00001b8c <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1b8c:	defff604 	addi	sp,sp,-40
    1b90:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b94:	d4e6d117 	ldw	r19,-25788(gp)
		 sobel_x_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1b98:	dfc00915 	stw	ra,36(sp)
    1b9c:	df000815 	stw	fp,32(sp)
    1ba0:	ddc00715 	stw	r23,28(sp)
    1ba4:	dd800615 	stw	r22,24(sp)
    1ba8:	dd400515 	stw	r21,20(sp)
    1bac:	dd000415 	stw	r20,16(sp)
    1bb0:	dc800215 	stw	r18,8(sp)
    1bb4:	dc400115 	stw	r17,4(sp)
    1bb8:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1bbc:	00800084 	movi	r2,2
    1bc0:	14c03b0e 	bge	r2,r19,1cb0 <sobel_x_with_rgb+0x124>
    1bc4:	2025883a 	mov	r18,r4
    1bc8:	d126cf17 	ldw	r4,-25796(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1bcc:	d566d217 	ldw	r21,-25784(gp)
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1bd0:	d526d417 	ldw	r20,-25776(gp)
    1bd4:	23ffffc4 	addi	r15,r4,-1
    1bd8:	908f883a 	add	r7,r18,r2
    1bdc:	9cffffc4 	addi	r19,r19,-1
    1be0:	200d883a 	mov	r6,r4
    1be4:	04000044 	movi	r16,1
    1be8:	31400044 	addi	r5,r6,1
    1bec:	294b883a 	add	r5,r5,r5
    1bf0:	393f883a 	add	ra,r7,r4
    1bf4:	a15b883a 	add	r13,r20,r5
    1bf8:	3123883a 	add	r17,r6,r4
		 sobel_x_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1bfc:	02000044 	movi	r8,1
    1c00:	84000044 	addi	r16,r16,1
    1c04:	3b3fff84 	addi	r12,r7,-2
    1c08:	918d883a 	add	r6,r18,r6
    1c0c:	9457883a 	add	r11,r18,r17
    1c10:	27d5883a 	add	r10,r4,ra
    1c14:	a94b883a 	add	r5,r21,r5
    1c18:	f813883a 	mov	r9,ra
    1c1c:	681d883a 	mov	r14,r13
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1c20:	43c0200e 	bge	r8,r15,1ca4 <sobel_x_with_rgb+0x118>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1c24:	50800003 	ldbu	r2,0(r10)
    1c28:	3dc00003 	ldbu	r23,0(r7)
    1c2c:	37000003 	ldbu	fp,0(r6)
    1c30:	48c00003 	ldbu	r3,0(r9)
    1c34:	b8af883a 	add	r23,r23,r2
    1c38:	65800003 	ldbu	r22,0(r12)
    1c3c:	bf2fc83a 	sub	r23,r23,fp
    1c40:	58800003 	ldbu	r2,0(r11)
    1c44:	bf2fc83a 	sub	r23,r23,fp
    1c48:	18c7883a 	add	r3,r3,r3
    1c4c:	b8c7883a 	add	r3,r23,r3
    1c50:	1d87c83a 	sub	r3,r3,r22
    1c54:	1885c83a 	sub	r2,r3,r2
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1c58:	2880000d 	sth	r2,0(r5)
          if (result < 0) {
    1c5c:	10bfffcc 	andi	r2,r2,65535
    1c60:	10a0001c 	xori	r2,r2,32768
    1c64:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c68:	1007d0fa 	srai	r3,r2,3
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1c6c:	42000044 	addi	r8,r8,1

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1c70:	10001b16 	blt	r2,zero,1ce0 <sobel_x_with_rgb+0x154>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1c74:	180692fa 	slli	r3,r3,11
    1c78:	68c0000d 	sth	r3,0(r13)
    1c7c:	73800084 	addi	r14,r14,2
    1c80:	6b400084 	addi	r13,r13,2
    1c84:	63000044 	addi	r12,r12,1
    1c88:	39c00044 	addi	r7,r7,1
    1c8c:	31800044 	addi	r6,r6,1
    1c90:	4a400044 	addi	r9,r9,1
    1c94:	5ac00044 	addi	r11,r11,1
    1c98:	52800044 	addi	r10,r10,1
    1c9c:	29400084 	addi	r5,r5,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ca0:	43ffe016 	blt	r8,r15,1c24 <sobel_x_with_rgb+0x98>
    1ca4:	880d883a 	mov	r6,r17
    1ca8:	f80f883a 	mov	r7,ra

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1cac:	9c3fce1e 	bne	r19,r16,1be8 <sobel_x_with_rgb+0x5c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1cb0:	dfc00917 	ldw	ra,36(sp)
    1cb4:	df000817 	ldw	fp,32(sp)
    1cb8:	ddc00717 	ldw	r23,28(sp)
    1cbc:	dd800617 	ldw	r22,24(sp)
    1cc0:	dd400517 	ldw	r21,20(sp)
    1cc4:	dd000417 	ldw	r20,16(sp)
    1cc8:	dcc00317 	ldw	r19,12(sp)
    1ccc:	dc800217 	ldw	r18,8(sp)
    1cd0:	dc400117 	ldw	r17,4(sp)
    1cd4:	dc000017 	ldw	r16,0(sp)
    1cd8:	dec00a04 	addi	sp,sp,40
    1cdc:	f800283a 	ret
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ce0:	0085c83a 	sub	r2,zero,r2
    1ce4:	1005d0ba 	srai	r2,r2,2
    1ce8:	1004917a 	slli	r2,r2,5
    1cec:	7080000d 	sth	r2,0(r14)
    1cf0:	003fe206 	br	1c7c <sobel_x_with_rgb+0xf0>

00001cf4 <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1cf4:	defff704 	addi	sp,sp,-36
    1cf8:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1cfc:	d466d117 	ldw	r17,-25788(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1d00:	dfc00815 	stw	ra,32(sp)
    1d04:	ddc00715 	stw	r23,28(sp)
    1d08:	dd800615 	stw	r22,24(sp)
    1d0c:	dd400515 	stw	r21,20(sp)
    1d10:	dd000415 	stw	r20,16(sp)
    1d14:	dcc00315 	stw	r19,12(sp)
    1d18:	dc800215 	stw	r18,8(sp)
    1d1c:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d20:	8c7fffc4 	addi	r17,r17,-1
    1d24:	00800044 	movi	r2,1
    1d28:	14402e0e 	bge	r2,r17,1de4 <sobel_y+0xf0>
    1d2c:	d3e6cf17 	ldw	r15,-25796(gp)
    1d30:	d3a6d317 	ldw	r14,-25780(gp)
    1d34:	03400084 	movi	r13,2
    1d38:	7bff883a 	add	ra,r15,r15
    1d3c:	fb67883a 	add	r19,ra,r13
    1d40:	2019883a 	mov	r12,r4
    1d44:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d48:	6825883a 	mov	r18,r13
    1d4c:	f8a9883a 	add	r20,ra,r2
    1d50:	6821883a 	mov	r16,r13
    1d54:	93c01f0e 	bge	r18,r15,1dd4 <sobel_y+0xe0>
    1d58:	67cb883a 	add	r5,r12,ra
    1d5c:	6821883a 	mov	r16,r13
    1d60:	62800044 	addi	r10,r12,1
    1d64:	61000084 	addi	r4,r12,2
    1d68:	a313883a 	add	r9,r20,r12
    1d6c:	9b11883a 	add	r8,r19,r12
    1d70:	2bd7c83a 	sub	r11,r5,r15
    1d74:	700f883a 	mov	r7,r14
    1d78:	600d883a 	mov	r6,r12
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1d7c:	35800003 	ldbu	r22,0(r6)
    1d80:	20c00003 	ldbu	r3,0(r4)
    1d84:	50800003 	ldbu	r2,0(r10)
    1d88:	4d400003 	ldbu	r21,0(r9)
    1d8c:	b0c7883a 	add	r3,r22,r3
    1d90:	1085883a 	add	r2,r2,r2
    1d94:	2dc00003 	ldbu	r23,0(r5)
    1d98:	1887883a 	add	r3,r3,r2
    1d9c:	45800003 	ldbu	r22,0(r8)
    1da0:	1d47c83a 	sub	r3,r3,r21
    1da4:	1d47c83a 	sub	r3,r3,r21
    1da8:	1dc5c83a 	sub	r2,r3,r23
    1dac:	1585c83a 	sub	r2,r2,r22
    1db0:	3880000d 	sth	r2,0(r7)
    1db4:	21000044 	addi	r4,r4,1
    1db8:	31800044 	addi	r6,r6,1
    1dbc:	52800044 	addi	r10,r10,1
    1dc0:	29400044 	addi	r5,r5,1
    1dc4:	4a400044 	addi	r9,r9,1
    1dc8:	42000044 	addi	r8,r8,1
    1dcc:	39c00084 	addi	r7,r7,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1dd0:	593fea1e 	bne	r11,r4,1d7c <sobel_y+0x88>
    1dd4:	6b400044 	addi	r13,r13,1
    1dd8:	63d9883a 	add	r12,r12,r15
    1ddc:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1de0:	847fdb16 	blt	r16,r17,1d50 <sobel_y+0x5c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1de4:	dfc00817 	ldw	ra,32(sp)
    1de8:	ddc00717 	ldw	r23,28(sp)
    1dec:	dd800617 	ldw	r22,24(sp)
    1df0:	dd400517 	ldw	r21,20(sp)
    1df4:	dd000417 	ldw	r20,16(sp)
    1df8:	dcc00317 	ldw	r19,12(sp)
    1dfc:	dc800217 	ldw	r18,8(sp)
    1e00:	dc400117 	ldw	r17,4(sp)
    1e04:	dc000017 	ldw	r16,0(sp)
    1e08:	dec00904 	addi	sp,sp,36
    1e0c:	f800283a 	ret

00001e10 <sobel_y_inline>:
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e10:	d0a6d117 	ldw	r2,-25788(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_inline(unsigned char *source){
    1e14:	deffe904 	addi	sp,sp,-92
    1e18:	dfc01615 	stw	ra,88(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e1c:	10bfffc4 	addi	r2,r2,-1
    1e20:	d8800c15 	stw	r2,48(sp)
    1e24:	d8c00c17 	ldw	r3,48(sp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_inline(unsigned char *source){
    1e28:	df001515 	stw	fp,84(sp)
    1e2c:	ddc01415 	stw	r23,80(sp)
    1e30:	dd801315 	stw	r22,76(sp)
    1e34:	dd401215 	stw	r21,72(sp)
    1e38:	dd001115 	stw	r20,68(sp)
    1e3c:	dcc01015 	stw	r19,64(sp)
    1e40:	dc800f15 	stw	r18,60(sp)
    1e44:	dc400e15 	stw	r17,56(sp)
    1e48:	dc000d15 	stw	r16,52(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e4c:	00800044 	movi	r2,1
    1e50:	10c0850e 	bge	r2,r3,2068 <sobel_y_inline+0x258>
    1e54:	d0a6cf17 	ldw	r2,-25796(gp)
    1e58:	05000074 	movhi	r20,1
    1e5c:	a506fe84 	addi	r20,r20,7162
    1e60:	1087883a 	add	r3,r2,r2
    1e64:	2017883a 	mov	r11,r4
    1e68:	a24000c4 	addi	r9,r20,3
    1e6c:	01000084 	movi	r4,2
    1e70:	a2000184 	addi	r8,r20,6
    1e74:	a1c00244 	addi	r7,r20,9
    1e78:	a1800304 	addi	r6,r20,12
    1e7c:	d3a6d317 	ldw	r14,-25780(gp)
    1e80:	1a800084 	addi	r10,r3,2
    1e84:	a14003c4 	addi	r5,r20,15
    1e88:	d8800415 	stw	r2,16(sp)
    1e8c:	d8c00b15 	stw	r3,44(sp)
    1e90:	a0800604 	addi	r2,r20,24
    1e94:	a0c00544 	addi	r3,r20,21
    1e98:	d9000815 	stw	r4,32(sp)
    1e9c:	4a403fcc 	andi	r9,r9,255
    1ea0:	a1000484 	addi	r4,r20,18
    1ea4:	42003fcc 	andi	r8,r8,255
    1ea8:	39c03fcc 	andi	r7,r7,255
    1eac:	31803fcc 	andi	r6,r6,255
    1eb0:	a5003fcc 	andi	r20,r20,255
    1eb4:	4a40201c 	xori	r9,r9,128
    1eb8:	4200201c 	xori	r8,r8,128
    1ebc:	39c0201c 	xori	r7,r7,128
    1ec0:	3180201c 	xori	r6,r6,128
    1ec4:	2dc03fcc 	andi	r23,r5,255
    1ec8:	25803fcc 	andi	r22,r4,255
    1ecc:	1d403fcc 	andi	r21,r3,255
    1ed0:	17003fcc 	andi	fp,r2,255
    1ed4:	5b000084 	addi	r12,r11,2
    1ed8:	729d883a 	add	r14,r14,r10
    1edc:	5b400044 	addi	r13,r11,1
    1ee0:	a500201c 	xori	r20,r20,128
    1ee4:	4a7fe004 	addi	r9,r9,-128
    1ee8:	423fe004 	addi	r8,r8,-128
    1eec:	39ffe004 	addi	r7,r7,-128
    1ef0:	31bfe004 	addi	r6,r6,-128
    1ef4:	bdc0201c 	xori	r23,r23,128
    1ef8:	b580201c 	xori	r22,r22,128
    1efc:	ad40201c 	xori	r21,r21,128
    1f00:	e700201c 	xori	fp,fp,128
    1f04:	db800915 	stw	r14,36(sp)
    1f08:	a53fe004 	addi	r20,r20,-128
    1f0c:	601d883a 	mov	r14,r12
    1f10:	da40000d 	sth	r9,0(sp)
    1f14:	da00010d 	sth	r8,4(sp)
    1f18:	d9c0020d 	sth	r7,8(sp)
    1f1c:	d980030d 	sth	r6,12(sp)
    1f20:	bdffe004 	addi	r23,r23,-128
    1f24:	b5bfe004 	addi	r22,r22,-128
    1f28:	ad7fe004 	addi	r21,r21,-128
    1f2c:	e73fe004 	addi	fp,fp,-128
    1f30:	6819883a 	mov	r12,r13
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f34:	d9000417 	ldw	r4,16(sp)
    1f38:	00c00084 	movi	r3,2
    1f3c:	1900560e 	bge	r3,r4,2098 <sobel_y_inline+0x288>
    1f40:	5907883a 	add	r3,r11,r4
    1f44:	2005883a 	mov	r2,r4
    1f48:	d9000417 	ldw	r4,16(sp)
    1f4c:	1385883a 	add	r2,r2,r14
    1f50:	d8800615 	stw	r2,24(sp)
    1f54:	6109883a 	add	r4,r12,r4
    1f58:	d9000715 	stw	r4,28(sp)
    1f5c:	d9000417 	ldw	r4,16(sp)
    1f60:	d8800817 	ldw	r2,32(sp)
    1f64:	dcc00717 	ldw	r19,28(sp)
    1f68:	da800617 	ldw	r10,24(sp)
    1f6c:	dc000917 	ldw	r16,36(sp)
    1f70:	191b883a 	add	r13,r3,r4
    1f74:	d8c00515 	stw	r3,20(sp)
    1f78:	d8800a15 	stw	r2,40(sp)
    1f7c:	183f883a 	mov	ra,r3
    1f80:	9925883a 	add	r18,r19,r4
    1f84:	5123883a 	add	r17,r10,r4
    1f88:	681f883a 	mov	r15,r13
		    	  maskValue = gy_array[(dy+1)*3+(dx+1)];
		         result += source[(y+dy)*sobel_width+(x+dx)] * maskValue;
		      }
		   }

		 sobel_y_result[y*sobel_width+x] = result;
    1f8c:	60c00003 	ldbu	r3,0(r12)
    1f90:	d900000b 	ldhu	r4,0(sp)
    1f94:	58800003 	ldbu	r2,0(r11)
    1f98:	72400003 	ldbu	r9,0(r14)
    1f9c:	1907383a 	mul	r3,r3,r4
    1fa0:	d900010b 	ldhu	r4,4(sp)
    1fa4:	1505383a 	mul	r2,r2,r20
    1fa8:	fa000003 	ldbu	r8,0(ra)
    1fac:	4913383a 	mul	r9,r9,r4
    1fb0:	d900020b 	ldhu	r4,8(sp)
    1fb4:	99c00003 	ldbu	r7,0(r19)
    1fb8:	10c5883a 	add	r2,r2,r3
    1fbc:	d8c0030b 	ldhu	r3,12(sp)
    1fc0:	51800003 	ldbu	r6,0(r10)
    1fc4:	79400003 	ldbu	r5,0(r15)
    1fc8:	4111383a 	mul	r8,r8,r4
    1fcc:	38cf383a 	mul	r7,r7,r3
    1fd0:	91000003 	ldbu	r4,0(r18)
    1fd4:	88c00003 	ldbu	r3,0(r17)
    1fd8:	1245883a 	add	r2,r2,r9
    1fdc:	35cd383a 	mul	r6,r6,r23
    1fe0:	1205883a 	add	r2,r2,r8
    1fe4:	2d8b383a 	mul	r5,r5,r22
    1fe8:	11c5883a 	add	r2,r2,r7
    1fec:	2549383a 	mul	r4,r4,r21
    1ff0:	1185883a 	add	r2,r2,r6
    1ff4:	1f07383a 	mul	r3,r3,fp
    1ff8:	1145883a 	add	r2,r2,r5
    1ffc:	1109883a 	add	r4,r2,r4
    2000:	20c9883a 	add	r4,r4,r3
    2004:	8100000d 	sth	r4,0(r16)
    2008:	52800044 	addi	r10,r10,1
    200c:	5ac00044 	addi	r11,r11,1
    2010:	63000044 	addi	r12,r12,1
    2014:	73800044 	addi	r14,r14,1
    2018:	ffc00044 	addi	ra,ra,1
    201c:	9cc00044 	addi	r19,r19,1
    2020:	7bc00044 	addi	r15,r15,1
    2024:	94800044 	addi	r18,r18,1
    2028:	8c400044 	addi	r17,r17,1
    202c:	84000084 	addi	r16,r16,2
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
	  for (x = 1 ; x < (sobel_width-1) ; x++) {
    2030:	6abfd61e 	bne	r13,r10,1f8c <sobel_y_inline+0x17c>
    2034:	d9000817 	ldw	r4,32(sp)
    2038:	d8800917 	ldw	r2,36(sp)
    203c:	d8c00b17 	ldw	r3,44(sp)
    2040:	21000044 	addi	r4,r4,1
    2044:	d9000815 	stw	r4,32(sp)
    2048:	10c5883a 	add	r2,r2,r3
    204c:	d8800915 	stw	r2,36(sp)
   short dy,dx;
   short result = 0;
   char maskValue = 0;


   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2050:	d9000a17 	ldw	r4,40(sp)
    2054:	d8800c17 	ldw	r2,48(sp)
    2058:	dac00517 	ldw	r11,20(sp)
    205c:	db000717 	ldw	r12,28(sp)
    2060:	db800617 	ldw	r14,24(sp)
    2064:	20bfb316 	blt	r4,r2,1f34 <sobel_y_inline+0x124>
		   }

		 sobel_y_result[y*sobel_width+x] = result;
	  }
   }
}
    2068:	dfc01617 	ldw	ra,88(sp)
    206c:	df001517 	ldw	fp,84(sp)
    2070:	ddc01417 	ldw	r23,80(sp)
    2074:	dd801317 	ldw	r22,76(sp)
    2078:	dd401217 	ldw	r21,72(sp)
    207c:	dd001117 	ldw	r20,68(sp)
    2080:	dcc01017 	ldw	r19,64(sp)
    2084:	dc800f17 	ldw	r18,60(sp)
    2088:	dc400e17 	ldw	r17,56(sp)
    208c:	dc000d17 	ldw	r16,52(sp)
    2090:	dec01704 	addi	sp,sp,92
    2094:	f800283a 	ret
    2098:	d8800817 	ldw	r2,32(sp)
    209c:	5917883a 	add	r11,r11,r4
    20a0:	6119883a 	add	r12,r12,r4
    20a4:	711d883a 	add	r14,r14,r4
    20a8:	d8800a15 	stw	r2,40(sp)
    20ac:	dac00515 	stw	r11,20(sp)
    20b0:	db000715 	stw	r12,28(sp)
    20b4:	db800615 	stw	r14,24(sp)
    20b8:	003fde06 	br	2034 <sobel_y_inline+0x224>

000020bc <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    20bc:	defff504 	addi	sp,sp,-44
    20c0:	dd400615 	stw	r21,24(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    20c4:	d566d117 	ldw	r21,-25788(gp)
		 sobel_y_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    20c8:	dfc00a15 	stw	ra,40(sp)
    20cc:	df000915 	stw	fp,36(sp)
    20d0:	ddc00815 	stw	r23,32(sp)
    20d4:	dd800715 	stw	r22,28(sp)
    20d8:	dd000515 	stw	r20,20(sp)
    20dc:	dcc00415 	stw	r19,16(sp)
    20e0:	dc800315 	stw	r18,12(sp)
    20e4:	dc400215 	stw	r17,8(sp)
    20e8:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    20ec:	00800084 	movi	r2,2
    20f0:	1540470e 	bge	r2,r21,2210 <sobel_y_with_rgb+0x154>
    20f4:	d426cf17 	ldw	r16,-25796(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    20f8:	d726d317 	ldw	fp,-25780(gp)
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    20fc:	d5e6d417 	ldw	r23,-25776(gp)
    2100:	842d883a 	add	r22,r16,r16
    2104:	2029883a 	mov	r20,r4
    2108:	25bf883a 	add	ra,r4,r22
    210c:	80c00084 	addi	r3,r16,2
    2110:	813fffc4 	addi	r4,r16,-1
    2114:	a2800044 	addi	r10,r20,1
    2118:	07ffc83a 	sub	ra,zero,ra
    211c:	ad7fffc4 	addi	r21,r21,-1
    2120:	8005883a 	mov	r2,r16
    2124:	04400044 	movi	r17,1
    2128:	d8c00015 	stw	r3,0(sp)
    212c:	d8c00017 	ldw	r3,0(sp)
    2130:	12000044 	addi	r8,r2,1
    2134:	4211883a 	add	r8,r8,r8
    2138:	ba1d883a 	add	r14,r23,r8
    213c:	1427883a 	add	r19,r2,r16
    2140:	55a5883a 	add	r18,r10,r22
    2144:	1885883a 	add	r2,r3,r2
    2148:	8c400044 	addi	r17,r17,1
    214c:	537fffc4 	addi	r13,r10,-1
    2150:	53000044 	addi	r12,r10,1
    2154:	a4d7883a 	add	r11,r20,r19
    2158:	a093883a 	add	r9,r20,r2
    215c:	e211883a 	add	r8,fp,r8
		 sobel_y_result[y*sobel_width+x] = result;
	  }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    2160:	900f883a 	mov	r7,r18
    2164:	701f883a 	mov	r15,r14
    2168:	00000b06 	br	2198 <sobel_y_with_rgb+0xdc>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    216c:	180692fa 	slli	r3,r3,11
    2170:	70c0000d 	sth	r3,0(r14)
    2174:	7bc00084 	addi	r15,r15,2
    2178:	73800084 	addi	r14,r14,2
    217c:	6b400044 	addi	r13,r13,1
    2180:	52800044 	addi	r10,r10,1
    2184:	63000044 	addi	r12,r12,1
    2188:	5ac00044 	addi	r11,r11,1
    218c:	39c00044 	addi	r7,r7,1
    2190:	4a400044 	addi	r9,r9,1
    2194:	42000084 	addi	r8,r8,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2198:	3fc5883a 	add	r2,r7,ra
    219c:	1100180e 	bge	r2,r4,2200 <sobel_y_with_rgb+0x144>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    21a0:	60800003 	ldbu	r2,0(r12)
    21a4:	69800003 	ldbu	r6,0(r13)
    21a8:	50c00003 	ldbu	r3,0(r10)
    21ac:	39400003 	ldbu	r5,0(r7)
    21b0:	308d883a 	add	r6,r6,r2
    21b4:	18c7883a 	add	r3,r3,r3
    21b8:	58800003 	ldbu	r2,0(r11)
    21bc:	30c7883a 	add	r3,r6,r3
    21c0:	1947c83a 	sub	r3,r3,r5
    21c4:	49800003 	ldbu	r6,0(r9)
    21c8:	1947c83a 	sub	r3,r3,r5
    21cc:	1885c83a 	sub	r2,r3,r2
    21d0:	1185c83a 	sub	r2,r2,r6
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    21d4:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    21d8:	10bfffcc 	andi	r2,r2,65535
    21dc:	10a0001c 	xori	r2,r2,32768
    21e0:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    21e4:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    21e8:	103fe00e 	bge	r2,zero,216c <sobel_y_with_rgb+0xb0>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    21ec:	0085c83a 	sub	r2,zero,r2
    21f0:	1005d0ba 	srai	r2,r2,2
    21f4:	1004917a 	slli	r2,r2,5
    21f8:	7880000d 	sth	r2,0(r15)
    21fc:	003fdd06 	br	2174 <sobel_y_with_rgb+0xb8>
    2200:	9415c83a 	sub	r10,r18,r16
    2204:	fc3fc83a 	sub	ra,ra,r16
    2208:	9805883a 	mov	r2,r19

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    220c:	ac7fc71e 	bne	r21,r17,212c <sobel_y_with_rgb+0x70>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    2210:	dfc00a17 	ldw	ra,40(sp)
    2214:	df000917 	ldw	fp,36(sp)
    2218:	ddc00817 	ldw	r23,32(sp)
    221c:	dd800717 	ldw	r22,28(sp)
    2220:	dd400617 	ldw	r21,24(sp)
    2224:	dd000517 	ldw	r20,20(sp)
    2228:	dcc00417 	ldw	r19,16(sp)
    222c:	dc800317 	ldw	r18,12(sp)
    2230:	dc400217 	ldw	r17,8(sp)
    2234:	dc000117 	ldw	r16,4(sp)
    2238:	dec00b04 	addi	sp,sp,44
    223c:	f800283a 	ret

00002240 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2240:	d0a6d117 	ldw	r2,-25788(gp)
    2244:	02400084 	movi	r9,2
    2248:	4880290e 	bge	r9,r2,22f0 <sobel_threshold+0xb0>
    224c:	223fffcc 	andi	r8,r4,65535
    2250:	d0e6cf17 	ldw	r3,-25796(gp)
    2254:	4220001c 	xori	r8,r8,32768
    2258:	01c00044 	movi	r7,1
    225c:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2260:	48c0200e 	bge	r9,r3,22e4 <sobel_threshold+0xa4>
    2264:	01400044 	movi	r5,1
    2268:	00000c06 	br	229c <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    226c:	2080000f 	ldh	r2,0(r4)
    2270:	10001916 	blt	r2,zero,22d8 <sobel_threshold+0x98>
    2274:	3085883a 	add	r2,r6,r2
    2278:	10bfffcc 	andi	r2,r2,65535
    227c:	10a0001c 	xori	r2,r2,32768
    2280:	10a00004 	addi	r2,r2,-32768
    2284:	4084803a 	cmplt	r2,r8,r2
    2288:	0085c83a 	sub	r2,zero,r2
    228c:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2290:	d0e6cf17 	ldw	r3,-25796(gp)
    2294:	18bfffc4 	addi	r2,r3,-1
    2298:	2880110e 	bge	r5,r2,22e0 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    229c:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    22a0:	d1a6d317 	ldw	r6,-25780(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    22a4:	d126d217 	ldw	r4,-25784(gp)
    22a8:	1947883a 	add	r3,r3,r5
    22ac:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    22b0:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    22b4:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    22b8:	3180000f 	ldh	r6,0(r6)
    22bc:	d0a6d017 	ldw	r2,-25792(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    22c0:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    22c4:	10c7883a 	add	r3,r2,r3
    22c8:	303fe80e 	bge	r6,zero,226c <sobel_threshold+0x2c>
    22cc:	2080000f 	ldh	r2,0(r4)
    22d0:	018dc83a 	sub	r6,zero,r6
    22d4:	103fe70e 	bge	r2,zero,2274 <sobel_threshold+0x34>
    22d8:	0085c83a 	sub	r2,zero,r2
    22dc:	003fe506 	br	2274 <sobel_threshold+0x34>
    22e0:	d0a6d117 	ldw	r2,-25788(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    22e4:	39c00044 	addi	r7,r7,1
    22e8:	113fffc4 	addi	r4,r2,-1
    22ec:	393fdc16 	blt	r7,r4,2260 <sobel_threshold+0x20>
    22f0:	f800283a 	ret

000022f4 <sobel_threshold128>:


void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    22f4:	d0a6d117 	ldw	r2,-25788(gp)
    22f8:	02000084 	movi	r8,2
    22fc:	4080270e 	bge	r8,r2,239c <sobel_threshold128+0xa8>
    2300:	d0e6cf17 	ldw	r3,-25796(gp)
    2304:	01c00044 	movi	r7,1
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2308:	40c0210e 	bge	r8,r3,2390 <sobel_threshold128+0x9c>
    230c:	01400044 	movi	r5,1
    2310:	00000d06 	br	2348 <sobel_threshold128+0x54>

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);

			// If sum is greater than 128
			sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    2314:	2080000f 	ldh	r2,0(r4)
    2318:	10001a16 	blt	r2,zero,2384 <sobel_threshold128+0x90>
    231c:	3085883a 	add	r2,r6,r2
    2320:	10bfffcc 	andi	r2,r2,65535
    2324:	10a0001c 	xori	r2,r2,32768
    2328:	10a00004 	addi	r2,r2,-32768
    232c:	1005d1fa 	srai	r2,r2,7
    2330:	1004c03a 	cmpne	r2,r2,zero
    2334:	0085c83a 	sub	r2,zero,r2
    2338:	18800005 	stb	r2,0(r3)

void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    233c:	d0e6cf17 	ldw	r3,-25796(gp)
    2340:	18bfffc4 	addi	r2,r3,-1
    2344:	2880110e 	bge	r5,r2,238c <sobel_threshold128+0x98>
			arrayindex = (y*sobel_width)+x;

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
    2348:	38c7383a 	mul	r3,r7,r3
    234c:	d1a6d217 	ldw	r6,-25784(gp)
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);
    2350:	d126d317 	ldw	r4,-25780(gp)
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
    2354:	1947883a 	add	r3,r3,r5
    2358:	18c5883a 	add	r2,r3,r3
    235c:	308d883a 	add	r6,r6,r2
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);
    2360:	2089883a 	add	r4,r4,r2

			// If sum is greater than 128
			sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    2364:	3180000f 	ldh	r6,0(r6)
    2368:	d0a6d017 	ldw	r2,-25792(gp)

void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    236c:	29400044 	addi	r5,r5,1

			sum = (sobel_x_result[arrayindex] < 0 ? -sobel_x_result[arrayindex]:sobel_x_result[arrayindex])
				+ (sobel_y_result[arrayindex] < 0 ? -sobel_y_result[arrayindex]:sobel_y_result[arrayindex]);

			// If sum is greater than 128
			sobel_result[arrayindex] = (sum >> 7) ? 0xFF : 0;
    2370:	10c7883a 	add	r3,r2,r3
    2374:	303fe70e 	bge	r6,zero,2314 <sobel_threshold128+0x20>
    2378:	2080000f 	ldh	r2,0(r4)
    237c:	018dc83a 	sub	r6,zero,r6
    2380:	103fe60e 	bge	r2,zero,231c <sobel_threshold128+0x28>
    2384:	0085c83a 	sub	r2,zero,r2
    2388:	003fe406 	br	231c <sobel_threshold128+0x28>
    238c:	d0a6d117 	ldw	r2,-25788(gp)


void sobel_threshold128() {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2390:	39c00044 	addi	r7,r7,1
    2394:	113fffc4 	addi	r4,r2,-1
    2398:	393fdb16 	blt	r7,r4,2308 <sobel_threshold128+0x14>
    239c:	f800283a 	ret

000023a0 <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    23a0:	d0a6d417 	ldw	r2,-25776(gp)
    23a4:	f800283a 	ret

000023a8 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    23a8:	d0a6d017 	ldw	r2,-25792(gp)
    23ac:	f800283a 	ret

000023b0 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    23b0:	00804034 	movhi	r2,256
    23b4:	10883404 	addi	r2,r2,8400
    23b8:	11000035 	stwio	r4,0(r2)
    23bc:	f800283a 	ret

000023c0 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    23c0:	00804034 	movhi	r2,256
    23c4:	10883504 	addi	r2,r2,8404
    23c8:	11000025 	stbio	r4,0(r2)
    23cc:	f800283a 	ret

000023d0 <malloc>:
    23d0:	00800074 	movhi	r2,1
    23d4:	108e6e04 	addi	r2,r2,14776
    23d8:	200b883a 	mov	r5,r4
    23dc:	11000017 	ldw	r4,0(r2)
    23e0:	00023f81 	jmpi	23f8 <_malloc_r>

000023e4 <free>:
    23e4:	00800074 	movhi	r2,1
    23e8:	108e6e04 	addi	r2,r2,14776
    23ec:	200b883a 	mov	r5,r4
    23f0:	11000017 	ldw	r4,0(r2)
    23f4:	00072481 	jmpi	7248 <_free_r>

000023f8 <_malloc_r>:
    23f8:	defff504 	addi	sp,sp,-44
    23fc:	dc800315 	stw	r18,12(sp)
    2400:	dfc00a15 	stw	ra,40(sp)
    2404:	df000915 	stw	fp,36(sp)
    2408:	ddc00815 	stw	r23,32(sp)
    240c:	dd800715 	stw	r22,28(sp)
    2410:	dd400615 	stw	r21,24(sp)
    2414:	dd000515 	stw	r20,20(sp)
    2418:	dcc00415 	stw	r19,16(sp)
    241c:	dc400215 	stw	r17,8(sp)
    2420:	dc000115 	stw	r16,4(sp)
    2424:	288002c4 	addi	r2,r5,11
    2428:	00c00584 	movi	r3,22
    242c:	2025883a 	mov	r18,r4
    2430:	18807f2e 	bgeu	r3,r2,2630 <_malloc_r+0x238>
    2434:	047ffe04 	movi	r17,-8
    2438:	1462703a 	and	r17,r2,r17
    243c:	8800a316 	blt	r17,zero,26cc <_malloc_r+0x2d4>
    2440:	8940a236 	bltu	r17,r5,26cc <_malloc_r+0x2d4>
    2444:	000f2940 	call	f294 <__malloc_lock>
    2448:	00807dc4 	movi	r2,503
    244c:	1441e92e 	bgeu	r2,r17,2bf4 <_malloc_r+0x7fc>
    2450:	8804d27a 	srli	r2,r17,9
    2454:	1000a126 	beq	r2,zero,26dc <_malloc_r+0x2e4>
    2458:	00c00104 	movi	r3,4
    245c:	18811e36 	bltu	r3,r2,28d8 <_malloc_r+0x4e0>
    2460:	8804d1ba 	srli	r2,r17,6
    2464:	12000e44 	addi	r8,r2,57
    2468:	11c00e04 	addi	r7,r2,56
    246c:	4209883a 	add	r4,r8,r8
    2470:	04c00074 	movhi	r19,1
    2474:	2109883a 	add	r4,r4,r4
    2478:	9cc7c004 	addi	r19,r19,7936
    247c:	2109883a 	add	r4,r4,r4
    2480:	9909883a 	add	r4,r19,r4
    2484:	24000117 	ldw	r16,4(r4)
    2488:	213ffe04 	addi	r4,r4,-8
    248c:	24009726 	beq	r4,r16,26ec <_malloc_r+0x2f4>
    2490:	80800117 	ldw	r2,4(r16)
    2494:	01bfff04 	movi	r6,-4
    2498:	014003c4 	movi	r5,15
    249c:	1184703a 	and	r2,r2,r6
    24a0:	1447c83a 	sub	r3,r2,r17
    24a4:	28c00716 	blt	r5,r3,24c4 <_malloc_r+0xcc>
    24a8:	1800920e 	bge	r3,zero,26f4 <_malloc_r+0x2fc>
    24ac:	84000317 	ldw	r16,12(r16)
    24b0:	24008e26 	beq	r4,r16,26ec <_malloc_r+0x2f4>
    24b4:	80800117 	ldw	r2,4(r16)
    24b8:	1184703a 	and	r2,r2,r6
    24bc:	1447c83a 	sub	r3,r2,r17
    24c0:	28fff90e 	bge	r5,r3,24a8 <_malloc_r+0xb0>
    24c4:	3809883a 	mov	r4,r7
    24c8:	01800074 	movhi	r6,1
    24cc:	9c000417 	ldw	r16,16(r19)
    24d0:	3187c004 	addi	r6,r6,7936
    24d4:	32000204 	addi	r8,r6,8
    24d8:	82013426 	beq	r16,r8,29ac <_malloc_r+0x5b4>
    24dc:	80c00117 	ldw	r3,4(r16)
    24e0:	00bfff04 	movi	r2,-4
    24e4:	188e703a 	and	r7,r3,r2
    24e8:	3c45c83a 	sub	r2,r7,r17
    24ec:	00c003c4 	movi	r3,15
    24f0:	18811f16 	blt	r3,r2,2970 <_malloc_r+0x578>
    24f4:	32000515 	stw	r8,20(r6)
    24f8:	32000415 	stw	r8,16(r6)
    24fc:	10007f0e 	bge	r2,zero,26fc <_malloc_r+0x304>
    2500:	00807fc4 	movi	r2,511
    2504:	11c0fd36 	bltu	r2,r7,28fc <_malloc_r+0x504>
    2508:	3806d0fa 	srli	r3,r7,3
    250c:	01c00044 	movi	r7,1
    2510:	30800117 	ldw	r2,4(r6)
    2514:	19400044 	addi	r5,r3,1
    2518:	294b883a 	add	r5,r5,r5
    251c:	1807d0ba 	srai	r3,r3,2
    2520:	294b883a 	add	r5,r5,r5
    2524:	294b883a 	add	r5,r5,r5
    2528:	298b883a 	add	r5,r5,r6
    252c:	38c6983a 	sll	r3,r7,r3
    2530:	29c00017 	ldw	r7,0(r5)
    2534:	2a7ffe04 	addi	r9,r5,-8
    2538:	1886b03a 	or	r3,r3,r2
    253c:	82400315 	stw	r9,12(r16)
    2540:	81c00215 	stw	r7,8(r16)
    2544:	30c00115 	stw	r3,4(r6)
    2548:	2c000015 	stw	r16,0(r5)
    254c:	3c000315 	stw	r16,12(r7)
    2550:	2005d0ba 	srai	r2,r4,2
    2554:	01400044 	movi	r5,1
    2558:	288a983a 	sll	r5,r5,r2
    255c:	19406f36 	bltu	r3,r5,271c <_malloc_r+0x324>
    2560:	28c4703a 	and	r2,r5,r3
    2564:	10000a1e 	bne	r2,zero,2590 <_malloc_r+0x198>
    2568:	00bfff04 	movi	r2,-4
    256c:	294b883a 	add	r5,r5,r5
    2570:	2088703a 	and	r4,r4,r2
    2574:	28c4703a 	and	r2,r5,r3
    2578:	21000104 	addi	r4,r4,4
    257c:	1000041e 	bne	r2,zero,2590 <_malloc_r+0x198>
    2580:	294b883a 	add	r5,r5,r5
    2584:	28c4703a 	and	r2,r5,r3
    2588:	21000104 	addi	r4,r4,4
    258c:	103ffc26 	beq	r2,zero,2580 <_malloc_r+0x188>
    2590:	02bfff04 	movi	r10,-4
    2594:	024003c4 	movi	r9,15
    2598:	21800044 	addi	r6,r4,1
    259c:	318d883a 	add	r6,r6,r6
    25a0:	318d883a 	add	r6,r6,r6
    25a4:	318d883a 	add	r6,r6,r6
    25a8:	998d883a 	add	r6,r19,r6
    25ac:	333ffe04 	addi	r12,r6,-8
    25b0:	2017883a 	mov	r11,r4
    25b4:	31800104 	addi	r6,r6,4
    25b8:	34000017 	ldw	r16,0(r6)
    25bc:	31fffd04 	addi	r7,r6,-12
    25c0:	81c0041e 	bne	r16,r7,25d4 <_malloc_r+0x1dc>
    25c4:	0000fb06 	br	29b4 <_malloc_r+0x5bc>
    25c8:	1801030e 	bge	r3,zero,29d8 <_malloc_r+0x5e0>
    25cc:	84000317 	ldw	r16,12(r16)
    25d0:	81c0f826 	beq	r16,r7,29b4 <_malloc_r+0x5bc>
    25d4:	80800117 	ldw	r2,4(r16)
    25d8:	1284703a 	and	r2,r2,r10
    25dc:	1447c83a 	sub	r3,r2,r17
    25e0:	48fff90e 	bge	r9,r3,25c8 <_malloc_r+0x1d0>
    25e4:	80800317 	ldw	r2,12(r16)
    25e8:	81000217 	ldw	r4,8(r16)
    25ec:	89400054 	ori	r5,r17,1
    25f0:	81400115 	stw	r5,4(r16)
    25f4:	20800315 	stw	r2,12(r4)
    25f8:	11000215 	stw	r4,8(r2)
    25fc:	8463883a 	add	r17,r16,r17
    2600:	9c400515 	stw	r17,20(r19)
    2604:	9c400415 	stw	r17,16(r19)
    2608:	18800054 	ori	r2,r3,1
    260c:	88800115 	stw	r2,4(r17)
    2610:	8a000315 	stw	r8,12(r17)
    2614:	8a000215 	stw	r8,8(r17)
    2618:	88e3883a 	add	r17,r17,r3
    261c:	88c00015 	stw	r3,0(r17)
    2620:	9009883a 	mov	r4,r18
    2624:	000f2b80 	call	f2b8 <__malloc_unlock>
    2628:	80800204 	addi	r2,r16,8
    262c:	00001b06 	br	269c <_malloc_r+0x2a4>
    2630:	04400404 	movi	r17,16
    2634:	89402536 	bltu	r17,r5,26cc <_malloc_r+0x2d4>
    2638:	000f2940 	call	f294 <__malloc_lock>
    263c:	00800184 	movi	r2,6
    2640:	01000084 	movi	r4,2
    2644:	04c00074 	movhi	r19,1
    2648:	1085883a 	add	r2,r2,r2
    264c:	9cc7c004 	addi	r19,r19,7936
    2650:	1085883a 	add	r2,r2,r2
    2654:	9885883a 	add	r2,r19,r2
    2658:	14000117 	ldw	r16,4(r2)
    265c:	10fffe04 	addi	r3,r2,-8
    2660:	80c0d926 	beq	r16,r3,29c8 <_malloc_r+0x5d0>
    2664:	80c00117 	ldw	r3,4(r16)
    2668:	81000317 	ldw	r4,12(r16)
    266c:	00bfff04 	movi	r2,-4
    2670:	1884703a 	and	r2,r3,r2
    2674:	81400217 	ldw	r5,8(r16)
    2678:	8085883a 	add	r2,r16,r2
    267c:	10c00117 	ldw	r3,4(r2)
    2680:	29000315 	stw	r4,12(r5)
    2684:	21400215 	stw	r5,8(r4)
    2688:	18c00054 	ori	r3,r3,1
    268c:	10c00115 	stw	r3,4(r2)
    2690:	9009883a 	mov	r4,r18
    2694:	000f2b80 	call	f2b8 <__malloc_unlock>
    2698:	80800204 	addi	r2,r16,8
    269c:	dfc00a17 	ldw	ra,40(sp)
    26a0:	df000917 	ldw	fp,36(sp)
    26a4:	ddc00817 	ldw	r23,32(sp)
    26a8:	dd800717 	ldw	r22,28(sp)
    26ac:	dd400617 	ldw	r21,24(sp)
    26b0:	dd000517 	ldw	r20,20(sp)
    26b4:	dcc00417 	ldw	r19,16(sp)
    26b8:	dc800317 	ldw	r18,12(sp)
    26bc:	dc400217 	ldw	r17,8(sp)
    26c0:	dc000117 	ldw	r16,4(sp)
    26c4:	dec00b04 	addi	sp,sp,44
    26c8:	f800283a 	ret
    26cc:	00800304 	movi	r2,12
    26d0:	90800015 	stw	r2,0(r18)
    26d4:	0005883a 	mov	r2,zero
    26d8:	003ff006 	br	269c <_malloc_r+0x2a4>
    26dc:	01002004 	movi	r4,128
    26e0:	02001004 	movi	r8,64
    26e4:	01c00fc4 	movi	r7,63
    26e8:	003f6106 	br	2470 <_malloc_r+0x78>
    26ec:	4009883a 	mov	r4,r8
    26f0:	003f7506 	br	24c8 <_malloc_r+0xd0>
    26f4:	81000317 	ldw	r4,12(r16)
    26f8:	003fde06 	br	2674 <_malloc_r+0x27c>
    26fc:	81c5883a 	add	r2,r16,r7
    2700:	11400117 	ldw	r5,4(r2)
    2704:	9009883a 	mov	r4,r18
    2708:	29400054 	ori	r5,r5,1
    270c:	11400115 	stw	r5,4(r2)
    2710:	000f2b80 	call	f2b8 <__malloc_unlock>
    2714:	80800204 	addi	r2,r16,8
    2718:	003fe006 	br	269c <_malloc_r+0x2a4>
    271c:	9c000217 	ldw	r16,8(r19)
    2720:	00bfff04 	movi	r2,-4
    2724:	85800117 	ldw	r22,4(r16)
    2728:	b0ac703a 	and	r22,r22,r2
    272c:	b4400336 	bltu	r22,r17,273c <_malloc_r+0x344>
    2730:	b445c83a 	sub	r2,r22,r17
    2734:	00c003c4 	movi	r3,15
    2738:	18805d16 	blt	r3,r2,28b0 <_malloc_r+0x4b8>
    273c:	05c00074 	movhi	r23,1
    2740:	00800074 	movhi	r2,1
    2744:	10954204 	addi	r2,r2,21768
    2748:	bdce6b04 	addi	r23,r23,14764
    274c:	15400017 	ldw	r21,0(r2)
    2750:	b8c00017 	ldw	r3,0(r23)
    2754:	00bfffc4 	movi	r2,-1
    2758:	858d883a 	add	r6,r16,r22
    275c:	8d6b883a 	add	r21,r17,r21
    2760:	1880ea26 	beq	r3,r2,2b0c <_malloc_r+0x714>
    2764:	ad4403c4 	addi	r21,r21,4111
    2768:	00bc0004 	movi	r2,-4096
    276c:	a8aa703a 	and	r21,r21,r2
    2770:	a80b883a 	mov	r5,r21
    2774:	9009883a 	mov	r4,r18
    2778:	d9800015 	stw	r6,0(sp)
    277c:	0002d440 	call	2d44 <_sbrk_r>
    2780:	1029883a 	mov	r20,r2
    2784:	00bfffc4 	movi	r2,-1
    2788:	d9800017 	ldw	r6,0(sp)
    278c:	a080e826 	beq	r20,r2,2b30 <_malloc_r+0x738>
    2790:	a180a636 	bltu	r20,r6,2a2c <_malloc_r+0x634>
    2794:	07000074 	movhi	fp,1
    2798:	e7155004 	addi	fp,fp,21824
    279c:	e0800017 	ldw	r2,0(fp)
    27a0:	a887883a 	add	r3,r21,r2
    27a4:	e0c00015 	stw	r3,0(fp)
    27a8:	3500e626 	beq	r6,r20,2b44 <_malloc_r+0x74c>
    27ac:	b9000017 	ldw	r4,0(r23)
    27b0:	00bfffc4 	movi	r2,-1
    27b4:	2080ee26 	beq	r4,r2,2b70 <_malloc_r+0x778>
    27b8:	a185c83a 	sub	r2,r20,r6
    27bc:	10c5883a 	add	r2,r2,r3
    27c0:	e0800015 	stw	r2,0(fp)
    27c4:	a0c001cc 	andi	r3,r20,7
    27c8:	1800bc26 	beq	r3,zero,2abc <_malloc_r+0x6c4>
    27cc:	a0e9c83a 	sub	r20,r20,r3
    27d0:	00840204 	movi	r2,4104
    27d4:	a5000204 	addi	r20,r20,8
    27d8:	10c7c83a 	sub	r3,r2,r3
    27dc:	a545883a 	add	r2,r20,r21
    27e0:	1083ffcc 	andi	r2,r2,4095
    27e4:	18abc83a 	sub	r21,r3,r2
    27e8:	a80b883a 	mov	r5,r21
    27ec:	9009883a 	mov	r4,r18
    27f0:	0002d440 	call	2d44 <_sbrk_r>
    27f4:	00ffffc4 	movi	r3,-1
    27f8:	10c0e126 	beq	r2,r3,2b80 <_malloc_r+0x788>
    27fc:	1505c83a 	sub	r2,r2,r20
    2800:	1545883a 	add	r2,r2,r21
    2804:	10800054 	ori	r2,r2,1
    2808:	e0c00017 	ldw	r3,0(fp)
    280c:	9d000215 	stw	r20,8(r19)
    2810:	a0800115 	stw	r2,4(r20)
    2814:	a8c7883a 	add	r3,r21,r3
    2818:	e0c00015 	stw	r3,0(fp)
    281c:	84c00e26 	beq	r16,r19,2858 <_malloc_r+0x460>
    2820:	018003c4 	movi	r6,15
    2824:	3580a72e 	bgeu	r6,r22,2ac4 <_malloc_r+0x6cc>
    2828:	81400117 	ldw	r5,4(r16)
    282c:	013ffe04 	movi	r4,-8
    2830:	b0bffd04 	addi	r2,r22,-12
    2834:	1104703a 	and	r2,r2,r4
    2838:	2900004c 	andi	r4,r5,1
    283c:	2088b03a 	or	r4,r4,r2
    2840:	81000115 	stw	r4,4(r16)
    2844:	01400144 	movi	r5,5
    2848:	8089883a 	add	r4,r16,r2
    284c:	21400115 	stw	r5,4(r4)
    2850:	21400215 	stw	r5,8(r4)
    2854:	3080cd36 	bltu	r6,r2,2b8c <_malloc_r+0x794>
    2858:	00800074 	movhi	r2,1
    285c:	10954104 	addi	r2,r2,21764
    2860:	11000017 	ldw	r4,0(r2)
    2864:	20c0012e 	bgeu	r4,r3,286c <_malloc_r+0x474>
    2868:	10c00015 	stw	r3,0(r2)
    286c:	00800074 	movhi	r2,1
    2870:	10954004 	addi	r2,r2,21760
    2874:	11000017 	ldw	r4,0(r2)
    2878:	9c000217 	ldw	r16,8(r19)
    287c:	20c0012e 	bgeu	r4,r3,2884 <_malloc_r+0x48c>
    2880:	10c00015 	stw	r3,0(r2)
    2884:	80c00117 	ldw	r3,4(r16)
    2888:	00bfff04 	movi	r2,-4
    288c:	1886703a 	and	r3,r3,r2
    2890:	1c45c83a 	sub	r2,r3,r17
    2894:	1c400236 	bltu	r3,r17,28a0 <_malloc_r+0x4a8>
    2898:	00c003c4 	movi	r3,15
    289c:	18800416 	blt	r3,r2,28b0 <_malloc_r+0x4b8>
    28a0:	9009883a 	mov	r4,r18
    28a4:	000f2b80 	call	f2b8 <__malloc_unlock>
    28a8:	0005883a 	mov	r2,zero
    28ac:	003f7b06 	br	269c <_malloc_r+0x2a4>
    28b0:	88c00054 	ori	r3,r17,1
    28b4:	80c00115 	stw	r3,4(r16)
    28b8:	8463883a 	add	r17,r16,r17
    28bc:	10800054 	ori	r2,r2,1
    28c0:	9c400215 	stw	r17,8(r19)
    28c4:	88800115 	stw	r2,4(r17)
    28c8:	9009883a 	mov	r4,r18
    28cc:	000f2b80 	call	f2b8 <__malloc_unlock>
    28d0:	80800204 	addi	r2,r16,8
    28d4:	003f7106 	br	269c <_malloc_r+0x2a4>
    28d8:	00c00504 	movi	r3,20
    28dc:	18804a2e 	bgeu	r3,r2,2a08 <_malloc_r+0x610>
    28e0:	00c01504 	movi	r3,84
    28e4:	18806e36 	bltu	r3,r2,2aa0 <_malloc_r+0x6a8>
    28e8:	8804d33a 	srli	r2,r17,12
    28ec:	12001bc4 	addi	r8,r2,111
    28f0:	11c01b84 	addi	r7,r2,110
    28f4:	4209883a 	add	r4,r8,r8
    28f8:	003edd06 	br	2470 <_malloc_r+0x78>
    28fc:	3804d27a 	srli	r2,r7,9
    2900:	00c00104 	movi	r3,4
    2904:	1880442e 	bgeu	r3,r2,2a18 <_malloc_r+0x620>
    2908:	00c00504 	movi	r3,20
    290c:	18808136 	bltu	r3,r2,2b14 <_malloc_r+0x71c>
    2910:	11401704 	addi	r5,r2,92
    2914:	10c016c4 	addi	r3,r2,91
    2918:	294b883a 	add	r5,r5,r5
    291c:	294b883a 	add	r5,r5,r5
    2920:	294b883a 	add	r5,r5,r5
    2924:	994b883a 	add	r5,r19,r5
    2928:	28800017 	ldw	r2,0(r5)
    292c:	01800074 	movhi	r6,1
    2930:	297ffe04 	addi	r5,r5,-8
    2934:	3187c004 	addi	r6,r6,7936
    2938:	28806526 	beq	r5,r2,2ad0 <_malloc_r+0x6d8>
    293c:	01bfff04 	movi	r6,-4
    2940:	10c00117 	ldw	r3,4(r2)
    2944:	1986703a 	and	r3,r3,r6
    2948:	38c0022e 	bgeu	r7,r3,2954 <_malloc_r+0x55c>
    294c:	10800217 	ldw	r2,8(r2)
    2950:	28bffb1e 	bne	r5,r2,2940 <_malloc_r+0x548>
    2954:	11400317 	ldw	r5,12(r2)
    2958:	98c00117 	ldw	r3,4(r19)
    295c:	81400315 	stw	r5,12(r16)
    2960:	80800215 	stw	r2,8(r16)
    2964:	2c000215 	stw	r16,8(r5)
    2968:	14000315 	stw	r16,12(r2)
    296c:	003ef806 	br	2550 <_malloc_r+0x158>
    2970:	88c00054 	ori	r3,r17,1
    2974:	80c00115 	stw	r3,4(r16)
    2978:	8463883a 	add	r17,r16,r17
    297c:	34400515 	stw	r17,20(r6)
    2980:	34400415 	stw	r17,16(r6)
    2984:	10c00054 	ori	r3,r2,1
    2988:	8a000315 	stw	r8,12(r17)
    298c:	8a000215 	stw	r8,8(r17)
    2990:	88c00115 	stw	r3,4(r17)
    2994:	88a3883a 	add	r17,r17,r2
    2998:	88800015 	stw	r2,0(r17)
    299c:	9009883a 	mov	r4,r18
    29a0:	000f2b80 	call	f2b8 <__malloc_unlock>
    29a4:	80800204 	addi	r2,r16,8
    29a8:	003f3c06 	br	269c <_malloc_r+0x2a4>
    29ac:	30c00117 	ldw	r3,4(r6)
    29b0:	003ee706 	br	2550 <_malloc_r+0x158>
    29b4:	5ac00044 	addi	r11,r11,1
    29b8:	588000cc 	andi	r2,r11,3
    29bc:	31800204 	addi	r6,r6,8
    29c0:	103efd1e 	bne	r2,zero,25b8 <_malloc_r+0x1c0>
    29c4:	00002406 	br	2a58 <_malloc_r+0x660>
    29c8:	14000317 	ldw	r16,12(r2)
    29cc:	143f251e 	bne	r2,r16,2664 <_malloc_r+0x26c>
    29d0:	21000084 	addi	r4,r4,2
    29d4:	003ebc06 	br	24c8 <_malloc_r+0xd0>
    29d8:	8085883a 	add	r2,r16,r2
    29dc:	10c00117 	ldw	r3,4(r2)
    29e0:	81000317 	ldw	r4,12(r16)
    29e4:	81400217 	ldw	r5,8(r16)
    29e8:	18c00054 	ori	r3,r3,1
    29ec:	10c00115 	stw	r3,4(r2)
    29f0:	29000315 	stw	r4,12(r5)
    29f4:	21400215 	stw	r5,8(r4)
    29f8:	9009883a 	mov	r4,r18
    29fc:	000f2b80 	call	f2b8 <__malloc_unlock>
    2a00:	80800204 	addi	r2,r16,8
    2a04:	003f2506 	br	269c <_malloc_r+0x2a4>
    2a08:	12001704 	addi	r8,r2,92
    2a0c:	11c016c4 	addi	r7,r2,91
    2a10:	4209883a 	add	r4,r8,r8
    2a14:	003e9606 	br	2470 <_malloc_r+0x78>
    2a18:	3804d1ba 	srli	r2,r7,6
    2a1c:	11400e44 	addi	r5,r2,57
    2a20:	10c00e04 	addi	r3,r2,56
    2a24:	294b883a 	add	r5,r5,r5
    2a28:	003fbc06 	br	291c <_malloc_r+0x524>
    2a2c:	84ff5926 	beq	r16,r19,2794 <_malloc_r+0x39c>
    2a30:	00800074 	movhi	r2,1
    2a34:	1087c004 	addi	r2,r2,7936
    2a38:	14000217 	ldw	r16,8(r2)
    2a3c:	00bfff04 	movi	r2,-4
    2a40:	80c00117 	ldw	r3,4(r16)
    2a44:	1886703a 	and	r3,r3,r2
    2a48:	003f9106 	br	2890 <_malloc_r+0x498>
    2a4c:	60800217 	ldw	r2,8(r12)
    2a50:	213fffc4 	addi	r4,r4,-1
    2a54:	1300651e 	bne	r2,r12,2bec <_malloc_r+0x7f4>
    2a58:	208000cc 	andi	r2,r4,3
    2a5c:	633ffe04 	addi	r12,r12,-8
    2a60:	103ffa1e 	bne	r2,zero,2a4c <_malloc_r+0x654>
    2a64:	98800117 	ldw	r2,4(r19)
    2a68:	0146303a 	nor	r3,zero,r5
    2a6c:	1884703a 	and	r2,r3,r2
    2a70:	98800115 	stw	r2,4(r19)
    2a74:	294b883a 	add	r5,r5,r5
    2a78:	117f2836 	bltu	r2,r5,271c <_malloc_r+0x324>
    2a7c:	283f2726 	beq	r5,zero,271c <_malloc_r+0x324>
    2a80:	2886703a 	and	r3,r5,r2
    2a84:	5809883a 	mov	r4,r11
    2a88:	183ec31e 	bne	r3,zero,2598 <_malloc_r+0x1a0>
    2a8c:	294b883a 	add	r5,r5,r5
    2a90:	2886703a 	and	r3,r5,r2
    2a94:	21000104 	addi	r4,r4,4
    2a98:	183ffc26 	beq	r3,zero,2a8c <_malloc_r+0x694>
    2a9c:	003ebe06 	br	2598 <_malloc_r+0x1a0>
    2aa0:	00c05504 	movi	r3,340
    2aa4:	18801236 	bltu	r3,r2,2af0 <_malloc_r+0x6f8>
    2aa8:	8804d3fa 	srli	r2,r17,15
    2aac:	12001e04 	addi	r8,r2,120
    2ab0:	11c01dc4 	addi	r7,r2,119
    2ab4:	4209883a 	add	r4,r8,r8
    2ab8:	003e6d06 	br	2470 <_malloc_r+0x78>
    2abc:	00c40004 	movi	r3,4096
    2ac0:	003f4606 	br	27dc <_malloc_r+0x3e4>
    2ac4:	00800044 	movi	r2,1
    2ac8:	a0800115 	stw	r2,4(r20)
    2acc:	003f7406 	br	28a0 <_malloc_r+0x4a8>
    2ad0:	1805d0ba 	srai	r2,r3,2
    2ad4:	01c00044 	movi	r7,1
    2ad8:	30c00117 	ldw	r3,4(r6)
    2adc:	388e983a 	sll	r7,r7,r2
    2ae0:	2805883a 	mov	r2,r5
    2ae4:	38c6b03a 	or	r3,r7,r3
    2ae8:	30c00115 	stw	r3,4(r6)
    2aec:	003f9b06 	br	295c <_malloc_r+0x564>
    2af0:	00c15504 	movi	r3,1364
    2af4:	18801a36 	bltu	r3,r2,2b60 <_malloc_r+0x768>
    2af8:	8804d4ba 	srli	r2,r17,18
    2afc:	12001f44 	addi	r8,r2,125
    2b00:	11c01f04 	addi	r7,r2,124
    2b04:	4209883a 	add	r4,r8,r8
    2b08:	003e5906 	br	2470 <_malloc_r+0x78>
    2b0c:	ad400404 	addi	r21,r21,16
    2b10:	003f1706 	br	2770 <_malloc_r+0x378>
    2b14:	00c01504 	movi	r3,84
    2b18:	18802336 	bltu	r3,r2,2ba8 <_malloc_r+0x7b0>
    2b1c:	3804d33a 	srli	r2,r7,12
    2b20:	11401bc4 	addi	r5,r2,111
    2b24:	10c01b84 	addi	r3,r2,110
    2b28:	294b883a 	add	r5,r5,r5
    2b2c:	003f7b06 	br	291c <_malloc_r+0x524>
    2b30:	9c000217 	ldw	r16,8(r19)
    2b34:	00bfff04 	movi	r2,-4
    2b38:	80c00117 	ldw	r3,4(r16)
    2b3c:	1886703a 	and	r3,r3,r2
    2b40:	003f5306 	br	2890 <_malloc_r+0x498>
    2b44:	3083ffcc 	andi	r2,r6,4095
    2b48:	103f181e 	bne	r2,zero,27ac <_malloc_r+0x3b4>
    2b4c:	99000217 	ldw	r4,8(r19)
    2b50:	b545883a 	add	r2,r22,r21
    2b54:	10800054 	ori	r2,r2,1
    2b58:	20800115 	stw	r2,4(r4)
    2b5c:	003f3e06 	br	2858 <_malloc_r+0x460>
    2b60:	01003f84 	movi	r4,254
    2b64:	02001fc4 	movi	r8,127
    2b68:	01c01f84 	movi	r7,126
    2b6c:	003e4006 	br	2470 <_malloc_r+0x78>
    2b70:	00800074 	movhi	r2,1
    2b74:	108e6b04 	addi	r2,r2,14764
    2b78:	15000015 	stw	r20,0(r2)
    2b7c:	003f1106 	br	27c4 <_malloc_r+0x3cc>
    2b80:	00800044 	movi	r2,1
    2b84:	002b883a 	mov	r21,zero
    2b88:	003f1f06 	br	2808 <_malloc_r+0x410>
    2b8c:	81400204 	addi	r5,r16,8
    2b90:	9009883a 	mov	r4,r18
    2b94:	00072480 	call	7248 <_free_r>
    2b98:	00800074 	movhi	r2,1
    2b9c:	10955004 	addi	r2,r2,21824
    2ba0:	10c00017 	ldw	r3,0(r2)
    2ba4:	003f2c06 	br	2858 <_malloc_r+0x460>
    2ba8:	00c05504 	movi	r3,340
    2bac:	18800536 	bltu	r3,r2,2bc4 <_malloc_r+0x7cc>
    2bb0:	3804d3fa 	srli	r2,r7,15
    2bb4:	11401e04 	addi	r5,r2,120
    2bb8:	10c01dc4 	addi	r3,r2,119
    2bbc:	294b883a 	add	r5,r5,r5
    2bc0:	003f5606 	br	291c <_malloc_r+0x524>
    2bc4:	00c15504 	movi	r3,1364
    2bc8:	18800536 	bltu	r3,r2,2be0 <_malloc_r+0x7e8>
    2bcc:	3804d4ba 	srli	r2,r7,18
    2bd0:	11401f44 	addi	r5,r2,125
    2bd4:	10c01f04 	addi	r3,r2,124
    2bd8:	294b883a 	add	r5,r5,r5
    2bdc:	003f4f06 	br	291c <_malloc_r+0x524>
    2be0:	01403f84 	movi	r5,254
    2be4:	00c01f84 	movi	r3,126
    2be8:	003f4c06 	br	291c <_malloc_r+0x524>
    2bec:	98800117 	ldw	r2,4(r19)
    2bf0:	003fa006 	br	2a74 <_malloc_r+0x67c>
    2bf4:	8808d0fa 	srli	r4,r17,3
    2bf8:	20800044 	addi	r2,r4,1
    2bfc:	1085883a 	add	r2,r2,r2
    2c00:	003e9006 	br	2644 <_malloc_r+0x24c>

00002c04 <_printf_r>:
    2c04:	defffd04 	addi	sp,sp,-12
    2c08:	2805883a 	mov	r2,r5
    2c0c:	dfc00015 	stw	ra,0(sp)
    2c10:	d9800115 	stw	r6,4(sp)
    2c14:	d9c00215 	stw	r7,8(sp)
    2c18:	21400217 	ldw	r5,8(r4)
    2c1c:	d9c00104 	addi	r7,sp,4
    2c20:	100d883a 	mov	r6,r2
    2c24:	0002e300 	call	2e30 <___vfprintf_internal_r>
    2c28:	dfc00017 	ldw	ra,0(sp)
    2c2c:	dec00304 	addi	sp,sp,12
    2c30:	f800283a 	ret

00002c34 <printf>:
    2c34:	defffc04 	addi	sp,sp,-16
    2c38:	dfc00015 	stw	ra,0(sp)
    2c3c:	d9400115 	stw	r5,4(sp)
    2c40:	d9800215 	stw	r6,8(sp)
    2c44:	d9c00315 	stw	r7,12(sp)
    2c48:	00800074 	movhi	r2,1
    2c4c:	108e6e04 	addi	r2,r2,14776
    2c50:	10800017 	ldw	r2,0(r2)
    2c54:	200b883a 	mov	r5,r4
    2c58:	d9800104 	addi	r6,sp,4
    2c5c:	11000217 	ldw	r4,8(r2)
    2c60:	00050280 	call	5028 <__vfprintf_internal>
    2c64:	dfc00017 	ldw	ra,0(sp)
    2c68:	dec00404 	addi	sp,sp,16
    2c6c:	f800283a 	ret

00002c70 <_puts_r>:
    2c70:	defff604 	addi	sp,sp,-40
    2c74:	dc000715 	stw	r16,28(sp)
    2c78:	2021883a 	mov	r16,r4
    2c7c:	2809883a 	mov	r4,r5
    2c80:	dc400815 	stw	r17,32(sp)
    2c84:	dfc00915 	stw	ra,36(sp)
    2c88:	2823883a 	mov	r17,r5
    2c8c:	0002d980 	call	2d98 <strlen>
    2c90:	10c00044 	addi	r3,r2,1
    2c94:	d8800115 	stw	r2,4(sp)
    2c98:	00800074 	movhi	r2,1
    2c9c:	1086f604 	addi	r2,r2,7128
    2ca0:	d8800215 	stw	r2,8(sp)
    2ca4:	00800044 	movi	r2,1
    2ca8:	d8800315 	stw	r2,12(sp)
    2cac:	00800084 	movi	r2,2
    2cb0:	dc400015 	stw	r17,0(sp)
    2cb4:	d8c00615 	stw	r3,24(sp)
    2cb8:	dec00415 	stw	sp,16(sp)
    2cbc:	d8800515 	stw	r2,20(sp)
    2cc0:	80000226 	beq	r16,zero,2ccc <_puts_r+0x5c>
    2cc4:	80800e17 	ldw	r2,56(r16)
    2cc8:	10001426 	beq	r2,zero,2d1c <_puts_r+0xac>
    2ccc:	81400217 	ldw	r5,8(r16)
    2cd0:	2880030b 	ldhu	r2,12(r5)
    2cd4:	10c8000c 	andi	r3,r2,8192
    2cd8:	1800061e 	bne	r3,zero,2cf4 <_puts_r+0x84>
    2cdc:	29001917 	ldw	r4,100(r5)
    2ce0:	00f7ffc4 	movi	r3,-8193
    2ce4:	10880014 	ori	r2,r2,8192
    2ce8:	20c6703a 	and	r3,r4,r3
    2cec:	2880030d 	sth	r2,12(r5)
    2cf0:	28c01915 	stw	r3,100(r5)
    2cf4:	d9800404 	addi	r6,sp,16
    2cf8:	8009883a 	mov	r4,r16
    2cfc:	00075580 	call	7558 <__sfvwrite_r>
    2d00:	1000091e 	bne	r2,zero,2d28 <_puts_r+0xb8>
    2d04:	00800284 	movi	r2,10
    2d08:	dfc00917 	ldw	ra,36(sp)
    2d0c:	dc400817 	ldw	r17,32(sp)
    2d10:	dc000717 	ldw	r16,28(sp)
    2d14:	dec00a04 	addi	sp,sp,40
    2d18:	f800283a 	ret
    2d1c:	8009883a 	mov	r4,r16
    2d20:	00070d40 	call	70d4 <__sinit>
    2d24:	003fe906 	br	2ccc <_puts_r+0x5c>
    2d28:	00bfffc4 	movi	r2,-1
    2d2c:	003ff606 	br	2d08 <_puts_r+0x98>

00002d30 <puts>:
    2d30:	00800074 	movhi	r2,1
    2d34:	108e6e04 	addi	r2,r2,14776
    2d38:	200b883a 	mov	r5,r4
    2d3c:	11000017 	ldw	r4,0(r2)
    2d40:	0002c701 	jmpi	2c70 <_puts_r>

00002d44 <_sbrk_r>:
    2d44:	defffd04 	addi	sp,sp,-12
    2d48:	dc000015 	stw	r16,0(sp)
    2d4c:	04000074 	movhi	r16,1
    2d50:	dc400115 	stw	r17,4(sp)
    2d54:	84154304 	addi	r16,r16,21772
    2d58:	2023883a 	mov	r17,r4
    2d5c:	2809883a 	mov	r4,r5
    2d60:	dfc00215 	stw	ra,8(sp)
    2d64:	80000015 	stw	zero,0(r16)
    2d68:	000f4780 	call	f478 <sbrk>
    2d6c:	00ffffc4 	movi	r3,-1
    2d70:	10c00526 	beq	r2,r3,2d88 <_sbrk_r+0x44>
    2d74:	dfc00217 	ldw	ra,8(sp)
    2d78:	dc400117 	ldw	r17,4(sp)
    2d7c:	dc000017 	ldw	r16,0(sp)
    2d80:	dec00304 	addi	sp,sp,12
    2d84:	f800283a 	ret
    2d88:	80c00017 	ldw	r3,0(r16)
    2d8c:	183ff926 	beq	r3,zero,2d74 <_sbrk_r+0x30>
    2d90:	88c00015 	stw	r3,0(r17)
    2d94:	003ff706 	br	2d74 <_sbrk_r+0x30>

00002d98 <strlen>:
    2d98:	208000cc 	andi	r2,r4,3
    2d9c:	10002026 	beq	r2,zero,2e20 <strlen+0x88>
    2da0:	20800007 	ldb	r2,0(r4)
    2da4:	10002026 	beq	r2,zero,2e28 <strlen+0x90>
    2da8:	2005883a 	mov	r2,r4
    2dac:	00000206 	br	2db8 <strlen+0x20>
    2db0:	10c00007 	ldb	r3,0(r2)
    2db4:	18001826 	beq	r3,zero,2e18 <strlen+0x80>
    2db8:	10800044 	addi	r2,r2,1
    2dbc:	10c000cc 	andi	r3,r2,3
    2dc0:	183ffb1e 	bne	r3,zero,2db0 <strlen+0x18>
    2dc4:	10c00017 	ldw	r3,0(r2)
    2dc8:	01ffbff4 	movhi	r7,65279
    2dcc:	39ffbfc4 	addi	r7,r7,-257
    2dd0:	00ca303a 	nor	r5,zero,r3
    2dd4:	01a02074 	movhi	r6,32897
    2dd8:	19c7883a 	add	r3,r3,r7
    2ddc:	31a02004 	addi	r6,r6,-32640
    2de0:	1946703a 	and	r3,r3,r5
    2de4:	1986703a 	and	r3,r3,r6
    2de8:	1800091e 	bne	r3,zero,2e10 <strlen+0x78>
    2dec:	10800104 	addi	r2,r2,4
    2df0:	10c00017 	ldw	r3,0(r2)
    2df4:	19cb883a 	add	r5,r3,r7
    2df8:	00c6303a 	nor	r3,zero,r3
    2dfc:	28c6703a 	and	r3,r5,r3
    2e00:	1986703a 	and	r3,r3,r6
    2e04:	183ff926 	beq	r3,zero,2dec <strlen+0x54>
    2e08:	00000106 	br	2e10 <strlen+0x78>
    2e0c:	10800044 	addi	r2,r2,1
    2e10:	10c00007 	ldb	r3,0(r2)
    2e14:	183ffd1e 	bne	r3,zero,2e0c <strlen+0x74>
    2e18:	1105c83a 	sub	r2,r2,r4
    2e1c:	f800283a 	ret
    2e20:	2005883a 	mov	r2,r4
    2e24:	003fe706 	br	2dc4 <strlen+0x2c>
    2e28:	0005883a 	mov	r2,zero
    2e2c:	f800283a 	ret

00002e30 <___vfprintf_internal_r>:
    2e30:	deffb804 	addi	sp,sp,-288
    2e34:	dfc04715 	stw	ra,284(sp)
    2e38:	ddc04515 	stw	r23,276(sp)
    2e3c:	dd404315 	stw	r21,268(sp)
    2e40:	d9002c15 	stw	r4,176(sp)
    2e44:	282f883a 	mov	r23,r5
    2e48:	302b883a 	mov	r21,r6
    2e4c:	d9c02d15 	stw	r7,180(sp)
    2e50:	df004615 	stw	fp,280(sp)
    2e54:	dd804415 	stw	r22,272(sp)
    2e58:	dd004215 	stw	r20,264(sp)
    2e5c:	dcc04115 	stw	r19,260(sp)
    2e60:	dc804015 	stw	r18,256(sp)
    2e64:	dc403f15 	stw	r17,252(sp)
    2e68:	dc003e15 	stw	r16,248(sp)
    2e6c:	0007c480 	call	7c48 <_localeconv_r>
    2e70:	10800017 	ldw	r2,0(r2)
    2e74:	1009883a 	mov	r4,r2
    2e78:	d8803415 	stw	r2,208(sp)
    2e7c:	0002d980 	call	2d98 <strlen>
    2e80:	d8803715 	stw	r2,220(sp)
    2e84:	d8802c17 	ldw	r2,176(sp)
    2e88:	10000226 	beq	r2,zero,2e94 <___vfprintf_internal_r+0x64>
    2e8c:	10800e17 	ldw	r2,56(r2)
    2e90:	1000f926 	beq	r2,zero,3278 <___vfprintf_internal_r+0x448>
    2e94:	b880030b 	ldhu	r2,12(r23)
    2e98:	10c8000c 	andi	r3,r2,8192
    2e9c:	1800061e 	bne	r3,zero,2eb8 <___vfprintf_internal_r+0x88>
    2ea0:	b9001917 	ldw	r4,100(r23)
    2ea4:	00f7ffc4 	movi	r3,-8193
    2ea8:	10880014 	ori	r2,r2,8192
    2eac:	20c6703a 	and	r3,r4,r3
    2eb0:	b880030d 	sth	r2,12(r23)
    2eb4:	b8c01915 	stw	r3,100(r23)
    2eb8:	10c0020c 	andi	r3,r2,8
    2ebc:	1800c126 	beq	r3,zero,31c4 <___vfprintf_internal_r+0x394>
    2ec0:	b8c00417 	ldw	r3,16(r23)
    2ec4:	1800bf26 	beq	r3,zero,31c4 <___vfprintf_internal_r+0x394>
    2ec8:	1080068c 	andi	r2,r2,26
    2ecc:	00c00284 	movi	r3,10
    2ed0:	10c0c426 	beq	r2,r3,31e4 <___vfprintf_internal_r+0x3b4>
    2ed4:	d8c00404 	addi	r3,sp,16
    2ed8:	05000074 	movhi	r20,1
    2edc:	d9001e04 	addi	r4,sp,120
    2ee0:	a5071384 	addi	r20,r20,7246
    2ee4:	d8c01e15 	stw	r3,120(sp)
    2ee8:	d8002015 	stw	zero,128(sp)
    2eec:	d8001f15 	stw	zero,124(sp)
    2ef0:	d8003315 	stw	zero,204(sp)
    2ef4:	d8003615 	stw	zero,216(sp)
    2ef8:	d8003815 	stw	zero,224(sp)
    2efc:	1811883a 	mov	r8,r3
    2f00:	d8003915 	stw	zero,228(sp)
    2f04:	d8003a15 	stw	zero,232(sp)
    2f08:	d8002f15 	stw	zero,188(sp)
    2f0c:	d9002815 	stw	r4,160(sp)
    2f10:	a8800007 	ldb	r2,0(r21)
    2f14:	10027b26 	beq	r2,zero,3904 <___vfprintf_internal_r+0xad4>
    2f18:	00c00944 	movi	r3,37
    2f1c:	a821883a 	mov	r16,r21
    2f20:	10c0021e 	bne	r2,r3,2f2c <___vfprintf_internal_r+0xfc>
    2f24:	00001406 	br	2f78 <___vfprintf_internal_r+0x148>
    2f28:	10c00326 	beq	r2,r3,2f38 <___vfprintf_internal_r+0x108>
    2f2c:	84000044 	addi	r16,r16,1
    2f30:	80800007 	ldb	r2,0(r16)
    2f34:	103ffc1e 	bne	r2,zero,2f28 <___vfprintf_internal_r+0xf8>
    2f38:	8563c83a 	sub	r17,r16,r21
    2f3c:	88000e26 	beq	r17,zero,2f78 <___vfprintf_internal_r+0x148>
    2f40:	d8c02017 	ldw	r3,128(sp)
    2f44:	d8801f17 	ldw	r2,124(sp)
    2f48:	45400015 	stw	r21,0(r8)
    2f4c:	1c47883a 	add	r3,r3,r17
    2f50:	10800044 	addi	r2,r2,1
    2f54:	d8c02015 	stw	r3,128(sp)
    2f58:	44400115 	stw	r17,4(r8)
    2f5c:	d8801f15 	stw	r2,124(sp)
    2f60:	00c001c4 	movi	r3,7
    2f64:	1880a716 	blt	r3,r2,3204 <___vfprintf_internal_r+0x3d4>
    2f68:	42000204 	addi	r8,r8,8
    2f6c:	d9402f17 	ldw	r5,188(sp)
    2f70:	2c4b883a 	add	r5,r5,r17
    2f74:	d9402f15 	stw	r5,188(sp)
    2f78:	80800007 	ldb	r2,0(r16)
    2f7c:	1000a826 	beq	r2,zero,3220 <___vfprintf_internal_r+0x3f0>
    2f80:	84400047 	ldb	r17,1(r16)
    2f84:	00bfffc4 	movi	r2,-1
    2f88:	85400044 	addi	r21,r16,1
    2f8c:	d8002785 	stb	zero,158(sp)
    2f90:	0007883a 	mov	r3,zero
    2f94:	000f883a 	mov	r7,zero
    2f98:	d8802915 	stw	r2,164(sp)
    2f9c:	d8003115 	stw	zero,196(sp)
    2fa0:	0025883a 	mov	r18,zero
    2fa4:	01401604 	movi	r5,88
    2fa8:	01800244 	movi	r6,9
    2fac:	02800a84 	movi	r10,42
    2fb0:	02401b04 	movi	r9,108
    2fb4:	ad400044 	addi	r21,r21,1
    2fb8:	88bff804 	addi	r2,r17,-32
    2fbc:	28830436 	bltu	r5,r2,3bd0 <___vfprintf_internal_r+0xda0>
    2fc0:	100490ba 	slli	r2,r2,2
    2fc4:	01000034 	movhi	r4,0
    2fc8:	210bf604 	addi	r4,r4,12248
    2fcc:	1105883a 	add	r2,r2,r4
    2fd0:	10800017 	ldw	r2,0(r2)
    2fd4:	1000683a 	jmp	r2
    2fd8:	00003af0 	cmpltui	zero,zero,235
    2fdc:	00003bd0 	cmplti	zero,zero,239
    2fe0:	00003bd0 	cmplti	zero,zero,239
    2fe4:	00003b10 	cmplti	zero,zero,236
    2fe8:	00003bd0 	cmplti	zero,zero,239
    2fec:	00003bd0 	cmplti	zero,zero,239
    2ff0:	00003bd0 	cmplti	zero,zero,239
    2ff4:	00003bd0 	cmplti	zero,zero,239
    2ff8:	00003bd0 	cmplti	zero,zero,239
    2ffc:	00003bd0 	cmplti	zero,zero,239
    3000:	00003284 	movi	zero,202
    3004:	00003a2c 	andhi	zero,zero,232
    3008:	00003bd0 	cmplti	zero,zero,239
    300c:	0000314c 	andi	zero,zero,197
    3010:	000032ac 	andhi	zero,zero,202
    3014:	00003bd0 	cmplti	zero,zero,239
    3018:	000032ec 	andhi	zero,zero,203
    301c:	000032f8 	rdprs	zero,zero,203
    3020:	000032f8 	rdprs	zero,zero,203
    3024:	000032f8 	rdprs	zero,zero,203
    3028:	000032f8 	rdprs	zero,zero,203
    302c:	000032f8 	rdprs	zero,zero,203
    3030:	000032f8 	rdprs	zero,zero,203
    3034:	000032f8 	rdprs	zero,zero,203
    3038:	000032f8 	rdprs	zero,zero,203
    303c:	000032f8 	rdprs	zero,zero,203
    3040:	00003bd0 	cmplti	zero,zero,239
    3044:	00003bd0 	cmplti	zero,zero,239
    3048:	00003bd0 	cmplti	zero,zero,239
    304c:	00003bd0 	cmplti	zero,zero,239
    3050:	00003bd0 	cmplti	zero,zero,239
    3054:	00003bd0 	cmplti	zero,zero,239
    3058:	00003bd0 	cmplti	zero,zero,239
    305c:	00003bd0 	cmplti	zero,zero,239
    3060:	00003bd0 	cmplti	zero,zero,239
    3064:	00003bd0 	cmplti	zero,zero,239
    3068:	0000332c 	andhi	zero,zero,204
    306c:	000033e8 	cmpgeui	zero,zero,207
    3070:	00003bd0 	cmplti	zero,zero,239
    3074:	000033e8 	cmpgeui	zero,zero,207
    3078:	00003bd0 	cmplti	zero,zero,239
    307c:	00003bd0 	cmplti	zero,zero,239
    3080:	00003bd0 	cmplti	zero,zero,239
    3084:	00003bd0 	cmplti	zero,zero,239
    3088:	00003488 	cmpgei	zero,zero,210
    308c:	00003bd0 	cmplti	zero,zero,239
    3090:	00003bd0 	cmplti	zero,zero,239
    3094:	00003494 	movui	zero,210
    3098:	00003bd0 	cmplti	zero,zero,239
    309c:	00003bd0 	cmplti	zero,zero,239
    30a0:	00003bd0 	cmplti	zero,zero,239
    30a4:	00003bd0 	cmplti	zero,zero,239
    30a8:	00003bd0 	cmplti	zero,zero,239
    30ac:	0000390c 	andi	zero,zero,228
    30b0:	00003bd0 	cmplti	zero,zero,239
    30b4:	00003bd0 	cmplti	zero,zero,239
    30b8:	0000396c 	andhi	zero,zero,229
    30bc:	00003bd0 	cmplti	zero,zero,239
    30c0:	00003bd0 	cmplti	zero,zero,239
    30c4:	00003bd0 	cmplti	zero,zero,239
    30c8:	00003bd0 	cmplti	zero,zero,239
    30cc:	00003bd0 	cmplti	zero,zero,239
    30d0:	00003bd0 	cmplti	zero,zero,239
    30d4:	00003bd0 	cmplti	zero,zero,239
    30d8:	00003bd0 	cmplti	zero,zero,239
    30dc:	00003bd0 	cmplti	zero,zero,239
    30e0:	00003bd0 	cmplti	zero,zero,239
    30e4:	00003b7c 	xorhi	zero,zero,237
    30e8:	00003b1c 	xori	zero,zero,236
    30ec:	000033e8 	cmpgeui	zero,zero,207
    30f0:	000033e8 	cmpgeui	zero,zero,207
    30f4:	000033e8 	cmpgeui	zero,zero,207
    30f8:	00003b2c 	andhi	zero,zero,236
    30fc:	00003b1c 	xori	zero,zero,236
    3100:	00003bd0 	cmplti	zero,zero,239
    3104:	00003bd0 	cmplti	zero,zero,239
    3108:	00003b38 	rdprs	zero,zero,236
    310c:	00003bd0 	cmplti	zero,zero,239
    3110:	00003b48 	cmpgei	zero,zero,237
    3114:	00003a1c 	xori	zero,zero,232
    3118:	00003158 	cmpnei	zero,zero,197
    311c:	00003a3c 	xorhi	zero,zero,232
    3120:	00003bd0 	cmplti	zero,zero,239
    3124:	00003a48 	cmpgei	zero,zero,233
    3128:	00003bd0 	cmplti	zero,zero,239
    312c:	00003aa4 	muli	zero,zero,234
    3130:	00003bd0 	cmplti	zero,zero,239
    3134:	00003bd0 	cmplti	zero,zero,239
    3138:	00003ab4 	movhi	zero,234
    313c:	d9003117 	ldw	r4,196(sp)
    3140:	d8802d15 	stw	r2,180(sp)
    3144:	0109c83a 	sub	r4,zero,r4
    3148:	d9003115 	stw	r4,196(sp)
    314c:	94800114 	ori	r18,r18,4
    3150:	ac400007 	ldb	r17,0(r21)
    3154:	003f9706 	br	2fb4 <___vfprintf_internal_r+0x184>
    3158:	00800c04 	movi	r2,48
    315c:	d9002d17 	ldw	r4,180(sp)
    3160:	d9402917 	ldw	r5,164(sp)
    3164:	d8802705 	stb	r2,156(sp)
    3168:	00801e04 	movi	r2,120
    316c:	d8802745 	stb	r2,157(sp)
    3170:	d8002785 	stb	zero,158(sp)
    3174:	20c00104 	addi	r3,r4,4
    3178:	24c00017 	ldw	r19,0(r4)
    317c:	002d883a 	mov	r22,zero
    3180:	90800094 	ori	r2,r18,2
    3184:	28029a16 	blt	r5,zero,3bf0 <___vfprintf_internal_r+0xdc0>
    3188:	00bfdfc4 	movi	r2,-129
    318c:	90a4703a 	and	r18,r18,r2
    3190:	d8c02d15 	stw	r3,180(sp)
    3194:	94800094 	ori	r18,r18,2
    3198:	9802871e 	bne	r19,zero,3bb8 <___vfprintf_internal_r+0xd88>
    319c:	00800074 	movhi	r2,1
    31a0:	10870c04 	addi	r2,r2,7216
    31a4:	d8803915 	stw	r2,228(sp)
    31a8:	04401e04 	movi	r17,120
    31ac:	d8802917 	ldw	r2,164(sp)
    31b0:	0039883a 	mov	fp,zero
    31b4:	1001e926 	beq	r2,zero,395c <___vfprintf_internal_r+0xb2c>
    31b8:	0027883a 	mov	r19,zero
    31bc:	002d883a 	mov	r22,zero
    31c0:	00020506 	br	39d8 <___vfprintf_internal_r+0xba8>
    31c4:	d9002c17 	ldw	r4,176(sp)
    31c8:	b80b883a 	mov	r5,r23
    31cc:	00051000 	call	5100 <__swsetup_r>
    31d0:	1005ac1e 	bne	r2,zero,4884 <___vfprintf_internal_r+0x1a54>
    31d4:	b880030b 	ldhu	r2,12(r23)
    31d8:	00c00284 	movi	r3,10
    31dc:	1080068c 	andi	r2,r2,26
    31e0:	10ff3c1e 	bne	r2,r3,2ed4 <___vfprintf_internal_r+0xa4>
    31e4:	b880038f 	ldh	r2,14(r23)
    31e8:	103f3a16 	blt	r2,zero,2ed4 <___vfprintf_internal_r+0xa4>
    31ec:	d9c02d17 	ldw	r7,180(sp)
    31f0:	d9002c17 	ldw	r4,176(sp)
    31f4:	a80d883a 	mov	r6,r21
    31f8:	b80b883a 	mov	r5,r23
    31fc:	00050440 	call	5044 <__sbprintf>
    3200:	00001106 	br	3248 <___vfprintf_internal_r+0x418>
    3204:	d9002c17 	ldw	r4,176(sp)
    3208:	d9801e04 	addi	r6,sp,120
    320c:	b80b883a 	mov	r5,r23
    3210:	0009bcc0 	call	9bcc <__sprint_r>
    3214:	1000081e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3218:	da000404 	addi	r8,sp,16
    321c:	003f5306 	br	2f6c <___vfprintf_internal_r+0x13c>
    3220:	d8802017 	ldw	r2,128(sp)
    3224:	10000426 	beq	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3228:	d9002c17 	ldw	r4,176(sp)
    322c:	d9801e04 	addi	r6,sp,120
    3230:	b80b883a 	mov	r5,r23
    3234:	0009bcc0 	call	9bcc <__sprint_r>
    3238:	b880030b 	ldhu	r2,12(r23)
    323c:	1080100c 	andi	r2,r2,64
    3240:	1005901e 	bne	r2,zero,4884 <___vfprintf_internal_r+0x1a54>
    3244:	d8802f17 	ldw	r2,188(sp)
    3248:	dfc04717 	ldw	ra,284(sp)
    324c:	df004617 	ldw	fp,280(sp)
    3250:	ddc04517 	ldw	r23,276(sp)
    3254:	dd804417 	ldw	r22,272(sp)
    3258:	dd404317 	ldw	r21,268(sp)
    325c:	dd004217 	ldw	r20,264(sp)
    3260:	dcc04117 	ldw	r19,260(sp)
    3264:	dc804017 	ldw	r18,256(sp)
    3268:	dc403f17 	ldw	r17,252(sp)
    326c:	dc003e17 	ldw	r16,248(sp)
    3270:	dec04804 	addi	sp,sp,288
    3274:	f800283a 	ret
    3278:	d9002c17 	ldw	r4,176(sp)
    327c:	00070d40 	call	70d4 <__sinit>
    3280:	003f0406 	br	2e94 <___vfprintf_internal_r+0x64>
    3284:	d8802d17 	ldw	r2,180(sp)
    3288:	d9002d17 	ldw	r4,180(sp)
    328c:	10800017 	ldw	r2,0(r2)
    3290:	d8803115 	stw	r2,196(sp)
    3294:	20800104 	addi	r2,r4,4
    3298:	d9003117 	ldw	r4,196(sp)
    329c:	203fa716 	blt	r4,zero,313c <___vfprintf_internal_r+0x30c>
    32a0:	d8802d15 	stw	r2,180(sp)
    32a4:	ac400007 	ldb	r17,0(r21)
    32a8:	003f4206 	br	2fb4 <___vfprintf_internal_r+0x184>
    32ac:	ac400007 	ldb	r17,0(r21)
    32b0:	aac00044 	addi	r11,r21,1
    32b4:	8a872826 	beq	r17,r10,4f58 <___vfprintf_internal_r+0x2128>
    32b8:	88bff404 	addi	r2,r17,-48
    32bc:	0009883a 	mov	r4,zero
    32c0:	30867d36 	bltu	r6,r2,4cb8 <___vfprintf_internal_r+0x1e88>
    32c4:	5c400007 	ldb	r17,0(r11)
    32c8:	210002a4 	muli	r4,r4,10
    32cc:	5d400044 	addi	r21,r11,1
    32d0:	a817883a 	mov	r11,r21
    32d4:	2089883a 	add	r4,r4,r2
    32d8:	88bff404 	addi	r2,r17,-48
    32dc:	30bff92e 	bgeu	r6,r2,32c4 <___vfprintf_internal_r+0x494>
    32e0:	2005c916 	blt	r4,zero,4a08 <___vfprintf_internal_r+0x1bd8>
    32e4:	d9002915 	stw	r4,164(sp)
    32e8:	003f3306 	br	2fb8 <___vfprintf_internal_r+0x188>
    32ec:	94802014 	ori	r18,r18,128
    32f0:	ac400007 	ldb	r17,0(r21)
    32f4:	003f2f06 	br	2fb4 <___vfprintf_internal_r+0x184>
    32f8:	a809883a 	mov	r4,r21
    32fc:	d8003115 	stw	zero,196(sp)
    3300:	88bff404 	addi	r2,r17,-48
    3304:	0017883a 	mov	r11,zero
    3308:	24400007 	ldb	r17,0(r4)
    330c:	5ac002a4 	muli	r11,r11,10
    3310:	ad400044 	addi	r21,r21,1
    3314:	a809883a 	mov	r4,r21
    3318:	12d7883a 	add	r11,r2,r11
    331c:	88bff404 	addi	r2,r17,-48
    3320:	30bff92e 	bgeu	r6,r2,3308 <___vfprintf_internal_r+0x4d8>
    3324:	dac03115 	stw	r11,196(sp)
    3328:	003f2306 	br	2fb8 <___vfprintf_internal_r+0x188>
    332c:	18c03fcc 	andi	r3,r3,255
    3330:	18072b1e 	bne	r3,zero,4fe0 <___vfprintf_internal_r+0x21b0>
    3334:	94800414 	ori	r18,r18,16
    3338:	9080080c 	andi	r2,r18,32
    333c:	10037b26 	beq	r2,zero,412c <___vfprintf_internal_r+0x12fc>
    3340:	d9402d17 	ldw	r5,180(sp)
    3344:	28800117 	ldw	r2,4(r5)
    3348:	2cc00017 	ldw	r19,0(r5)
    334c:	29400204 	addi	r5,r5,8
    3350:	d9402d15 	stw	r5,180(sp)
    3354:	102d883a 	mov	r22,r2
    3358:	10044b16 	blt	r2,zero,4488 <___vfprintf_internal_r+0x1658>
    335c:	d9402917 	ldw	r5,164(sp)
    3360:	df002783 	ldbu	fp,158(sp)
    3364:	2803bc16 	blt	r5,zero,4258 <___vfprintf_internal_r+0x1428>
    3368:	00ffdfc4 	movi	r3,-129
    336c:	9d84b03a 	or	r2,r19,r22
    3370:	90e4703a 	and	r18,r18,r3
    3374:	10017726 	beq	r2,zero,3954 <___vfprintf_internal_r+0xb24>
    3378:	b0038326 	beq	r22,zero,4188 <___vfprintf_internal_r+0x1358>
    337c:	dc402a15 	stw	r17,168(sp)
    3380:	dc001e04 	addi	r16,sp,120
    3384:	b023883a 	mov	r17,r22
    3388:	402d883a 	mov	r22,r8
    338c:	9809883a 	mov	r4,r19
    3390:	880b883a 	mov	r5,r17
    3394:	01800284 	movi	r6,10
    3398:	000f883a 	mov	r7,zero
    339c:	000bfc40 	call	bfc4 <__umoddi3>
    33a0:	10800c04 	addi	r2,r2,48
    33a4:	843fffc4 	addi	r16,r16,-1
    33a8:	9809883a 	mov	r4,r19
    33ac:	880b883a 	mov	r5,r17
    33b0:	80800005 	stb	r2,0(r16)
    33b4:	01800284 	movi	r6,10
    33b8:	000f883a 	mov	r7,zero
    33bc:	000ba4c0 	call	ba4c <__udivdi3>
    33c0:	1027883a 	mov	r19,r2
    33c4:	10c4b03a 	or	r2,r2,r3
    33c8:	1823883a 	mov	r17,r3
    33cc:	103fef1e 	bne	r2,zero,338c <___vfprintf_internal_r+0x55c>
    33d0:	d8c02817 	ldw	r3,160(sp)
    33d4:	dc402a17 	ldw	r17,168(sp)
    33d8:	b011883a 	mov	r8,r22
    33dc:	1c07c83a 	sub	r3,r3,r16
    33e0:	d8c02e15 	stw	r3,184(sp)
    33e4:	00005906 	br	354c <___vfprintf_internal_r+0x71c>
    33e8:	18c03fcc 	andi	r3,r3,255
    33ec:	1806fa1e 	bne	r3,zero,4fd8 <___vfprintf_internal_r+0x21a8>
    33f0:	9080020c 	andi	r2,r18,8
    33f4:	10048a26 	beq	r2,zero,4620 <___vfprintf_internal_r+0x17f0>
    33f8:	d8c02d17 	ldw	r3,180(sp)
    33fc:	d9002d17 	ldw	r4,180(sp)
    3400:	d9402d17 	ldw	r5,180(sp)
    3404:	18c00017 	ldw	r3,0(r3)
    3408:	21000117 	ldw	r4,4(r4)
    340c:	29400204 	addi	r5,r5,8
    3410:	d8c03615 	stw	r3,216(sp)
    3414:	d9003815 	stw	r4,224(sp)
    3418:	d9402d15 	stw	r5,180(sp)
    341c:	d9003617 	ldw	r4,216(sp)
    3420:	d9403817 	ldw	r5,224(sp)
    3424:	da003d15 	stw	r8,244(sp)
    3428:	04000044 	movi	r16,1
    342c:	00098440 	call	9844 <__fpclassifyd>
    3430:	da003d17 	ldw	r8,244(sp)
    3434:	14041f1e 	bne	r2,r16,44b4 <___vfprintf_internal_r+0x1684>
    3438:	d9003617 	ldw	r4,216(sp)
    343c:	d9403817 	ldw	r5,224(sp)
    3440:	000d883a 	mov	r6,zero
    3444:	000f883a 	mov	r7,zero
    3448:	000d9a80 	call	d9a8 <__ledf2>
    344c:	da003d17 	ldw	r8,244(sp)
    3450:	1005be16 	blt	r2,zero,4b4c <___vfprintf_internal_r+0x1d1c>
    3454:	df002783 	ldbu	fp,158(sp)
    3458:	008011c4 	movi	r2,71
    345c:	1445330e 	bge	r2,r17,492c <___vfprintf_internal_r+0x1afc>
    3460:	04000074 	movhi	r16,1
    3464:	84070404 	addi	r16,r16,7184
    3468:	00c000c4 	movi	r3,3
    346c:	00bfdfc4 	movi	r2,-129
    3470:	d8c02a15 	stw	r3,168(sp)
    3474:	90a4703a 	and	r18,r18,r2
    3478:	d8c02e15 	stw	r3,184(sp)
    347c:	d8002915 	stw	zero,164(sp)
    3480:	d8003215 	stw	zero,200(sp)
    3484:	00003706 	br	3564 <___vfprintf_internal_r+0x734>
    3488:	94800214 	ori	r18,r18,8
    348c:	ac400007 	ldb	r17,0(r21)
    3490:	003ec806 	br	2fb4 <___vfprintf_internal_r+0x184>
    3494:	18c03fcc 	andi	r3,r3,255
    3498:	1806db1e 	bne	r3,zero,5008 <___vfprintf_internal_r+0x21d8>
    349c:	94800414 	ori	r18,r18,16
    34a0:	9080080c 	andi	r2,r18,32
    34a4:	1002d826 	beq	r2,zero,4008 <___vfprintf_internal_r+0x11d8>
    34a8:	d9402d17 	ldw	r5,180(sp)
    34ac:	d8c02917 	ldw	r3,164(sp)
    34b0:	d8002785 	stb	zero,158(sp)
    34b4:	28800204 	addi	r2,r5,8
    34b8:	2cc00017 	ldw	r19,0(r5)
    34bc:	2d800117 	ldw	r22,4(r5)
    34c0:	18048f16 	blt	r3,zero,4700 <___vfprintf_internal_r+0x18d0>
    34c4:	013fdfc4 	movi	r4,-129
    34c8:	9d86b03a 	or	r3,r19,r22
    34cc:	d8802d15 	stw	r2,180(sp)
    34d0:	9124703a 	and	r18,r18,r4
    34d4:	1802d91e 	bne	r3,zero,403c <___vfprintf_internal_r+0x120c>
    34d8:	d8c02917 	ldw	r3,164(sp)
    34dc:	0039883a 	mov	fp,zero
    34e0:	1805c326 	beq	r3,zero,4bf0 <___vfprintf_internal_r+0x1dc0>
    34e4:	0027883a 	mov	r19,zero
    34e8:	002d883a 	mov	r22,zero
    34ec:	dc001e04 	addi	r16,sp,120
    34f0:	9806d0fa 	srli	r3,r19,3
    34f4:	b008977a 	slli	r4,r22,29
    34f8:	b02cd0fa 	srli	r22,r22,3
    34fc:	9cc001cc 	andi	r19,r19,7
    3500:	98800c04 	addi	r2,r19,48
    3504:	843fffc4 	addi	r16,r16,-1
    3508:	20e6b03a 	or	r19,r4,r3
    350c:	80800005 	stb	r2,0(r16)
    3510:	9d86b03a 	or	r3,r19,r22
    3514:	183ff61e 	bne	r3,zero,34f0 <___vfprintf_internal_r+0x6c0>
    3518:	90c0004c 	andi	r3,r18,1
    351c:	18013b26 	beq	r3,zero,3a0c <___vfprintf_internal_r+0xbdc>
    3520:	10803fcc 	andi	r2,r2,255
    3524:	1080201c 	xori	r2,r2,128
    3528:	10bfe004 	addi	r2,r2,-128
    352c:	00c00c04 	movi	r3,48
    3530:	10c13626 	beq	r2,r3,3a0c <___vfprintf_internal_r+0xbdc>
    3534:	80ffffc5 	stb	r3,-1(r16)
    3538:	d8c02817 	ldw	r3,160(sp)
    353c:	80bfffc4 	addi	r2,r16,-1
    3540:	1021883a 	mov	r16,r2
    3544:	1887c83a 	sub	r3,r3,r2
    3548:	d8c02e15 	stw	r3,184(sp)
    354c:	d8802e17 	ldw	r2,184(sp)
    3550:	d9002917 	ldw	r4,164(sp)
    3554:	1100010e 	bge	r2,r4,355c <___vfprintf_internal_r+0x72c>
    3558:	2005883a 	mov	r2,r4
    355c:	d8802a15 	stw	r2,168(sp)
    3560:	d8003215 	stw	zero,200(sp)
    3564:	e7003fcc 	andi	fp,fp,255
    3568:	e700201c 	xori	fp,fp,128
    356c:	e73fe004 	addi	fp,fp,-128
    3570:	e0000326 	beq	fp,zero,3580 <___vfprintf_internal_r+0x750>
    3574:	d8c02a17 	ldw	r3,168(sp)
    3578:	18c00044 	addi	r3,r3,1
    357c:	d8c02a15 	stw	r3,168(sp)
    3580:	90c0008c 	andi	r3,r18,2
    3584:	d8c02b15 	stw	r3,172(sp)
    3588:	18000326 	beq	r3,zero,3598 <___vfprintf_internal_r+0x768>
    358c:	d8c02a17 	ldw	r3,168(sp)
    3590:	18c00084 	addi	r3,r3,2
    3594:	d8c02a15 	stw	r3,168(sp)
    3598:	90c0210c 	andi	r3,r18,132
    359c:	d8c03015 	stw	r3,192(sp)
    35a0:	1801a31e 	bne	r3,zero,3c30 <___vfprintf_internal_r+0xe00>
    35a4:	d9003117 	ldw	r4,196(sp)
    35a8:	d8c02a17 	ldw	r3,168(sp)
    35ac:	20e7c83a 	sub	r19,r4,r3
    35b0:	04c19f0e 	bge	zero,r19,3c30 <___vfprintf_internal_r+0xe00>
    35b4:	02400404 	movi	r9,16
    35b8:	d8c02017 	ldw	r3,128(sp)
    35bc:	d8801f17 	ldw	r2,124(sp)
    35c0:	4cc50d0e 	bge	r9,r19,49f8 <___vfprintf_internal_r+0x1bc8>
    35c4:	01400074 	movhi	r5,1
    35c8:	29471784 	addi	r5,r5,7262
    35cc:	dc403b15 	stw	r17,236(sp)
    35d0:	d9403515 	stw	r5,212(sp)
    35d4:	9823883a 	mov	r17,r19
    35d8:	482d883a 	mov	r22,r9
    35dc:	9027883a 	mov	r19,r18
    35e0:	070001c4 	movi	fp,7
    35e4:	8025883a 	mov	r18,r16
    35e8:	dc002c17 	ldw	r16,176(sp)
    35ec:	00000306 	br	35fc <___vfprintf_internal_r+0x7cc>
    35f0:	8c7ffc04 	addi	r17,r17,-16
    35f4:	42000204 	addi	r8,r8,8
    35f8:	b440130e 	bge	r22,r17,3648 <___vfprintf_internal_r+0x818>
    35fc:	01000074 	movhi	r4,1
    3600:	18c00404 	addi	r3,r3,16
    3604:	10800044 	addi	r2,r2,1
    3608:	21071784 	addi	r4,r4,7262
    360c:	41000015 	stw	r4,0(r8)
    3610:	45800115 	stw	r22,4(r8)
    3614:	d8c02015 	stw	r3,128(sp)
    3618:	d8801f15 	stw	r2,124(sp)
    361c:	e0bff40e 	bge	fp,r2,35f0 <___vfprintf_internal_r+0x7c0>
    3620:	d9801e04 	addi	r6,sp,120
    3624:	b80b883a 	mov	r5,r23
    3628:	8009883a 	mov	r4,r16
    362c:	0009bcc0 	call	9bcc <__sprint_r>
    3630:	103f011e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3634:	8c7ffc04 	addi	r17,r17,-16
    3638:	d8c02017 	ldw	r3,128(sp)
    363c:	d8801f17 	ldw	r2,124(sp)
    3640:	da000404 	addi	r8,sp,16
    3644:	b47fed16 	blt	r22,r17,35fc <___vfprintf_internal_r+0x7cc>
    3648:	9021883a 	mov	r16,r18
    364c:	9825883a 	mov	r18,r19
    3650:	8827883a 	mov	r19,r17
    3654:	dc403b17 	ldw	r17,236(sp)
    3658:	d9403517 	ldw	r5,212(sp)
    365c:	98c7883a 	add	r3,r19,r3
    3660:	10800044 	addi	r2,r2,1
    3664:	41400015 	stw	r5,0(r8)
    3668:	44c00115 	stw	r19,4(r8)
    366c:	d8c02015 	stw	r3,128(sp)
    3670:	d8801f15 	stw	r2,124(sp)
    3674:	010001c4 	movi	r4,7
    3678:	2082a316 	blt	r4,r2,4108 <___vfprintf_internal_r+0x12d8>
    367c:	df002787 	ldb	fp,158(sp)
    3680:	42000204 	addi	r8,r8,8
    3684:	e0000c26 	beq	fp,zero,36b8 <___vfprintf_internal_r+0x888>
    3688:	d8801f17 	ldw	r2,124(sp)
    368c:	d9002784 	addi	r4,sp,158
    3690:	18c00044 	addi	r3,r3,1
    3694:	10800044 	addi	r2,r2,1
    3698:	41000015 	stw	r4,0(r8)
    369c:	01000044 	movi	r4,1
    36a0:	41000115 	stw	r4,4(r8)
    36a4:	d8c02015 	stw	r3,128(sp)
    36a8:	d8801f15 	stw	r2,124(sp)
    36ac:	010001c4 	movi	r4,7
    36b0:	20823c16 	blt	r4,r2,3fa4 <___vfprintf_internal_r+0x1174>
    36b4:	42000204 	addi	r8,r8,8
    36b8:	d8802b17 	ldw	r2,172(sp)
    36bc:	10000c26 	beq	r2,zero,36f0 <___vfprintf_internal_r+0x8c0>
    36c0:	d8801f17 	ldw	r2,124(sp)
    36c4:	d9002704 	addi	r4,sp,156
    36c8:	18c00084 	addi	r3,r3,2
    36cc:	10800044 	addi	r2,r2,1
    36d0:	41000015 	stw	r4,0(r8)
    36d4:	01000084 	movi	r4,2
    36d8:	41000115 	stw	r4,4(r8)
    36dc:	d8c02015 	stw	r3,128(sp)
    36e0:	d8801f15 	stw	r2,124(sp)
    36e4:	010001c4 	movi	r4,7
    36e8:	20823616 	blt	r4,r2,3fc4 <___vfprintf_internal_r+0x1194>
    36ec:	42000204 	addi	r8,r8,8
    36f0:	d9003017 	ldw	r4,192(sp)
    36f4:	00802004 	movi	r2,128
    36f8:	20819926 	beq	r4,r2,3d60 <___vfprintf_internal_r+0xf30>
    36fc:	d9402917 	ldw	r5,164(sp)
    3700:	d8802e17 	ldw	r2,184(sp)
    3704:	28adc83a 	sub	r22,r5,r2
    3708:	0580310e 	bge	zero,r22,37d0 <___vfprintf_internal_r+0x9a0>
    370c:	07000404 	movi	fp,16
    3710:	d8801f17 	ldw	r2,124(sp)
    3714:	e584140e 	bge	fp,r22,4768 <___vfprintf_internal_r+0x1938>
    3718:	01400074 	movhi	r5,1
    371c:	29471384 	addi	r5,r5,7246
    3720:	dc402915 	stw	r17,164(sp)
    3724:	d9402b15 	stw	r5,172(sp)
    3728:	b023883a 	mov	r17,r22
    372c:	04c001c4 	movi	r19,7
    3730:	a82d883a 	mov	r22,r21
    3734:	902b883a 	mov	r21,r18
    3738:	8025883a 	mov	r18,r16
    373c:	dc002c17 	ldw	r16,176(sp)
    3740:	00000306 	br	3750 <___vfprintf_internal_r+0x920>
    3744:	8c7ffc04 	addi	r17,r17,-16
    3748:	42000204 	addi	r8,r8,8
    374c:	e440110e 	bge	fp,r17,3794 <___vfprintf_internal_r+0x964>
    3750:	18c00404 	addi	r3,r3,16
    3754:	10800044 	addi	r2,r2,1
    3758:	45000015 	stw	r20,0(r8)
    375c:	47000115 	stw	fp,4(r8)
    3760:	d8c02015 	stw	r3,128(sp)
    3764:	d8801f15 	stw	r2,124(sp)
    3768:	98bff60e 	bge	r19,r2,3744 <___vfprintf_internal_r+0x914>
    376c:	d9801e04 	addi	r6,sp,120
    3770:	b80b883a 	mov	r5,r23
    3774:	8009883a 	mov	r4,r16
    3778:	0009bcc0 	call	9bcc <__sprint_r>
    377c:	103eae1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3780:	8c7ffc04 	addi	r17,r17,-16
    3784:	d8c02017 	ldw	r3,128(sp)
    3788:	d8801f17 	ldw	r2,124(sp)
    378c:	da000404 	addi	r8,sp,16
    3790:	e47fef16 	blt	fp,r17,3750 <___vfprintf_internal_r+0x920>
    3794:	9021883a 	mov	r16,r18
    3798:	a825883a 	mov	r18,r21
    379c:	b02b883a 	mov	r21,r22
    37a0:	882d883a 	mov	r22,r17
    37a4:	dc402917 	ldw	r17,164(sp)
    37a8:	d9002b17 	ldw	r4,172(sp)
    37ac:	1d87883a 	add	r3,r3,r22
    37b0:	10800044 	addi	r2,r2,1
    37b4:	41000015 	stw	r4,0(r8)
    37b8:	45800115 	stw	r22,4(r8)
    37bc:	d8c02015 	stw	r3,128(sp)
    37c0:	d8801f15 	stw	r2,124(sp)
    37c4:	010001c4 	movi	r4,7
    37c8:	2081ee16 	blt	r4,r2,3f84 <___vfprintf_internal_r+0x1154>
    37cc:	42000204 	addi	r8,r8,8
    37d0:	9080400c 	andi	r2,r18,256
    37d4:	1001181e 	bne	r2,zero,3c38 <___vfprintf_internal_r+0xe08>
    37d8:	d9402e17 	ldw	r5,184(sp)
    37dc:	d8801f17 	ldw	r2,124(sp)
    37e0:	44000015 	stw	r16,0(r8)
    37e4:	1947883a 	add	r3,r3,r5
    37e8:	10800044 	addi	r2,r2,1
    37ec:	41400115 	stw	r5,4(r8)
    37f0:	d8c02015 	stw	r3,128(sp)
    37f4:	d8801f15 	stw	r2,124(sp)
    37f8:	010001c4 	movi	r4,7
    37fc:	2081d316 	blt	r4,r2,3f4c <___vfprintf_internal_r+0x111c>
    3800:	42000204 	addi	r8,r8,8
    3804:	9480010c 	andi	r18,r18,4
    3808:	90003226 	beq	r18,zero,38d4 <___vfprintf_internal_r+0xaa4>
    380c:	d9403117 	ldw	r5,196(sp)
    3810:	d8802a17 	ldw	r2,168(sp)
    3814:	28a1c83a 	sub	r16,r5,r2
    3818:	04002e0e 	bge	zero,r16,38d4 <___vfprintf_internal_r+0xaa4>
    381c:	04400404 	movi	r17,16
    3820:	d8801f17 	ldw	r2,124(sp)
    3824:	8c04a20e 	bge	r17,r16,4ab0 <___vfprintf_internal_r+0x1c80>
    3828:	01400074 	movhi	r5,1
    382c:	29471784 	addi	r5,r5,7262
    3830:	d9403515 	stw	r5,212(sp)
    3834:	048001c4 	movi	r18,7
    3838:	dcc02c17 	ldw	r19,176(sp)
    383c:	00000306 	br	384c <___vfprintf_internal_r+0xa1c>
    3840:	843ffc04 	addi	r16,r16,-16
    3844:	42000204 	addi	r8,r8,8
    3848:	8c00130e 	bge	r17,r16,3898 <___vfprintf_internal_r+0xa68>
    384c:	01000074 	movhi	r4,1
    3850:	18c00404 	addi	r3,r3,16
    3854:	10800044 	addi	r2,r2,1
    3858:	21071784 	addi	r4,r4,7262
    385c:	41000015 	stw	r4,0(r8)
    3860:	44400115 	stw	r17,4(r8)
    3864:	d8c02015 	stw	r3,128(sp)
    3868:	d8801f15 	stw	r2,124(sp)
    386c:	90bff40e 	bge	r18,r2,3840 <___vfprintf_internal_r+0xa10>
    3870:	d9801e04 	addi	r6,sp,120
    3874:	b80b883a 	mov	r5,r23
    3878:	9809883a 	mov	r4,r19
    387c:	0009bcc0 	call	9bcc <__sprint_r>
    3880:	103e6d1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3884:	843ffc04 	addi	r16,r16,-16
    3888:	d8c02017 	ldw	r3,128(sp)
    388c:	d8801f17 	ldw	r2,124(sp)
    3890:	da000404 	addi	r8,sp,16
    3894:	8c3fed16 	blt	r17,r16,384c <___vfprintf_internal_r+0xa1c>
    3898:	d9403517 	ldw	r5,212(sp)
    389c:	1c07883a 	add	r3,r3,r16
    38a0:	10800044 	addi	r2,r2,1
    38a4:	41400015 	stw	r5,0(r8)
    38a8:	44000115 	stw	r16,4(r8)
    38ac:	d8c02015 	stw	r3,128(sp)
    38b0:	d8801f15 	stw	r2,124(sp)
    38b4:	010001c4 	movi	r4,7
    38b8:	2080060e 	bge	r4,r2,38d4 <___vfprintf_internal_r+0xaa4>
    38bc:	d9002c17 	ldw	r4,176(sp)
    38c0:	d9801e04 	addi	r6,sp,120
    38c4:	b80b883a 	mov	r5,r23
    38c8:	0009bcc0 	call	9bcc <__sprint_r>
    38cc:	103e5a1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    38d0:	d8c02017 	ldw	r3,128(sp)
    38d4:	d8803117 	ldw	r2,196(sp)
    38d8:	d9002a17 	ldw	r4,168(sp)
    38dc:	1100010e 	bge	r2,r4,38e4 <___vfprintf_internal_r+0xab4>
    38e0:	2005883a 	mov	r2,r4
    38e4:	d9402f17 	ldw	r5,188(sp)
    38e8:	288b883a 	add	r5,r5,r2
    38ec:	d9402f15 	stw	r5,188(sp)
    38f0:	18019e1e 	bne	r3,zero,3f6c <___vfprintf_internal_r+0x113c>
    38f4:	a8800007 	ldb	r2,0(r21)
    38f8:	d8001f15 	stw	zero,124(sp)
    38fc:	da000404 	addi	r8,sp,16
    3900:	103d851e 	bne	r2,zero,2f18 <___vfprintf_internal_r+0xe8>
    3904:	a821883a 	mov	r16,r21
    3908:	003d9b06 	br	2f78 <___vfprintf_internal_r+0x148>
    390c:	18c03fcc 	andi	r3,r3,255
    3910:	1805c11e 	bne	r3,zero,5018 <___vfprintf_internal_r+0x21e8>
    3914:	94800414 	ori	r18,r18,16
    3918:	9080080c 	andi	r2,r18,32
    391c:	10020c26 	beq	r2,zero,4150 <___vfprintf_internal_r+0x1320>
    3920:	d8802d17 	ldw	r2,180(sp)
    3924:	d9002917 	ldw	r4,164(sp)
    3928:	d8002785 	stb	zero,158(sp)
    392c:	10c00204 	addi	r3,r2,8
    3930:	14c00017 	ldw	r19,0(r2)
    3934:	15800117 	ldw	r22,4(r2)
    3938:	20040f16 	blt	r4,zero,4978 <___vfprintf_internal_r+0x1b48>
    393c:	013fdfc4 	movi	r4,-129
    3940:	9d84b03a 	or	r2,r19,r22
    3944:	d8c02d15 	stw	r3,180(sp)
    3948:	9124703a 	and	r18,r18,r4
    394c:	0039883a 	mov	fp,zero
    3950:	103e891e 	bne	r2,zero,3378 <___vfprintf_internal_r+0x548>
    3954:	d9002917 	ldw	r4,164(sp)
    3958:	2002c11e 	bne	r4,zero,4460 <___vfprintf_internal_r+0x1630>
    395c:	d8002915 	stw	zero,164(sp)
    3960:	d8002e15 	stw	zero,184(sp)
    3964:	dc001e04 	addi	r16,sp,120
    3968:	003ef806 	br	354c <___vfprintf_internal_r+0x71c>
    396c:	18c03fcc 	andi	r3,r3,255
    3970:	18059d1e 	bne	r3,zero,4fe8 <___vfprintf_internal_r+0x21b8>
    3974:	01400074 	movhi	r5,1
    3978:	29470704 	addi	r5,r5,7196
    397c:	d9403915 	stw	r5,228(sp)
    3980:	9080080c 	andi	r2,r18,32
    3984:	10005226 	beq	r2,zero,3ad0 <___vfprintf_internal_r+0xca0>
    3988:	d8802d17 	ldw	r2,180(sp)
    398c:	14c00017 	ldw	r19,0(r2)
    3990:	15800117 	ldw	r22,4(r2)
    3994:	10800204 	addi	r2,r2,8
    3998:	d8802d15 	stw	r2,180(sp)
    399c:	9080004c 	andi	r2,r18,1
    39a0:	10019026 	beq	r2,zero,3fe4 <___vfprintf_internal_r+0x11b4>
    39a4:	9d84b03a 	or	r2,r19,r22
    39a8:	10036926 	beq	r2,zero,4750 <___vfprintf_internal_r+0x1920>
    39ac:	d8c02917 	ldw	r3,164(sp)
    39b0:	00800c04 	movi	r2,48
    39b4:	d8802705 	stb	r2,156(sp)
    39b8:	dc402745 	stb	r17,157(sp)
    39bc:	d8002785 	stb	zero,158(sp)
    39c0:	90800094 	ori	r2,r18,2
    39c4:	18045d16 	blt	r3,zero,4b3c <___vfprintf_internal_r+0x1d0c>
    39c8:	00bfdfc4 	movi	r2,-129
    39cc:	90a4703a 	and	r18,r18,r2
    39d0:	94800094 	ori	r18,r18,2
    39d4:	0039883a 	mov	fp,zero
    39d8:	d9003917 	ldw	r4,228(sp)
    39dc:	dc001e04 	addi	r16,sp,120
    39e0:	988003cc 	andi	r2,r19,15
    39e4:	b006973a 	slli	r3,r22,28
    39e8:	2085883a 	add	r2,r4,r2
    39ec:	9826d13a 	srli	r19,r19,4
    39f0:	10800003 	ldbu	r2,0(r2)
    39f4:	b02cd13a 	srli	r22,r22,4
    39f8:	843fffc4 	addi	r16,r16,-1
    39fc:	1ce6b03a 	or	r19,r3,r19
    3a00:	80800005 	stb	r2,0(r16)
    3a04:	9d84b03a 	or	r2,r19,r22
    3a08:	103ff51e 	bne	r2,zero,39e0 <___vfprintf_internal_r+0xbb0>
    3a0c:	d8c02817 	ldw	r3,160(sp)
    3a10:	1c07c83a 	sub	r3,r3,r16
    3a14:	d8c02e15 	stw	r3,184(sp)
    3a18:	003ecc06 	br	354c <___vfprintf_internal_r+0x71c>
    3a1c:	18c03fcc 	andi	r3,r3,255
    3a20:	183e9f26 	beq	r3,zero,34a0 <___vfprintf_internal_r+0x670>
    3a24:	d9c02785 	stb	r7,158(sp)
    3a28:	003e9d06 	br	34a0 <___vfprintf_internal_r+0x670>
    3a2c:	00c00044 	movi	r3,1
    3a30:	01c00ac4 	movi	r7,43
    3a34:	ac400007 	ldb	r17,0(r21)
    3a38:	003d5e06 	br	2fb4 <___vfprintf_internal_r+0x184>
    3a3c:	94800814 	ori	r18,r18,32
    3a40:	ac400007 	ldb	r17,0(r21)
    3a44:	003d5b06 	br	2fb4 <___vfprintf_internal_r+0x184>
    3a48:	d8c02d17 	ldw	r3,180(sp)
    3a4c:	d8002785 	stb	zero,158(sp)
    3a50:	1c000017 	ldw	r16,0(r3)
    3a54:	1cc00104 	addi	r19,r3,4
    3a58:	80041926 	beq	r16,zero,4ac0 <___vfprintf_internal_r+0x1c90>
    3a5c:	d9002917 	ldw	r4,164(sp)
    3a60:	2003d016 	blt	r4,zero,49a4 <___vfprintf_internal_r+0x1b74>
    3a64:	200d883a 	mov	r6,r4
    3a68:	000b883a 	mov	r5,zero
    3a6c:	8009883a 	mov	r4,r16
    3a70:	da003d15 	stw	r8,244(sp)
    3a74:	0007e340 	call	7e34 <memchr>
    3a78:	da003d17 	ldw	r8,244(sp)
    3a7c:	10045426 	beq	r2,zero,4bd0 <___vfprintf_internal_r+0x1da0>
    3a80:	1405c83a 	sub	r2,r2,r16
    3a84:	d8802e15 	stw	r2,184(sp)
    3a88:	1003cc16 	blt	r2,zero,49bc <___vfprintf_internal_r+0x1b8c>
    3a8c:	df002783 	ldbu	fp,158(sp)
    3a90:	d8802a15 	stw	r2,168(sp)
    3a94:	dcc02d15 	stw	r19,180(sp)
    3a98:	d8002915 	stw	zero,164(sp)
    3a9c:	d8003215 	stw	zero,200(sp)
    3aa0:	003eb006 	br	3564 <___vfprintf_internal_r+0x734>
    3aa4:	18c03fcc 	andi	r3,r3,255
    3aa8:	183f9b26 	beq	r3,zero,3918 <___vfprintf_internal_r+0xae8>
    3aac:	d9c02785 	stb	r7,158(sp)
    3ab0:	003f9906 	br	3918 <___vfprintf_internal_r+0xae8>
    3ab4:	18c03fcc 	andi	r3,r3,255
    3ab8:	1805551e 	bne	r3,zero,5010 <___vfprintf_internal_r+0x21e0>
    3abc:	01400074 	movhi	r5,1
    3ac0:	29470c04 	addi	r5,r5,7216
    3ac4:	d9403915 	stw	r5,228(sp)
    3ac8:	9080080c 	andi	r2,r18,32
    3acc:	103fae1e 	bne	r2,zero,3988 <___vfprintf_internal_r+0xb58>
    3ad0:	9080040c 	andi	r2,r18,16
    3ad4:	1002de26 	beq	r2,zero,4650 <___vfprintf_internal_r+0x1820>
    3ad8:	d8c02d17 	ldw	r3,180(sp)
    3adc:	002d883a 	mov	r22,zero
    3ae0:	1cc00017 	ldw	r19,0(r3)
    3ae4:	18c00104 	addi	r3,r3,4
    3ae8:	d8c02d15 	stw	r3,180(sp)
    3aec:	003fab06 	br	399c <___vfprintf_internal_r+0xb6c>
    3af0:	38803fcc 	andi	r2,r7,255
    3af4:	1080201c 	xori	r2,r2,128
    3af8:	10bfe004 	addi	r2,r2,-128
    3afc:	1002d21e 	bne	r2,zero,4648 <___vfprintf_internal_r+0x1818>
    3b00:	00c00044 	movi	r3,1
    3b04:	01c00804 	movi	r7,32
    3b08:	ac400007 	ldb	r17,0(r21)
    3b0c:	003d2906 	br	2fb4 <___vfprintf_internal_r+0x184>
    3b10:	94800054 	ori	r18,r18,1
    3b14:	ac400007 	ldb	r17,0(r21)
    3b18:	003d2606 	br	2fb4 <___vfprintf_internal_r+0x184>
    3b1c:	18c03fcc 	andi	r3,r3,255
    3b20:	183e0526 	beq	r3,zero,3338 <___vfprintf_internal_r+0x508>
    3b24:	d9c02785 	stb	r7,158(sp)
    3b28:	003e0306 	br	3338 <___vfprintf_internal_r+0x508>
    3b2c:	94801014 	ori	r18,r18,64
    3b30:	ac400007 	ldb	r17,0(r21)
    3b34:	003d1f06 	br	2fb4 <___vfprintf_internal_r+0x184>
    3b38:	ac400007 	ldb	r17,0(r21)
    3b3c:	8a438726 	beq	r17,r9,495c <___vfprintf_internal_r+0x1b2c>
    3b40:	94800414 	ori	r18,r18,16
    3b44:	003d1b06 	br	2fb4 <___vfprintf_internal_r+0x184>
    3b48:	18c03fcc 	andi	r3,r3,255
    3b4c:	1805341e 	bne	r3,zero,5020 <___vfprintf_internal_r+0x21f0>
    3b50:	9080080c 	andi	r2,r18,32
    3b54:	1002cd26 	beq	r2,zero,468c <___vfprintf_internal_r+0x185c>
    3b58:	d9402d17 	ldw	r5,180(sp)
    3b5c:	d9002f17 	ldw	r4,188(sp)
    3b60:	28800017 	ldw	r2,0(r5)
    3b64:	2007d7fa 	srai	r3,r4,31
    3b68:	29400104 	addi	r5,r5,4
    3b6c:	d9402d15 	stw	r5,180(sp)
    3b70:	11000015 	stw	r4,0(r2)
    3b74:	10c00115 	stw	r3,4(r2)
    3b78:	003ce506 	br	2f10 <___vfprintf_internal_r+0xe0>
    3b7c:	d8c02d17 	ldw	r3,180(sp)
    3b80:	d9002d17 	ldw	r4,180(sp)
    3b84:	d8002785 	stb	zero,158(sp)
    3b88:	18800017 	ldw	r2,0(r3)
    3b8c:	21000104 	addi	r4,r4,4
    3b90:	00c00044 	movi	r3,1
    3b94:	d8c02a15 	stw	r3,168(sp)
    3b98:	d8801405 	stb	r2,80(sp)
    3b9c:	d9002d15 	stw	r4,180(sp)
    3ba0:	d8c02e15 	stw	r3,184(sp)
    3ba4:	d8002915 	stw	zero,164(sp)
    3ba8:	d8003215 	stw	zero,200(sp)
    3bac:	dc001404 	addi	r16,sp,80
    3bb0:	0039883a 	mov	fp,zero
    3bb4:	003e7206 	br	3580 <___vfprintf_internal_r+0x750>
    3bb8:	01000074 	movhi	r4,1
    3bbc:	21070c04 	addi	r4,r4,7216
    3bc0:	0039883a 	mov	fp,zero
    3bc4:	d9003915 	stw	r4,228(sp)
    3bc8:	04401e04 	movi	r17,120
    3bcc:	003f8206 	br	39d8 <___vfprintf_internal_r+0xba8>
    3bd0:	18c03fcc 	andi	r3,r3,255
    3bd4:	1805061e 	bne	r3,zero,4ff0 <___vfprintf_internal_r+0x21c0>
    3bd8:	883d9126 	beq	r17,zero,3220 <___vfprintf_internal_r+0x3f0>
    3bdc:	00c00044 	movi	r3,1
    3be0:	d8c02a15 	stw	r3,168(sp)
    3be4:	dc401405 	stb	r17,80(sp)
    3be8:	d8002785 	stb	zero,158(sp)
    3bec:	003fec06 	br	3ba0 <___vfprintf_internal_r+0xd70>
    3bf0:	01400074 	movhi	r5,1
    3bf4:	29470c04 	addi	r5,r5,7216
    3bf8:	d9403915 	stw	r5,228(sp)
    3bfc:	d8c02d15 	stw	r3,180(sp)
    3c00:	1025883a 	mov	r18,r2
    3c04:	04401e04 	movi	r17,120
    3c08:	9d84b03a 	or	r2,r19,r22
    3c0c:	1000fc1e 	bne	r2,zero,4000 <___vfprintf_internal_r+0x11d0>
    3c10:	0039883a 	mov	fp,zero
    3c14:	00800084 	movi	r2,2
    3c18:	10803fcc 	andi	r2,r2,255
    3c1c:	00c00044 	movi	r3,1
    3c20:	10c20f26 	beq	r2,r3,4460 <___vfprintf_internal_r+0x1630>
    3c24:	00c00084 	movi	r3,2
    3c28:	10fd6326 	beq	r2,r3,31b8 <___vfprintf_internal_r+0x388>
    3c2c:	003e2d06 	br	34e4 <___vfprintf_internal_r+0x6b4>
    3c30:	d8c02017 	ldw	r3,128(sp)
    3c34:	003e9306 	br	3684 <___vfprintf_internal_r+0x854>
    3c38:	00801944 	movi	r2,101
    3c3c:	14407e0e 	bge	r2,r17,3e38 <___vfprintf_internal_r+0x1008>
    3c40:	d9003617 	ldw	r4,216(sp)
    3c44:	d9403817 	ldw	r5,224(sp)
    3c48:	000d883a 	mov	r6,zero
    3c4c:	000f883a 	mov	r7,zero
    3c50:	d8c03c15 	stw	r3,240(sp)
    3c54:	da003d15 	stw	r8,244(sp)
    3c58:	000d8440 	call	d844 <__eqdf2>
    3c5c:	d8c03c17 	ldw	r3,240(sp)
    3c60:	da003d17 	ldw	r8,244(sp)
    3c64:	1000f71e 	bne	r2,zero,4044 <___vfprintf_internal_r+0x1214>
    3c68:	d8801f17 	ldw	r2,124(sp)
    3c6c:	01000074 	movhi	r4,1
    3c70:	21071304 	addi	r4,r4,7244
    3c74:	18c00044 	addi	r3,r3,1
    3c78:	10800044 	addi	r2,r2,1
    3c7c:	41000015 	stw	r4,0(r8)
    3c80:	01000044 	movi	r4,1
    3c84:	41000115 	stw	r4,4(r8)
    3c88:	d8c02015 	stw	r3,128(sp)
    3c8c:	d8801f15 	stw	r2,124(sp)
    3c90:	010001c4 	movi	r4,7
    3c94:	2082b816 	blt	r4,r2,4778 <___vfprintf_internal_r+0x1948>
    3c98:	42000204 	addi	r8,r8,8
    3c9c:	d8802617 	ldw	r2,152(sp)
    3ca0:	d9403317 	ldw	r5,204(sp)
    3ca4:	11400216 	blt	r2,r5,3cb0 <___vfprintf_internal_r+0xe80>
    3ca8:	9080004c 	andi	r2,r18,1
    3cac:	103ed526 	beq	r2,zero,3804 <___vfprintf_internal_r+0x9d4>
    3cb0:	d8803717 	ldw	r2,220(sp)
    3cb4:	d9003417 	ldw	r4,208(sp)
    3cb8:	d9403717 	ldw	r5,220(sp)
    3cbc:	1887883a 	add	r3,r3,r2
    3cc0:	d8801f17 	ldw	r2,124(sp)
    3cc4:	41000015 	stw	r4,0(r8)
    3cc8:	41400115 	stw	r5,4(r8)
    3ccc:	10800044 	addi	r2,r2,1
    3cd0:	d8c02015 	stw	r3,128(sp)
    3cd4:	d8801f15 	stw	r2,124(sp)
    3cd8:	010001c4 	movi	r4,7
    3cdc:	20832916 	blt	r4,r2,4984 <___vfprintf_internal_r+0x1b54>
    3ce0:	42000204 	addi	r8,r8,8
    3ce4:	d8803317 	ldw	r2,204(sp)
    3ce8:	143fffc4 	addi	r16,r2,-1
    3cec:	043ec50e 	bge	zero,r16,3804 <___vfprintf_internal_r+0x9d4>
    3cf0:	04400404 	movi	r17,16
    3cf4:	d8801f17 	ldw	r2,124(sp)
    3cf8:	8c00880e 	bge	r17,r16,3f1c <___vfprintf_internal_r+0x10ec>
    3cfc:	01400074 	movhi	r5,1
    3d00:	29471384 	addi	r5,r5,7246
    3d04:	d9402b15 	stw	r5,172(sp)
    3d08:	058001c4 	movi	r22,7
    3d0c:	dcc02c17 	ldw	r19,176(sp)
    3d10:	00000306 	br	3d20 <___vfprintf_internal_r+0xef0>
    3d14:	42000204 	addi	r8,r8,8
    3d18:	843ffc04 	addi	r16,r16,-16
    3d1c:	8c00820e 	bge	r17,r16,3f28 <___vfprintf_internal_r+0x10f8>
    3d20:	18c00404 	addi	r3,r3,16
    3d24:	10800044 	addi	r2,r2,1
    3d28:	45000015 	stw	r20,0(r8)
    3d2c:	44400115 	stw	r17,4(r8)
    3d30:	d8c02015 	stw	r3,128(sp)
    3d34:	d8801f15 	stw	r2,124(sp)
    3d38:	b0bff60e 	bge	r22,r2,3d14 <___vfprintf_internal_r+0xee4>
    3d3c:	d9801e04 	addi	r6,sp,120
    3d40:	b80b883a 	mov	r5,r23
    3d44:	9809883a 	mov	r4,r19
    3d48:	0009bcc0 	call	9bcc <__sprint_r>
    3d4c:	103d3a1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3d50:	d8c02017 	ldw	r3,128(sp)
    3d54:	d8801f17 	ldw	r2,124(sp)
    3d58:	da000404 	addi	r8,sp,16
    3d5c:	003fee06 	br	3d18 <___vfprintf_internal_r+0xee8>
    3d60:	d9403117 	ldw	r5,196(sp)
    3d64:	d8802a17 	ldw	r2,168(sp)
    3d68:	28adc83a 	sub	r22,r5,r2
    3d6c:	05be630e 	bge	zero,r22,36fc <___vfprintf_internal_r+0x8cc>
    3d70:	07000404 	movi	fp,16
    3d74:	d8801f17 	ldw	r2,124(sp)
    3d78:	e5838f0e 	bge	fp,r22,4bb8 <___vfprintf_internal_r+0x1d88>
    3d7c:	01400074 	movhi	r5,1
    3d80:	29471384 	addi	r5,r5,7246
    3d84:	dc403015 	stw	r17,192(sp)
    3d88:	d9402b15 	stw	r5,172(sp)
    3d8c:	b023883a 	mov	r17,r22
    3d90:	04c001c4 	movi	r19,7
    3d94:	a82d883a 	mov	r22,r21
    3d98:	902b883a 	mov	r21,r18
    3d9c:	8025883a 	mov	r18,r16
    3da0:	dc002c17 	ldw	r16,176(sp)
    3da4:	00000306 	br	3db4 <___vfprintf_internal_r+0xf84>
    3da8:	8c7ffc04 	addi	r17,r17,-16
    3dac:	42000204 	addi	r8,r8,8
    3db0:	e440110e 	bge	fp,r17,3df8 <___vfprintf_internal_r+0xfc8>
    3db4:	18c00404 	addi	r3,r3,16
    3db8:	10800044 	addi	r2,r2,1
    3dbc:	45000015 	stw	r20,0(r8)
    3dc0:	47000115 	stw	fp,4(r8)
    3dc4:	d8c02015 	stw	r3,128(sp)
    3dc8:	d8801f15 	stw	r2,124(sp)
    3dcc:	98bff60e 	bge	r19,r2,3da8 <___vfprintf_internal_r+0xf78>
    3dd0:	d9801e04 	addi	r6,sp,120
    3dd4:	b80b883a 	mov	r5,r23
    3dd8:	8009883a 	mov	r4,r16
    3ddc:	0009bcc0 	call	9bcc <__sprint_r>
    3de0:	103d151e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3de4:	8c7ffc04 	addi	r17,r17,-16
    3de8:	d8c02017 	ldw	r3,128(sp)
    3dec:	d8801f17 	ldw	r2,124(sp)
    3df0:	da000404 	addi	r8,sp,16
    3df4:	e47fef16 	blt	fp,r17,3db4 <___vfprintf_internal_r+0xf84>
    3df8:	9021883a 	mov	r16,r18
    3dfc:	a825883a 	mov	r18,r21
    3e00:	b02b883a 	mov	r21,r22
    3e04:	882d883a 	mov	r22,r17
    3e08:	dc403017 	ldw	r17,192(sp)
    3e0c:	d9002b17 	ldw	r4,172(sp)
    3e10:	1d87883a 	add	r3,r3,r22
    3e14:	10800044 	addi	r2,r2,1
    3e18:	41000015 	stw	r4,0(r8)
    3e1c:	45800115 	stw	r22,4(r8)
    3e20:	d8c02015 	stw	r3,128(sp)
    3e24:	d8801f15 	stw	r2,124(sp)
    3e28:	010001c4 	movi	r4,7
    3e2c:	20818e16 	blt	r4,r2,4468 <___vfprintf_internal_r+0x1638>
    3e30:	42000204 	addi	r8,r8,8
    3e34:	003e3106 	br	36fc <___vfprintf_internal_r+0x8cc>
    3e38:	d9403317 	ldw	r5,204(sp)
    3e3c:	00800044 	movi	r2,1
    3e40:	18c00044 	addi	r3,r3,1
    3e44:	1141530e 	bge	r2,r5,4394 <___vfprintf_internal_r+0x1564>
    3e48:	dc401f17 	ldw	r17,124(sp)
    3e4c:	00800044 	movi	r2,1
    3e50:	40800115 	stw	r2,4(r8)
    3e54:	8c400044 	addi	r17,r17,1
    3e58:	44000015 	stw	r16,0(r8)
    3e5c:	d8c02015 	stw	r3,128(sp)
    3e60:	dc401f15 	stw	r17,124(sp)
    3e64:	008001c4 	movi	r2,7
    3e68:	14416b16 	blt	r2,r17,4418 <___vfprintf_internal_r+0x15e8>
    3e6c:	42000204 	addi	r8,r8,8
    3e70:	d8803717 	ldw	r2,220(sp)
    3e74:	d9003417 	ldw	r4,208(sp)
    3e78:	8c400044 	addi	r17,r17,1
    3e7c:	10c7883a 	add	r3,r2,r3
    3e80:	40800115 	stw	r2,4(r8)
    3e84:	41000015 	stw	r4,0(r8)
    3e88:	d8c02015 	stw	r3,128(sp)
    3e8c:	dc401f15 	stw	r17,124(sp)
    3e90:	008001c4 	movi	r2,7
    3e94:	14416916 	blt	r2,r17,443c <___vfprintf_internal_r+0x160c>
    3e98:	45800204 	addi	r22,r8,8
    3e9c:	d9003617 	ldw	r4,216(sp)
    3ea0:	d9403817 	ldw	r5,224(sp)
    3ea4:	000d883a 	mov	r6,zero
    3ea8:	000f883a 	mov	r7,zero
    3eac:	d8c03c15 	stw	r3,240(sp)
    3eb0:	000d8440 	call	d844 <__eqdf2>
    3eb4:	d8c03c17 	ldw	r3,240(sp)
    3eb8:	1000bc26 	beq	r2,zero,41ac <___vfprintf_internal_r+0x137c>
    3ebc:	d9403317 	ldw	r5,204(sp)
    3ec0:	84000044 	addi	r16,r16,1
    3ec4:	8c400044 	addi	r17,r17,1
    3ec8:	28bfffc4 	addi	r2,r5,-1
    3ecc:	1887883a 	add	r3,r3,r2
    3ed0:	b0800115 	stw	r2,4(r22)
    3ed4:	b4000015 	stw	r16,0(r22)
    3ed8:	d8c02015 	stw	r3,128(sp)
    3edc:	dc401f15 	stw	r17,124(sp)
    3ee0:	008001c4 	movi	r2,7
    3ee4:	14414316 	blt	r2,r17,43f4 <___vfprintf_internal_r+0x15c4>
    3ee8:	b5800204 	addi	r22,r22,8
    3eec:	d9003a17 	ldw	r4,232(sp)
    3ef0:	df0022c4 	addi	fp,sp,139
    3ef4:	8c400044 	addi	r17,r17,1
    3ef8:	20c7883a 	add	r3,r4,r3
    3efc:	b7000015 	stw	fp,0(r22)
    3f00:	b1000115 	stw	r4,4(r22)
    3f04:	d8c02015 	stw	r3,128(sp)
    3f08:	dc401f15 	stw	r17,124(sp)
    3f0c:	008001c4 	movi	r2,7
    3f10:	14400e16 	blt	r2,r17,3f4c <___vfprintf_internal_r+0x111c>
    3f14:	b2000204 	addi	r8,r22,8
    3f18:	003e3a06 	br	3804 <___vfprintf_internal_r+0x9d4>
    3f1c:	01000074 	movhi	r4,1
    3f20:	21071384 	addi	r4,r4,7246
    3f24:	d9002b15 	stw	r4,172(sp)
    3f28:	d9002b17 	ldw	r4,172(sp)
    3f2c:	1c07883a 	add	r3,r3,r16
    3f30:	44000115 	stw	r16,4(r8)
    3f34:	41000015 	stw	r4,0(r8)
    3f38:	10800044 	addi	r2,r2,1
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	d8801f15 	stw	r2,124(sp)
    3f44:	010001c4 	movi	r4,7
    3f48:	20be2d0e 	bge	r4,r2,3800 <___vfprintf_internal_r+0x9d0>
    3f4c:	d9002c17 	ldw	r4,176(sp)
    3f50:	d9801e04 	addi	r6,sp,120
    3f54:	b80b883a 	mov	r5,r23
    3f58:	0009bcc0 	call	9bcc <__sprint_r>
    3f5c:	103cb61e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3f60:	d8c02017 	ldw	r3,128(sp)
    3f64:	da000404 	addi	r8,sp,16
    3f68:	003e2606 	br	3804 <___vfprintf_internal_r+0x9d4>
    3f6c:	d9002c17 	ldw	r4,176(sp)
    3f70:	d9801e04 	addi	r6,sp,120
    3f74:	b80b883a 	mov	r5,r23
    3f78:	0009bcc0 	call	9bcc <__sprint_r>
    3f7c:	103e5d26 	beq	r2,zero,38f4 <___vfprintf_internal_r+0xac4>
    3f80:	003cad06 	br	3238 <___vfprintf_internal_r+0x408>
    3f84:	d9002c17 	ldw	r4,176(sp)
    3f88:	d9801e04 	addi	r6,sp,120
    3f8c:	b80b883a 	mov	r5,r23
    3f90:	0009bcc0 	call	9bcc <__sprint_r>
    3f94:	103ca81e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3f98:	d8c02017 	ldw	r3,128(sp)
    3f9c:	da000404 	addi	r8,sp,16
    3fa0:	003e0b06 	br	37d0 <___vfprintf_internal_r+0x9a0>
    3fa4:	d9002c17 	ldw	r4,176(sp)
    3fa8:	d9801e04 	addi	r6,sp,120
    3fac:	b80b883a 	mov	r5,r23
    3fb0:	0009bcc0 	call	9bcc <__sprint_r>
    3fb4:	103ca01e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3fb8:	d8c02017 	ldw	r3,128(sp)
    3fbc:	da000404 	addi	r8,sp,16
    3fc0:	003dbd06 	br	36b8 <___vfprintf_internal_r+0x888>
    3fc4:	d9002c17 	ldw	r4,176(sp)
    3fc8:	d9801e04 	addi	r6,sp,120
    3fcc:	b80b883a 	mov	r5,r23
    3fd0:	0009bcc0 	call	9bcc <__sprint_r>
    3fd4:	103c981e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    3fd8:	d8c02017 	ldw	r3,128(sp)
    3fdc:	da000404 	addi	r8,sp,16
    3fe0:	003dc306 	br	36f0 <___vfprintf_internal_r+0x8c0>
    3fe4:	d8802917 	ldw	r2,164(sp)
    3fe8:	d8002785 	stb	zero,158(sp)
    3fec:	103f0616 	blt	r2,zero,3c08 <___vfprintf_internal_r+0xdd8>
    3ff0:	00ffdfc4 	movi	r3,-129
    3ff4:	9d84b03a 	or	r2,r19,r22
    3ff8:	90e4703a 	and	r18,r18,r3
    3ffc:	103c6b26 	beq	r2,zero,31ac <___vfprintf_internal_r+0x37c>
    4000:	0039883a 	mov	fp,zero
    4004:	003e7406 	br	39d8 <___vfprintf_internal_r+0xba8>
    4008:	9080040c 	andi	r2,r18,16
    400c:	1001b326 	beq	r2,zero,46dc <___vfprintf_internal_r+0x18ac>
    4010:	d9002d17 	ldw	r4,180(sp)
    4014:	d9402917 	ldw	r5,164(sp)
    4018:	d8002785 	stb	zero,158(sp)
    401c:	20800104 	addi	r2,r4,4
    4020:	24c00017 	ldw	r19,0(r4)
    4024:	002d883a 	mov	r22,zero
    4028:	2801b516 	blt	r5,zero,4700 <___vfprintf_internal_r+0x18d0>
    402c:	00ffdfc4 	movi	r3,-129
    4030:	d8802d15 	stw	r2,180(sp)
    4034:	90e4703a 	and	r18,r18,r3
    4038:	983d2726 	beq	r19,zero,34d8 <___vfprintf_internal_r+0x6a8>
    403c:	0039883a 	mov	fp,zero
    4040:	003d2a06 	br	34ec <___vfprintf_internal_r+0x6bc>
    4044:	dc402617 	ldw	r17,152(sp)
    4048:	0441d30e 	bge	zero,r17,4798 <___vfprintf_internal_r+0x1968>
    404c:	dc403217 	ldw	r17,200(sp)
    4050:	d8803317 	ldw	r2,204(sp)
    4054:	1440010e 	bge	r2,r17,405c <___vfprintf_internal_r+0x122c>
    4058:	1023883a 	mov	r17,r2
    405c:	04400a0e 	bge	zero,r17,4088 <___vfprintf_internal_r+0x1258>
    4060:	d8801f17 	ldw	r2,124(sp)
    4064:	1c47883a 	add	r3,r3,r17
    4068:	44000015 	stw	r16,0(r8)
    406c:	10800044 	addi	r2,r2,1
    4070:	44400115 	stw	r17,4(r8)
    4074:	d8c02015 	stw	r3,128(sp)
    4078:	d8801f15 	stw	r2,124(sp)
    407c:	010001c4 	movi	r4,7
    4080:	20826516 	blt	r4,r2,4a18 <___vfprintf_internal_r+0x1be8>
    4084:	42000204 	addi	r8,r8,8
    4088:	88026116 	blt	r17,zero,4a10 <___vfprintf_internal_r+0x1be0>
    408c:	d9003217 	ldw	r4,200(sp)
    4090:	2463c83a 	sub	r17,r4,r17
    4094:	04407b0e 	bge	zero,r17,4284 <___vfprintf_internal_r+0x1454>
    4098:	05800404 	movi	r22,16
    409c:	d8801f17 	ldw	r2,124(sp)
    40a0:	b4419d0e 	bge	r22,r17,4718 <___vfprintf_internal_r+0x18e8>
    40a4:	01000074 	movhi	r4,1
    40a8:	21071384 	addi	r4,r4,7246
    40ac:	d9002b15 	stw	r4,172(sp)
    40b0:	070001c4 	movi	fp,7
    40b4:	dcc02c17 	ldw	r19,176(sp)
    40b8:	00000306 	br	40c8 <___vfprintf_internal_r+0x1298>
    40bc:	42000204 	addi	r8,r8,8
    40c0:	8c7ffc04 	addi	r17,r17,-16
    40c4:	b441970e 	bge	r22,r17,4724 <___vfprintf_internal_r+0x18f4>
    40c8:	18c00404 	addi	r3,r3,16
    40cc:	10800044 	addi	r2,r2,1
    40d0:	45000015 	stw	r20,0(r8)
    40d4:	45800115 	stw	r22,4(r8)
    40d8:	d8c02015 	stw	r3,128(sp)
    40dc:	d8801f15 	stw	r2,124(sp)
    40e0:	e0bff60e 	bge	fp,r2,40bc <___vfprintf_internal_r+0x128c>
    40e4:	d9801e04 	addi	r6,sp,120
    40e8:	b80b883a 	mov	r5,r23
    40ec:	9809883a 	mov	r4,r19
    40f0:	0009bcc0 	call	9bcc <__sprint_r>
    40f4:	103c501e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    40f8:	d8c02017 	ldw	r3,128(sp)
    40fc:	d8801f17 	ldw	r2,124(sp)
    4100:	da000404 	addi	r8,sp,16
    4104:	003fee06 	br	40c0 <___vfprintf_internal_r+0x1290>
    4108:	d9002c17 	ldw	r4,176(sp)
    410c:	d9801e04 	addi	r6,sp,120
    4110:	b80b883a 	mov	r5,r23
    4114:	0009bcc0 	call	9bcc <__sprint_r>
    4118:	103c471e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    411c:	d8c02017 	ldw	r3,128(sp)
    4120:	df002787 	ldb	fp,158(sp)
    4124:	da000404 	addi	r8,sp,16
    4128:	003d5606 	br	3684 <___vfprintf_internal_r+0x854>
    412c:	9080040c 	andi	r2,r18,16
    4130:	10016126 	beq	r2,zero,46b8 <___vfprintf_internal_r+0x1888>
    4134:	d8802d17 	ldw	r2,180(sp)
    4138:	14c00017 	ldw	r19,0(r2)
    413c:	10800104 	addi	r2,r2,4
    4140:	d8802d15 	stw	r2,180(sp)
    4144:	982dd7fa 	srai	r22,r19,31
    4148:	b005883a 	mov	r2,r22
    414c:	003c8206 	br	3358 <___vfprintf_internal_r+0x528>
    4150:	9080040c 	andi	r2,r18,16
    4154:	10003526 	beq	r2,zero,422c <___vfprintf_internal_r+0x13fc>
    4158:	d9402d17 	ldw	r5,180(sp)
    415c:	d8c02917 	ldw	r3,164(sp)
    4160:	d8002785 	stb	zero,158(sp)
    4164:	28800104 	addi	r2,r5,4
    4168:	2cc00017 	ldw	r19,0(r5)
    416c:	002d883a 	mov	r22,zero
    4170:	18003716 	blt	r3,zero,4250 <___vfprintf_internal_r+0x1420>
    4174:	00ffdfc4 	movi	r3,-129
    4178:	d8802d15 	stw	r2,180(sp)
    417c:	90e4703a 	and	r18,r18,r3
    4180:	0039883a 	mov	fp,zero
    4184:	983df326 	beq	r19,zero,3954 <___vfprintf_internal_r+0xb24>
    4188:	00800244 	movi	r2,9
    418c:	14fc7b36 	bltu	r2,r19,337c <___vfprintf_internal_r+0x54c>
    4190:	d8c02817 	ldw	r3,160(sp)
    4194:	dc001dc4 	addi	r16,sp,119
    4198:	9cc00c04 	addi	r19,r19,48
    419c:	1c07c83a 	sub	r3,r3,r16
    41a0:	dcc01dc5 	stb	r19,119(sp)
    41a4:	d8c02e15 	stw	r3,184(sp)
    41a8:	003ce806 	br	354c <___vfprintf_internal_r+0x71c>
    41ac:	d8803317 	ldw	r2,204(sp)
    41b0:	143fffc4 	addi	r16,r2,-1
    41b4:	043f4d0e 	bge	zero,r16,3eec <___vfprintf_internal_r+0x10bc>
    41b8:	07000404 	movi	fp,16
    41bc:	e400810e 	bge	fp,r16,43c4 <___vfprintf_internal_r+0x1594>
    41c0:	01400074 	movhi	r5,1
    41c4:	29471384 	addi	r5,r5,7246
    41c8:	d9402b15 	stw	r5,172(sp)
    41cc:	01c001c4 	movi	r7,7
    41d0:	dcc02c17 	ldw	r19,176(sp)
    41d4:	00000306 	br	41e4 <___vfprintf_internal_r+0x13b4>
    41d8:	b5800204 	addi	r22,r22,8
    41dc:	843ffc04 	addi	r16,r16,-16
    41e0:	e4007b0e 	bge	fp,r16,43d0 <___vfprintf_internal_r+0x15a0>
    41e4:	18c00404 	addi	r3,r3,16
    41e8:	8c400044 	addi	r17,r17,1
    41ec:	b5000015 	stw	r20,0(r22)
    41f0:	b7000115 	stw	fp,4(r22)
    41f4:	d8c02015 	stw	r3,128(sp)
    41f8:	dc401f15 	stw	r17,124(sp)
    41fc:	3c7ff60e 	bge	r7,r17,41d8 <___vfprintf_internal_r+0x13a8>
    4200:	d9801e04 	addi	r6,sp,120
    4204:	b80b883a 	mov	r5,r23
    4208:	9809883a 	mov	r4,r19
    420c:	d9c03c15 	stw	r7,240(sp)
    4210:	0009bcc0 	call	9bcc <__sprint_r>
    4214:	d9c03c17 	ldw	r7,240(sp)
    4218:	103c071e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    421c:	d8c02017 	ldw	r3,128(sp)
    4220:	dc401f17 	ldw	r17,124(sp)
    4224:	dd800404 	addi	r22,sp,16
    4228:	003fec06 	br	41dc <___vfprintf_internal_r+0x13ac>
    422c:	9080100c 	andi	r2,r18,64
    4230:	d8002785 	stb	zero,158(sp)
    4234:	10010e26 	beq	r2,zero,4670 <___vfprintf_internal_r+0x1840>
    4238:	d9002d17 	ldw	r4,180(sp)
    423c:	d9402917 	ldw	r5,164(sp)
    4240:	002d883a 	mov	r22,zero
    4244:	20800104 	addi	r2,r4,4
    4248:	24c0000b 	ldhu	r19,0(r4)
    424c:	283fc90e 	bge	r5,zero,4174 <___vfprintf_internal_r+0x1344>
    4250:	d8802d15 	stw	r2,180(sp)
    4254:	0039883a 	mov	fp,zero
    4258:	9d84b03a 	or	r2,r19,r22
    425c:	103c461e 	bne	r2,zero,3378 <___vfprintf_internal_r+0x548>
    4260:	00800044 	movi	r2,1
    4264:	003e6c06 	br	3c18 <___vfprintf_internal_r+0xde8>
    4268:	d9002c17 	ldw	r4,176(sp)
    426c:	d9801e04 	addi	r6,sp,120
    4270:	b80b883a 	mov	r5,r23
    4274:	0009bcc0 	call	9bcc <__sprint_r>
    4278:	103bef1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    427c:	d8c02017 	ldw	r3,128(sp)
    4280:	da000404 	addi	r8,sp,16
    4284:	d9003217 	ldw	r4,200(sp)
    4288:	d8802617 	ldw	r2,152(sp)
    428c:	d9403317 	ldw	r5,204(sp)
    4290:	8123883a 	add	r17,r16,r4
    4294:	11400216 	blt	r2,r5,42a0 <___vfprintf_internal_r+0x1470>
    4298:	9100004c 	andi	r4,r18,1
    429c:	20000d26 	beq	r4,zero,42d4 <___vfprintf_internal_r+0x14a4>
    42a0:	d9003717 	ldw	r4,220(sp)
    42a4:	d9403417 	ldw	r5,208(sp)
    42a8:	1907883a 	add	r3,r3,r4
    42ac:	d9001f17 	ldw	r4,124(sp)
    42b0:	41400015 	stw	r5,0(r8)
    42b4:	d9403717 	ldw	r5,220(sp)
    42b8:	21000044 	addi	r4,r4,1
    42bc:	d8c02015 	stw	r3,128(sp)
    42c0:	41400115 	stw	r5,4(r8)
    42c4:	d9001f15 	stw	r4,124(sp)
    42c8:	014001c4 	movi	r5,7
    42cc:	2901e816 	blt	r5,r4,4a70 <___vfprintf_internal_r+0x1c40>
    42d0:	42000204 	addi	r8,r8,8
    42d4:	d9003317 	ldw	r4,204(sp)
    42d8:	8121883a 	add	r16,r16,r4
    42dc:	2085c83a 	sub	r2,r4,r2
    42e0:	8461c83a 	sub	r16,r16,r17
    42e4:	1400010e 	bge	r2,r16,42ec <___vfprintf_internal_r+0x14bc>
    42e8:	1021883a 	mov	r16,r2
    42ec:	04000a0e 	bge	zero,r16,4318 <___vfprintf_internal_r+0x14e8>
    42f0:	d9001f17 	ldw	r4,124(sp)
    42f4:	1c07883a 	add	r3,r3,r16
    42f8:	44400015 	stw	r17,0(r8)
    42fc:	21000044 	addi	r4,r4,1
    4300:	44000115 	stw	r16,4(r8)
    4304:	d8c02015 	stw	r3,128(sp)
    4308:	d9001f15 	stw	r4,124(sp)
    430c:	014001c4 	movi	r5,7
    4310:	2901fb16 	blt	r5,r4,4b00 <___vfprintf_internal_r+0x1cd0>
    4314:	42000204 	addi	r8,r8,8
    4318:	8001f716 	blt	r16,zero,4af8 <___vfprintf_internal_r+0x1cc8>
    431c:	1421c83a 	sub	r16,r2,r16
    4320:	043d380e 	bge	zero,r16,3804 <___vfprintf_internal_r+0x9d4>
    4324:	04400404 	movi	r17,16
    4328:	d8801f17 	ldw	r2,124(sp)
    432c:	8c3efb0e 	bge	r17,r16,3f1c <___vfprintf_internal_r+0x10ec>
    4330:	01400074 	movhi	r5,1
    4334:	29471384 	addi	r5,r5,7246
    4338:	d9402b15 	stw	r5,172(sp)
    433c:	058001c4 	movi	r22,7
    4340:	dcc02c17 	ldw	r19,176(sp)
    4344:	00000306 	br	4354 <___vfprintf_internal_r+0x1524>
    4348:	42000204 	addi	r8,r8,8
    434c:	843ffc04 	addi	r16,r16,-16
    4350:	8c3ef50e 	bge	r17,r16,3f28 <___vfprintf_internal_r+0x10f8>
    4354:	18c00404 	addi	r3,r3,16
    4358:	10800044 	addi	r2,r2,1
    435c:	45000015 	stw	r20,0(r8)
    4360:	44400115 	stw	r17,4(r8)
    4364:	d8c02015 	stw	r3,128(sp)
    4368:	d8801f15 	stw	r2,124(sp)
    436c:	b0bff60e 	bge	r22,r2,4348 <___vfprintf_internal_r+0x1518>
    4370:	d9801e04 	addi	r6,sp,120
    4374:	b80b883a 	mov	r5,r23
    4378:	9809883a 	mov	r4,r19
    437c:	0009bcc0 	call	9bcc <__sprint_r>
    4380:	103bad1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4384:	d8c02017 	ldw	r3,128(sp)
    4388:	d8801f17 	ldw	r2,124(sp)
    438c:	da000404 	addi	r8,sp,16
    4390:	003fee06 	br	434c <___vfprintf_internal_r+0x151c>
    4394:	9088703a 	and	r4,r18,r2
    4398:	203eab1e 	bne	r4,zero,3e48 <___vfprintf_internal_r+0x1018>
    439c:	dc401f17 	ldw	r17,124(sp)
    43a0:	40800115 	stw	r2,4(r8)
    43a4:	44000015 	stw	r16,0(r8)
    43a8:	8c400044 	addi	r17,r17,1
    43ac:	d8c02015 	stw	r3,128(sp)
    43b0:	dc401f15 	stw	r17,124(sp)
    43b4:	008001c4 	movi	r2,7
    43b8:	14400e16 	blt	r2,r17,43f4 <___vfprintf_internal_r+0x15c4>
    43bc:	45800204 	addi	r22,r8,8
    43c0:	003eca06 	br	3eec <___vfprintf_internal_r+0x10bc>
    43c4:	01000074 	movhi	r4,1
    43c8:	21071384 	addi	r4,r4,7246
    43cc:	d9002b15 	stw	r4,172(sp)
    43d0:	d8802b17 	ldw	r2,172(sp)
    43d4:	1c07883a 	add	r3,r3,r16
    43d8:	8c400044 	addi	r17,r17,1
    43dc:	b0800015 	stw	r2,0(r22)
    43e0:	b4000115 	stw	r16,4(r22)
    43e4:	d8c02015 	stw	r3,128(sp)
    43e8:	dc401f15 	stw	r17,124(sp)
    43ec:	008001c4 	movi	r2,7
    43f0:	147ebd0e 	bge	r2,r17,3ee8 <___vfprintf_internal_r+0x10b8>
    43f4:	d9002c17 	ldw	r4,176(sp)
    43f8:	d9801e04 	addi	r6,sp,120
    43fc:	b80b883a 	mov	r5,r23
    4400:	0009bcc0 	call	9bcc <__sprint_r>
    4404:	103b8c1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4408:	d8c02017 	ldw	r3,128(sp)
    440c:	dc401f17 	ldw	r17,124(sp)
    4410:	dd800404 	addi	r22,sp,16
    4414:	003eb506 	br	3eec <___vfprintf_internal_r+0x10bc>
    4418:	d9002c17 	ldw	r4,176(sp)
    441c:	d9801e04 	addi	r6,sp,120
    4420:	b80b883a 	mov	r5,r23
    4424:	0009bcc0 	call	9bcc <__sprint_r>
    4428:	103b831e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    442c:	d8c02017 	ldw	r3,128(sp)
    4430:	dc401f17 	ldw	r17,124(sp)
    4434:	da000404 	addi	r8,sp,16
    4438:	003e8d06 	br	3e70 <___vfprintf_internal_r+0x1040>
    443c:	d9002c17 	ldw	r4,176(sp)
    4440:	d9801e04 	addi	r6,sp,120
    4444:	b80b883a 	mov	r5,r23
    4448:	0009bcc0 	call	9bcc <__sprint_r>
    444c:	103b7a1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4450:	d8c02017 	ldw	r3,128(sp)
    4454:	dc401f17 	ldw	r17,124(sp)
    4458:	dd800404 	addi	r22,sp,16
    445c:	003e8f06 	br	3e9c <___vfprintf_internal_r+0x106c>
    4460:	0027883a 	mov	r19,zero
    4464:	003f4a06 	br	4190 <___vfprintf_internal_r+0x1360>
    4468:	d9002c17 	ldw	r4,176(sp)
    446c:	d9801e04 	addi	r6,sp,120
    4470:	b80b883a 	mov	r5,r23
    4474:	0009bcc0 	call	9bcc <__sprint_r>
    4478:	103b6f1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    447c:	d8c02017 	ldw	r3,128(sp)
    4480:	da000404 	addi	r8,sp,16
    4484:	003c9d06 	br	36fc <___vfprintf_internal_r+0x8cc>
    4488:	04e7c83a 	sub	r19,zero,r19
    448c:	9804c03a 	cmpne	r2,r19,zero
    4490:	05adc83a 	sub	r22,zero,r22
    4494:	b0adc83a 	sub	r22,r22,r2
    4498:	d8802917 	ldw	r2,164(sp)
    449c:	07000b44 	movi	fp,45
    44a0:	df002785 	stb	fp,158(sp)
    44a4:	10017b16 	blt	r2,zero,4a94 <___vfprintf_internal_r+0x1c64>
    44a8:	00bfdfc4 	movi	r2,-129
    44ac:	90a4703a 	and	r18,r18,r2
    44b0:	003bb106 	br	3378 <___vfprintf_internal_r+0x548>
    44b4:	d9003617 	ldw	r4,216(sp)
    44b8:	d9403817 	ldw	r5,224(sp)
    44bc:	da003d15 	stw	r8,244(sp)
    44c0:	00098440 	call	9844 <__fpclassifyd>
    44c4:	da003d17 	ldw	r8,244(sp)
    44c8:	1000f026 	beq	r2,zero,488c <___vfprintf_internal_r+0x1a5c>
    44cc:	d9002917 	ldw	r4,164(sp)
    44d0:	05bff7c4 	movi	r22,-33
    44d4:	00bfffc4 	movi	r2,-1
    44d8:	8dac703a 	and	r22,r17,r22
    44dc:	20820026 	beq	r4,r2,4ce0 <___vfprintf_internal_r+0x1eb0>
    44e0:	008011c4 	movi	r2,71
    44e4:	b081f726 	beq	r22,r2,4cc4 <___vfprintf_internal_r+0x1e94>
    44e8:	d9003817 	ldw	r4,224(sp)
    44ec:	90c04014 	ori	r3,r18,256
    44f0:	d8c02b15 	stw	r3,172(sp)
    44f4:	20021516 	blt	r4,zero,4d4c <___vfprintf_internal_r+0x1f1c>
    44f8:	dcc03817 	ldw	r19,224(sp)
    44fc:	d8002a05 	stb	zero,168(sp)
    4500:	00801984 	movi	r2,102
    4504:	8881f926 	beq	r17,r2,4cec <___vfprintf_internal_r+0x1ebc>
    4508:	00801184 	movi	r2,70
    450c:	88821c26 	beq	r17,r2,4d80 <___vfprintf_internal_r+0x1f50>
    4510:	00801144 	movi	r2,69
    4514:	b081ef26 	beq	r22,r2,4cd4 <___vfprintf_internal_r+0x1ea4>
    4518:	d8c02917 	ldw	r3,164(sp)
    451c:	d8802104 	addi	r2,sp,132
    4520:	d8800315 	stw	r2,12(sp)
    4524:	d9403617 	ldw	r5,216(sp)
    4528:	d8802504 	addi	r2,sp,148
    452c:	d9002c17 	ldw	r4,176(sp)
    4530:	d8800215 	stw	r2,8(sp)
    4534:	d8802604 	addi	r2,sp,152
    4538:	d8c00015 	stw	r3,0(sp)
    453c:	d8800115 	stw	r2,4(sp)
    4540:	01c00084 	movi	r7,2
    4544:	980d883a 	mov	r6,r19
    4548:	d8c03c15 	stw	r3,240(sp)
    454c:	da003d15 	stw	r8,244(sp)
    4550:	00054540 	call	5454 <_dtoa_r>
    4554:	1021883a 	mov	r16,r2
    4558:	008019c4 	movi	r2,103
    455c:	d8c03c17 	ldw	r3,240(sp)
    4560:	da003d17 	ldw	r8,244(sp)
    4564:	88817126 	beq	r17,r2,4b2c <___vfprintf_internal_r+0x1cfc>
    4568:	008011c4 	movi	r2,71
    456c:	88829226 	beq	r17,r2,4fb8 <___vfprintf_internal_r+0x2188>
    4570:	80f9883a 	add	fp,r16,r3
    4574:	d9003617 	ldw	r4,216(sp)
    4578:	000d883a 	mov	r6,zero
    457c:	000f883a 	mov	r7,zero
    4580:	980b883a 	mov	r5,r19
    4584:	da003d15 	stw	r8,244(sp)
    4588:	000d8440 	call	d844 <__eqdf2>
    458c:	da003d17 	ldw	r8,244(sp)
    4590:	10018d26 	beq	r2,zero,4bc8 <___vfprintf_internal_r+0x1d98>
    4594:	d8802117 	ldw	r2,132(sp)
    4598:	1700062e 	bgeu	r2,fp,45b4 <___vfprintf_internal_r+0x1784>
    459c:	01000c04 	movi	r4,48
    45a0:	10c00044 	addi	r3,r2,1
    45a4:	d8c02115 	stw	r3,132(sp)
    45a8:	11000005 	stb	r4,0(r2)
    45ac:	d8802117 	ldw	r2,132(sp)
    45b0:	173ffb36 	bltu	r2,fp,45a0 <___vfprintf_internal_r+0x1770>
    45b4:	1405c83a 	sub	r2,r2,r16
    45b8:	d8803315 	stw	r2,204(sp)
    45bc:	008011c4 	movi	r2,71
    45c0:	b0817626 	beq	r22,r2,4b9c <___vfprintf_internal_r+0x1d6c>
    45c4:	00801944 	movi	r2,101
    45c8:	1442810e 	bge	r2,r17,4fd0 <___vfprintf_internal_r+0x21a0>
    45cc:	d8c02617 	ldw	r3,152(sp)
    45d0:	00801984 	movi	r2,102
    45d4:	d8c03215 	stw	r3,200(sp)
    45d8:	8881fe26 	beq	r17,r2,4dd4 <___vfprintf_internal_r+0x1fa4>
    45dc:	d8c03217 	ldw	r3,200(sp)
    45e0:	d9003317 	ldw	r4,204(sp)
    45e4:	1901dd16 	blt	r3,r4,4d5c <___vfprintf_internal_r+0x1f2c>
    45e8:	9480004c 	andi	r18,r18,1
    45ec:	90022b1e 	bne	r18,zero,4e9c <___vfprintf_internal_r+0x206c>
    45f0:	1805883a 	mov	r2,r3
    45f4:	18028016 	blt	r3,zero,4ff8 <___vfprintf_internal_r+0x21c8>
    45f8:	d8c03217 	ldw	r3,200(sp)
    45fc:	044019c4 	movi	r17,103
    4600:	d8c02e15 	stw	r3,184(sp)
    4604:	df002a07 	ldb	fp,168(sp)
    4608:	e001531e 	bne	fp,zero,4b58 <___vfprintf_internal_r+0x1d28>
    460c:	df002783 	ldbu	fp,158(sp)
    4610:	d8802a15 	stw	r2,168(sp)
    4614:	dc802b17 	ldw	r18,172(sp)
    4618:	d8002915 	stw	zero,164(sp)
    461c:	003bd106 	br	3564 <___vfprintf_internal_r+0x734>
    4620:	d8802d17 	ldw	r2,180(sp)
    4624:	d8c02d17 	ldw	r3,180(sp)
    4628:	d9002d17 	ldw	r4,180(sp)
    462c:	10800017 	ldw	r2,0(r2)
    4630:	18c00117 	ldw	r3,4(r3)
    4634:	21000204 	addi	r4,r4,8
    4638:	d8803615 	stw	r2,216(sp)
    463c:	d8c03815 	stw	r3,224(sp)
    4640:	d9002d15 	stw	r4,180(sp)
    4644:	003b7506 	br	341c <___vfprintf_internal_r+0x5ec>
    4648:	ac400007 	ldb	r17,0(r21)
    464c:	003a5906 	br	2fb4 <___vfprintf_internal_r+0x184>
    4650:	9080100c 	andi	r2,r18,64
    4654:	1000a826 	beq	r2,zero,48f8 <___vfprintf_internal_r+0x1ac8>
    4658:	d9002d17 	ldw	r4,180(sp)
    465c:	002d883a 	mov	r22,zero
    4660:	24c0000b 	ldhu	r19,0(r4)
    4664:	21000104 	addi	r4,r4,4
    4668:	d9002d15 	stw	r4,180(sp)
    466c:	003ccb06 	br	399c <___vfprintf_internal_r+0xb6c>
    4670:	d8c02d17 	ldw	r3,180(sp)
    4674:	d9002917 	ldw	r4,164(sp)
    4678:	002d883a 	mov	r22,zero
    467c:	18800104 	addi	r2,r3,4
    4680:	1cc00017 	ldw	r19,0(r3)
    4684:	203ebb0e 	bge	r4,zero,4174 <___vfprintf_internal_r+0x1344>
    4688:	003ef106 	br	4250 <___vfprintf_internal_r+0x1420>
    468c:	9080040c 	andi	r2,r18,16
    4690:	1000921e 	bne	r2,zero,48dc <___vfprintf_internal_r+0x1aac>
    4694:	9480100c 	andi	r18,r18,64
    4698:	90013926 	beq	r18,zero,4b80 <___vfprintf_internal_r+0x1d50>
    469c:	d9002d17 	ldw	r4,180(sp)
    46a0:	d9402f17 	ldw	r5,188(sp)
    46a4:	20800017 	ldw	r2,0(r4)
    46a8:	21000104 	addi	r4,r4,4
    46ac:	d9002d15 	stw	r4,180(sp)
    46b0:	1140000d 	sth	r5,0(r2)
    46b4:	003a1606 	br	2f10 <___vfprintf_internal_r+0xe0>
    46b8:	9080100c 	andi	r2,r18,64
    46bc:	10008026 	beq	r2,zero,48c0 <___vfprintf_internal_r+0x1a90>
    46c0:	d8c02d17 	ldw	r3,180(sp)
    46c4:	1cc0000f 	ldh	r19,0(r3)
    46c8:	18c00104 	addi	r3,r3,4
    46cc:	d8c02d15 	stw	r3,180(sp)
    46d0:	982dd7fa 	srai	r22,r19,31
    46d4:	b005883a 	mov	r2,r22
    46d8:	003b1f06 	br	3358 <___vfprintf_internal_r+0x528>
    46dc:	9080100c 	andi	r2,r18,64
    46e0:	d8002785 	stb	zero,158(sp)
    46e4:	10008a1e 	bne	r2,zero,4910 <___vfprintf_internal_r+0x1ae0>
    46e8:	d9402d17 	ldw	r5,180(sp)
    46ec:	d8c02917 	ldw	r3,164(sp)
    46f0:	002d883a 	mov	r22,zero
    46f4:	28800104 	addi	r2,r5,4
    46f8:	2cc00017 	ldw	r19,0(r5)
    46fc:	183e4b0e 	bge	r3,zero,402c <___vfprintf_internal_r+0x11fc>
    4700:	9d86b03a 	or	r3,r19,r22
    4704:	d8802d15 	stw	r2,180(sp)
    4708:	183e4c1e 	bne	r3,zero,403c <___vfprintf_internal_r+0x120c>
    470c:	0039883a 	mov	fp,zero
    4710:	0005883a 	mov	r2,zero
    4714:	003d4006 	br	3c18 <___vfprintf_internal_r+0xde8>
    4718:	01400074 	movhi	r5,1
    471c:	29471384 	addi	r5,r5,7246
    4720:	d9402b15 	stw	r5,172(sp)
    4724:	d9402b17 	ldw	r5,172(sp)
    4728:	1c47883a 	add	r3,r3,r17
    472c:	10800044 	addi	r2,r2,1
    4730:	41400015 	stw	r5,0(r8)
    4734:	44400115 	stw	r17,4(r8)
    4738:	d8c02015 	stw	r3,128(sp)
    473c:	d8801f15 	stw	r2,124(sp)
    4740:	010001c4 	movi	r4,7
    4744:	20bec816 	blt	r4,r2,4268 <___vfprintf_internal_r+0x1438>
    4748:	42000204 	addi	r8,r8,8
    474c:	003ecd06 	br	4284 <___vfprintf_internal_r+0x1454>
    4750:	d9002917 	ldw	r4,164(sp)
    4754:	d8002785 	stb	zero,158(sp)
    4758:	203d2d16 	blt	r4,zero,3c10 <___vfprintf_internal_r+0xde0>
    475c:	00bfdfc4 	movi	r2,-129
    4760:	90a4703a 	and	r18,r18,r2
    4764:	003a9106 	br	31ac <___vfprintf_internal_r+0x37c>
    4768:	01000074 	movhi	r4,1
    476c:	21071384 	addi	r4,r4,7246
    4770:	d9002b15 	stw	r4,172(sp)
    4774:	003c0c06 	br	37a8 <___vfprintf_internal_r+0x978>
    4778:	d9002c17 	ldw	r4,176(sp)
    477c:	d9801e04 	addi	r6,sp,120
    4780:	b80b883a 	mov	r5,r23
    4784:	0009bcc0 	call	9bcc <__sprint_r>
    4788:	103aab1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    478c:	d8c02017 	ldw	r3,128(sp)
    4790:	da000404 	addi	r8,sp,16
    4794:	003d4106 	br	3c9c <___vfprintf_internal_r+0xe6c>
    4798:	d8801f17 	ldw	r2,124(sp)
    479c:	01400074 	movhi	r5,1
    47a0:	01000044 	movi	r4,1
    47a4:	18c00044 	addi	r3,r3,1
    47a8:	10800044 	addi	r2,r2,1
    47ac:	29471304 	addi	r5,r5,7244
    47b0:	41000115 	stw	r4,4(r8)
    47b4:	41400015 	stw	r5,0(r8)
    47b8:	d8c02015 	stw	r3,128(sp)
    47bc:	d8801f15 	stw	r2,124(sp)
    47c0:	010001c4 	movi	r4,7
    47c4:	20805c16 	blt	r4,r2,4938 <___vfprintf_internal_r+0x1b08>
    47c8:	42000204 	addi	r8,r8,8
    47cc:	8800041e 	bne	r17,zero,47e0 <___vfprintf_internal_r+0x19b0>
    47d0:	d8803317 	ldw	r2,204(sp)
    47d4:	1000021e 	bne	r2,zero,47e0 <___vfprintf_internal_r+0x19b0>
    47d8:	9080004c 	andi	r2,r18,1
    47dc:	103c0926 	beq	r2,zero,3804 <___vfprintf_internal_r+0x9d4>
    47e0:	d9003717 	ldw	r4,220(sp)
    47e4:	d8801f17 	ldw	r2,124(sp)
    47e8:	d9403417 	ldw	r5,208(sp)
    47ec:	20c7883a 	add	r3,r4,r3
    47f0:	10800044 	addi	r2,r2,1
    47f4:	41000115 	stw	r4,4(r8)
    47f8:	41400015 	stw	r5,0(r8)
    47fc:	d8c02015 	stw	r3,128(sp)
    4800:	d8801f15 	stw	r2,124(sp)
    4804:	010001c4 	movi	r4,7
    4808:	20812116 	blt	r4,r2,4c90 <___vfprintf_internal_r+0x1e60>
    480c:	42000204 	addi	r8,r8,8
    4810:	0463c83a 	sub	r17,zero,r17
    4814:	0440730e 	bge	zero,r17,49e4 <___vfprintf_internal_r+0x1bb4>
    4818:	05800404 	movi	r22,16
    481c:	b440860e 	bge	r22,r17,4a38 <___vfprintf_internal_r+0x1c08>
    4820:	01400074 	movhi	r5,1
    4824:	29471384 	addi	r5,r5,7246
    4828:	d9402b15 	stw	r5,172(sp)
    482c:	070001c4 	movi	fp,7
    4830:	dcc02c17 	ldw	r19,176(sp)
    4834:	00000306 	br	4844 <___vfprintf_internal_r+0x1a14>
    4838:	42000204 	addi	r8,r8,8
    483c:	8c7ffc04 	addi	r17,r17,-16
    4840:	b440800e 	bge	r22,r17,4a44 <___vfprintf_internal_r+0x1c14>
    4844:	18c00404 	addi	r3,r3,16
    4848:	10800044 	addi	r2,r2,1
    484c:	45000015 	stw	r20,0(r8)
    4850:	45800115 	stw	r22,4(r8)
    4854:	d8c02015 	stw	r3,128(sp)
    4858:	d8801f15 	stw	r2,124(sp)
    485c:	e0bff60e 	bge	fp,r2,4838 <___vfprintf_internal_r+0x1a08>
    4860:	d9801e04 	addi	r6,sp,120
    4864:	b80b883a 	mov	r5,r23
    4868:	9809883a 	mov	r4,r19
    486c:	0009bcc0 	call	9bcc <__sprint_r>
    4870:	103a711e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4874:	d8c02017 	ldw	r3,128(sp)
    4878:	d8801f17 	ldw	r2,124(sp)
    487c:	da000404 	addi	r8,sp,16
    4880:	003fee06 	br	483c <___vfprintf_internal_r+0x1a0c>
    4884:	00bfffc4 	movi	r2,-1
    4888:	003a6f06 	br	3248 <___vfprintf_internal_r+0x418>
    488c:	008011c4 	movi	r2,71
    4890:	1440b816 	blt	r2,r17,4b74 <___vfprintf_internal_r+0x1d44>
    4894:	04000074 	movhi	r16,1
    4898:	84070504 	addi	r16,r16,7188
    489c:	00c000c4 	movi	r3,3
    48a0:	00bfdfc4 	movi	r2,-129
    48a4:	d8c02a15 	stw	r3,168(sp)
    48a8:	90a4703a 	and	r18,r18,r2
    48ac:	df002783 	ldbu	fp,158(sp)
    48b0:	d8c02e15 	stw	r3,184(sp)
    48b4:	d8002915 	stw	zero,164(sp)
    48b8:	d8003215 	stw	zero,200(sp)
    48bc:	003b2906 	br	3564 <___vfprintf_internal_r+0x734>
    48c0:	d9002d17 	ldw	r4,180(sp)
    48c4:	24c00017 	ldw	r19,0(r4)
    48c8:	21000104 	addi	r4,r4,4
    48cc:	d9002d15 	stw	r4,180(sp)
    48d0:	982dd7fa 	srai	r22,r19,31
    48d4:	b005883a 	mov	r2,r22
    48d8:	003a9f06 	br	3358 <___vfprintf_internal_r+0x528>
    48dc:	d9402d17 	ldw	r5,180(sp)
    48e0:	d8c02f17 	ldw	r3,188(sp)
    48e4:	28800017 	ldw	r2,0(r5)
    48e8:	29400104 	addi	r5,r5,4
    48ec:	d9402d15 	stw	r5,180(sp)
    48f0:	10c00015 	stw	r3,0(r2)
    48f4:	00398606 	br	2f10 <___vfprintf_internal_r+0xe0>
    48f8:	d9402d17 	ldw	r5,180(sp)
    48fc:	002d883a 	mov	r22,zero
    4900:	2cc00017 	ldw	r19,0(r5)
    4904:	29400104 	addi	r5,r5,4
    4908:	d9402d15 	stw	r5,180(sp)
    490c:	003c2306 	br	399c <___vfprintf_internal_r+0xb6c>
    4910:	d8c02d17 	ldw	r3,180(sp)
    4914:	d9002917 	ldw	r4,164(sp)
    4918:	002d883a 	mov	r22,zero
    491c:	18800104 	addi	r2,r3,4
    4920:	1cc0000b 	ldhu	r19,0(r3)
    4924:	203dc10e 	bge	r4,zero,402c <___vfprintf_internal_r+0x11fc>
    4928:	003f7506 	br	4700 <___vfprintf_internal_r+0x18d0>
    492c:	04000074 	movhi	r16,1
    4930:	84070304 	addi	r16,r16,7180
    4934:	003acc06 	br	3468 <___vfprintf_internal_r+0x638>
    4938:	d9002c17 	ldw	r4,176(sp)
    493c:	d9801e04 	addi	r6,sp,120
    4940:	b80b883a 	mov	r5,r23
    4944:	0009bcc0 	call	9bcc <__sprint_r>
    4948:	103a3b1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    494c:	dc402617 	ldw	r17,152(sp)
    4950:	d8c02017 	ldw	r3,128(sp)
    4954:	da000404 	addi	r8,sp,16
    4958:	003f9c06 	br	47cc <___vfprintf_internal_r+0x199c>
    495c:	ac400043 	ldbu	r17,1(r21)
    4960:	94800814 	ori	r18,r18,32
    4964:	ad400044 	addi	r21,r21,1
    4968:	8c403fcc 	andi	r17,r17,255
    496c:	8c40201c 	xori	r17,r17,128
    4970:	8c7fe004 	addi	r17,r17,-128
    4974:	00398f06 	br	2fb4 <___vfprintf_internal_r+0x184>
    4978:	d8c02d15 	stw	r3,180(sp)
    497c:	0039883a 	mov	fp,zero
    4980:	003e3506 	br	4258 <___vfprintf_internal_r+0x1428>
    4984:	d9002c17 	ldw	r4,176(sp)
    4988:	d9801e04 	addi	r6,sp,120
    498c:	b80b883a 	mov	r5,r23
    4990:	0009bcc0 	call	9bcc <__sprint_r>
    4994:	103a281e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4998:	d8c02017 	ldw	r3,128(sp)
    499c:	da000404 	addi	r8,sp,16
    49a0:	003cd006 	br	3ce4 <___vfprintf_internal_r+0xeb4>
    49a4:	8009883a 	mov	r4,r16
    49a8:	da003d15 	stw	r8,244(sp)
    49ac:	0002d980 	call	2d98 <strlen>
    49b0:	d8802e15 	stw	r2,184(sp)
    49b4:	da003d17 	ldw	r8,244(sp)
    49b8:	103c340e 	bge	r2,zero,3a8c <___vfprintf_internal_r+0xc5c>
    49bc:	0005883a 	mov	r2,zero
    49c0:	003c3206 	br	3a8c <___vfprintf_internal_r+0xc5c>
    49c4:	d9002c17 	ldw	r4,176(sp)
    49c8:	d9801e04 	addi	r6,sp,120
    49cc:	b80b883a 	mov	r5,r23
    49d0:	0009bcc0 	call	9bcc <__sprint_r>
    49d4:	103a181e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    49d8:	d8c02017 	ldw	r3,128(sp)
    49dc:	d8801f17 	ldw	r2,124(sp)
    49e0:	da000404 	addi	r8,sp,16
    49e4:	d9403317 	ldw	r5,204(sp)
    49e8:	10800044 	addi	r2,r2,1
    49ec:	44000015 	stw	r16,0(r8)
    49f0:	28c7883a 	add	r3,r5,r3
    49f4:	003b7d06 	br	37ec <___vfprintf_internal_r+0x9bc>
    49f8:	01000074 	movhi	r4,1
    49fc:	21071784 	addi	r4,r4,7262
    4a00:	d9003515 	stw	r4,212(sp)
    4a04:	003b1406 	br	3658 <___vfprintf_internal_r+0x828>
    4a08:	013fffc4 	movi	r4,-1
    4a0c:	003a3506 	br	32e4 <___vfprintf_internal_r+0x4b4>
    4a10:	0023883a 	mov	r17,zero
    4a14:	003d9d06 	br	408c <___vfprintf_internal_r+0x125c>
    4a18:	d9002c17 	ldw	r4,176(sp)
    4a1c:	d9801e04 	addi	r6,sp,120
    4a20:	b80b883a 	mov	r5,r23
    4a24:	0009bcc0 	call	9bcc <__sprint_r>
    4a28:	103a031e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4a2c:	d8c02017 	ldw	r3,128(sp)
    4a30:	da000404 	addi	r8,sp,16
    4a34:	003d9406 	br	4088 <___vfprintf_internal_r+0x1258>
    4a38:	01000074 	movhi	r4,1
    4a3c:	21071384 	addi	r4,r4,7246
    4a40:	d9002b15 	stw	r4,172(sp)
    4a44:	d9002b17 	ldw	r4,172(sp)
    4a48:	1c47883a 	add	r3,r3,r17
    4a4c:	10800044 	addi	r2,r2,1
    4a50:	41000015 	stw	r4,0(r8)
    4a54:	44400115 	stw	r17,4(r8)
    4a58:	d8c02015 	stw	r3,128(sp)
    4a5c:	d8801f15 	stw	r2,124(sp)
    4a60:	010001c4 	movi	r4,7
    4a64:	20bfd716 	blt	r4,r2,49c4 <___vfprintf_internal_r+0x1b94>
    4a68:	42000204 	addi	r8,r8,8
    4a6c:	003fdd06 	br	49e4 <___vfprintf_internal_r+0x1bb4>
    4a70:	d9002c17 	ldw	r4,176(sp)
    4a74:	d9801e04 	addi	r6,sp,120
    4a78:	b80b883a 	mov	r5,r23
    4a7c:	0009bcc0 	call	9bcc <__sprint_r>
    4a80:	1039ed1e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4a84:	d8802617 	ldw	r2,152(sp)
    4a88:	d8c02017 	ldw	r3,128(sp)
    4a8c:	da000404 	addi	r8,sp,16
    4a90:	003e1006 	br	42d4 <___vfprintf_internal_r+0x14a4>
    4a94:	00800044 	movi	r2,1
    4a98:	10803fcc 	andi	r2,r2,255
    4a9c:	00c00044 	movi	r3,1
    4aa0:	10fa3526 	beq	r2,r3,3378 <___vfprintf_internal_r+0x548>
    4aa4:	00c00084 	movi	r3,2
    4aa8:	10fbcb26 	beq	r2,r3,39d8 <___vfprintf_internal_r+0xba8>
    4aac:	003a8f06 	br	34ec <___vfprintf_internal_r+0x6bc>
    4ab0:	01000074 	movhi	r4,1
    4ab4:	21071784 	addi	r4,r4,7262
    4ab8:	d9003515 	stw	r4,212(sp)
    4abc:	003b7606 	br	3898 <___vfprintf_internal_r+0xa68>
    4ac0:	d8802917 	ldw	r2,164(sp)
    4ac4:	00c00184 	movi	r3,6
    4ac8:	1880012e 	bgeu	r3,r2,4ad0 <___vfprintf_internal_r+0x1ca0>
    4acc:	1805883a 	mov	r2,r3
    4ad0:	d8802e15 	stw	r2,184(sp)
    4ad4:	1000ef16 	blt	r2,zero,4e94 <___vfprintf_internal_r+0x2064>
    4ad8:	04000074 	movhi	r16,1
    4adc:	d8802a15 	stw	r2,168(sp)
    4ae0:	dcc02d15 	stw	r19,180(sp)
    4ae4:	d8002915 	stw	zero,164(sp)
    4ae8:	d8003215 	stw	zero,200(sp)
    4aec:	84071104 	addi	r16,r16,7236
    4af0:	0039883a 	mov	fp,zero
    4af4:	003aa206 	br	3580 <___vfprintf_internal_r+0x750>
    4af8:	0021883a 	mov	r16,zero
    4afc:	003e0706 	br	431c <___vfprintf_internal_r+0x14ec>
    4b00:	d9002c17 	ldw	r4,176(sp)
    4b04:	d9801e04 	addi	r6,sp,120
    4b08:	b80b883a 	mov	r5,r23
    4b0c:	0009bcc0 	call	9bcc <__sprint_r>
    4b10:	1039c91e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4b14:	d8802617 	ldw	r2,152(sp)
    4b18:	d9403317 	ldw	r5,204(sp)
    4b1c:	d8c02017 	ldw	r3,128(sp)
    4b20:	da000404 	addi	r8,sp,16
    4b24:	2885c83a 	sub	r2,r5,r2
    4b28:	003dfb06 	br	4318 <___vfprintf_internal_r+0x14e8>
    4b2c:	9080004c 	andi	r2,r18,1
    4b30:	103e8f1e 	bne	r2,zero,4570 <___vfprintf_internal_r+0x1740>
    4b34:	d8802117 	ldw	r2,132(sp)
    4b38:	003e9e06 	br	45b4 <___vfprintf_internal_r+0x1784>
    4b3c:	1025883a 	mov	r18,r2
    4b40:	0039883a 	mov	fp,zero
    4b44:	00800084 	movi	r2,2
    4b48:	003fd306 	br	4a98 <___vfprintf_internal_r+0x1c68>
    4b4c:	07000b44 	movi	fp,45
    4b50:	df002785 	stb	fp,158(sp)
    4b54:	003a4006 	br	3458 <___vfprintf_internal_r+0x628>
    4b58:	00c00b44 	movi	r3,45
    4b5c:	d8c02785 	stb	r3,158(sp)
    4b60:	d8802a15 	stw	r2,168(sp)
    4b64:	dc802b17 	ldw	r18,172(sp)
    4b68:	d8002915 	stw	zero,164(sp)
    4b6c:	07000b44 	movi	fp,45
    4b70:	003a8006 	br	3574 <___vfprintf_internal_r+0x744>
    4b74:	04000074 	movhi	r16,1
    4b78:	84070604 	addi	r16,r16,7192
    4b7c:	003f4706 	br	489c <___vfprintf_internal_r+0x1a6c>
    4b80:	d8c02d17 	ldw	r3,180(sp)
    4b84:	d9002f17 	ldw	r4,188(sp)
    4b88:	18800017 	ldw	r2,0(r3)
    4b8c:	18c00104 	addi	r3,r3,4
    4b90:	d8c02d15 	stw	r3,180(sp)
    4b94:	11000015 	stw	r4,0(r2)
    4b98:	0038dd06 	br	2f10 <___vfprintf_internal_r+0xe0>
    4b9c:	dd802617 	ldw	r22,152(sp)
    4ba0:	00bfff44 	movi	r2,-3
    4ba4:	b0801c16 	blt	r22,r2,4c18 <___vfprintf_internal_r+0x1de8>
    4ba8:	d9402917 	ldw	r5,164(sp)
    4bac:	2d801a16 	blt	r5,r22,4c18 <___vfprintf_internal_r+0x1de8>
    4bb0:	dd803215 	stw	r22,200(sp)
    4bb4:	003e8906 	br	45dc <___vfprintf_internal_r+0x17ac>
    4bb8:	01000074 	movhi	r4,1
    4bbc:	21071384 	addi	r4,r4,7246
    4bc0:	d9002b15 	stw	r4,172(sp)
    4bc4:	003c9106 	br	3e0c <___vfprintf_internal_r+0xfdc>
    4bc8:	e005883a 	mov	r2,fp
    4bcc:	003e7906 	br	45b4 <___vfprintf_internal_r+0x1784>
    4bd0:	d9402917 	ldw	r5,164(sp)
    4bd4:	df002783 	ldbu	fp,158(sp)
    4bd8:	dcc02d15 	stw	r19,180(sp)
    4bdc:	d9402a15 	stw	r5,168(sp)
    4be0:	d9402e15 	stw	r5,184(sp)
    4be4:	d8002915 	stw	zero,164(sp)
    4be8:	d8003215 	stw	zero,200(sp)
    4bec:	003a5d06 	br	3564 <___vfprintf_internal_r+0x734>
    4bf0:	9080004c 	andi	r2,r18,1
    4bf4:	0039883a 	mov	fp,zero
    4bf8:	10000426 	beq	r2,zero,4c0c <___vfprintf_internal_r+0x1ddc>
    4bfc:	00800c04 	movi	r2,48
    4c00:	dc001dc4 	addi	r16,sp,119
    4c04:	d8801dc5 	stb	r2,119(sp)
    4c08:	003b8006 	br	3a0c <___vfprintf_internal_r+0xbdc>
    4c0c:	d8002e15 	stw	zero,184(sp)
    4c10:	dc001e04 	addi	r16,sp,120
    4c14:	003a4d06 	br	354c <___vfprintf_internal_r+0x71c>
    4c18:	8c7fff84 	addi	r17,r17,-2
    4c1c:	b5bfffc4 	addi	r22,r22,-1
    4c20:	dd802615 	stw	r22,152(sp)
    4c24:	dc4022c5 	stb	r17,139(sp)
    4c28:	b000bf16 	blt	r22,zero,4f28 <___vfprintf_internal_r+0x20f8>
    4c2c:	00800ac4 	movi	r2,43
    4c30:	d8802305 	stb	r2,140(sp)
    4c34:	00800244 	movi	r2,9
    4c38:	15807016 	blt	r2,r22,4dfc <___vfprintf_internal_r+0x1fcc>
    4c3c:	00800c04 	movi	r2,48
    4c40:	b5800c04 	addi	r22,r22,48
    4c44:	d8802345 	stb	r2,141(sp)
    4c48:	dd802385 	stb	r22,142(sp)
    4c4c:	d88023c4 	addi	r2,sp,143
    4c50:	df0022c4 	addi	fp,sp,139
    4c54:	d8c03317 	ldw	r3,204(sp)
    4c58:	1739c83a 	sub	fp,r2,fp
    4c5c:	d9003317 	ldw	r4,204(sp)
    4c60:	e0c7883a 	add	r3,fp,r3
    4c64:	df003a15 	stw	fp,232(sp)
    4c68:	d8c02e15 	stw	r3,184(sp)
    4c6c:	00800044 	movi	r2,1
    4c70:	1100b30e 	bge	r2,r4,4f40 <___vfprintf_internal_r+0x2110>
    4c74:	d8c02e17 	ldw	r3,184(sp)
    4c78:	18c00044 	addi	r3,r3,1
    4c7c:	d8c02e15 	stw	r3,184(sp)
    4c80:	1805883a 	mov	r2,r3
    4c84:	1800ac16 	blt	r3,zero,4f38 <___vfprintf_internal_r+0x2108>
    4c88:	d8003215 	stw	zero,200(sp)
    4c8c:	003e5d06 	br	4604 <___vfprintf_internal_r+0x17d4>
    4c90:	d9002c17 	ldw	r4,176(sp)
    4c94:	d9801e04 	addi	r6,sp,120
    4c98:	b80b883a 	mov	r5,r23
    4c9c:	0009bcc0 	call	9bcc <__sprint_r>
    4ca0:	1039651e 	bne	r2,zero,3238 <___vfprintf_internal_r+0x408>
    4ca4:	dc402617 	ldw	r17,152(sp)
    4ca8:	d8c02017 	ldw	r3,128(sp)
    4cac:	d8801f17 	ldw	r2,124(sp)
    4cb0:	da000404 	addi	r8,sp,16
    4cb4:	003ed606 	br	4810 <___vfprintf_internal_r+0x19e0>
    4cb8:	582b883a 	mov	r21,r11
    4cbc:	d8002915 	stw	zero,164(sp)
    4cc0:	0038bd06 	br	2fb8 <___vfprintf_internal_r+0x188>
    4cc4:	d8802917 	ldw	r2,164(sp)
    4cc8:	103e071e 	bne	r2,zero,44e8 <___vfprintf_internal_r+0x16b8>
    4ccc:	dc002915 	stw	r16,164(sp)
    4cd0:	003e0506 	br	44e8 <___vfprintf_internal_r+0x16b8>
    4cd4:	d9002917 	ldw	r4,164(sp)
    4cd8:	20c00044 	addi	r3,r4,1
    4cdc:	003e0f06 	br	451c <___vfprintf_internal_r+0x16ec>
    4ce0:	01400184 	movi	r5,6
    4ce4:	d9402915 	stw	r5,164(sp)
    4ce8:	003dff06 	br	44e8 <___vfprintf_internal_r+0x16b8>
    4cec:	d8802104 	addi	r2,sp,132
    4cf0:	d8800315 	stw	r2,12(sp)
    4cf4:	d8802504 	addi	r2,sp,148
    4cf8:	d8800215 	stw	r2,8(sp)
    4cfc:	d8802604 	addi	r2,sp,152
    4d00:	d8800115 	stw	r2,4(sp)
    4d04:	d8802917 	ldw	r2,164(sp)
    4d08:	d9403617 	ldw	r5,216(sp)
    4d0c:	d9002c17 	ldw	r4,176(sp)
    4d10:	d8800015 	stw	r2,0(sp)
    4d14:	01c000c4 	movi	r7,3
    4d18:	980d883a 	mov	r6,r19
    4d1c:	da003d15 	stw	r8,244(sp)
    4d20:	00054540 	call	5454 <_dtoa_r>
    4d24:	d8c02917 	ldw	r3,164(sp)
    4d28:	da003d17 	ldw	r8,244(sp)
    4d2c:	1021883a 	mov	r16,r2
    4d30:	10f9883a 	add	fp,r2,r3
    4d34:	81000007 	ldb	r4,0(r16)
    4d38:	00800c04 	movi	r2,48
    4d3c:	20805e26 	beq	r4,r2,4eb8 <___vfprintf_internal_r+0x2088>
    4d40:	d8c02617 	ldw	r3,152(sp)
    4d44:	e0f9883a 	add	fp,fp,r3
    4d48:	003e0a06 	br	4574 <___vfprintf_internal_r+0x1744>
    4d4c:	00c00b44 	movi	r3,45
    4d50:	24e0003c 	xorhi	r19,r4,32768
    4d54:	d8c02a05 	stb	r3,168(sp)
    4d58:	003de906 	br	4500 <___vfprintf_internal_r+0x16d0>
    4d5c:	d8c03217 	ldw	r3,200(sp)
    4d60:	00c07a0e 	bge	zero,r3,4f4c <___vfprintf_internal_r+0x211c>
    4d64:	00800044 	movi	r2,1
    4d68:	d9003317 	ldw	r4,204(sp)
    4d6c:	1105883a 	add	r2,r2,r4
    4d70:	d8802e15 	stw	r2,184(sp)
    4d74:	10004e16 	blt	r2,zero,4eb0 <___vfprintf_internal_r+0x2080>
    4d78:	044019c4 	movi	r17,103
    4d7c:	003e2106 	br	4604 <___vfprintf_internal_r+0x17d4>
    4d80:	d9002917 	ldw	r4,164(sp)
    4d84:	d8802104 	addi	r2,sp,132
    4d88:	d8800315 	stw	r2,12(sp)
    4d8c:	d9000015 	stw	r4,0(sp)
    4d90:	d8802504 	addi	r2,sp,148
    4d94:	d9403617 	ldw	r5,216(sp)
    4d98:	d9002c17 	ldw	r4,176(sp)
    4d9c:	d8800215 	stw	r2,8(sp)
    4da0:	d8802604 	addi	r2,sp,152
    4da4:	d8800115 	stw	r2,4(sp)
    4da8:	01c000c4 	movi	r7,3
    4dac:	980d883a 	mov	r6,r19
    4db0:	da003d15 	stw	r8,244(sp)
    4db4:	00054540 	call	5454 <_dtoa_r>
    4db8:	d8c02917 	ldw	r3,164(sp)
    4dbc:	da003d17 	ldw	r8,244(sp)
    4dc0:	1021883a 	mov	r16,r2
    4dc4:	00801184 	movi	r2,70
    4dc8:	80f9883a 	add	fp,r16,r3
    4dcc:	88bfd926 	beq	r17,r2,4d34 <___vfprintf_internal_r+0x1f04>
    4dd0:	003de806 	br	4574 <___vfprintf_internal_r+0x1744>
    4dd4:	d9002917 	ldw	r4,164(sp)
    4dd8:	00c04d0e 	bge	zero,r3,4f10 <___vfprintf_internal_r+0x20e0>
    4ddc:	2000441e 	bne	r4,zero,4ef0 <___vfprintf_internal_r+0x20c0>
    4de0:	9480004c 	andi	r18,r18,1
    4de4:	9000421e 	bne	r18,zero,4ef0 <___vfprintf_internal_r+0x20c0>
    4de8:	1805883a 	mov	r2,r3
    4dec:	18007016 	blt	r3,zero,4fb0 <___vfprintf_internal_r+0x2180>
    4df0:	d8c03217 	ldw	r3,200(sp)
    4df4:	d8c02e15 	stw	r3,184(sp)
    4df8:	003e0206 	br	4604 <___vfprintf_internal_r+0x17d4>
    4dfc:	df0022c4 	addi	fp,sp,139
    4e00:	dc002915 	stw	r16,164(sp)
    4e04:	4027883a 	mov	r19,r8
    4e08:	e021883a 	mov	r16,fp
    4e0c:	b009883a 	mov	r4,r22
    4e10:	01400284 	movi	r5,10
    4e14:	000c5800 	call	c580 <__modsi3>
    4e18:	10800c04 	addi	r2,r2,48
    4e1c:	843fffc4 	addi	r16,r16,-1
    4e20:	b009883a 	mov	r4,r22
    4e24:	01400284 	movi	r5,10
    4e28:	80800005 	stb	r2,0(r16)
    4e2c:	000c4fc0 	call	c4fc <__divsi3>
    4e30:	102d883a 	mov	r22,r2
    4e34:	00800244 	movi	r2,9
    4e38:	15bff416 	blt	r2,r22,4e0c <___vfprintf_internal_r+0x1fdc>
    4e3c:	9811883a 	mov	r8,r19
    4e40:	b0800c04 	addi	r2,r22,48
    4e44:	8027883a 	mov	r19,r16
    4e48:	997fffc4 	addi	r5,r19,-1
    4e4c:	98bfffc5 	stb	r2,-1(r19)
    4e50:	dc002917 	ldw	r16,164(sp)
    4e54:	2f006a2e 	bgeu	r5,fp,5000 <___vfprintf_internal_r+0x21d0>
    4e58:	d9c02384 	addi	r7,sp,142
    4e5c:	3ccfc83a 	sub	r7,r7,r19
    4e60:	d9002344 	addi	r4,sp,141
    4e64:	e1cf883a 	add	r7,fp,r7
    4e68:	00000106 	br	4e70 <___vfprintf_internal_r+0x2040>
    4e6c:	28800003 	ldbu	r2,0(r5)
    4e70:	20800005 	stb	r2,0(r4)
    4e74:	21000044 	addi	r4,r4,1
    4e78:	29400044 	addi	r5,r5,1
    4e7c:	393ffb1e 	bne	r7,r4,4e6c <___vfprintf_internal_r+0x203c>
    4e80:	d8802304 	addi	r2,sp,140
    4e84:	14c5c83a 	sub	r2,r2,r19
    4e88:	d8c02344 	addi	r3,sp,141
    4e8c:	1885883a 	add	r2,r3,r2
    4e90:	003f7006 	br	4c54 <___vfprintf_internal_r+0x1e24>
    4e94:	0005883a 	mov	r2,zero
    4e98:	003f0f06 	br	4ad8 <___vfprintf_internal_r+0x1ca8>
    4e9c:	d8c03217 	ldw	r3,200(sp)
    4ea0:	18c00044 	addi	r3,r3,1
    4ea4:	d8c02e15 	stw	r3,184(sp)
    4ea8:	1805883a 	mov	r2,r3
    4eac:	183fb20e 	bge	r3,zero,4d78 <___vfprintf_internal_r+0x1f48>
    4eb0:	0005883a 	mov	r2,zero
    4eb4:	003fb006 	br	4d78 <___vfprintf_internal_r+0x1f48>
    4eb8:	d9003617 	ldw	r4,216(sp)
    4ebc:	000d883a 	mov	r6,zero
    4ec0:	000f883a 	mov	r7,zero
    4ec4:	980b883a 	mov	r5,r19
    4ec8:	d8c03c15 	stw	r3,240(sp)
    4ecc:	da003d15 	stw	r8,244(sp)
    4ed0:	000d8440 	call	d844 <__eqdf2>
    4ed4:	d8c03c17 	ldw	r3,240(sp)
    4ed8:	da003d17 	ldw	r8,244(sp)
    4edc:	103f9826 	beq	r2,zero,4d40 <___vfprintf_internal_r+0x1f10>
    4ee0:	00800044 	movi	r2,1
    4ee4:	10c7c83a 	sub	r3,r2,r3
    4ee8:	d8c02615 	stw	r3,152(sp)
    4eec:	003f9506 	br	4d44 <___vfprintf_internal_r+0x1f14>
    4ef0:	d9002917 	ldw	r4,164(sp)
    4ef4:	d8c03217 	ldw	r3,200(sp)
    4ef8:	20800044 	addi	r2,r4,1
    4efc:	1885883a 	add	r2,r3,r2
    4f00:	d8802e15 	stw	r2,184(sp)
    4f04:	103dbf0e 	bge	r2,zero,4604 <___vfprintf_internal_r+0x17d4>
    4f08:	0005883a 	mov	r2,zero
    4f0c:	003dbd06 	br	4604 <___vfprintf_internal_r+0x17d4>
    4f10:	2000211e 	bne	r4,zero,4f98 <___vfprintf_internal_r+0x2168>
    4f14:	9480004c 	andi	r18,r18,1
    4f18:	90001f1e 	bne	r18,zero,4f98 <___vfprintf_internal_r+0x2168>
    4f1c:	00800044 	movi	r2,1
    4f20:	d8802e15 	stw	r2,184(sp)
    4f24:	003db706 	br	4604 <___vfprintf_internal_r+0x17d4>
    4f28:	00800b44 	movi	r2,45
    4f2c:	05adc83a 	sub	r22,zero,r22
    4f30:	d8802305 	stb	r2,140(sp)
    4f34:	003f3f06 	br	4c34 <___vfprintf_internal_r+0x1e04>
    4f38:	0005883a 	mov	r2,zero
    4f3c:	003f5206 	br	4c88 <___vfprintf_internal_r+0x1e58>
    4f40:	90a4703a 	and	r18,r18,r2
    4f44:	903f4e26 	beq	r18,zero,4c80 <___vfprintf_internal_r+0x1e50>
    4f48:	003f4a06 	br	4c74 <___vfprintf_internal_r+0x1e44>
    4f4c:	00800084 	movi	r2,2
    4f50:	10c5c83a 	sub	r2,r2,r3
    4f54:	003f8406 	br	4d68 <___vfprintf_internal_r+0x1f38>
    4f58:	d8802d17 	ldw	r2,180(sp)
    4f5c:	d9002d17 	ldw	r4,180(sp)
    4f60:	ac400043 	ldbu	r17,1(r21)
    4f64:	10800017 	ldw	r2,0(r2)
    4f68:	582b883a 	mov	r21,r11
    4f6c:	d8802915 	stw	r2,164(sp)
    4f70:	20800104 	addi	r2,r4,4
    4f74:	d9002917 	ldw	r4,164(sp)
    4f78:	d8802d15 	stw	r2,180(sp)
    4f7c:	203e7a0e 	bge	r4,zero,4968 <___vfprintf_internal_r+0x1b38>
    4f80:	8c403fcc 	andi	r17,r17,255
    4f84:	00bfffc4 	movi	r2,-1
    4f88:	8c40201c 	xori	r17,r17,128
    4f8c:	d8802915 	stw	r2,164(sp)
    4f90:	8c7fe004 	addi	r17,r17,-128
    4f94:	00380706 	br	2fb4 <___vfprintf_internal_r+0x184>
    4f98:	d8c02917 	ldw	r3,164(sp)
    4f9c:	18c00084 	addi	r3,r3,2
    4fa0:	d8c02e15 	stw	r3,184(sp)
    4fa4:	1805883a 	mov	r2,r3
    4fa8:	183d960e 	bge	r3,zero,4604 <___vfprintf_internal_r+0x17d4>
    4fac:	003fd606 	br	4f08 <___vfprintf_internal_r+0x20d8>
    4fb0:	0005883a 	mov	r2,zero
    4fb4:	003f8e06 	br	4df0 <___vfprintf_internal_r+0x1fc0>
    4fb8:	9080004c 	andi	r2,r18,1
    4fbc:	103f811e 	bne	r2,zero,4dc4 <___vfprintf_internal_r+0x1f94>
    4fc0:	d8802117 	ldw	r2,132(sp)
    4fc4:	1405c83a 	sub	r2,r2,r16
    4fc8:	d8803315 	stw	r2,204(sp)
    4fcc:	b47ef326 	beq	r22,r17,4b9c <___vfprintf_internal_r+0x1d6c>
    4fd0:	dd802617 	ldw	r22,152(sp)
    4fd4:	003f1106 	br	4c1c <___vfprintf_internal_r+0x1dec>
    4fd8:	d9c02785 	stb	r7,158(sp)
    4fdc:	00390406 	br	33f0 <___vfprintf_internal_r+0x5c0>
    4fe0:	d9c02785 	stb	r7,158(sp)
    4fe4:	0038d306 	br	3334 <___vfprintf_internal_r+0x504>
    4fe8:	d9c02785 	stb	r7,158(sp)
    4fec:	003a6106 	br	3974 <___vfprintf_internal_r+0xb44>
    4ff0:	d9c02785 	stb	r7,158(sp)
    4ff4:	003af806 	br	3bd8 <___vfprintf_internal_r+0xda8>
    4ff8:	0005883a 	mov	r2,zero
    4ffc:	003d7e06 	br	45f8 <___vfprintf_internal_r+0x17c8>
    5000:	d8802344 	addi	r2,sp,141
    5004:	003f1306 	br	4c54 <___vfprintf_internal_r+0x1e24>
    5008:	d9c02785 	stb	r7,158(sp)
    500c:	00392306 	br	349c <___vfprintf_internal_r+0x66c>
    5010:	d9c02785 	stb	r7,158(sp)
    5014:	003aa906 	br	3abc <___vfprintf_internal_r+0xc8c>
    5018:	d9c02785 	stb	r7,158(sp)
    501c:	003a3d06 	br	3914 <___vfprintf_internal_r+0xae4>
    5020:	d9c02785 	stb	r7,158(sp)
    5024:	003aca06 	br	3b50 <___vfprintf_internal_r+0xd20>

00005028 <__vfprintf_internal>:
    5028:	00800074 	movhi	r2,1
    502c:	108e6e04 	addi	r2,r2,14776
    5030:	300f883a 	mov	r7,r6
    5034:	280d883a 	mov	r6,r5
    5038:	200b883a 	mov	r5,r4
    503c:	11000017 	ldw	r4,0(r2)
    5040:	0002e301 	jmpi	2e30 <___vfprintf_internal_r>

00005044 <__sbprintf>:
    5044:	2880030b 	ldhu	r2,12(r5)
    5048:	2ac01917 	ldw	r11,100(r5)
    504c:	2a80038b 	ldhu	r10,14(r5)
    5050:	2a400717 	ldw	r9,28(r5)
    5054:	2a000917 	ldw	r8,36(r5)
    5058:	defee204 	addi	sp,sp,-1144
    505c:	00c10004 	movi	r3,1024
    5060:	dc011a15 	stw	r16,1128(sp)
    5064:	10bfff4c 	andi	r2,r2,65533
    5068:	2821883a 	mov	r16,r5
    506c:	d8cb883a 	add	r5,sp,r3
    5070:	dc811c15 	stw	r18,1136(sp)
    5074:	dc411b15 	stw	r17,1132(sp)
    5078:	dfc11d15 	stw	ra,1140(sp)
    507c:	2025883a 	mov	r18,r4
    5080:	d881030d 	sth	r2,1036(sp)
    5084:	dac11915 	stw	r11,1124(sp)
    5088:	da81038d 	sth	r10,1038(sp)
    508c:	da410715 	stw	r9,1052(sp)
    5090:	da010915 	stw	r8,1060(sp)
    5094:	dec10015 	stw	sp,1024(sp)
    5098:	dec10415 	stw	sp,1040(sp)
    509c:	d8c10215 	stw	r3,1032(sp)
    50a0:	d8c10515 	stw	r3,1044(sp)
    50a4:	d8010615 	stw	zero,1048(sp)
    50a8:	0002e300 	call	2e30 <___vfprintf_internal_r>
    50ac:	1023883a 	mov	r17,r2
    50b0:	10000416 	blt	r2,zero,50c4 <__sbprintf+0x80>
    50b4:	d9410004 	addi	r5,sp,1024
    50b8:	9009883a 	mov	r4,r18
    50bc:	0006cf80 	call	6cf8 <_fflush_r>
    50c0:	10000d1e 	bne	r2,zero,50f8 <__sbprintf+0xb4>
    50c4:	d881030b 	ldhu	r2,1036(sp)
    50c8:	1080100c 	andi	r2,r2,64
    50cc:	10000326 	beq	r2,zero,50dc <__sbprintf+0x98>
    50d0:	8080030b 	ldhu	r2,12(r16)
    50d4:	10801014 	ori	r2,r2,64
    50d8:	8080030d 	sth	r2,12(r16)
    50dc:	8805883a 	mov	r2,r17
    50e0:	dfc11d17 	ldw	ra,1140(sp)
    50e4:	dc811c17 	ldw	r18,1136(sp)
    50e8:	dc411b17 	ldw	r17,1132(sp)
    50ec:	dc011a17 	ldw	r16,1128(sp)
    50f0:	dec11e04 	addi	sp,sp,1144
    50f4:	f800283a 	ret
    50f8:	047fffc4 	movi	r17,-1
    50fc:	003ff106 	br	50c4 <__sbprintf+0x80>

00005100 <__swsetup_r>:
    5100:	00800074 	movhi	r2,1
    5104:	defffd04 	addi	sp,sp,-12
    5108:	108e6e04 	addi	r2,r2,14776
    510c:	dc400115 	stw	r17,4(sp)
    5110:	2023883a 	mov	r17,r4
    5114:	11000017 	ldw	r4,0(r2)
    5118:	dc000015 	stw	r16,0(sp)
    511c:	dfc00215 	stw	ra,8(sp)
    5120:	2821883a 	mov	r16,r5
    5124:	20000226 	beq	r4,zero,5130 <__swsetup_r+0x30>
    5128:	20800e17 	ldw	r2,56(r4)
    512c:	10003126 	beq	r2,zero,51f4 <__swsetup_r+0xf4>
    5130:	8080030b 	ldhu	r2,12(r16)
    5134:	10c0020c 	andi	r3,r2,8
    5138:	1009883a 	mov	r4,r2
    513c:	18000f26 	beq	r3,zero,517c <__swsetup_r+0x7c>
    5140:	80c00417 	ldw	r3,16(r16)
    5144:	18001526 	beq	r3,zero,519c <__swsetup_r+0x9c>
    5148:	1100004c 	andi	r4,r2,1
    514c:	20001c1e 	bne	r4,zero,51c0 <__swsetup_r+0xc0>
    5150:	1080008c 	andi	r2,r2,2
    5154:	1000291e 	bne	r2,zero,51fc <__swsetup_r+0xfc>
    5158:	80800517 	ldw	r2,20(r16)
    515c:	80800215 	stw	r2,8(r16)
    5160:	18001c26 	beq	r3,zero,51d4 <__swsetup_r+0xd4>
    5164:	0005883a 	mov	r2,zero
    5168:	dfc00217 	ldw	ra,8(sp)
    516c:	dc400117 	ldw	r17,4(sp)
    5170:	dc000017 	ldw	r16,0(sp)
    5174:	dec00304 	addi	sp,sp,12
    5178:	f800283a 	ret
    517c:	2080040c 	andi	r2,r4,16
    5180:	10002e26 	beq	r2,zero,523c <__swsetup_r+0x13c>
    5184:	2080010c 	andi	r2,r4,4
    5188:	10001e1e 	bne	r2,zero,5204 <__swsetup_r+0x104>
    518c:	80c00417 	ldw	r3,16(r16)
    5190:	20800214 	ori	r2,r4,8
    5194:	8080030d 	sth	r2,12(r16)
    5198:	183feb1e 	bne	r3,zero,5148 <__swsetup_r+0x48>
    519c:	1100a00c 	andi	r4,r2,640
    51a0:	01408004 	movi	r5,512
    51a4:	217fe826 	beq	r4,r5,5148 <__swsetup_r+0x48>
    51a8:	800b883a 	mov	r5,r16
    51ac:	8809883a 	mov	r4,r17
    51b0:	0007c780 	call	7c78 <__smakebuf_r>
    51b4:	8080030b 	ldhu	r2,12(r16)
    51b8:	80c00417 	ldw	r3,16(r16)
    51bc:	003fe206 	br	5148 <__swsetup_r+0x48>
    51c0:	80800517 	ldw	r2,20(r16)
    51c4:	80000215 	stw	zero,8(r16)
    51c8:	0085c83a 	sub	r2,zero,r2
    51cc:	80800615 	stw	r2,24(r16)
    51d0:	183fe41e 	bne	r3,zero,5164 <__swsetup_r+0x64>
    51d4:	80c0030b 	ldhu	r3,12(r16)
    51d8:	0005883a 	mov	r2,zero
    51dc:	1900200c 	andi	r4,r3,128
    51e0:	203fe126 	beq	r4,zero,5168 <__swsetup_r+0x68>
    51e4:	18c01014 	ori	r3,r3,64
    51e8:	80c0030d 	sth	r3,12(r16)
    51ec:	00bfffc4 	movi	r2,-1
    51f0:	003fdd06 	br	5168 <__swsetup_r+0x68>
    51f4:	00070d40 	call	70d4 <__sinit>
    51f8:	003fcd06 	br	5130 <__swsetup_r+0x30>
    51fc:	0005883a 	mov	r2,zero
    5200:	003fd606 	br	515c <__swsetup_r+0x5c>
    5204:	81400c17 	ldw	r5,48(r16)
    5208:	28000626 	beq	r5,zero,5224 <__swsetup_r+0x124>
    520c:	80801004 	addi	r2,r16,64
    5210:	28800326 	beq	r5,r2,5220 <__swsetup_r+0x120>
    5214:	8809883a 	mov	r4,r17
    5218:	00072480 	call	7248 <_free_r>
    521c:	8100030b 	ldhu	r4,12(r16)
    5220:	80000c15 	stw	zero,48(r16)
    5224:	80c00417 	ldw	r3,16(r16)
    5228:	00bff6c4 	movi	r2,-37
    522c:	1108703a 	and	r4,r2,r4
    5230:	80000115 	stw	zero,4(r16)
    5234:	80c00015 	stw	r3,0(r16)
    5238:	003fd506 	br	5190 <__swsetup_r+0x90>
    523c:	00800244 	movi	r2,9
    5240:	88800015 	stw	r2,0(r17)
    5244:	20801014 	ori	r2,r4,64
    5248:	8080030d 	sth	r2,12(r16)
    524c:	00bfffc4 	movi	r2,-1
    5250:	003fc506 	br	5168 <__swsetup_r+0x68>

00005254 <quorem>:
    5254:	defff704 	addi	sp,sp,-36
    5258:	dc800215 	stw	r18,8(sp)
    525c:	20800417 	ldw	r2,16(r4)
    5260:	2c800417 	ldw	r18,16(r5)
    5264:	dfc00815 	stw	ra,32(sp)
    5268:	ddc00715 	stw	r23,28(sp)
    526c:	dd800615 	stw	r22,24(sp)
    5270:	dd400515 	stw	r21,20(sp)
    5274:	dd000415 	stw	r20,16(sp)
    5278:	dcc00315 	stw	r19,12(sp)
    527c:	dc400115 	stw	r17,4(sp)
    5280:	dc000015 	stw	r16,0(sp)
    5284:	14807116 	blt	r2,r18,544c <quorem+0x1f8>
    5288:	94bfffc4 	addi	r18,r18,-1
    528c:	94ad883a 	add	r22,r18,r18
    5290:	b5ad883a 	add	r22,r22,r22
    5294:	2c400504 	addi	r17,r5,20
    5298:	8da9883a 	add	r20,r17,r22
    529c:	25400504 	addi	r21,r4,20
    52a0:	282f883a 	mov	r23,r5
    52a4:	adad883a 	add	r22,r21,r22
    52a8:	a1400017 	ldw	r5,0(r20)
    52ac:	2021883a 	mov	r16,r4
    52b0:	b1000017 	ldw	r4,0(r22)
    52b4:	29400044 	addi	r5,r5,1
    52b8:	000c5f40 	call	c5f4 <__udivsi3>
    52bc:	1027883a 	mov	r19,r2
    52c0:	10002c26 	beq	r2,zero,5374 <quorem+0x120>
    52c4:	a813883a 	mov	r9,r21
    52c8:	880b883a 	mov	r5,r17
    52cc:	0009883a 	mov	r4,zero
    52d0:	000d883a 	mov	r6,zero
    52d4:	2a000017 	ldw	r8,0(r5)
    52d8:	49c00017 	ldw	r7,0(r9)
    52dc:	29400104 	addi	r5,r5,4
    52e0:	40bfffcc 	andi	r2,r8,65535
    52e4:	14c5383a 	mul	r2,r2,r19
    52e8:	4010d43a 	srli	r8,r8,16
    52ec:	38ffffcc 	andi	r3,r7,65535
    52f0:	1105883a 	add	r2,r2,r4
    52f4:	1008d43a 	srli	r4,r2,16
    52f8:	44d1383a 	mul	r8,r8,r19
    52fc:	198d883a 	add	r6,r3,r6
    5300:	10ffffcc 	andi	r3,r2,65535
    5304:	30c7c83a 	sub	r3,r6,r3
    5308:	380ed43a 	srli	r7,r7,16
    530c:	4105883a 	add	r2,r8,r4
    5310:	180dd43a 	srai	r6,r3,16
    5314:	113fffcc 	andi	r4,r2,65535
    5318:	390fc83a 	sub	r7,r7,r4
    531c:	398d883a 	add	r6,r7,r6
    5320:	300e943a 	slli	r7,r6,16
    5324:	18ffffcc 	andi	r3,r3,65535
    5328:	1008d43a 	srli	r4,r2,16
    532c:	38ceb03a 	or	r7,r7,r3
    5330:	49c00015 	stw	r7,0(r9)
    5334:	300dd43a 	srai	r6,r6,16
    5338:	4a400104 	addi	r9,r9,4
    533c:	a17fe52e 	bgeu	r20,r5,52d4 <quorem+0x80>
    5340:	b0800017 	ldw	r2,0(r22)
    5344:	10000b1e 	bne	r2,zero,5374 <quorem+0x120>
    5348:	b0bfff04 	addi	r2,r22,-4
    534c:	a880082e 	bgeu	r21,r2,5370 <quorem+0x11c>
    5350:	b0ffff17 	ldw	r3,-4(r22)
    5354:	18000326 	beq	r3,zero,5364 <quorem+0x110>
    5358:	00000506 	br	5370 <quorem+0x11c>
    535c:	10c00017 	ldw	r3,0(r2)
    5360:	1800031e 	bne	r3,zero,5370 <quorem+0x11c>
    5364:	10bfff04 	addi	r2,r2,-4
    5368:	94bfffc4 	addi	r18,r18,-1
    536c:	a8bffb36 	bltu	r21,r2,535c <quorem+0x108>
    5370:	84800415 	stw	r18,16(r16)
    5374:	b80b883a 	mov	r5,r23
    5378:	8009883a 	mov	r4,r16
    537c:	0008bac0 	call	8bac <__mcmp>
    5380:	10002616 	blt	r2,zero,541c <quorem+0x1c8>
    5384:	9cc00044 	addi	r19,r19,1
    5388:	a805883a 	mov	r2,r21
    538c:	000b883a 	mov	r5,zero
    5390:	11000017 	ldw	r4,0(r2)
    5394:	89800017 	ldw	r6,0(r17)
    5398:	10800104 	addi	r2,r2,4
    539c:	20ffffcc 	andi	r3,r4,65535
    53a0:	194b883a 	add	r5,r3,r5
    53a4:	30ffffcc 	andi	r3,r6,65535
    53a8:	28c7c83a 	sub	r3,r5,r3
    53ac:	300cd43a 	srli	r6,r6,16
    53b0:	2008d43a 	srli	r4,r4,16
    53b4:	180bd43a 	srai	r5,r3,16
    53b8:	18ffffcc 	andi	r3,r3,65535
    53bc:	2189c83a 	sub	r4,r4,r6
    53c0:	2149883a 	add	r4,r4,r5
    53c4:	200c943a 	slli	r6,r4,16
    53c8:	8c400104 	addi	r17,r17,4
    53cc:	200bd43a 	srai	r5,r4,16
    53d0:	30c6b03a 	or	r3,r6,r3
    53d4:	10ffff15 	stw	r3,-4(r2)
    53d8:	a47fed2e 	bgeu	r20,r17,5390 <quorem+0x13c>
    53dc:	9485883a 	add	r2,r18,r18
    53e0:	1085883a 	add	r2,r2,r2
    53e4:	a887883a 	add	r3,r21,r2
    53e8:	18800017 	ldw	r2,0(r3)
    53ec:	10000b1e 	bne	r2,zero,541c <quorem+0x1c8>
    53f0:	18bfff04 	addi	r2,r3,-4
    53f4:	a880082e 	bgeu	r21,r2,5418 <quorem+0x1c4>
    53f8:	18ffff17 	ldw	r3,-4(r3)
    53fc:	18000326 	beq	r3,zero,540c <quorem+0x1b8>
    5400:	00000506 	br	5418 <quorem+0x1c4>
    5404:	10c00017 	ldw	r3,0(r2)
    5408:	1800031e 	bne	r3,zero,5418 <quorem+0x1c4>
    540c:	10bfff04 	addi	r2,r2,-4
    5410:	94bfffc4 	addi	r18,r18,-1
    5414:	a8bffb36 	bltu	r21,r2,5404 <quorem+0x1b0>
    5418:	84800415 	stw	r18,16(r16)
    541c:	9805883a 	mov	r2,r19
    5420:	dfc00817 	ldw	ra,32(sp)
    5424:	ddc00717 	ldw	r23,28(sp)
    5428:	dd800617 	ldw	r22,24(sp)
    542c:	dd400517 	ldw	r21,20(sp)
    5430:	dd000417 	ldw	r20,16(sp)
    5434:	dcc00317 	ldw	r19,12(sp)
    5438:	dc800217 	ldw	r18,8(sp)
    543c:	dc400117 	ldw	r17,4(sp)
    5440:	dc000017 	ldw	r16,0(sp)
    5444:	dec00904 	addi	sp,sp,36
    5448:	f800283a 	ret
    544c:	0005883a 	mov	r2,zero
    5450:	003ff306 	br	5420 <quorem+0x1cc>

00005454 <_dtoa_r>:
    5454:	20801017 	ldw	r2,64(r4)
    5458:	deffde04 	addi	sp,sp,-136
    545c:	df002015 	stw	fp,128(sp)
    5460:	dcc01b15 	stw	r19,108(sp)
    5464:	dc801a15 	stw	r18,104(sp)
    5468:	dc401915 	stw	r17,100(sp)
    546c:	dc001815 	stw	r16,96(sp)
    5470:	dfc02115 	stw	ra,132(sp)
    5474:	ddc01f15 	stw	r23,124(sp)
    5478:	dd801e15 	stw	r22,120(sp)
    547c:	dd401d15 	stw	r21,116(sp)
    5480:	dd001c15 	stw	r20,112(sp)
    5484:	d9c00315 	stw	r7,12(sp)
    5488:	2039883a 	mov	fp,r4
    548c:	3023883a 	mov	r17,r6
    5490:	2825883a 	mov	r18,r5
    5494:	dc002417 	ldw	r16,144(sp)
    5498:	3027883a 	mov	r19,r6
    549c:	10000826 	beq	r2,zero,54c0 <_dtoa_r+0x6c>
    54a0:	21801117 	ldw	r6,68(r4)
    54a4:	00c00044 	movi	r3,1
    54a8:	100b883a 	mov	r5,r2
    54ac:	1986983a 	sll	r3,r3,r6
    54b0:	11800115 	stw	r6,4(r2)
    54b4:	10c00215 	stw	r3,8(r2)
    54b8:	000838c0 	call	838c <_Bfree>
    54bc:	e0001015 	stw	zero,64(fp)
    54c0:	88002e16 	blt	r17,zero,557c <_dtoa_r+0x128>
    54c4:	80000015 	stw	zero,0(r16)
    54c8:	889ffc2c 	andhi	r2,r17,32752
    54cc:	00dffc34 	movhi	r3,32752
    54d0:	10c01c26 	beq	r2,r3,5544 <_dtoa_r+0xf0>
    54d4:	000d883a 	mov	r6,zero
    54d8:	000f883a 	mov	r7,zero
    54dc:	9009883a 	mov	r4,r18
    54e0:	980b883a 	mov	r5,r19
    54e4:	000d8440 	call	d844 <__eqdf2>
    54e8:	10002b1e 	bne	r2,zero,5598 <_dtoa_r+0x144>
    54ec:	d9c02317 	ldw	r7,140(sp)
    54f0:	00800044 	movi	r2,1
    54f4:	38800015 	stw	r2,0(r7)
    54f8:	d8802517 	ldw	r2,148(sp)
    54fc:	10019e26 	beq	r2,zero,5b78 <_dtoa_r+0x724>
    5500:	d8c02517 	ldw	r3,148(sp)
    5504:	00800074 	movhi	r2,1
    5508:	10871344 	addi	r2,r2,7245
    550c:	18800015 	stw	r2,0(r3)
    5510:	10bfffc4 	addi	r2,r2,-1
    5514:	dfc02117 	ldw	ra,132(sp)
    5518:	df002017 	ldw	fp,128(sp)
    551c:	ddc01f17 	ldw	r23,124(sp)
    5520:	dd801e17 	ldw	r22,120(sp)
    5524:	dd401d17 	ldw	r21,116(sp)
    5528:	dd001c17 	ldw	r20,112(sp)
    552c:	dcc01b17 	ldw	r19,108(sp)
    5530:	dc801a17 	ldw	r18,104(sp)
    5534:	dc401917 	ldw	r17,100(sp)
    5538:	dc001817 	ldw	r16,96(sp)
    553c:	dec02204 	addi	sp,sp,136
    5540:	f800283a 	ret
    5544:	d8c02317 	ldw	r3,140(sp)
    5548:	0089c3c4 	movi	r2,9999
    554c:	18800015 	stw	r2,0(r3)
    5550:	90017726 	beq	r18,zero,5b30 <_dtoa_r+0x6dc>
    5554:	00800074 	movhi	r2,1
    5558:	10871f04 	addi	r2,r2,7292
    555c:	d9002517 	ldw	r4,148(sp)
    5560:	203fec26 	beq	r4,zero,5514 <_dtoa_r+0xc0>
    5564:	10c000c7 	ldb	r3,3(r2)
    5568:	1801781e 	bne	r3,zero,5b4c <_dtoa_r+0x6f8>
    556c:	10c000c4 	addi	r3,r2,3
    5570:	d9802517 	ldw	r6,148(sp)
    5574:	30c00015 	stw	r3,0(r6)
    5578:	003fe606 	br	5514 <_dtoa_r+0xc0>
    557c:	04e00034 	movhi	r19,32768
    5580:	9cffffc4 	addi	r19,r19,-1
    5584:	00800044 	movi	r2,1
    5588:	8ce6703a 	and	r19,r17,r19
    558c:	80800015 	stw	r2,0(r16)
    5590:	9823883a 	mov	r17,r19
    5594:	003fcc06 	br	54c8 <_dtoa_r+0x74>
    5598:	d8800204 	addi	r2,sp,8
    559c:	d8800015 	stw	r2,0(sp)
    55a0:	d9c00104 	addi	r7,sp,4
    55a4:	900b883a 	mov	r5,r18
    55a8:	980d883a 	mov	r6,r19
    55ac:	e009883a 	mov	r4,fp
    55b0:	8820d53a 	srli	r16,r17,20
    55b4:	0008f780 	call	8f78 <__d2b>
    55b8:	d8800915 	stw	r2,36(sp)
    55bc:	8001651e 	bne	r16,zero,5b54 <_dtoa_r+0x700>
    55c0:	dd800217 	ldw	r22,8(sp)
    55c4:	dc000117 	ldw	r16,4(sp)
    55c8:	00800804 	movi	r2,32
    55cc:	b421883a 	add	r16,r22,r16
    55d0:	80c10c84 	addi	r3,r16,1074
    55d4:	10c2d10e 	bge	r2,r3,611c <_dtoa_r+0xcc8>
    55d8:	00801004 	movi	r2,64
    55dc:	81010484 	addi	r4,r16,1042
    55e0:	10c7c83a 	sub	r3,r2,r3
    55e4:	9108d83a 	srl	r4,r18,r4
    55e8:	88e2983a 	sll	r17,r17,r3
    55ec:	2448b03a 	or	r4,r4,r17
    55f0:	000ec0c0 	call	ec0c <__floatunsidf>
    55f4:	017f8434 	movhi	r5,65040
    55f8:	01800044 	movi	r6,1
    55fc:	1009883a 	mov	r4,r2
    5600:	194b883a 	add	r5,r3,r5
    5604:	843fffc4 	addi	r16,r16,-1
    5608:	d9801115 	stw	r6,68(sp)
    560c:	000d883a 	mov	r6,zero
    5610:	01cffe34 	movhi	r7,16376
    5614:	000e1b40 	call	e1b4 <__subdf3>
    5618:	0198dbf4 	movhi	r6,25455
    561c:	01cff4f4 	movhi	r7,16339
    5620:	3190d844 	addi	r6,r6,17249
    5624:	39e1e9c4 	addi	r7,r7,-30809
    5628:	1009883a 	mov	r4,r2
    562c:	180b883a 	mov	r5,r3
    5630:	000da9c0 	call	da9c <__muldf3>
    5634:	01a2d874 	movhi	r6,35681
    5638:	01cff1f4 	movhi	r7,16327
    563c:	31b22cc4 	addi	r6,r6,-14157
    5640:	39e28a04 	addi	r7,r7,-30168
    5644:	180b883a 	mov	r5,r3
    5648:	1009883a 	mov	r4,r2
    564c:	000c6b00 	call	c6b0 <__adddf3>
    5650:	8009883a 	mov	r4,r16
    5654:	1029883a 	mov	r20,r2
    5658:	1823883a 	mov	r17,r3
    565c:	000eb300 	call	eb30 <__floatsidf>
    5660:	019427f4 	movhi	r6,20639
    5664:	01cff4f4 	movhi	r7,16339
    5668:	319e7ec4 	addi	r6,r6,31227
    566c:	39d104c4 	addi	r7,r7,17427
    5670:	1009883a 	mov	r4,r2
    5674:	180b883a 	mov	r5,r3
    5678:	000da9c0 	call	da9c <__muldf3>
    567c:	100d883a 	mov	r6,r2
    5680:	180f883a 	mov	r7,r3
    5684:	a009883a 	mov	r4,r20
    5688:	880b883a 	mov	r5,r17
    568c:	000c6b00 	call	c6b0 <__adddf3>
    5690:	1009883a 	mov	r4,r2
    5694:	180b883a 	mov	r5,r3
    5698:	1029883a 	mov	r20,r2
    569c:	1823883a 	mov	r17,r3
    56a0:	000eab00 	call	eab0 <__fixdfsi>
    56a4:	000d883a 	mov	r6,zero
    56a8:	000f883a 	mov	r7,zero
    56ac:	a009883a 	mov	r4,r20
    56b0:	880b883a 	mov	r5,r17
    56b4:	d8800515 	stw	r2,20(sp)
    56b8:	000d9a80 	call	d9a8 <__ledf2>
    56bc:	10028716 	blt	r2,zero,60dc <_dtoa_r+0xc88>
    56c0:	d8c00517 	ldw	r3,20(sp)
    56c4:	00800584 	movi	r2,22
    56c8:	10c27536 	bltu	r2,r3,60a0 <_dtoa_r+0xc4c>
    56cc:	180490fa 	slli	r2,r3,3
    56d0:	00c00074 	movhi	r3,1
    56d4:	18c73b04 	addi	r3,r3,7404
    56d8:	1885883a 	add	r2,r3,r2
    56dc:	11000017 	ldw	r4,0(r2)
    56e0:	11400117 	ldw	r5,4(r2)
    56e4:	900d883a 	mov	r6,r18
    56e8:	980f883a 	mov	r7,r19
    56ec:	000d8cc0 	call	d8cc <__gedf2>
    56f0:	00828d0e 	bge	zero,r2,6128 <_dtoa_r+0xcd4>
    56f4:	d9000517 	ldw	r4,20(sp)
    56f8:	d8000e15 	stw	zero,56(sp)
    56fc:	213fffc4 	addi	r4,r4,-1
    5700:	d9000515 	stw	r4,20(sp)
    5704:	b42dc83a 	sub	r22,r22,r16
    5708:	b5bfffc4 	addi	r22,r22,-1
    570c:	b0026f16 	blt	r22,zero,60cc <_dtoa_r+0xc78>
    5710:	d8000815 	stw	zero,32(sp)
    5714:	d9c00517 	ldw	r7,20(sp)
    5718:	38026416 	blt	r7,zero,60ac <_dtoa_r+0xc58>
    571c:	b1ed883a 	add	r22,r22,r7
    5720:	d9c00d15 	stw	r7,52(sp)
    5724:	d8000a15 	stw	zero,40(sp)
    5728:	d9800317 	ldw	r6,12(sp)
    572c:	00800244 	movi	r2,9
    5730:	11811436 	bltu	r2,r6,5b84 <_dtoa_r+0x730>
    5734:	00800144 	movi	r2,5
    5738:	1184e10e 	bge	r2,r6,6ac0 <_dtoa_r+0x166c>
    573c:	31bfff04 	addi	r6,r6,-4
    5740:	d9800315 	stw	r6,12(sp)
    5744:	0023883a 	mov	r17,zero
    5748:	d9800317 	ldw	r6,12(sp)
    574c:	008000c4 	movi	r2,3
    5750:	30836726 	beq	r6,r2,64f0 <_dtoa_r+0x109c>
    5754:	1183410e 	bge	r2,r6,645c <_dtoa_r+0x1008>
    5758:	d9c00317 	ldw	r7,12(sp)
    575c:	00800104 	movi	r2,4
    5760:	38827c26 	beq	r7,r2,6154 <_dtoa_r+0xd00>
    5764:	00800144 	movi	r2,5
    5768:	3884c41e 	bne	r7,r2,6a7c <_dtoa_r+0x1628>
    576c:	00800044 	movi	r2,1
    5770:	d8800b15 	stw	r2,44(sp)
    5774:	d8c00517 	ldw	r3,20(sp)
    5778:	d9002217 	ldw	r4,136(sp)
    577c:	1907883a 	add	r3,r3,r4
    5780:	19800044 	addi	r6,r3,1
    5784:	d8c00c15 	stw	r3,48(sp)
    5788:	d9800615 	stw	r6,24(sp)
    578c:	0183a40e 	bge	zero,r6,6620 <_dtoa_r+0x11cc>
    5790:	d9800617 	ldw	r6,24(sp)
    5794:	3021883a 	mov	r16,r6
    5798:	e0001115 	stw	zero,68(fp)
    579c:	008005c4 	movi	r2,23
    57a0:	1184c92e 	bgeu	r2,r6,6ac8 <_dtoa_r+0x1674>
    57a4:	00c00044 	movi	r3,1
    57a8:	00800104 	movi	r2,4
    57ac:	1085883a 	add	r2,r2,r2
    57b0:	11000504 	addi	r4,r2,20
    57b4:	180b883a 	mov	r5,r3
    57b8:	18c00044 	addi	r3,r3,1
    57bc:	313ffb2e 	bgeu	r6,r4,57ac <_dtoa_r+0x358>
    57c0:	e1401115 	stw	r5,68(fp)
    57c4:	e009883a 	mov	r4,fp
    57c8:	00082e40 	call	82e4 <_Balloc>
    57cc:	d8800715 	stw	r2,28(sp)
    57d0:	e0801015 	stw	r2,64(fp)
    57d4:	00800384 	movi	r2,14
    57d8:	1400f736 	bltu	r2,r16,5bb8 <_dtoa_r+0x764>
    57dc:	8800f626 	beq	r17,zero,5bb8 <_dtoa_r+0x764>
    57e0:	d9c00517 	ldw	r7,20(sp)
    57e4:	01c39a0e 	bge	zero,r7,6650 <_dtoa_r+0x11fc>
    57e8:	388003cc 	andi	r2,r7,15
    57ec:	100490fa 	slli	r2,r2,3
    57f0:	382bd13a 	srai	r21,r7,4
    57f4:	00c00074 	movhi	r3,1
    57f8:	18c73b04 	addi	r3,r3,7404
    57fc:	1885883a 	add	r2,r3,r2
    5800:	a8c0040c 	andi	r3,r21,16
    5804:	12400017 	ldw	r9,0(r2)
    5808:	12000117 	ldw	r8,4(r2)
    580c:	18037926 	beq	r3,zero,65f4 <_dtoa_r+0x11a0>
    5810:	00800074 	movhi	r2,1
    5814:	10873104 	addi	r2,r2,7364
    5818:	11800817 	ldw	r6,32(r2)
    581c:	11c00917 	ldw	r7,36(r2)
    5820:	9009883a 	mov	r4,r18
    5824:	980b883a 	mov	r5,r19
    5828:	da001715 	stw	r8,92(sp)
    582c:	da401615 	stw	r9,88(sp)
    5830:	000cf5c0 	call	cf5c <__divdf3>
    5834:	da001717 	ldw	r8,92(sp)
    5838:	da401617 	ldw	r9,88(sp)
    583c:	ad4003cc 	andi	r21,r21,15
    5840:	040000c4 	movi	r16,3
    5844:	1023883a 	mov	r17,r2
    5848:	1829883a 	mov	r20,r3
    584c:	a8001126 	beq	r21,zero,5894 <_dtoa_r+0x440>
    5850:	05c00074 	movhi	r23,1
    5854:	bdc73104 	addi	r23,r23,7364
    5858:	4805883a 	mov	r2,r9
    585c:	4007883a 	mov	r3,r8
    5860:	a980004c 	andi	r6,r21,1
    5864:	1009883a 	mov	r4,r2
    5868:	a82bd07a 	srai	r21,r21,1
    586c:	180b883a 	mov	r5,r3
    5870:	30000426 	beq	r6,zero,5884 <_dtoa_r+0x430>
    5874:	b9800017 	ldw	r6,0(r23)
    5878:	b9c00117 	ldw	r7,4(r23)
    587c:	84000044 	addi	r16,r16,1
    5880:	000da9c0 	call	da9c <__muldf3>
    5884:	bdc00204 	addi	r23,r23,8
    5888:	a83ff51e 	bne	r21,zero,5860 <_dtoa_r+0x40c>
    588c:	1013883a 	mov	r9,r2
    5890:	1811883a 	mov	r8,r3
    5894:	480d883a 	mov	r6,r9
    5898:	400f883a 	mov	r7,r8
    589c:	8809883a 	mov	r4,r17
    58a0:	a00b883a 	mov	r5,r20
    58a4:	000cf5c0 	call	cf5c <__divdf3>
    58a8:	d8800f15 	stw	r2,60(sp)
    58ac:	d8c01015 	stw	r3,64(sp)
    58b0:	d8c00e17 	ldw	r3,56(sp)
    58b4:	18000626 	beq	r3,zero,58d0 <_dtoa_r+0x47c>
    58b8:	d9000f17 	ldw	r4,60(sp)
    58bc:	d9401017 	ldw	r5,64(sp)
    58c0:	000d883a 	mov	r6,zero
    58c4:	01cffc34 	movhi	r7,16368
    58c8:	000d9a80 	call	d9a8 <__ledf2>
    58cc:	10040b16 	blt	r2,zero,68fc <_dtoa_r+0x14a8>
    58d0:	8009883a 	mov	r4,r16
    58d4:	000eb300 	call	eb30 <__floatsidf>
    58d8:	d9800f17 	ldw	r6,60(sp)
    58dc:	d9c01017 	ldw	r7,64(sp)
    58e0:	1009883a 	mov	r4,r2
    58e4:	180b883a 	mov	r5,r3
    58e8:	000da9c0 	call	da9c <__muldf3>
    58ec:	000d883a 	mov	r6,zero
    58f0:	01d00734 	movhi	r7,16412
    58f4:	1009883a 	mov	r4,r2
    58f8:	180b883a 	mov	r5,r3
    58fc:	000c6b00 	call	c6b0 <__adddf3>
    5900:	1021883a 	mov	r16,r2
    5904:	d8800617 	ldw	r2,24(sp)
    5908:	047f3034 	movhi	r17,64704
    590c:	1c63883a 	add	r17,r3,r17
    5910:	10031826 	beq	r2,zero,6574 <_dtoa_r+0x1120>
    5914:	d8c00517 	ldw	r3,20(sp)
    5918:	db000617 	ldw	r12,24(sp)
    591c:	d8c01315 	stw	r3,76(sp)
    5920:	d9000b17 	ldw	r4,44(sp)
    5924:	20038f26 	beq	r4,zero,6764 <_dtoa_r+0x1310>
    5928:	60bfffc4 	addi	r2,r12,-1
    592c:	100490fa 	slli	r2,r2,3
    5930:	00c00074 	movhi	r3,1
    5934:	18c73b04 	addi	r3,r3,7404
    5938:	1885883a 	add	r2,r3,r2
    593c:	11800017 	ldw	r6,0(r2)
    5940:	11c00117 	ldw	r7,4(r2)
    5944:	d8800717 	ldw	r2,28(sp)
    5948:	0009883a 	mov	r4,zero
    594c:	014ff834 	movhi	r5,16352
    5950:	db001615 	stw	r12,88(sp)
    5954:	15c00044 	addi	r23,r2,1
    5958:	000cf5c0 	call	cf5c <__divdf3>
    595c:	800d883a 	mov	r6,r16
    5960:	880f883a 	mov	r7,r17
    5964:	1009883a 	mov	r4,r2
    5968:	180b883a 	mov	r5,r3
    596c:	000e1b40 	call	e1b4 <__subdf3>
    5970:	d9401017 	ldw	r5,64(sp)
    5974:	d9000f17 	ldw	r4,60(sp)
    5978:	102b883a 	mov	r21,r2
    597c:	d8c01215 	stw	r3,72(sp)
    5980:	000eab00 	call	eab0 <__fixdfsi>
    5984:	1009883a 	mov	r4,r2
    5988:	1029883a 	mov	r20,r2
    598c:	000eb300 	call	eb30 <__floatsidf>
    5990:	d9000f17 	ldw	r4,60(sp)
    5994:	d9401017 	ldw	r5,64(sp)
    5998:	100d883a 	mov	r6,r2
    599c:	180f883a 	mov	r7,r3
    59a0:	000e1b40 	call	e1b4 <__subdf3>
    59a4:	1823883a 	mov	r17,r3
    59a8:	d8c00717 	ldw	r3,28(sp)
    59ac:	d9401217 	ldw	r5,72(sp)
    59b0:	a2000c04 	addi	r8,r20,48
    59b4:	1021883a 	mov	r16,r2
    59b8:	1a000005 	stb	r8,0(r3)
    59bc:	800d883a 	mov	r6,r16
    59c0:	880f883a 	mov	r7,r17
    59c4:	a809883a 	mov	r4,r21
    59c8:	4029883a 	mov	r20,r8
    59cc:	000d8cc0 	call	d8cc <__gedf2>
    59d0:	00841d16 	blt	zero,r2,6a48 <_dtoa_r+0x15f4>
    59d4:	800d883a 	mov	r6,r16
    59d8:	880f883a 	mov	r7,r17
    59dc:	0009883a 	mov	r4,zero
    59e0:	014ffc34 	movhi	r5,16368
    59e4:	000e1b40 	call	e1b4 <__subdf3>
    59e8:	d9401217 	ldw	r5,72(sp)
    59ec:	100d883a 	mov	r6,r2
    59f0:	180f883a 	mov	r7,r3
    59f4:	a809883a 	mov	r4,r21
    59f8:	000d8cc0 	call	d8cc <__gedf2>
    59fc:	db001617 	ldw	r12,88(sp)
    5a00:	00840e16 	blt	zero,r2,6a3c <_dtoa_r+0x15e8>
    5a04:	00800044 	movi	r2,1
    5a08:	13006b0e 	bge	r2,r12,5bb8 <_dtoa_r+0x764>
    5a0c:	d9000717 	ldw	r4,28(sp)
    5a10:	dd800f15 	stw	r22,60(sp)
    5a14:	dcc01015 	stw	r19,64(sp)
    5a18:	2319883a 	add	r12,r4,r12
    5a1c:	dcc01217 	ldw	r19,72(sp)
    5a20:	602d883a 	mov	r22,r12
    5a24:	dc801215 	stw	r18,72(sp)
    5a28:	b825883a 	mov	r18,r23
    5a2c:	00000906 	br	5a54 <_dtoa_r+0x600>
    5a30:	000e1b40 	call	e1b4 <__subdf3>
    5a34:	a80d883a 	mov	r6,r21
    5a38:	980f883a 	mov	r7,r19
    5a3c:	1009883a 	mov	r4,r2
    5a40:	180b883a 	mov	r5,r3
    5a44:	000d9a80 	call	d9a8 <__ledf2>
    5a48:	1003e816 	blt	r2,zero,69ec <_dtoa_r+0x1598>
    5a4c:	b825883a 	mov	r18,r23
    5a50:	bd83e926 	beq	r23,r22,69f8 <_dtoa_r+0x15a4>
    5a54:	a809883a 	mov	r4,r21
    5a58:	980b883a 	mov	r5,r19
    5a5c:	000d883a 	mov	r6,zero
    5a60:	01d00934 	movhi	r7,16420
    5a64:	000da9c0 	call	da9c <__muldf3>
    5a68:	000d883a 	mov	r6,zero
    5a6c:	01d00934 	movhi	r7,16420
    5a70:	8009883a 	mov	r4,r16
    5a74:	880b883a 	mov	r5,r17
    5a78:	102b883a 	mov	r21,r2
    5a7c:	1827883a 	mov	r19,r3
    5a80:	000da9c0 	call	da9c <__muldf3>
    5a84:	180b883a 	mov	r5,r3
    5a88:	1009883a 	mov	r4,r2
    5a8c:	1821883a 	mov	r16,r3
    5a90:	1023883a 	mov	r17,r2
    5a94:	000eab00 	call	eab0 <__fixdfsi>
    5a98:	1009883a 	mov	r4,r2
    5a9c:	1029883a 	mov	r20,r2
    5aa0:	000eb300 	call	eb30 <__floatsidf>
    5aa4:	8809883a 	mov	r4,r17
    5aa8:	800b883a 	mov	r5,r16
    5aac:	100d883a 	mov	r6,r2
    5ab0:	180f883a 	mov	r7,r3
    5ab4:	000e1b40 	call	e1b4 <__subdf3>
    5ab8:	a5000c04 	addi	r20,r20,48
    5abc:	a80d883a 	mov	r6,r21
    5ac0:	980f883a 	mov	r7,r19
    5ac4:	1009883a 	mov	r4,r2
    5ac8:	180b883a 	mov	r5,r3
    5acc:	95000005 	stb	r20,0(r18)
    5ad0:	1021883a 	mov	r16,r2
    5ad4:	1823883a 	mov	r17,r3
    5ad8:	000d9a80 	call	d9a8 <__ledf2>
    5adc:	bdc00044 	addi	r23,r23,1
    5ae0:	800d883a 	mov	r6,r16
    5ae4:	880f883a 	mov	r7,r17
    5ae8:	0009883a 	mov	r4,zero
    5aec:	014ffc34 	movhi	r5,16368
    5af0:	103fcf0e 	bge	r2,zero,5a30 <_dtoa_r+0x5dc>
    5af4:	d8c01317 	ldw	r3,76(sp)
    5af8:	d8c00515 	stw	r3,20(sp)
    5afc:	d9400917 	ldw	r5,36(sp)
    5b00:	e009883a 	mov	r4,fp
    5b04:	000838c0 	call	838c <_Bfree>
    5b08:	d9000517 	ldw	r4,20(sp)
    5b0c:	d9802317 	ldw	r6,140(sp)
    5b10:	d9c02517 	ldw	r7,148(sp)
    5b14:	b8000005 	stb	zero,0(r23)
    5b18:	20800044 	addi	r2,r4,1
    5b1c:	30800015 	stw	r2,0(r6)
    5b20:	3802aa26 	beq	r7,zero,65cc <_dtoa_r+0x1178>
    5b24:	3dc00015 	stw	r23,0(r7)
    5b28:	d8800717 	ldw	r2,28(sp)
    5b2c:	003e7906 	br	5514 <_dtoa_r+0xc0>
    5b30:	00800434 	movhi	r2,16
    5b34:	10bfffc4 	addi	r2,r2,-1
    5b38:	88a2703a 	and	r17,r17,r2
    5b3c:	883e851e 	bne	r17,zero,5554 <_dtoa_r+0x100>
    5b40:	00800074 	movhi	r2,1
    5b44:	10871c04 	addi	r2,r2,7280
    5b48:	003e8406 	br	555c <_dtoa_r+0x108>
    5b4c:	10c00204 	addi	r3,r2,8
    5b50:	003e8706 	br	5570 <_dtoa_r+0x11c>
    5b54:	01400434 	movhi	r5,16
    5b58:	297fffc4 	addi	r5,r5,-1
    5b5c:	994a703a 	and	r5,r19,r5
    5b60:	9009883a 	mov	r4,r18
    5b64:	843f0044 	addi	r16,r16,-1023
    5b68:	294ffc34 	orhi	r5,r5,16368
    5b6c:	dd800217 	ldw	r22,8(sp)
    5b70:	d8001115 	stw	zero,68(sp)
    5b74:	003ea506 	br	560c <_dtoa_r+0x1b8>
    5b78:	00800074 	movhi	r2,1
    5b7c:	10871304 	addi	r2,r2,7244
    5b80:	003e6406 	br	5514 <_dtoa_r+0xc0>
    5b84:	e0001115 	stw	zero,68(fp)
    5b88:	000b883a 	mov	r5,zero
    5b8c:	e009883a 	mov	r4,fp
    5b90:	00082e40 	call	82e4 <_Balloc>
    5b94:	01bfffc4 	movi	r6,-1
    5b98:	01c00044 	movi	r7,1
    5b9c:	d8800715 	stw	r2,28(sp)
    5ba0:	d9800c15 	stw	r6,48(sp)
    5ba4:	e0801015 	stw	r2,64(fp)
    5ba8:	d8000315 	stw	zero,12(sp)
    5bac:	d9c00b15 	stw	r7,44(sp)
    5bb0:	d9800615 	stw	r6,24(sp)
    5bb4:	d8002215 	stw	zero,136(sp)
    5bb8:	d8800117 	ldw	r2,4(sp)
    5bbc:	10008916 	blt	r2,zero,5de4 <_dtoa_r+0x990>
    5bc0:	d9000517 	ldw	r4,20(sp)
    5bc4:	00c00384 	movi	r3,14
    5bc8:	19008616 	blt	r3,r4,5de4 <_dtoa_r+0x990>
    5bcc:	200490fa 	slli	r2,r4,3
    5bd0:	00c00074 	movhi	r3,1
    5bd4:	d9802217 	ldw	r6,136(sp)
    5bd8:	18c73b04 	addi	r3,r3,7404
    5bdc:	1885883a 	add	r2,r3,r2
    5be0:	14000017 	ldw	r16,0(r2)
    5be4:	14400117 	ldw	r17,4(r2)
    5be8:	30016316 	blt	r6,zero,6178 <_dtoa_r+0xd24>
    5bec:	800d883a 	mov	r6,r16
    5bf0:	880f883a 	mov	r7,r17
    5bf4:	9009883a 	mov	r4,r18
    5bf8:	980b883a 	mov	r5,r19
    5bfc:	000cf5c0 	call	cf5c <__divdf3>
    5c00:	180b883a 	mov	r5,r3
    5c04:	1009883a 	mov	r4,r2
    5c08:	000eab00 	call	eab0 <__fixdfsi>
    5c0c:	1009883a 	mov	r4,r2
    5c10:	102b883a 	mov	r21,r2
    5c14:	000eb300 	call	eb30 <__floatsidf>
    5c18:	800d883a 	mov	r6,r16
    5c1c:	880f883a 	mov	r7,r17
    5c20:	1009883a 	mov	r4,r2
    5c24:	180b883a 	mov	r5,r3
    5c28:	000da9c0 	call	da9c <__muldf3>
    5c2c:	100d883a 	mov	r6,r2
    5c30:	180f883a 	mov	r7,r3
    5c34:	9009883a 	mov	r4,r18
    5c38:	980b883a 	mov	r5,r19
    5c3c:	000e1b40 	call	e1b4 <__subdf3>
    5c40:	d9c00717 	ldw	r7,28(sp)
    5c44:	1009883a 	mov	r4,r2
    5c48:	a8800c04 	addi	r2,r21,48
    5c4c:	38800005 	stb	r2,0(r7)
    5c50:	3dc00044 	addi	r23,r7,1
    5c54:	d9c00617 	ldw	r7,24(sp)
    5c58:	01800044 	movi	r6,1
    5c5c:	180b883a 	mov	r5,r3
    5c60:	2005883a 	mov	r2,r4
    5c64:	39803826 	beq	r7,r6,5d48 <_dtoa_r+0x8f4>
    5c68:	000d883a 	mov	r6,zero
    5c6c:	01d00934 	movhi	r7,16420
    5c70:	000da9c0 	call	da9c <__muldf3>
    5c74:	000d883a 	mov	r6,zero
    5c78:	000f883a 	mov	r7,zero
    5c7c:	1009883a 	mov	r4,r2
    5c80:	180b883a 	mov	r5,r3
    5c84:	1025883a 	mov	r18,r2
    5c88:	1827883a 	mov	r19,r3
    5c8c:	000d8440 	call	d844 <__eqdf2>
    5c90:	103f9a26 	beq	r2,zero,5afc <_dtoa_r+0x6a8>
    5c94:	d9c00617 	ldw	r7,24(sp)
    5c98:	d8c00717 	ldw	r3,28(sp)
    5c9c:	b829883a 	mov	r20,r23
    5ca0:	38bfffc4 	addi	r2,r7,-1
    5ca4:	18ad883a 	add	r22,r3,r2
    5ca8:	00000a06 	br	5cd4 <_dtoa_r+0x880>
    5cac:	000da9c0 	call	da9c <__muldf3>
    5cb0:	000d883a 	mov	r6,zero
    5cb4:	000f883a 	mov	r7,zero
    5cb8:	1009883a 	mov	r4,r2
    5cbc:	180b883a 	mov	r5,r3
    5cc0:	1025883a 	mov	r18,r2
    5cc4:	1827883a 	mov	r19,r3
    5cc8:	b829883a 	mov	r20,r23
    5ccc:	000d8440 	call	d844 <__eqdf2>
    5cd0:	103f8a26 	beq	r2,zero,5afc <_dtoa_r+0x6a8>
    5cd4:	800d883a 	mov	r6,r16
    5cd8:	880f883a 	mov	r7,r17
    5cdc:	9009883a 	mov	r4,r18
    5ce0:	980b883a 	mov	r5,r19
    5ce4:	000cf5c0 	call	cf5c <__divdf3>
    5ce8:	180b883a 	mov	r5,r3
    5cec:	1009883a 	mov	r4,r2
    5cf0:	000eab00 	call	eab0 <__fixdfsi>
    5cf4:	1009883a 	mov	r4,r2
    5cf8:	102b883a 	mov	r21,r2
    5cfc:	000eb300 	call	eb30 <__floatsidf>
    5d00:	800d883a 	mov	r6,r16
    5d04:	880f883a 	mov	r7,r17
    5d08:	1009883a 	mov	r4,r2
    5d0c:	180b883a 	mov	r5,r3
    5d10:	000da9c0 	call	da9c <__muldf3>
    5d14:	100d883a 	mov	r6,r2
    5d18:	180f883a 	mov	r7,r3
    5d1c:	9009883a 	mov	r4,r18
    5d20:	980b883a 	mov	r5,r19
    5d24:	000e1b40 	call	e1b4 <__subdf3>
    5d28:	aa000c04 	addi	r8,r21,48
    5d2c:	a2000005 	stb	r8,0(r20)
    5d30:	000d883a 	mov	r6,zero
    5d34:	01d00934 	movhi	r7,16420
    5d38:	1009883a 	mov	r4,r2
    5d3c:	180b883a 	mov	r5,r3
    5d40:	a5c00044 	addi	r23,r20,1
    5d44:	b53fd91e 	bne	r22,r20,5cac <_dtoa_r+0x858>
    5d48:	100d883a 	mov	r6,r2
    5d4c:	180f883a 	mov	r7,r3
    5d50:	1009883a 	mov	r4,r2
    5d54:	180b883a 	mov	r5,r3
    5d58:	000c6b00 	call	c6b0 <__adddf3>
    5d5c:	100d883a 	mov	r6,r2
    5d60:	180f883a 	mov	r7,r3
    5d64:	8009883a 	mov	r4,r16
    5d68:	880b883a 	mov	r5,r17
    5d6c:	1027883a 	mov	r19,r2
    5d70:	1825883a 	mov	r18,r3
    5d74:	000d9a80 	call	d9a8 <__ledf2>
    5d78:	10000816 	blt	r2,zero,5d9c <_dtoa_r+0x948>
    5d7c:	980d883a 	mov	r6,r19
    5d80:	900f883a 	mov	r7,r18
    5d84:	8009883a 	mov	r4,r16
    5d88:	880b883a 	mov	r5,r17
    5d8c:	000d8440 	call	d844 <__eqdf2>
    5d90:	103f5a1e 	bne	r2,zero,5afc <_dtoa_r+0x6a8>
    5d94:	ad40004c 	andi	r21,r21,1
    5d98:	a83f5826 	beq	r21,zero,5afc <_dtoa_r+0x6a8>
    5d9c:	bd3fffc3 	ldbu	r20,-1(r23)
    5da0:	b8bfffc4 	addi	r2,r23,-1
    5da4:	1007883a 	mov	r3,r2
    5da8:	01400e44 	movi	r5,57
    5dac:	d9800717 	ldw	r6,28(sp)
    5db0:	00000506 	br	5dc8 <_dtoa_r+0x974>
    5db4:	18ffffc4 	addi	r3,r3,-1
    5db8:	11824726 	beq	r2,r6,66d8 <_dtoa_r+0x1284>
    5dbc:	1d000003 	ldbu	r20,0(r3)
    5dc0:	102f883a 	mov	r23,r2
    5dc4:	10bfffc4 	addi	r2,r2,-1
    5dc8:	a1003fcc 	andi	r4,r20,255
    5dcc:	2100201c 	xori	r4,r4,128
    5dd0:	213fe004 	addi	r4,r4,-128
    5dd4:	217ff726 	beq	r4,r5,5db4 <_dtoa_r+0x960>
    5dd8:	a2000044 	addi	r8,r20,1
    5ddc:	12000005 	stb	r8,0(r2)
    5de0:	003f4606 	br	5afc <_dtoa_r+0x6a8>
    5de4:	d9000b17 	ldw	r4,44(sp)
    5de8:	2000c826 	beq	r4,zero,610c <_dtoa_r+0xcb8>
    5dec:	d9800317 	ldw	r6,12(sp)
    5df0:	00c00044 	movi	r3,1
    5df4:	1980f90e 	bge	r3,r6,61dc <_dtoa_r+0xd88>
    5df8:	d8800617 	ldw	r2,24(sp)
    5dfc:	d8c00a17 	ldw	r3,40(sp)
    5e00:	157fffc4 	addi	r21,r2,-1
    5e04:	1d41f316 	blt	r3,r21,65d4 <_dtoa_r+0x1180>
    5e08:	1d6bc83a 	sub	r21,r3,r21
    5e0c:	d9c00617 	ldw	r7,24(sp)
    5e10:	3802aa16 	blt	r7,zero,68bc <_dtoa_r+0x1468>
    5e14:	dd000817 	ldw	r20,32(sp)
    5e18:	d8800617 	ldw	r2,24(sp)
    5e1c:	d8c00817 	ldw	r3,32(sp)
    5e20:	01400044 	movi	r5,1
    5e24:	e009883a 	mov	r4,fp
    5e28:	1887883a 	add	r3,r3,r2
    5e2c:	d8c00815 	stw	r3,32(sp)
    5e30:	b0ad883a 	add	r22,r22,r2
    5e34:	00086f00 	call	86f0 <__i2b>
    5e38:	1023883a 	mov	r17,r2
    5e3c:	a0000826 	beq	r20,zero,5e60 <_dtoa_r+0xa0c>
    5e40:	0580070e 	bge	zero,r22,5e60 <_dtoa_r+0xa0c>
    5e44:	a005883a 	mov	r2,r20
    5e48:	b500b916 	blt	r22,r20,6130 <_dtoa_r+0xcdc>
    5e4c:	d9000817 	ldw	r4,32(sp)
    5e50:	a0a9c83a 	sub	r20,r20,r2
    5e54:	b0adc83a 	sub	r22,r22,r2
    5e58:	2089c83a 	sub	r4,r4,r2
    5e5c:	d9000815 	stw	r4,32(sp)
    5e60:	d9800a17 	ldw	r6,40(sp)
    5e64:	0181810e 	bge	zero,r6,646c <_dtoa_r+0x1018>
    5e68:	d9c00b17 	ldw	r7,44(sp)
    5e6c:	3800b326 	beq	r7,zero,613c <_dtoa_r+0xce8>
    5e70:	a800b226 	beq	r21,zero,613c <_dtoa_r+0xce8>
    5e74:	880b883a 	mov	r5,r17
    5e78:	a80d883a 	mov	r6,r21
    5e7c:	e009883a 	mov	r4,fp
    5e80:	00089240 	call	8924 <__pow5mult>
    5e84:	d9800917 	ldw	r6,36(sp)
    5e88:	100b883a 	mov	r5,r2
    5e8c:	e009883a 	mov	r4,fp
    5e90:	1023883a 	mov	r17,r2
    5e94:	000872c0 	call	872c <__multiply>
    5e98:	1021883a 	mov	r16,r2
    5e9c:	d8800a17 	ldw	r2,40(sp)
    5ea0:	d9400917 	ldw	r5,36(sp)
    5ea4:	e009883a 	mov	r4,fp
    5ea8:	1545c83a 	sub	r2,r2,r21
    5eac:	d8800a15 	stw	r2,40(sp)
    5eb0:	000838c0 	call	838c <_Bfree>
    5eb4:	d8c00a17 	ldw	r3,40(sp)
    5eb8:	18009f1e 	bne	r3,zero,6138 <_dtoa_r+0xce4>
    5ebc:	05c00044 	movi	r23,1
    5ec0:	e009883a 	mov	r4,fp
    5ec4:	b80b883a 	mov	r5,r23
    5ec8:	00086f00 	call	86f0 <__i2b>
    5ecc:	d9000d17 	ldw	r4,52(sp)
    5ed0:	102b883a 	mov	r21,r2
    5ed4:	2000ce26 	beq	r4,zero,6210 <_dtoa_r+0xdbc>
    5ed8:	200d883a 	mov	r6,r4
    5edc:	100b883a 	mov	r5,r2
    5ee0:	e009883a 	mov	r4,fp
    5ee4:	00089240 	call	8924 <__pow5mult>
    5ee8:	d9800317 	ldw	r6,12(sp)
    5eec:	102b883a 	mov	r21,r2
    5ef0:	b981810e 	bge	r23,r6,64f8 <_dtoa_r+0x10a4>
    5ef4:	0027883a 	mov	r19,zero
    5ef8:	a8800417 	ldw	r2,16(r21)
    5efc:	05c00804 	movi	r23,32
    5f00:	10800104 	addi	r2,r2,4
    5f04:	1085883a 	add	r2,r2,r2
    5f08:	1085883a 	add	r2,r2,r2
    5f0c:	a885883a 	add	r2,r21,r2
    5f10:	11000017 	ldw	r4,0(r2)
    5f14:	00085d80 	call	85d8 <__hi0bits>
    5f18:	b885c83a 	sub	r2,r23,r2
    5f1c:	1585883a 	add	r2,r2,r22
    5f20:	108007cc 	andi	r2,r2,31
    5f24:	1000b326 	beq	r2,zero,61f4 <_dtoa_r+0xda0>
    5f28:	00c00804 	movi	r3,32
    5f2c:	1887c83a 	sub	r3,r3,r2
    5f30:	01000104 	movi	r4,4
    5f34:	20c2cd0e 	bge	r4,r3,6a6c <_dtoa_r+0x1618>
    5f38:	00c00704 	movi	r3,28
    5f3c:	1885c83a 	sub	r2,r3,r2
    5f40:	d8c00817 	ldw	r3,32(sp)
    5f44:	a0a9883a 	add	r20,r20,r2
    5f48:	b0ad883a 	add	r22,r22,r2
    5f4c:	1887883a 	add	r3,r3,r2
    5f50:	d8c00815 	stw	r3,32(sp)
    5f54:	d9800817 	ldw	r6,32(sp)
    5f58:	0180040e 	bge	zero,r6,5f6c <_dtoa_r+0xb18>
    5f5c:	800b883a 	mov	r5,r16
    5f60:	e009883a 	mov	r4,fp
    5f64:	0008a640 	call	8a64 <__lshift>
    5f68:	1021883a 	mov	r16,r2
    5f6c:	0580050e 	bge	zero,r22,5f84 <_dtoa_r+0xb30>
    5f70:	a80b883a 	mov	r5,r21
    5f74:	b00d883a 	mov	r6,r22
    5f78:	e009883a 	mov	r4,fp
    5f7c:	0008a640 	call	8a64 <__lshift>
    5f80:	102b883a 	mov	r21,r2
    5f84:	d9c00e17 	ldw	r7,56(sp)
    5f88:	3801211e 	bne	r7,zero,6410 <_dtoa_r+0xfbc>
    5f8c:	d9800617 	ldw	r6,24(sp)
    5f90:	0181380e 	bge	zero,r6,6474 <_dtoa_r+0x1020>
    5f94:	d8c00b17 	ldw	r3,44(sp)
    5f98:	1800ab1e 	bne	r3,zero,6248 <_dtoa_r+0xdf4>
    5f9c:	dc800717 	ldw	r18,28(sp)
    5fa0:	dcc00617 	ldw	r19,24(sp)
    5fa4:	9029883a 	mov	r20,r18
    5fa8:	00000206 	br	5fb4 <_dtoa_r+0xb60>
    5fac:	00083b40 	call	83b4 <__multadd>
    5fb0:	1021883a 	mov	r16,r2
    5fb4:	a80b883a 	mov	r5,r21
    5fb8:	8009883a 	mov	r4,r16
    5fbc:	00052540 	call	5254 <quorem>
    5fc0:	10800c04 	addi	r2,r2,48
    5fc4:	90800005 	stb	r2,0(r18)
    5fc8:	94800044 	addi	r18,r18,1
    5fcc:	9507c83a 	sub	r3,r18,r20
    5fd0:	000f883a 	mov	r7,zero
    5fd4:	01800284 	movi	r6,10
    5fd8:	800b883a 	mov	r5,r16
    5fdc:	e009883a 	mov	r4,fp
    5fe0:	1cfff216 	blt	r3,r19,5fac <_dtoa_r+0xb58>
    5fe4:	1011883a 	mov	r8,r2
    5fe8:	d8800617 	ldw	r2,24(sp)
    5fec:	0082370e 	bge	zero,r2,68cc <_dtoa_r+0x1478>
    5ff0:	d9000717 	ldw	r4,28(sp)
    5ff4:	0025883a 	mov	r18,zero
    5ff8:	20af883a 	add	r23,r4,r2
    5ffc:	01800044 	movi	r6,1
    6000:	800b883a 	mov	r5,r16
    6004:	e009883a 	mov	r4,fp
    6008:	da001715 	stw	r8,92(sp)
    600c:	0008a640 	call	8a64 <__lshift>
    6010:	a80b883a 	mov	r5,r21
    6014:	1009883a 	mov	r4,r2
    6018:	d8800915 	stw	r2,36(sp)
    601c:	0008bac0 	call	8bac <__mcmp>
    6020:	da001717 	ldw	r8,92(sp)
    6024:	0081800e 	bge	zero,r2,6628 <_dtoa_r+0x11d4>
    6028:	b93fffc3 	ldbu	r4,-1(r23)
    602c:	b8bfffc4 	addi	r2,r23,-1
    6030:	1007883a 	mov	r3,r2
    6034:	01800e44 	movi	r6,57
    6038:	d9c00717 	ldw	r7,28(sp)
    603c:	00000506 	br	6054 <_dtoa_r+0xc00>
    6040:	18ffffc4 	addi	r3,r3,-1
    6044:	11c12326 	beq	r2,r7,64d4 <_dtoa_r+0x1080>
    6048:	19000003 	ldbu	r4,0(r3)
    604c:	102f883a 	mov	r23,r2
    6050:	10bfffc4 	addi	r2,r2,-1
    6054:	21403fcc 	andi	r5,r4,255
    6058:	2940201c 	xori	r5,r5,128
    605c:	297fe004 	addi	r5,r5,-128
    6060:	29bff726 	beq	r5,r6,6040 <_dtoa_r+0xbec>
    6064:	21000044 	addi	r4,r4,1
    6068:	11000005 	stb	r4,0(r2)
    606c:	a80b883a 	mov	r5,r21
    6070:	e009883a 	mov	r4,fp
    6074:	000838c0 	call	838c <_Bfree>
    6078:	883ea026 	beq	r17,zero,5afc <_dtoa_r+0x6a8>
    607c:	90000426 	beq	r18,zero,6090 <_dtoa_r+0xc3c>
    6080:	94400326 	beq	r18,r17,6090 <_dtoa_r+0xc3c>
    6084:	900b883a 	mov	r5,r18
    6088:	e009883a 	mov	r4,fp
    608c:	000838c0 	call	838c <_Bfree>
    6090:	880b883a 	mov	r5,r17
    6094:	e009883a 	mov	r4,fp
    6098:	000838c0 	call	838c <_Bfree>
    609c:	003e9706 	br	5afc <_dtoa_r+0x6a8>
    60a0:	01800044 	movi	r6,1
    60a4:	d9800e15 	stw	r6,56(sp)
    60a8:	003d9606 	br	5704 <_dtoa_r+0x2b0>
    60ac:	d8800817 	ldw	r2,32(sp)
    60b0:	d8c00517 	ldw	r3,20(sp)
    60b4:	d8000d15 	stw	zero,52(sp)
    60b8:	10c5c83a 	sub	r2,r2,r3
    60bc:	00c9c83a 	sub	r4,zero,r3
    60c0:	d8800815 	stw	r2,32(sp)
    60c4:	d9000a15 	stw	r4,40(sp)
    60c8:	003d9706 	br	5728 <_dtoa_r+0x2d4>
    60cc:	05adc83a 	sub	r22,zero,r22
    60d0:	dd800815 	stw	r22,32(sp)
    60d4:	002d883a 	mov	r22,zero
    60d8:	003d8e06 	br	5714 <_dtoa_r+0x2c0>
    60dc:	d9000517 	ldw	r4,20(sp)
    60e0:	000eb300 	call	eb30 <__floatsidf>
    60e4:	100d883a 	mov	r6,r2
    60e8:	180f883a 	mov	r7,r3
    60ec:	a009883a 	mov	r4,r20
    60f0:	880b883a 	mov	r5,r17
    60f4:	000d8440 	call	d844 <__eqdf2>
    60f8:	103d7126 	beq	r2,zero,56c0 <_dtoa_r+0x26c>
    60fc:	d9c00517 	ldw	r7,20(sp)
    6100:	39ffffc4 	addi	r7,r7,-1
    6104:	d9c00515 	stw	r7,20(sp)
    6108:	003d6d06 	br	56c0 <_dtoa_r+0x26c>
    610c:	dd400a17 	ldw	r21,40(sp)
    6110:	dd000817 	ldw	r20,32(sp)
    6114:	0023883a 	mov	r17,zero
    6118:	003f4806 	br	5e3c <_dtoa_r+0x9e8>
    611c:	10e3c83a 	sub	r17,r2,r3
    6120:	9448983a 	sll	r4,r18,r17
    6124:	003d3206 	br	55f0 <_dtoa_r+0x19c>
    6128:	d8000e15 	stw	zero,56(sp)
    612c:	003d7506 	br	5704 <_dtoa_r+0x2b0>
    6130:	b005883a 	mov	r2,r22
    6134:	003f4506 	br	5e4c <_dtoa_r+0x9f8>
    6138:	dc000915 	stw	r16,36(sp)
    613c:	d9800a17 	ldw	r6,40(sp)
    6140:	d9400917 	ldw	r5,36(sp)
    6144:	e009883a 	mov	r4,fp
    6148:	00089240 	call	8924 <__pow5mult>
    614c:	1021883a 	mov	r16,r2
    6150:	003f5a06 	br	5ebc <_dtoa_r+0xa68>
    6154:	01c00044 	movi	r7,1
    6158:	d9c00b15 	stw	r7,44(sp)
    615c:	d8802217 	ldw	r2,136(sp)
    6160:	0081280e 	bge	zero,r2,6604 <_dtoa_r+0x11b0>
    6164:	100d883a 	mov	r6,r2
    6168:	1021883a 	mov	r16,r2
    616c:	d8800c15 	stw	r2,48(sp)
    6170:	d8800615 	stw	r2,24(sp)
    6174:	003d8806 	br	5798 <_dtoa_r+0x344>
    6178:	d8800617 	ldw	r2,24(sp)
    617c:	00be9b16 	blt	zero,r2,5bec <_dtoa_r+0x798>
    6180:	10010f1e 	bne	r2,zero,65c0 <_dtoa_r+0x116c>
    6184:	880b883a 	mov	r5,r17
    6188:	000d883a 	mov	r6,zero
    618c:	01d00534 	movhi	r7,16404
    6190:	8009883a 	mov	r4,r16
    6194:	000da9c0 	call	da9c <__muldf3>
    6198:	900d883a 	mov	r6,r18
    619c:	980f883a 	mov	r7,r19
    61a0:	1009883a 	mov	r4,r2
    61a4:	180b883a 	mov	r5,r3
    61a8:	000d8cc0 	call	d8cc <__gedf2>
    61ac:	002b883a 	mov	r21,zero
    61b0:	0023883a 	mov	r17,zero
    61b4:	1000bf16 	blt	r2,zero,64b4 <_dtoa_r+0x1060>
    61b8:	d9802217 	ldw	r6,136(sp)
    61bc:	ddc00717 	ldw	r23,28(sp)
    61c0:	018c303a 	nor	r6,zero,r6
    61c4:	d9800515 	stw	r6,20(sp)
    61c8:	a80b883a 	mov	r5,r21
    61cc:	e009883a 	mov	r4,fp
    61d0:	000838c0 	call	838c <_Bfree>
    61d4:	883e4926 	beq	r17,zero,5afc <_dtoa_r+0x6a8>
    61d8:	003fad06 	br	6090 <_dtoa_r+0xc3c>
    61dc:	d9c01117 	ldw	r7,68(sp)
    61e0:	3801bc26 	beq	r7,zero,68d4 <_dtoa_r+0x1480>
    61e4:	10810cc4 	addi	r2,r2,1075
    61e8:	dd400a17 	ldw	r21,40(sp)
    61ec:	dd000817 	ldw	r20,32(sp)
    61f0:	003f0a06 	br	5e1c <_dtoa_r+0x9c8>
    61f4:	00800704 	movi	r2,28
    61f8:	d9000817 	ldw	r4,32(sp)
    61fc:	a0a9883a 	add	r20,r20,r2
    6200:	b0ad883a 	add	r22,r22,r2
    6204:	2089883a 	add	r4,r4,r2
    6208:	d9000815 	stw	r4,32(sp)
    620c:	003f5106 	br	5f54 <_dtoa_r+0xb00>
    6210:	d8c00317 	ldw	r3,12(sp)
    6214:	b8c1fc0e 	bge	r23,r3,6a08 <_dtoa_r+0x15b4>
    6218:	0027883a 	mov	r19,zero
    621c:	b805883a 	mov	r2,r23
    6220:	003f3e06 	br	5f1c <_dtoa_r+0xac8>
    6224:	880b883a 	mov	r5,r17
    6228:	e009883a 	mov	r4,fp
    622c:	000f883a 	mov	r7,zero
    6230:	01800284 	movi	r6,10
    6234:	00083b40 	call	83b4 <__multadd>
    6238:	d9000c17 	ldw	r4,48(sp)
    623c:	1023883a 	mov	r17,r2
    6240:	0102040e 	bge	zero,r4,6a54 <_dtoa_r+0x1600>
    6244:	d9000615 	stw	r4,24(sp)
    6248:	0500050e 	bge	zero,r20,6260 <_dtoa_r+0xe0c>
    624c:	880b883a 	mov	r5,r17
    6250:	a00d883a 	mov	r6,r20
    6254:	e009883a 	mov	r4,fp
    6258:	0008a640 	call	8a64 <__lshift>
    625c:	1023883a 	mov	r17,r2
    6260:	9801241e 	bne	r19,zero,66f4 <_dtoa_r+0x12a0>
    6264:	8829883a 	mov	r20,r17
    6268:	d9000617 	ldw	r4,24(sp)
    626c:	dcc00717 	ldw	r19,28(sp)
    6270:	9480004c 	andi	r18,r18,1
    6274:	20bfffc4 	addi	r2,r4,-1
    6278:	9885883a 	add	r2,r19,r2
    627c:	d8800415 	stw	r2,16(sp)
    6280:	dc800615 	stw	r18,24(sp)
    6284:	a80b883a 	mov	r5,r21
    6288:	8009883a 	mov	r4,r16
    628c:	00052540 	call	5254 <quorem>
    6290:	880b883a 	mov	r5,r17
    6294:	8009883a 	mov	r4,r16
    6298:	102f883a 	mov	r23,r2
    629c:	0008bac0 	call	8bac <__mcmp>
    62a0:	a80b883a 	mov	r5,r21
    62a4:	a00d883a 	mov	r6,r20
    62a8:	e009883a 	mov	r4,fp
    62ac:	102d883a 	mov	r22,r2
    62b0:	0008c0c0 	call	8c0c <__mdiff>
    62b4:	1007883a 	mov	r3,r2
    62b8:	10800317 	ldw	r2,12(r2)
    62bc:	bc800c04 	addi	r18,r23,48
    62c0:	180b883a 	mov	r5,r3
    62c4:	10004e1e 	bne	r2,zero,6400 <_dtoa_r+0xfac>
    62c8:	8009883a 	mov	r4,r16
    62cc:	d8c01615 	stw	r3,88(sp)
    62d0:	0008bac0 	call	8bac <__mcmp>
    62d4:	d8c01617 	ldw	r3,88(sp)
    62d8:	e009883a 	mov	r4,fp
    62dc:	d8801615 	stw	r2,88(sp)
    62e0:	180b883a 	mov	r5,r3
    62e4:	000838c0 	call	838c <_Bfree>
    62e8:	d8801617 	ldw	r2,88(sp)
    62ec:	1000041e 	bne	r2,zero,6300 <_dtoa_r+0xeac>
    62f0:	d9800317 	ldw	r6,12(sp)
    62f4:	3000021e 	bne	r6,zero,6300 <_dtoa_r+0xeac>
    62f8:	d8c00617 	ldw	r3,24(sp)
    62fc:	18003726 	beq	r3,zero,63dc <_dtoa_r+0xf88>
    6300:	b0002016 	blt	r22,zero,6384 <_dtoa_r+0xf30>
    6304:	b000041e 	bne	r22,zero,6318 <_dtoa_r+0xec4>
    6308:	d9000317 	ldw	r4,12(sp)
    630c:	2000021e 	bne	r4,zero,6318 <_dtoa_r+0xec4>
    6310:	d8c00617 	ldw	r3,24(sp)
    6314:	18001b26 	beq	r3,zero,6384 <_dtoa_r+0xf30>
    6318:	00810716 	blt	zero,r2,6738 <_dtoa_r+0x12e4>
    631c:	d8c00417 	ldw	r3,16(sp)
    6320:	9d800044 	addi	r22,r19,1
    6324:	9c800005 	stb	r18,0(r19)
    6328:	b02f883a 	mov	r23,r22
    632c:	98c10626 	beq	r19,r3,6748 <_dtoa_r+0x12f4>
    6330:	800b883a 	mov	r5,r16
    6334:	000f883a 	mov	r7,zero
    6338:	01800284 	movi	r6,10
    633c:	e009883a 	mov	r4,fp
    6340:	00083b40 	call	83b4 <__multadd>
    6344:	1021883a 	mov	r16,r2
    6348:	000f883a 	mov	r7,zero
    634c:	01800284 	movi	r6,10
    6350:	880b883a 	mov	r5,r17
    6354:	e009883a 	mov	r4,fp
    6358:	8d002526 	beq	r17,r20,63f0 <_dtoa_r+0xf9c>
    635c:	00083b40 	call	83b4 <__multadd>
    6360:	a00b883a 	mov	r5,r20
    6364:	000f883a 	mov	r7,zero
    6368:	01800284 	movi	r6,10
    636c:	e009883a 	mov	r4,fp
    6370:	1023883a 	mov	r17,r2
    6374:	00083b40 	call	83b4 <__multadd>
    6378:	1029883a 	mov	r20,r2
    637c:	b027883a 	mov	r19,r22
    6380:	003fc006 	br	6284 <_dtoa_r+0xe30>
    6384:	9011883a 	mov	r8,r18
    6388:	00800e0e 	bge	zero,r2,63c4 <_dtoa_r+0xf70>
    638c:	800b883a 	mov	r5,r16
    6390:	01800044 	movi	r6,1
    6394:	e009883a 	mov	r4,fp
    6398:	da001715 	stw	r8,92(sp)
    639c:	0008a640 	call	8a64 <__lshift>
    63a0:	a80b883a 	mov	r5,r21
    63a4:	1009883a 	mov	r4,r2
    63a8:	1021883a 	mov	r16,r2
    63ac:	0008bac0 	call	8bac <__mcmp>
    63b0:	da001717 	ldw	r8,92(sp)
    63b4:	0081960e 	bge	zero,r2,6a10 <_dtoa_r+0x15bc>
    63b8:	00800e44 	movi	r2,57
    63bc:	40817026 	beq	r8,r2,6980 <_dtoa_r+0x152c>
    63c0:	ba000c44 	addi	r8,r23,49
    63c4:	8825883a 	mov	r18,r17
    63c8:	9dc00044 	addi	r23,r19,1
    63cc:	9a000005 	stb	r8,0(r19)
    63d0:	a023883a 	mov	r17,r20
    63d4:	dc000915 	stw	r16,36(sp)
    63d8:	003f2406 	br	606c <_dtoa_r+0xc18>
    63dc:	00800e44 	movi	r2,57
    63e0:	9011883a 	mov	r8,r18
    63e4:	90816626 	beq	r18,r2,6980 <_dtoa_r+0x152c>
    63e8:	05bff516 	blt	zero,r22,63c0 <_dtoa_r+0xf6c>
    63ec:	003ff506 	br	63c4 <_dtoa_r+0xf70>
    63f0:	00083b40 	call	83b4 <__multadd>
    63f4:	1023883a 	mov	r17,r2
    63f8:	1029883a 	mov	r20,r2
    63fc:	003fdf06 	br	637c <_dtoa_r+0xf28>
    6400:	e009883a 	mov	r4,fp
    6404:	000838c0 	call	838c <_Bfree>
    6408:	00800044 	movi	r2,1
    640c:	003fbc06 	br	6300 <_dtoa_r+0xeac>
    6410:	a80b883a 	mov	r5,r21
    6414:	8009883a 	mov	r4,r16
    6418:	0008bac0 	call	8bac <__mcmp>
    641c:	103edb0e 	bge	r2,zero,5f8c <_dtoa_r+0xb38>
    6420:	800b883a 	mov	r5,r16
    6424:	000f883a 	mov	r7,zero
    6428:	01800284 	movi	r6,10
    642c:	e009883a 	mov	r4,fp
    6430:	00083b40 	call	83b4 <__multadd>
    6434:	1021883a 	mov	r16,r2
    6438:	d8800517 	ldw	r2,20(sp)
    643c:	d8c00b17 	ldw	r3,44(sp)
    6440:	10bfffc4 	addi	r2,r2,-1
    6444:	d8800515 	stw	r2,20(sp)
    6448:	183f761e 	bne	r3,zero,6224 <_dtoa_r+0xdd0>
    644c:	d9000c17 	ldw	r4,48(sp)
    6450:	0101730e 	bge	zero,r4,6a20 <_dtoa_r+0x15cc>
    6454:	d9000615 	stw	r4,24(sp)
    6458:	003ed006 	br	5f9c <_dtoa_r+0xb48>
    645c:	00800084 	movi	r2,2
    6460:	3081861e 	bne	r6,r2,6a7c <_dtoa_r+0x1628>
    6464:	d8000b15 	stw	zero,44(sp)
    6468:	003f3c06 	br	615c <_dtoa_r+0xd08>
    646c:	dc000917 	ldw	r16,36(sp)
    6470:	003e9206 	br	5ebc <_dtoa_r+0xa68>
    6474:	d9c00317 	ldw	r7,12(sp)
    6478:	00800084 	movi	r2,2
    647c:	11fec50e 	bge	r2,r7,5f94 <_dtoa_r+0xb40>
    6480:	d9000617 	ldw	r4,24(sp)
    6484:	20013c1e 	bne	r4,zero,6978 <_dtoa_r+0x1524>
    6488:	a80b883a 	mov	r5,r21
    648c:	000f883a 	mov	r7,zero
    6490:	01800144 	movi	r6,5
    6494:	e009883a 	mov	r4,fp
    6498:	00083b40 	call	83b4 <__multadd>
    649c:	100b883a 	mov	r5,r2
    64a0:	8009883a 	mov	r4,r16
    64a4:	102b883a 	mov	r21,r2
    64a8:	0008bac0 	call	8bac <__mcmp>
    64ac:	dc000915 	stw	r16,36(sp)
    64b0:	00bf410e 	bge	zero,r2,61b8 <_dtoa_r+0xd64>
    64b4:	d9c00717 	ldw	r7,28(sp)
    64b8:	00800c44 	movi	r2,49
    64bc:	38800005 	stb	r2,0(r7)
    64c0:	d8800517 	ldw	r2,20(sp)
    64c4:	3dc00044 	addi	r23,r7,1
    64c8:	10800044 	addi	r2,r2,1
    64cc:	d8800515 	stw	r2,20(sp)
    64d0:	003f3d06 	br	61c8 <_dtoa_r+0xd74>
    64d4:	d9800517 	ldw	r6,20(sp)
    64d8:	d9c00717 	ldw	r7,28(sp)
    64dc:	00800c44 	movi	r2,49
    64e0:	31800044 	addi	r6,r6,1
    64e4:	d9800515 	stw	r6,20(sp)
    64e8:	38800005 	stb	r2,0(r7)
    64ec:	003edf06 	br	606c <_dtoa_r+0xc18>
    64f0:	d8000b15 	stw	zero,44(sp)
    64f4:	003c9f06 	br	5774 <_dtoa_r+0x320>
    64f8:	903e7e1e 	bne	r18,zero,5ef4 <_dtoa_r+0xaa0>
    64fc:	00800434 	movhi	r2,16
    6500:	10bfffc4 	addi	r2,r2,-1
    6504:	9884703a 	and	r2,r19,r2
    6508:	1000ea1e 	bne	r2,zero,68b4 <_dtoa_r+0x1460>
    650c:	9cdffc2c 	andhi	r19,r19,32752
    6510:	9800e826 	beq	r19,zero,68b4 <_dtoa_r+0x1460>
    6514:	d9c00817 	ldw	r7,32(sp)
    6518:	b5800044 	addi	r22,r22,1
    651c:	04c00044 	movi	r19,1
    6520:	39c00044 	addi	r7,r7,1
    6524:	d9c00815 	stw	r7,32(sp)
    6528:	d8800d17 	ldw	r2,52(sp)
    652c:	103e721e 	bne	r2,zero,5ef8 <_dtoa_r+0xaa4>
    6530:	00800044 	movi	r2,1
    6534:	003e7906 	br	5f1c <_dtoa_r+0xac8>
    6538:	8009883a 	mov	r4,r16
    653c:	000eb300 	call	eb30 <__floatsidf>
    6540:	d9800f17 	ldw	r6,60(sp)
    6544:	d9c01017 	ldw	r7,64(sp)
    6548:	1009883a 	mov	r4,r2
    654c:	180b883a 	mov	r5,r3
    6550:	000da9c0 	call	da9c <__muldf3>
    6554:	000d883a 	mov	r6,zero
    6558:	01d00734 	movhi	r7,16412
    655c:	1009883a 	mov	r4,r2
    6560:	180b883a 	mov	r5,r3
    6564:	000c6b00 	call	c6b0 <__adddf3>
    6568:	047f3034 	movhi	r17,64704
    656c:	1021883a 	mov	r16,r2
    6570:	1c63883a 	add	r17,r3,r17
    6574:	d9000f17 	ldw	r4,60(sp)
    6578:	d9401017 	ldw	r5,64(sp)
    657c:	000d883a 	mov	r6,zero
    6580:	01d00534 	movhi	r7,16404
    6584:	000e1b40 	call	e1b4 <__subdf3>
    6588:	800d883a 	mov	r6,r16
    658c:	880f883a 	mov	r7,r17
    6590:	1009883a 	mov	r4,r2
    6594:	180b883a 	mov	r5,r3
    6598:	102b883a 	mov	r21,r2
    659c:	1829883a 	mov	r20,r3
    65a0:	000d8cc0 	call	d8cc <__gedf2>
    65a4:	00806c16 	blt	zero,r2,6758 <_dtoa_r+0x1304>
    65a8:	89e0003c 	xorhi	r7,r17,32768
    65ac:	800d883a 	mov	r6,r16
    65b0:	a809883a 	mov	r4,r21
    65b4:	a00b883a 	mov	r5,r20
    65b8:	000d9a80 	call	d9a8 <__ledf2>
    65bc:	103d7e0e 	bge	r2,zero,5bb8 <_dtoa_r+0x764>
    65c0:	002b883a 	mov	r21,zero
    65c4:	0023883a 	mov	r17,zero
    65c8:	003efb06 	br	61b8 <_dtoa_r+0xd64>
    65cc:	d8800717 	ldw	r2,28(sp)
    65d0:	003bd006 	br	5514 <_dtoa_r+0xc0>
    65d4:	d9000a17 	ldw	r4,40(sp)
    65d8:	d9800d17 	ldw	r6,52(sp)
    65dc:	dd400a15 	stw	r21,40(sp)
    65e0:	a905c83a 	sub	r2,r21,r4
    65e4:	308d883a 	add	r6,r6,r2
    65e8:	d9800d15 	stw	r6,52(sp)
    65ec:	002b883a 	mov	r21,zero
    65f0:	003e0606 	br	5e0c <_dtoa_r+0x9b8>
    65f4:	9023883a 	mov	r17,r18
    65f8:	9829883a 	mov	r20,r19
    65fc:	04000084 	movi	r16,2
    6600:	003c9206 	br	584c <_dtoa_r+0x3f8>
    6604:	04000044 	movi	r16,1
    6608:	dc000c15 	stw	r16,48(sp)
    660c:	dc000615 	stw	r16,24(sp)
    6610:	dc002215 	stw	r16,136(sp)
    6614:	e0001115 	stw	zero,68(fp)
    6618:	000b883a 	mov	r5,zero
    661c:	003c6906 	br	57c4 <_dtoa_r+0x370>
    6620:	3021883a 	mov	r16,r6
    6624:	003ffb06 	br	6614 <_dtoa_r+0x11c0>
    6628:	1000021e 	bne	r2,zero,6634 <_dtoa_r+0x11e0>
    662c:	4200004c 	andi	r8,r8,1
    6630:	403e7d1e 	bne	r8,zero,6028 <_dtoa_r+0xbd4>
    6634:	01000c04 	movi	r4,48
    6638:	00000106 	br	6640 <_dtoa_r+0x11ec>
    663c:	102f883a 	mov	r23,r2
    6640:	b8bfffc4 	addi	r2,r23,-1
    6644:	10c00007 	ldb	r3,0(r2)
    6648:	193ffc26 	beq	r3,r4,663c <_dtoa_r+0x11e8>
    664c:	003e8706 	br	606c <_dtoa_r+0xc18>
    6650:	d8800517 	ldw	r2,20(sp)
    6654:	00a3c83a 	sub	r17,zero,r2
    6658:	8800a426 	beq	r17,zero,68ec <_dtoa_r+0x1498>
    665c:	888003cc 	andi	r2,r17,15
    6660:	100490fa 	slli	r2,r2,3
    6664:	00c00074 	movhi	r3,1
    6668:	18c73b04 	addi	r3,r3,7404
    666c:	1885883a 	add	r2,r3,r2
    6670:	11800017 	ldw	r6,0(r2)
    6674:	11c00117 	ldw	r7,4(r2)
    6678:	9009883a 	mov	r4,r18
    667c:	980b883a 	mov	r5,r19
    6680:	8823d13a 	srai	r17,r17,4
    6684:	000da9c0 	call	da9c <__muldf3>
    6688:	d8800f15 	stw	r2,60(sp)
    668c:	d8c01015 	stw	r3,64(sp)
    6690:	8800e826 	beq	r17,zero,6a34 <_dtoa_r+0x15e0>
    6694:	05000074 	movhi	r20,1
    6698:	a5073104 	addi	r20,r20,7364
    669c:	04000084 	movi	r16,2
    66a0:	8980004c 	andi	r6,r17,1
    66a4:	1009883a 	mov	r4,r2
    66a8:	8823d07a 	srai	r17,r17,1
    66ac:	180b883a 	mov	r5,r3
    66b0:	30000426 	beq	r6,zero,66c4 <_dtoa_r+0x1270>
    66b4:	a1800017 	ldw	r6,0(r20)
    66b8:	a1c00117 	ldw	r7,4(r20)
    66bc:	84000044 	addi	r16,r16,1
    66c0:	000da9c0 	call	da9c <__muldf3>
    66c4:	a5000204 	addi	r20,r20,8
    66c8:	883ff51e 	bne	r17,zero,66a0 <_dtoa_r+0x124c>
    66cc:	d8800f15 	stw	r2,60(sp)
    66d0:	d8c01015 	stw	r3,64(sp)
    66d4:	003c7606 	br	58b0 <_dtoa_r+0x45c>
    66d8:	00c00c04 	movi	r3,48
    66dc:	10c00005 	stb	r3,0(r2)
    66e0:	d8c00517 	ldw	r3,20(sp)
    66e4:	bd3fffc3 	ldbu	r20,-1(r23)
    66e8:	18c00044 	addi	r3,r3,1
    66ec:	d8c00515 	stw	r3,20(sp)
    66f0:	003db906 	br	5dd8 <_dtoa_r+0x984>
    66f4:	89400117 	ldw	r5,4(r17)
    66f8:	e009883a 	mov	r4,fp
    66fc:	00082e40 	call	82e4 <_Balloc>
    6700:	89800417 	ldw	r6,16(r17)
    6704:	89400304 	addi	r5,r17,12
    6708:	11000304 	addi	r4,r2,12
    670c:	31800084 	addi	r6,r6,2
    6710:	318d883a 	add	r6,r6,r6
    6714:	318d883a 	add	r6,r6,r6
    6718:	1027883a 	mov	r19,r2
    671c:	0007f180 	call	7f18 <memcpy>
    6720:	01800044 	movi	r6,1
    6724:	980b883a 	mov	r5,r19
    6728:	e009883a 	mov	r4,fp
    672c:	0008a640 	call	8a64 <__lshift>
    6730:	1029883a 	mov	r20,r2
    6734:	003ecc06 	br	6268 <_dtoa_r+0xe14>
    6738:	00800e44 	movi	r2,57
    673c:	90809026 	beq	r18,r2,6980 <_dtoa_r+0x152c>
    6740:	92000044 	addi	r8,r18,1
    6744:	003f1f06 	br	63c4 <_dtoa_r+0xf70>
    6748:	9011883a 	mov	r8,r18
    674c:	8825883a 	mov	r18,r17
    6750:	a023883a 	mov	r17,r20
    6754:	003e2906 	br	5ffc <_dtoa_r+0xba8>
    6758:	002b883a 	mov	r21,zero
    675c:	0023883a 	mov	r17,zero
    6760:	003f5406 	br	64b4 <_dtoa_r+0x1060>
    6764:	61bfffc4 	addi	r6,r12,-1
    6768:	300490fa 	slli	r2,r6,3
    676c:	00c00074 	movhi	r3,1
    6770:	18c73b04 	addi	r3,r3,7404
    6774:	1885883a 	add	r2,r3,r2
    6778:	11000017 	ldw	r4,0(r2)
    677c:	11400117 	ldw	r5,4(r2)
    6780:	d8800717 	ldw	r2,28(sp)
    6784:	880f883a 	mov	r7,r17
    6788:	d9801215 	stw	r6,72(sp)
    678c:	800d883a 	mov	r6,r16
    6790:	db001615 	stw	r12,88(sp)
    6794:	15c00044 	addi	r23,r2,1
    6798:	000da9c0 	call	da9c <__muldf3>
    679c:	d9401017 	ldw	r5,64(sp)
    67a0:	d9000f17 	ldw	r4,60(sp)
    67a4:	d8c01515 	stw	r3,84(sp)
    67a8:	d8801415 	stw	r2,80(sp)
    67ac:	000eab00 	call	eab0 <__fixdfsi>
    67b0:	1009883a 	mov	r4,r2
    67b4:	1021883a 	mov	r16,r2
    67b8:	000eb300 	call	eb30 <__floatsidf>
    67bc:	d9000f17 	ldw	r4,60(sp)
    67c0:	d9401017 	ldw	r5,64(sp)
    67c4:	100d883a 	mov	r6,r2
    67c8:	180f883a 	mov	r7,r3
    67cc:	000e1b40 	call	e1b4 <__subdf3>
    67d0:	1829883a 	mov	r20,r3
    67d4:	d8c00717 	ldw	r3,28(sp)
    67d8:	84000c04 	addi	r16,r16,48
    67dc:	1023883a 	mov	r17,r2
    67e0:	1c000005 	stb	r16,0(r3)
    67e4:	db001617 	ldw	r12,88(sp)
    67e8:	00800044 	movi	r2,1
    67ec:	60802226 	beq	r12,r2,6878 <_dtoa_r+0x1424>
    67f0:	d9c00717 	ldw	r7,28(sp)
    67f4:	8805883a 	mov	r2,r17
    67f8:	b82b883a 	mov	r21,r23
    67fc:	3b19883a 	add	r12,r7,r12
    6800:	6023883a 	mov	r17,r12
    6804:	a007883a 	mov	r3,r20
    6808:	dc800f15 	stw	r18,60(sp)
    680c:	000d883a 	mov	r6,zero
    6810:	01d00934 	movhi	r7,16420
    6814:	1009883a 	mov	r4,r2
    6818:	180b883a 	mov	r5,r3
    681c:	000da9c0 	call	da9c <__muldf3>
    6820:	180b883a 	mov	r5,r3
    6824:	1009883a 	mov	r4,r2
    6828:	1829883a 	mov	r20,r3
    682c:	1025883a 	mov	r18,r2
    6830:	000eab00 	call	eab0 <__fixdfsi>
    6834:	1009883a 	mov	r4,r2
    6838:	1021883a 	mov	r16,r2
    683c:	000eb300 	call	eb30 <__floatsidf>
    6840:	100d883a 	mov	r6,r2
    6844:	180f883a 	mov	r7,r3
    6848:	9009883a 	mov	r4,r18
    684c:	a00b883a 	mov	r5,r20
    6850:	84000c04 	addi	r16,r16,48
    6854:	000e1b40 	call	e1b4 <__subdf3>
    6858:	ad400044 	addi	r21,r21,1
    685c:	ac3fffc5 	stb	r16,-1(r21)
    6860:	ac7fea1e 	bne	r21,r17,680c <_dtoa_r+0x13b8>
    6864:	1023883a 	mov	r17,r2
    6868:	d8801217 	ldw	r2,72(sp)
    686c:	dc800f17 	ldw	r18,60(sp)
    6870:	1829883a 	mov	r20,r3
    6874:	b8af883a 	add	r23,r23,r2
    6878:	d9001417 	ldw	r4,80(sp)
    687c:	d9401517 	ldw	r5,84(sp)
    6880:	000d883a 	mov	r6,zero
    6884:	01cff834 	movhi	r7,16352
    6888:	000c6b00 	call	c6b0 <__adddf3>
    688c:	880d883a 	mov	r6,r17
    6890:	a00f883a 	mov	r7,r20
    6894:	1009883a 	mov	r4,r2
    6898:	180b883a 	mov	r5,r3
    689c:	000d9a80 	call	d9a8 <__ledf2>
    68a0:	10003e0e 	bge	r2,zero,699c <_dtoa_r+0x1548>
    68a4:	d9001317 	ldw	r4,76(sp)
    68a8:	bd3fffc3 	ldbu	r20,-1(r23)
    68ac:	d9000515 	stw	r4,20(sp)
    68b0:	003d3b06 	br	5da0 <_dtoa_r+0x94c>
    68b4:	0027883a 	mov	r19,zero
    68b8:	003f1b06 	br	6528 <_dtoa_r+0x10d4>
    68bc:	d8800817 	ldw	r2,32(sp)
    68c0:	11e9c83a 	sub	r20,r2,r7
    68c4:	0005883a 	mov	r2,zero
    68c8:	003d5406 	br	5e1c <_dtoa_r+0x9c8>
    68cc:	00800044 	movi	r2,1
    68d0:	003dc706 	br	5ff0 <_dtoa_r+0xb9c>
    68d4:	d8c00217 	ldw	r3,8(sp)
    68d8:	00800d84 	movi	r2,54
    68dc:	dd400a17 	ldw	r21,40(sp)
    68e0:	10c5c83a 	sub	r2,r2,r3
    68e4:	dd000817 	ldw	r20,32(sp)
    68e8:	003d4c06 	br	5e1c <_dtoa_r+0x9c8>
    68ec:	dc800f15 	stw	r18,60(sp)
    68f0:	dcc01015 	stw	r19,64(sp)
    68f4:	04000084 	movi	r16,2
    68f8:	003bed06 	br	58b0 <_dtoa_r+0x45c>
    68fc:	d9000617 	ldw	r4,24(sp)
    6900:	203f0d26 	beq	r4,zero,6538 <_dtoa_r+0x10e4>
    6904:	d9800c17 	ldw	r6,48(sp)
    6908:	01bcab0e 	bge	zero,r6,5bb8 <_dtoa_r+0x764>
    690c:	d9401017 	ldw	r5,64(sp)
    6910:	d9000f17 	ldw	r4,60(sp)
    6914:	000d883a 	mov	r6,zero
    6918:	01d00934 	movhi	r7,16420
    691c:	000da9c0 	call	da9c <__muldf3>
    6920:	81000044 	addi	r4,r16,1
    6924:	d8800f15 	stw	r2,60(sp)
    6928:	d8c01015 	stw	r3,64(sp)
    692c:	000eb300 	call	eb30 <__floatsidf>
    6930:	d9800f17 	ldw	r6,60(sp)
    6934:	d9c01017 	ldw	r7,64(sp)
    6938:	1009883a 	mov	r4,r2
    693c:	180b883a 	mov	r5,r3
    6940:	000da9c0 	call	da9c <__muldf3>
    6944:	01d00734 	movhi	r7,16412
    6948:	000d883a 	mov	r6,zero
    694c:	1009883a 	mov	r4,r2
    6950:	180b883a 	mov	r5,r3
    6954:	000c6b00 	call	c6b0 <__adddf3>
    6958:	d9c00517 	ldw	r7,20(sp)
    695c:	047f3034 	movhi	r17,64704
    6960:	1021883a 	mov	r16,r2
    6964:	39ffffc4 	addi	r7,r7,-1
    6968:	d9c01315 	stw	r7,76(sp)
    696c:	1c63883a 	add	r17,r3,r17
    6970:	db000c17 	ldw	r12,48(sp)
    6974:	003bea06 	br	5920 <_dtoa_r+0x4cc>
    6978:	dc000915 	stw	r16,36(sp)
    697c:	003e0e06 	br	61b8 <_dtoa_r+0xd64>
    6980:	01000e44 	movi	r4,57
    6984:	8825883a 	mov	r18,r17
    6988:	9dc00044 	addi	r23,r19,1
    698c:	99000005 	stb	r4,0(r19)
    6990:	a023883a 	mov	r17,r20
    6994:	dc000915 	stw	r16,36(sp)
    6998:	003da406 	br	602c <_dtoa_r+0xbd8>
    699c:	d9801417 	ldw	r6,80(sp)
    69a0:	d9c01517 	ldw	r7,84(sp)
    69a4:	0009883a 	mov	r4,zero
    69a8:	014ff834 	movhi	r5,16352
    69ac:	000e1b40 	call	e1b4 <__subdf3>
    69b0:	880d883a 	mov	r6,r17
    69b4:	a00f883a 	mov	r7,r20
    69b8:	1009883a 	mov	r4,r2
    69bc:	180b883a 	mov	r5,r3
    69c0:	000d8cc0 	call	d8cc <__gedf2>
    69c4:	00bc7c0e 	bge	zero,r2,5bb8 <_dtoa_r+0x764>
    69c8:	01000c04 	movi	r4,48
    69cc:	00000106 	br	69d4 <_dtoa_r+0x1580>
    69d0:	102f883a 	mov	r23,r2
    69d4:	b8bfffc4 	addi	r2,r23,-1
    69d8:	10c00007 	ldb	r3,0(r2)
    69dc:	193ffc26 	beq	r3,r4,69d0 <_dtoa_r+0x157c>
    69e0:	d9801317 	ldw	r6,76(sp)
    69e4:	d9800515 	stw	r6,20(sp)
    69e8:	003c4406 	br	5afc <_dtoa_r+0x6a8>
    69ec:	d9801317 	ldw	r6,76(sp)
    69f0:	d9800515 	stw	r6,20(sp)
    69f4:	003cea06 	br	5da0 <_dtoa_r+0x94c>
    69f8:	dd800f17 	ldw	r22,60(sp)
    69fc:	dcc01017 	ldw	r19,64(sp)
    6a00:	dc801217 	ldw	r18,72(sp)
    6a04:	003c6c06 	br	5bb8 <_dtoa_r+0x764>
    6a08:	903e031e 	bne	r18,zero,6218 <_dtoa_r+0xdc4>
    6a0c:	003ebb06 	br	64fc <_dtoa_r+0x10a8>
    6a10:	103e6c1e 	bne	r2,zero,63c4 <_dtoa_r+0xf70>
    6a14:	4080004c 	andi	r2,r8,1
    6a18:	103e6a26 	beq	r2,zero,63c4 <_dtoa_r+0xf70>
    6a1c:	003e6606 	br	63b8 <_dtoa_r+0xf64>
    6a20:	d8c00317 	ldw	r3,12(sp)
    6a24:	00800084 	movi	r2,2
    6a28:	10c02916 	blt	r2,r3,6ad0 <_dtoa_r+0x167c>
    6a2c:	d9000c17 	ldw	r4,48(sp)
    6a30:	003e8806 	br	6454 <_dtoa_r+0x1000>
    6a34:	04000084 	movi	r16,2
    6a38:	003b9d06 	br	58b0 <_dtoa_r+0x45c>
    6a3c:	d9001317 	ldw	r4,76(sp)
    6a40:	d9000515 	stw	r4,20(sp)
    6a44:	003cd606 	br	5da0 <_dtoa_r+0x94c>
    6a48:	d8801317 	ldw	r2,76(sp)
    6a4c:	d8800515 	stw	r2,20(sp)
    6a50:	003c2a06 	br	5afc <_dtoa_r+0x6a8>
    6a54:	d9800317 	ldw	r6,12(sp)
    6a58:	00800084 	movi	r2,2
    6a5c:	11801516 	blt	r2,r6,6ab4 <_dtoa_r+0x1660>
    6a60:	d9c00c17 	ldw	r7,48(sp)
    6a64:	d9c00615 	stw	r7,24(sp)
    6a68:	003df706 	br	6248 <_dtoa_r+0xdf4>
    6a6c:	193d3926 	beq	r3,r4,5f54 <_dtoa_r+0xb00>
    6a70:	00c00f04 	movi	r3,60
    6a74:	1885c83a 	sub	r2,r3,r2
    6a78:	003ddf06 	br	61f8 <_dtoa_r+0xda4>
    6a7c:	e009883a 	mov	r4,fp
    6a80:	e0001115 	stw	zero,68(fp)
    6a84:	000b883a 	mov	r5,zero
    6a88:	00082e40 	call	82e4 <_Balloc>
    6a8c:	d8800715 	stw	r2,28(sp)
    6a90:	d8c00717 	ldw	r3,28(sp)
    6a94:	00bfffc4 	movi	r2,-1
    6a98:	01000044 	movi	r4,1
    6a9c:	d8800c15 	stw	r2,48(sp)
    6aa0:	e0c01015 	stw	r3,64(fp)
    6aa4:	d9000b15 	stw	r4,44(sp)
    6aa8:	d8800615 	stw	r2,24(sp)
    6aac:	d8002215 	stw	zero,136(sp)
    6ab0:	003c4106 	br	5bb8 <_dtoa_r+0x764>
    6ab4:	d8c00c17 	ldw	r3,48(sp)
    6ab8:	d8c00615 	stw	r3,24(sp)
    6abc:	003e7006 	br	6480 <_dtoa_r+0x102c>
    6ac0:	04400044 	movi	r17,1
    6ac4:	003b2006 	br	5748 <_dtoa_r+0x2f4>
    6ac8:	000b883a 	mov	r5,zero
    6acc:	003b3d06 	br	57c4 <_dtoa_r+0x370>
    6ad0:	d8800c17 	ldw	r2,48(sp)
    6ad4:	d8800615 	stw	r2,24(sp)
    6ad8:	003e6906 	br	6480 <_dtoa_r+0x102c>

00006adc <__sflush_r>:
    6adc:	2880030b 	ldhu	r2,12(r5)
    6ae0:	defffb04 	addi	sp,sp,-20
    6ae4:	dcc00315 	stw	r19,12(sp)
    6ae8:	dc400115 	stw	r17,4(sp)
    6aec:	dfc00415 	stw	ra,16(sp)
    6af0:	dc800215 	stw	r18,8(sp)
    6af4:	dc000015 	stw	r16,0(sp)
    6af8:	10c0020c 	andi	r3,r2,8
    6afc:	2823883a 	mov	r17,r5
    6b00:	2027883a 	mov	r19,r4
    6b04:	1800311e 	bne	r3,zero,6bcc <__sflush_r+0xf0>
    6b08:	28c00117 	ldw	r3,4(r5)
    6b0c:	10820014 	ori	r2,r2,2048
    6b10:	2880030d 	sth	r2,12(r5)
    6b14:	00c04b0e 	bge	zero,r3,6c44 <__sflush_r+0x168>
    6b18:	8a000a17 	ldw	r8,40(r17)
    6b1c:	40002326 	beq	r8,zero,6bac <__sflush_r+0xd0>
    6b20:	9c000017 	ldw	r16,0(r19)
    6b24:	10c4000c 	andi	r3,r2,4096
    6b28:	98000015 	stw	zero,0(r19)
    6b2c:	18004826 	beq	r3,zero,6c50 <__sflush_r+0x174>
    6b30:	89801417 	ldw	r6,80(r17)
    6b34:	10c0010c 	andi	r3,r2,4
    6b38:	18000626 	beq	r3,zero,6b54 <__sflush_r+0x78>
    6b3c:	88c00117 	ldw	r3,4(r17)
    6b40:	88800c17 	ldw	r2,48(r17)
    6b44:	30cdc83a 	sub	r6,r6,r3
    6b48:	10000226 	beq	r2,zero,6b54 <__sflush_r+0x78>
    6b4c:	88800f17 	ldw	r2,60(r17)
    6b50:	308dc83a 	sub	r6,r6,r2
    6b54:	89400717 	ldw	r5,28(r17)
    6b58:	000f883a 	mov	r7,zero
    6b5c:	9809883a 	mov	r4,r19
    6b60:	403ee83a 	callr	r8
    6b64:	00ffffc4 	movi	r3,-1
    6b68:	10c04426 	beq	r2,r3,6c7c <__sflush_r+0x1a0>
    6b6c:	88c0030b 	ldhu	r3,12(r17)
    6b70:	89000417 	ldw	r4,16(r17)
    6b74:	88000115 	stw	zero,4(r17)
    6b78:	197dffcc 	andi	r5,r3,63487
    6b7c:	8940030d 	sth	r5,12(r17)
    6b80:	89000015 	stw	r4,0(r17)
    6b84:	18c4000c 	andi	r3,r3,4096
    6b88:	18002c1e 	bne	r3,zero,6c3c <__sflush_r+0x160>
    6b8c:	89400c17 	ldw	r5,48(r17)
    6b90:	9c000015 	stw	r16,0(r19)
    6b94:	28000526 	beq	r5,zero,6bac <__sflush_r+0xd0>
    6b98:	88801004 	addi	r2,r17,64
    6b9c:	28800226 	beq	r5,r2,6ba8 <__sflush_r+0xcc>
    6ba0:	9809883a 	mov	r4,r19
    6ba4:	00072480 	call	7248 <_free_r>
    6ba8:	88000c15 	stw	zero,48(r17)
    6bac:	0005883a 	mov	r2,zero
    6bb0:	dfc00417 	ldw	ra,16(sp)
    6bb4:	dcc00317 	ldw	r19,12(sp)
    6bb8:	dc800217 	ldw	r18,8(sp)
    6bbc:	dc400117 	ldw	r17,4(sp)
    6bc0:	dc000017 	ldw	r16,0(sp)
    6bc4:	dec00504 	addi	sp,sp,20
    6bc8:	f800283a 	ret
    6bcc:	2c800417 	ldw	r18,16(r5)
    6bd0:	903ff626 	beq	r18,zero,6bac <__sflush_r+0xd0>
    6bd4:	2c000017 	ldw	r16,0(r5)
    6bd8:	108000cc 	andi	r2,r2,3
    6bdc:	2c800015 	stw	r18,0(r5)
    6be0:	84a1c83a 	sub	r16,r16,r18
    6be4:	1000131e 	bne	r2,zero,6c34 <__sflush_r+0x158>
    6be8:	28800517 	ldw	r2,20(r5)
    6bec:	88800215 	stw	r2,8(r17)
    6bf0:	04000316 	blt	zero,r16,6c00 <__sflush_r+0x124>
    6bf4:	003fed06 	br	6bac <__sflush_r+0xd0>
    6bf8:	90a5883a 	add	r18,r18,r2
    6bfc:	043feb0e 	bge	zero,r16,6bac <__sflush_r+0xd0>
    6c00:	88800917 	ldw	r2,36(r17)
    6c04:	89400717 	ldw	r5,28(r17)
    6c08:	800f883a 	mov	r7,r16
    6c0c:	900d883a 	mov	r6,r18
    6c10:	9809883a 	mov	r4,r19
    6c14:	103ee83a 	callr	r2
    6c18:	80a1c83a 	sub	r16,r16,r2
    6c1c:	00bff616 	blt	zero,r2,6bf8 <__sflush_r+0x11c>
    6c20:	88c0030b 	ldhu	r3,12(r17)
    6c24:	00bfffc4 	movi	r2,-1
    6c28:	18c01014 	ori	r3,r3,64
    6c2c:	88c0030d 	sth	r3,12(r17)
    6c30:	003fdf06 	br	6bb0 <__sflush_r+0xd4>
    6c34:	0005883a 	mov	r2,zero
    6c38:	003fec06 	br	6bec <__sflush_r+0x110>
    6c3c:	88801415 	stw	r2,80(r17)
    6c40:	003fd206 	br	6b8c <__sflush_r+0xb0>
    6c44:	28c00f17 	ldw	r3,60(r5)
    6c48:	00ffb316 	blt	zero,r3,6b18 <__sflush_r+0x3c>
    6c4c:	003fd706 	br	6bac <__sflush_r+0xd0>
    6c50:	89400717 	ldw	r5,28(r17)
    6c54:	000d883a 	mov	r6,zero
    6c58:	01c00044 	movi	r7,1
    6c5c:	9809883a 	mov	r4,r19
    6c60:	403ee83a 	callr	r8
    6c64:	100d883a 	mov	r6,r2
    6c68:	00bfffc4 	movi	r2,-1
    6c6c:	30801426 	beq	r6,r2,6cc0 <__sflush_r+0x1e4>
    6c70:	8880030b 	ldhu	r2,12(r17)
    6c74:	8a000a17 	ldw	r8,40(r17)
    6c78:	003fae06 	br	6b34 <__sflush_r+0x58>
    6c7c:	98c00017 	ldw	r3,0(r19)
    6c80:	183fba26 	beq	r3,zero,6b6c <__sflush_r+0x90>
    6c84:	01000744 	movi	r4,29
    6c88:	19000626 	beq	r3,r4,6ca4 <__sflush_r+0x1c8>
    6c8c:	01000584 	movi	r4,22
    6c90:	19000426 	beq	r3,r4,6ca4 <__sflush_r+0x1c8>
    6c94:	88c0030b 	ldhu	r3,12(r17)
    6c98:	18c01014 	ori	r3,r3,64
    6c9c:	88c0030d 	sth	r3,12(r17)
    6ca0:	003fc306 	br	6bb0 <__sflush_r+0xd4>
    6ca4:	8880030b 	ldhu	r2,12(r17)
    6ca8:	88c00417 	ldw	r3,16(r17)
    6cac:	88000115 	stw	zero,4(r17)
    6cb0:	10bdffcc 	andi	r2,r2,63487
    6cb4:	8880030d 	sth	r2,12(r17)
    6cb8:	88c00015 	stw	r3,0(r17)
    6cbc:	003fb306 	br	6b8c <__sflush_r+0xb0>
    6cc0:	98800017 	ldw	r2,0(r19)
    6cc4:	103fea26 	beq	r2,zero,6c70 <__sflush_r+0x194>
    6cc8:	00c00744 	movi	r3,29
    6ccc:	10c00226 	beq	r2,r3,6cd8 <__sflush_r+0x1fc>
    6cd0:	00c00584 	movi	r3,22
    6cd4:	10c0031e 	bne	r2,r3,6ce4 <__sflush_r+0x208>
    6cd8:	9c000015 	stw	r16,0(r19)
    6cdc:	0005883a 	mov	r2,zero
    6ce0:	003fb306 	br	6bb0 <__sflush_r+0xd4>
    6ce4:	88c0030b 	ldhu	r3,12(r17)
    6ce8:	3005883a 	mov	r2,r6
    6cec:	18c01014 	ori	r3,r3,64
    6cf0:	88c0030d 	sth	r3,12(r17)
    6cf4:	003fae06 	br	6bb0 <__sflush_r+0xd4>

00006cf8 <_fflush_r>:
    6cf8:	defffd04 	addi	sp,sp,-12
    6cfc:	dc000115 	stw	r16,4(sp)
    6d00:	dfc00215 	stw	ra,8(sp)
    6d04:	2021883a 	mov	r16,r4
    6d08:	20000226 	beq	r4,zero,6d14 <_fflush_r+0x1c>
    6d0c:	20800e17 	ldw	r2,56(r4)
    6d10:	10000c26 	beq	r2,zero,6d44 <_fflush_r+0x4c>
    6d14:	2880030f 	ldh	r2,12(r5)
    6d18:	1000051e 	bne	r2,zero,6d30 <_fflush_r+0x38>
    6d1c:	0005883a 	mov	r2,zero
    6d20:	dfc00217 	ldw	ra,8(sp)
    6d24:	dc000117 	ldw	r16,4(sp)
    6d28:	dec00304 	addi	sp,sp,12
    6d2c:	f800283a 	ret
    6d30:	8009883a 	mov	r4,r16
    6d34:	dfc00217 	ldw	ra,8(sp)
    6d38:	dc000117 	ldw	r16,4(sp)
    6d3c:	dec00304 	addi	sp,sp,12
    6d40:	0006adc1 	jmpi	6adc <__sflush_r>
    6d44:	d9400015 	stw	r5,0(sp)
    6d48:	00070d40 	call	70d4 <__sinit>
    6d4c:	d9400017 	ldw	r5,0(sp)
    6d50:	003ff006 	br	6d14 <_fflush_r+0x1c>

00006d54 <fflush>:
    6d54:	20000526 	beq	r4,zero,6d6c <fflush+0x18>
    6d58:	00800074 	movhi	r2,1
    6d5c:	108e6e04 	addi	r2,r2,14776
    6d60:	200b883a 	mov	r5,r4
    6d64:	11000017 	ldw	r4,0(r2)
    6d68:	0006cf81 	jmpi	6cf8 <_fflush_r>
    6d6c:	00800074 	movhi	r2,1
    6d70:	108e6d04 	addi	r2,r2,14772
    6d74:	11000017 	ldw	r4,0(r2)
    6d78:	01400034 	movhi	r5,0
    6d7c:	295b3e04 	addi	r5,r5,27896
    6d80:	0007ad81 	jmpi	7ad8 <_fwalk_reent>

00006d84 <__fp_unlock>:
    6d84:	0005883a 	mov	r2,zero
    6d88:	f800283a 	ret

00006d8c <_cleanup_r>:
    6d8c:	01400074 	movhi	r5,1
    6d90:	296ca404 	addi	r5,r5,-19824
    6d94:	0007ad81 	jmpi	7ad8 <_fwalk_reent>

00006d98 <__sinit.part.1>:
    6d98:	defff704 	addi	sp,sp,-36
    6d9c:	00c00034 	movhi	r3,0
    6da0:	dfc00815 	stw	ra,32(sp)
    6da4:	ddc00715 	stw	r23,28(sp)
    6da8:	dd800615 	stw	r22,24(sp)
    6dac:	dd400515 	stw	r21,20(sp)
    6db0:	dd000415 	stw	r20,16(sp)
    6db4:	dcc00315 	stw	r19,12(sp)
    6db8:	dc800215 	stw	r18,8(sp)
    6dbc:	dc400115 	stw	r17,4(sp)
    6dc0:	dc000015 	stw	r16,0(sp)
    6dc4:	18db6304 	addi	r3,r3,28044
    6dc8:	24000117 	ldw	r16,4(r4)
    6dcc:	20c00f15 	stw	r3,60(r4)
    6dd0:	2080bb04 	addi	r2,r4,748
    6dd4:	00c000c4 	movi	r3,3
    6dd8:	20c0b915 	stw	r3,740(r4)
    6ddc:	2080ba15 	stw	r2,744(r4)
    6de0:	2000b815 	stw	zero,736(r4)
    6de4:	05c00204 	movi	r23,8
    6de8:	00800104 	movi	r2,4
    6dec:	2025883a 	mov	r18,r4
    6df0:	b80d883a 	mov	r6,r23
    6df4:	81001704 	addi	r4,r16,92
    6df8:	000b883a 	mov	r5,zero
    6dfc:	80000015 	stw	zero,0(r16)
    6e00:	80000115 	stw	zero,4(r16)
    6e04:	80000215 	stw	zero,8(r16)
    6e08:	8080030d 	sth	r2,12(r16)
    6e0c:	80001915 	stw	zero,100(r16)
    6e10:	8000038d 	sth	zero,14(r16)
    6e14:	80000415 	stw	zero,16(r16)
    6e18:	80000515 	stw	zero,20(r16)
    6e1c:	80000615 	stw	zero,24(r16)
    6e20:	00081bc0 	call	81bc <memset>
    6e24:	05800074 	movhi	r22,1
    6e28:	94400217 	ldw	r17,8(r18)
    6e2c:	05400074 	movhi	r21,1
    6e30:	05000074 	movhi	r20,1
    6e34:	04c00074 	movhi	r19,1
    6e38:	b5a62e04 	addi	r22,r22,-26440
    6e3c:	ad664504 	addi	r21,r21,-26348
    6e40:	a5266404 	addi	r20,r20,-26224
    6e44:	9ce67b04 	addi	r19,r19,-26132
    6e48:	85800815 	stw	r22,32(r16)
    6e4c:	85400915 	stw	r21,36(r16)
    6e50:	85000a15 	stw	r20,40(r16)
    6e54:	84c00b15 	stw	r19,44(r16)
    6e58:	84000715 	stw	r16,28(r16)
    6e5c:	00800284 	movi	r2,10
    6e60:	8880030d 	sth	r2,12(r17)
    6e64:	00800044 	movi	r2,1
    6e68:	b80d883a 	mov	r6,r23
    6e6c:	89001704 	addi	r4,r17,92
    6e70:	000b883a 	mov	r5,zero
    6e74:	88000015 	stw	zero,0(r17)
    6e78:	88000115 	stw	zero,4(r17)
    6e7c:	88000215 	stw	zero,8(r17)
    6e80:	88001915 	stw	zero,100(r17)
    6e84:	8880038d 	sth	r2,14(r17)
    6e88:	88000415 	stw	zero,16(r17)
    6e8c:	88000515 	stw	zero,20(r17)
    6e90:	88000615 	stw	zero,24(r17)
    6e94:	00081bc0 	call	81bc <memset>
    6e98:	94000317 	ldw	r16,12(r18)
    6e9c:	00800484 	movi	r2,18
    6ea0:	8c400715 	stw	r17,28(r17)
    6ea4:	8d800815 	stw	r22,32(r17)
    6ea8:	8d400915 	stw	r21,36(r17)
    6eac:	8d000a15 	stw	r20,40(r17)
    6eb0:	8cc00b15 	stw	r19,44(r17)
    6eb4:	8080030d 	sth	r2,12(r16)
    6eb8:	00800084 	movi	r2,2
    6ebc:	80000015 	stw	zero,0(r16)
    6ec0:	80000115 	stw	zero,4(r16)
    6ec4:	80000215 	stw	zero,8(r16)
    6ec8:	80001915 	stw	zero,100(r16)
    6ecc:	8080038d 	sth	r2,14(r16)
    6ed0:	80000415 	stw	zero,16(r16)
    6ed4:	80000515 	stw	zero,20(r16)
    6ed8:	80000615 	stw	zero,24(r16)
    6edc:	b80d883a 	mov	r6,r23
    6ee0:	000b883a 	mov	r5,zero
    6ee4:	81001704 	addi	r4,r16,92
    6ee8:	00081bc0 	call	81bc <memset>
    6eec:	00800044 	movi	r2,1
    6ef0:	84000715 	stw	r16,28(r16)
    6ef4:	85800815 	stw	r22,32(r16)
    6ef8:	85400915 	stw	r21,36(r16)
    6efc:	85000a15 	stw	r20,40(r16)
    6f00:	84c00b15 	stw	r19,44(r16)
    6f04:	90800e15 	stw	r2,56(r18)
    6f08:	dfc00817 	ldw	ra,32(sp)
    6f0c:	ddc00717 	ldw	r23,28(sp)
    6f10:	dd800617 	ldw	r22,24(sp)
    6f14:	dd400517 	ldw	r21,20(sp)
    6f18:	dd000417 	ldw	r20,16(sp)
    6f1c:	dcc00317 	ldw	r19,12(sp)
    6f20:	dc800217 	ldw	r18,8(sp)
    6f24:	dc400117 	ldw	r17,4(sp)
    6f28:	dc000017 	ldw	r16,0(sp)
    6f2c:	dec00904 	addi	sp,sp,36
    6f30:	f800283a 	ret

00006f34 <__fp_lock>:
    6f34:	0005883a 	mov	r2,zero
    6f38:	f800283a 	ret

00006f3c <__sfmoreglue>:
    6f3c:	defffc04 	addi	sp,sp,-16
    6f40:	dc400115 	stw	r17,4(sp)
    6f44:	2c7fffc4 	addi	r17,r5,-1
    6f48:	8c401a24 	muli	r17,r17,104
    6f4c:	dc800215 	stw	r18,8(sp)
    6f50:	2825883a 	mov	r18,r5
    6f54:	89401d04 	addi	r5,r17,116
    6f58:	dc000015 	stw	r16,0(sp)
    6f5c:	dfc00315 	stw	ra,12(sp)
    6f60:	00023f80 	call	23f8 <_malloc_r>
    6f64:	1021883a 	mov	r16,r2
    6f68:	10000726 	beq	r2,zero,6f88 <__sfmoreglue+0x4c>
    6f6c:	11000304 	addi	r4,r2,12
    6f70:	10000015 	stw	zero,0(r2)
    6f74:	14800115 	stw	r18,4(r2)
    6f78:	11000215 	stw	r4,8(r2)
    6f7c:	89801a04 	addi	r6,r17,104
    6f80:	000b883a 	mov	r5,zero
    6f84:	00081bc0 	call	81bc <memset>
    6f88:	8005883a 	mov	r2,r16
    6f8c:	dfc00317 	ldw	ra,12(sp)
    6f90:	dc800217 	ldw	r18,8(sp)
    6f94:	dc400117 	ldw	r17,4(sp)
    6f98:	dc000017 	ldw	r16,0(sp)
    6f9c:	dec00404 	addi	sp,sp,16
    6fa0:	f800283a 	ret

00006fa4 <__sfp>:
    6fa4:	defffb04 	addi	sp,sp,-20
    6fa8:	dc000015 	stw	r16,0(sp)
    6fac:	04000074 	movhi	r16,1
    6fb0:	840e6d04 	addi	r16,r16,14772
    6fb4:	dcc00315 	stw	r19,12(sp)
    6fb8:	2027883a 	mov	r19,r4
    6fbc:	81000017 	ldw	r4,0(r16)
    6fc0:	dfc00415 	stw	ra,16(sp)
    6fc4:	dc800215 	stw	r18,8(sp)
    6fc8:	20800e17 	ldw	r2,56(r4)
    6fcc:	dc400115 	stw	r17,4(sp)
    6fd0:	1000021e 	bne	r2,zero,6fdc <__sfp+0x38>
    6fd4:	0006d980 	call	6d98 <__sinit.part.1>
    6fd8:	81000017 	ldw	r4,0(r16)
    6fdc:	2480b804 	addi	r18,r4,736
    6fe0:	047fffc4 	movi	r17,-1
    6fe4:	91000117 	ldw	r4,4(r18)
    6fe8:	94000217 	ldw	r16,8(r18)
    6fec:	213fffc4 	addi	r4,r4,-1
    6ff0:	20000a16 	blt	r4,zero,701c <__sfp+0x78>
    6ff4:	8080030f 	ldh	r2,12(r16)
    6ff8:	10000c26 	beq	r2,zero,702c <__sfp+0x88>
    6ffc:	80c01d04 	addi	r3,r16,116
    7000:	00000206 	br	700c <__sfp+0x68>
    7004:	18bfe60f 	ldh	r2,-104(r3)
    7008:	10000826 	beq	r2,zero,702c <__sfp+0x88>
    700c:	213fffc4 	addi	r4,r4,-1
    7010:	1c3ffd04 	addi	r16,r3,-12
    7014:	18c01a04 	addi	r3,r3,104
    7018:	247ffa1e 	bne	r4,r17,7004 <__sfp+0x60>
    701c:	90800017 	ldw	r2,0(r18)
    7020:	10001d26 	beq	r2,zero,7098 <__sfp+0xf4>
    7024:	1025883a 	mov	r18,r2
    7028:	003fee06 	br	6fe4 <__sfp+0x40>
    702c:	00bfffc4 	movi	r2,-1
    7030:	8080038d 	sth	r2,14(r16)
    7034:	00800044 	movi	r2,1
    7038:	8080030d 	sth	r2,12(r16)
    703c:	80001915 	stw	zero,100(r16)
    7040:	80000015 	stw	zero,0(r16)
    7044:	80000215 	stw	zero,8(r16)
    7048:	80000115 	stw	zero,4(r16)
    704c:	80000415 	stw	zero,16(r16)
    7050:	80000515 	stw	zero,20(r16)
    7054:	80000615 	stw	zero,24(r16)
    7058:	01800204 	movi	r6,8
    705c:	000b883a 	mov	r5,zero
    7060:	81001704 	addi	r4,r16,92
    7064:	00081bc0 	call	81bc <memset>
    7068:	8005883a 	mov	r2,r16
    706c:	80000c15 	stw	zero,48(r16)
    7070:	80000d15 	stw	zero,52(r16)
    7074:	80001115 	stw	zero,68(r16)
    7078:	80001215 	stw	zero,72(r16)
    707c:	dfc00417 	ldw	ra,16(sp)
    7080:	dcc00317 	ldw	r19,12(sp)
    7084:	dc800217 	ldw	r18,8(sp)
    7088:	dc400117 	ldw	r17,4(sp)
    708c:	dc000017 	ldw	r16,0(sp)
    7090:	dec00504 	addi	sp,sp,20
    7094:	f800283a 	ret
    7098:	01400104 	movi	r5,4
    709c:	9809883a 	mov	r4,r19
    70a0:	0006f3c0 	call	6f3c <__sfmoreglue>
    70a4:	90800015 	stw	r2,0(r18)
    70a8:	103fde1e 	bne	r2,zero,7024 <__sfp+0x80>
    70ac:	00800304 	movi	r2,12
    70b0:	98800015 	stw	r2,0(r19)
    70b4:	0005883a 	mov	r2,zero
    70b8:	003ff006 	br	707c <__sfp+0xd8>

000070bc <_cleanup>:
    70bc:	00800074 	movhi	r2,1
    70c0:	108e6d04 	addi	r2,r2,14772
    70c4:	11000017 	ldw	r4,0(r2)
    70c8:	01400074 	movhi	r5,1
    70cc:	296ca404 	addi	r5,r5,-19824
    70d0:	0007ad81 	jmpi	7ad8 <_fwalk_reent>

000070d4 <__sinit>:
    70d4:	20800e17 	ldw	r2,56(r4)
    70d8:	10000126 	beq	r2,zero,70e0 <__sinit+0xc>
    70dc:	f800283a 	ret
    70e0:	0006d981 	jmpi	6d98 <__sinit.part.1>

000070e4 <__sfp_lock_acquire>:
    70e4:	f800283a 	ret

000070e8 <__sfp_lock_release>:
    70e8:	f800283a 	ret

000070ec <__sinit_lock_acquire>:
    70ec:	f800283a 	ret

000070f0 <__sinit_lock_release>:
    70f0:	f800283a 	ret

000070f4 <__fp_lock_all>:
    70f4:	00800074 	movhi	r2,1
    70f8:	108e6e04 	addi	r2,r2,14776
    70fc:	11000017 	ldw	r4,0(r2)
    7100:	01400034 	movhi	r5,0
    7104:	295bcd04 	addi	r5,r5,28468
    7108:	0007a141 	jmpi	7a14 <_fwalk>

0000710c <__fp_unlock_all>:
    710c:	00800074 	movhi	r2,1
    7110:	108e6e04 	addi	r2,r2,14776
    7114:	11000017 	ldw	r4,0(r2)
    7118:	01400034 	movhi	r5,0
    711c:	295b6104 	addi	r5,r5,28036
    7120:	0007a141 	jmpi	7a14 <_fwalk>

00007124 <_malloc_trim_r>:
    7124:	defffb04 	addi	sp,sp,-20
    7128:	dcc00315 	stw	r19,12(sp)
    712c:	04c00074 	movhi	r19,1
    7130:	dc800215 	stw	r18,8(sp)
    7134:	dc400115 	stw	r17,4(sp)
    7138:	dc000015 	stw	r16,0(sp)
    713c:	dfc00415 	stw	ra,16(sp)
    7140:	2821883a 	mov	r16,r5
    7144:	9cc7c004 	addi	r19,r19,7936
    7148:	2025883a 	mov	r18,r4
    714c:	000f2940 	call	f294 <__malloc_lock>
    7150:	98800217 	ldw	r2,8(r19)
    7154:	14400117 	ldw	r17,4(r2)
    7158:	00bfff04 	movi	r2,-4
    715c:	88a2703a 	and	r17,r17,r2
    7160:	8c21c83a 	sub	r16,r17,r16
    7164:	8403fbc4 	addi	r16,r16,4079
    7168:	8020d33a 	srli	r16,r16,12
    716c:	0083ffc4 	movi	r2,4095
    7170:	843fffc4 	addi	r16,r16,-1
    7174:	8020933a 	slli	r16,r16,12
    7178:	1400060e 	bge	r2,r16,7194 <_malloc_trim_r+0x70>
    717c:	000b883a 	mov	r5,zero
    7180:	9009883a 	mov	r4,r18
    7184:	0002d440 	call	2d44 <_sbrk_r>
    7188:	98c00217 	ldw	r3,8(r19)
    718c:	1c47883a 	add	r3,r3,r17
    7190:	10c00a26 	beq	r2,r3,71bc <_malloc_trim_r+0x98>
    7194:	9009883a 	mov	r4,r18
    7198:	000f2b80 	call	f2b8 <__malloc_unlock>
    719c:	0005883a 	mov	r2,zero
    71a0:	dfc00417 	ldw	ra,16(sp)
    71a4:	dcc00317 	ldw	r19,12(sp)
    71a8:	dc800217 	ldw	r18,8(sp)
    71ac:	dc400117 	ldw	r17,4(sp)
    71b0:	dc000017 	ldw	r16,0(sp)
    71b4:	dec00504 	addi	sp,sp,20
    71b8:	f800283a 	ret
    71bc:	040bc83a 	sub	r5,zero,r16
    71c0:	9009883a 	mov	r4,r18
    71c4:	0002d440 	call	2d44 <_sbrk_r>
    71c8:	00ffffc4 	movi	r3,-1
    71cc:	10c00d26 	beq	r2,r3,7204 <_malloc_trim_r+0xe0>
    71d0:	00c00074 	movhi	r3,1
    71d4:	18d55004 	addi	r3,r3,21824
    71d8:	18800017 	ldw	r2,0(r3)
    71dc:	99000217 	ldw	r4,8(r19)
    71e0:	8c23c83a 	sub	r17,r17,r16
    71e4:	8c400054 	ori	r17,r17,1
    71e8:	1421c83a 	sub	r16,r2,r16
    71ec:	24400115 	stw	r17,4(r4)
    71f0:	9009883a 	mov	r4,r18
    71f4:	1c000015 	stw	r16,0(r3)
    71f8:	000f2b80 	call	f2b8 <__malloc_unlock>
    71fc:	00800044 	movi	r2,1
    7200:	003fe706 	br	71a0 <_malloc_trim_r+0x7c>
    7204:	000b883a 	mov	r5,zero
    7208:	9009883a 	mov	r4,r18
    720c:	0002d440 	call	2d44 <_sbrk_r>
    7210:	99000217 	ldw	r4,8(r19)
    7214:	014003c4 	movi	r5,15
    7218:	1107c83a 	sub	r3,r2,r4
    721c:	28ffdd0e 	bge	r5,r3,7194 <_malloc_trim_r+0x70>
    7220:	01400074 	movhi	r5,1
    7224:	294e6b04 	addi	r5,r5,14764
    7228:	29400017 	ldw	r5,0(r5)
    722c:	18c00054 	ori	r3,r3,1
    7230:	20c00115 	stw	r3,4(r4)
    7234:	00c00074 	movhi	r3,1
    7238:	1145c83a 	sub	r2,r2,r5
    723c:	18d55004 	addi	r3,r3,21824
    7240:	18800015 	stw	r2,0(r3)
    7244:	003fd306 	br	7194 <_malloc_trim_r+0x70>

00007248 <_free_r>:
    7248:	28004126 	beq	r5,zero,7350 <_free_r+0x108>
    724c:	defffd04 	addi	sp,sp,-12
    7250:	dc400115 	stw	r17,4(sp)
    7254:	dc000015 	stw	r16,0(sp)
    7258:	2023883a 	mov	r17,r4
    725c:	2821883a 	mov	r16,r5
    7260:	dfc00215 	stw	ra,8(sp)
    7264:	000f2940 	call	f294 <__malloc_lock>
    7268:	81ffff17 	ldw	r7,-4(r16)
    726c:	00bfff84 	movi	r2,-2
    7270:	01000074 	movhi	r4,1
    7274:	81bffe04 	addi	r6,r16,-8
    7278:	3884703a 	and	r2,r7,r2
    727c:	2107c004 	addi	r4,r4,7936
    7280:	308b883a 	add	r5,r6,r2
    7284:	2a400117 	ldw	r9,4(r5)
    7288:	22000217 	ldw	r8,8(r4)
    728c:	00ffff04 	movi	r3,-4
    7290:	48c6703a 	and	r3,r9,r3
    7294:	2a005726 	beq	r5,r8,73f4 <_free_r+0x1ac>
    7298:	28c00115 	stw	r3,4(r5)
    729c:	39c0004c 	andi	r7,r7,1
    72a0:	3800091e 	bne	r7,zero,72c8 <_free_r+0x80>
    72a4:	823ffe17 	ldw	r8,-8(r16)
    72a8:	22400204 	addi	r9,r4,8
    72ac:	320dc83a 	sub	r6,r6,r8
    72b0:	31c00217 	ldw	r7,8(r6)
    72b4:	1205883a 	add	r2,r2,r8
    72b8:	3a406526 	beq	r7,r9,7450 <_free_r+0x208>
    72bc:	32000317 	ldw	r8,12(r6)
    72c0:	3a000315 	stw	r8,12(r7)
    72c4:	41c00215 	stw	r7,8(r8)
    72c8:	28cf883a 	add	r7,r5,r3
    72cc:	39c00117 	ldw	r7,4(r7)
    72d0:	39c0004c 	andi	r7,r7,1
    72d4:	38003a26 	beq	r7,zero,73c0 <_free_r+0x178>
    72d8:	10c00054 	ori	r3,r2,1
    72dc:	30c00115 	stw	r3,4(r6)
    72e0:	3087883a 	add	r3,r6,r2
    72e4:	18800015 	stw	r2,0(r3)
    72e8:	00c07fc4 	movi	r3,511
    72ec:	18801936 	bltu	r3,r2,7354 <_free_r+0x10c>
    72f0:	1004d0fa 	srli	r2,r2,3
    72f4:	01c00044 	movi	r7,1
    72f8:	21400117 	ldw	r5,4(r4)
    72fc:	10c00044 	addi	r3,r2,1
    7300:	18c7883a 	add	r3,r3,r3
    7304:	1005d0ba 	srai	r2,r2,2
    7308:	18c7883a 	add	r3,r3,r3
    730c:	18c7883a 	add	r3,r3,r3
    7310:	1907883a 	add	r3,r3,r4
    7314:	3884983a 	sll	r2,r7,r2
    7318:	19c00017 	ldw	r7,0(r3)
    731c:	1a3ffe04 	addi	r8,r3,-8
    7320:	1144b03a 	or	r2,r2,r5
    7324:	32000315 	stw	r8,12(r6)
    7328:	31c00215 	stw	r7,8(r6)
    732c:	20800115 	stw	r2,4(r4)
    7330:	19800015 	stw	r6,0(r3)
    7334:	39800315 	stw	r6,12(r7)
    7338:	8809883a 	mov	r4,r17
    733c:	dfc00217 	ldw	ra,8(sp)
    7340:	dc400117 	ldw	r17,4(sp)
    7344:	dc000017 	ldw	r16,0(sp)
    7348:	dec00304 	addi	sp,sp,12
    734c:	000f2b81 	jmpi	f2b8 <__malloc_unlock>
    7350:	f800283a 	ret
    7354:	100ad27a 	srli	r5,r2,9
    7358:	00c00104 	movi	r3,4
    735c:	19404a36 	bltu	r3,r5,7488 <_free_r+0x240>
    7360:	100ad1ba 	srli	r5,r2,6
    7364:	28c00e44 	addi	r3,r5,57
    7368:	18c7883a 	add	r3,r3,r3
    736c:	29400e04 	addi	r5,r5,56
    7370:	18c7883a 	add	r3,r3,r3
    7374:	18c7883a 	add	r3,r3,r3
    7378:	1909883a 	add	r4,r3,r4
    737c:	20c00017 	ldw	r3,0(r4)
    7380:	01c00074 	movhi	r7,1
    7384:	213ffe04 	addi	r4,r4,-8
    7388:	39c7c004 	addi	r7,r7,7936
    738c:	20c04426 	beq	r4,r3,74a0 <_free_r+0x258>
    7390:	01ffff04 	movi	r7,-4
    7394:	19400117 	ldw	r5,4(r3)
    7398:	29ca703a 	and	r5,r5,r7
    739c:	1140022e 	bgeu	r2,r5,73a8 <_free_r+0x160>
    73a0:	18c00217 	ldw	r3,8(r3)
    73a4:	20fffb1e 	bne	r4,r3,7394 <_free_r+0x14c>
    73a8:	19000317 	ldw	r4,12(r3)
    73ac:	31000315 	stw	r4,12(r6)
    73b0:	30c00215 	stw	r3,8(r6)
    73b4:	21800215 	stw	r6,8(r4)
    73b8:	19800315 	stw	r6,12(r3)
    73bc:	003fde06 	br	7338 <_free_r+0xf0>
    73c0:	29c00217 	ldw	r7,8(r5)
    73c4:	10c5883a 	add	r2,r2,r3
    73c8:	00c00074 	movhi	r3,1
    73cc:	18c7c204 	addi	r3,r3,7944
    73d0:	38c03b26 	beq	r7,r3,74c0 <_free_r+0x278>
    73d4:	2a000317 	ldw	r8,12(r5)
    73d8:	11400054 	ori	r5,r2,1
    73dc:	3087883a 	add	r3,r6,r2
    73e0:	3a000315 	stw	r8,12(r7)
    73e4:	41c00215 	stw	r7,8(r8)
    73e8:	31400115 	stw	r5,4(r6)
    73ec:	18800015 	stw	r2,0(r3)
    73f0:	003fbd06 	br	72e8 <_free_r+0xa0>
    73f4:	39c0004c 	andi	r7,r7,1
    73f8:	10c5883a 	add	r2,r2,r3
    73fc:	3800071e 	bne	r7,zero,741c <_free_r+0x1d4>
    7400:	81fffe17 	ldw	r7,-8(r16)
    7404:	31cdc83a 	sub	r6,r6,r7
    7408:	30c00317 	ldw	r3,12(r6)
    740c:	31400217 	ldw	r5,8(r6)
    7410:	11c5883a 	add	r2,r2,r7
    7414:	28c00315 	stw	r3,12(r5)
    7418:	19400215 	stw	r5,8(r3)
    741c:	10c00054 	ori	r3,r2,1
    7420:	30c00115 	stw	r3,4(r6)
    7424:	00c00074 	movhi	r3,1
    7428:	18ce6c04 	addi	r3,r3,14768
    742c:	18c00017 	ldw	r3,0(r3)
    7430:	21800215 	stw	r6,8(r4)
    7434:	10ffc036 	bltu	r2,r3,7338 <_free_r+0xf0>
    7438:	00800074 	movhi	r2,1
    743c:	10954204 	addi	r2,r2,21768
    7440:	11400017 	ldw	r5,0(r2)
    7444:	8809883a 	mov	r4,r17
    7448:	00071240 	call	7124 <_malloc_trim_r>
    744c:	003fba06 	br	7338 <_free_r+0xf0>
    7450:	28c9883a 	add	r4,r5,r3
    7454:	21000117 	ldw	r4,4(r4)
    7458:	2100004c 	andi	r4,r4,1
    745c:	2000391e 	bne	r4,zero,7544 <_free_r+0x2fc>
    7460:	29c00217 	ldw	r7,8(r5)
    7464:	29000317 	ldw	r4,12(r5)
    7468:	1885883a 	add	r2,r3,r2
    746c:	10c00054 	ori	r3,r2,1
    7470:	39000315 	stw	r4,12(r7)
    7474:	21c00215 	stw	r7,8(r4)
    7478:	30c00115 	stw	r3,4(r6)
    747c:	308d883a 	add	r6,r6,r2
    7480:	30800015 	stw	r2,0(r6)
    7484:	003fac06 	br	7338 <_free_r+0xf0>
    7488:	00c00504 	movi	r3,20
    748c:	19401536 	bltu	r3,r5,74e4 <_free_r+0x29c>
    7490:	28c01704 	addi	r3,r5,92
    7494:	18c7883a 	add	r3,r3,r3
    7498:	294016c4 	addi	r5,r5,91
    749c:	003fb406 	br	7370 <_free_r+0x128>
    74a0:	280bd0ba 	srai	r5,r5,2
    74a4:	00c00044 	movi	r3,1
    74a8:	38800117 	ldw	r2,4(r7)
    74ac:	194a983a 	sll	r5,r3,r5
    74b0:	2007883a 	mov	r3,r4
    74b4:	2884b03a 	or	r2,r5,r2
    74b8:	38800115 	stw	r2,4(r7)
    74bc:	003fbb06 	br	73ac <_free_r+0x164>
    74c0:	21800515 	stw	r6,20(r4)
    74c4:	21800415 	stw	r6,16(r4)
    74c8:	10c00054 	ori	r3,r2,1
    74cc:	31c00315 	stw	r7,12(r6)
    74d0:	31c00215 	stw	r7,8(r6)
    74d4:	30c00115 	stw	r3,4(r6)
    74d8:	308d883a 	add	r6,r6,r2
    74dc:	30800015 	stw	r2,0(r6)
    74e0:	003f9506 	br	7338 <_free_r+0xf0>
    74e4:	00c01504 	movi	r3,84
    74e8:	19400536 	bltu	r3,r5,7500 <_free_r+0x2b8>
    74ec:	100ad33a 	srli	r5,r2,12
    74f0:	28c01bc4 	addi	r3,r5,111
    74f4:	18c7883a 	add	r3,r3,r3
    74f8:	29401b84 	addi	r5,r5,110
    74fc:	003f9c06 	br	7370 <_free_r+0x128>
    7500:	00c05504 	movi	r3,340
    7504:	19400536 	bltu	r3,r5,751c <_free_r+0x2d4>
    7508:	100ad3fa 	srli	r5,r2,15
    750c:	28c01e04 	addi	r3,r5,120
    7510:	18c7883a 	add	r3,r3,r3
    7514:	29401dc4 	addi	r5,r5,119
    7518:	003f9506 	br	7370 <_free_r+0x128>
    751c:	00c15504 	movi	r3,1364
    7520:	19400536 	bltu	r3,r5,7538 <_free_r+0x2f0>
    7524:	100ad4ba 	srli	r5,r2,18
    7528:	28c01f44 	addi	r3,r5,125
    752c:	18c7883a 	add	r3,r3,r3
    7530:	29401f04 	addi	r5,r5,124
    7534:	003f8e06 	br	7370 <_free_r+0x128>
    7538:	00c03f84 	movi	r3,254
    753c:	01401f84 	movi	r5,126
    7540:	003f8b06 	br	7370 <_free_r+0x128>
    7544:	10c00054 	ori	r3,r2,1
    7548:	30c00115 	stw	r3,4(r6)
    754c:	308d883a 	add	r6,r6,r2
    7550:	30800015 	stw	r2,0(r6)
    7554:	003f7806 	br	7338 <_free_r+0xf0>

00007558 <__sfvwrite_r>:
    7558:	30800217 	ldw	r2,8(r6)
    755c:	10006726 	beq	r2,zero,76fc <__sfvwrite_r+0x1a4>
    7560:	28c0030b 	ldhu	r3,12(r5)
    7564:	defff404 	addi	sp,sp,-48
    7568:	dd400715 	stw	r21,28(sp)
    756c:	dd000615 	stw	r20,24(sp)
    7570:	dc000215 	stw	r16,8(sp)
    7574:	dfc00b15 	stw	ra,44(sp)
    7578:	df000a15 	stw	fp,40(sp)
    757c:	ddc00915 	stw	r23,36(sp)
    7580:	dd800815 	stw	r22,32(sp)
    7584:	dcc00515 	stw	r19,20(sp)
    7588:	dc800415 	stw	r18,16(sp)
    758c:	dc400315 	stw	r17,12(sp)
    7590:	1880020c 	andi	r2,r3,8
    7594:	2821883a 	mov	r16,r5
    7598:	202b883a 	mov	r21,r4
    759c:	3029883a 	mov	r20,r6
    75a0:	10002726 	beq	r2,zero,7640 <__sfvwrite_r+0xe8>
    75a4:	28800417 	ldw	r2,16(r5)
    75a8:	10002526 	beq	r2,zero,7640 <__sfvwrite_r+0xe8>
    75ac:	1880008c 	andi	r2,r3,2
    75b0:	a4400017 	ldw	r17,0(r20)
    75b4:	10002a26 	beq	r2,zero,7660 <__sfvwrite_r+0x108>
    75b8:	05a00034 	movhi	r22,32768
    75bc:	0027883a 	mov	r19,zero
    75c0:	0025883a 	mov	r18,zero
    75c4:	b5bf0004 	addi	r22,r22,-1024
    75c8:	980d883a 	mov	r6,r19
    75cc:	a809883a 	mov	r4,r21
    75d0:	90004626 	beq	r18,zero,76ec <__sfvwrite_r+0x194>
    75d4:	900f883a 	mov	r7,r18
    75d8:	b480022e 	bgeu	r22,r18,75e4 <__sfvwrite_r+0x8c>
    75dc:	01e00034 	movhi	r7,32768
    75e0:	39ff0004 	addi	r7,r7,-1024
    75e4:	80800917 	ldw	r2,36(r16)
    75e8:	81400717 	ldw	r5,28(r16)
    75ec:	103ee83a 	callr	r2
    75f0:	0080570e 	bge	zero,r2,7750 <__sfvwrite_r+0x1f8>
    75f4:	a0c00217 	ldw	r3,8(r20)
    75f8:	98a7883a 	add	r19,r19,r2
    75fc:	90a5c83a 	sub	r18,r18,r2
    7600:	1885c83a 	sub	r2,r3,r2
    7604:	a0800215 	stw	r2,8(r20)
    7608:	103fef1e 	bne	r2,zero,75c8 <__sfvwrite_r+0x70>
    760c:	0005883a 	mov	r2,zero
    7610:	dfc00b17 	ldw	ra,44(sp)
    7614:	df000a17 	ldw	fp,40(sp)
    7618:	ddc00917 	ldw	r23,36(sp)
    761c:	dd800817 	ldw	r22,32(sp)
    7620:	dd400717 	ldw	r21,28(sp)
    7624:	dd000617 	ldw	r20,24(sp)
    7628:	dcc00517 	ldw	r19,20(sp)
    762c:	dc800417 	ldw	r18,16(sp)
    7630:	dc400317 	ldw	r17,12(sp)
    7634:	dc000217 	ldw	r16,8(sp)
    7638:	dec00c04 	addi	sp,sp,48
    763c:	f800283a 	ret
    7640:	800b883a 	mov	r5,r16
    7644:	a809883a 	mov	r4,r21
    7648:	00051000 	call	5100 <__swsetup_r>
    764c:	1000eb1e 	bne	r2,zero,79fc <__sfvwrite_r+0x4a4>
    7650:	80c0030b 	ldhu	r3,12(r16)
    7654:	a4400017 	ldw	r17,0(r20)
    7658:	1880008c 	andi	r2,r3,2
    765c:	103fd61e 	bne	r2,zero,75b8 <__sfvwrite_r+0x60>
    7660:	1880004c 	andi	r2,r3,1
    7664:	10003f1e 	bne	r2,zero,7764 <__sfvwrite_r+0x20c>
    7668:	0039883a 	mov	fp,zero
    766c:	0025883a 	mov	r18,zero
    7670:	90001a26 	beq	r18,zero,76dc <__sfvwrite_r+0x184>
    7674:	1880800c 	andi	r2,r3,512
    7678:	84c00217 	ldw	r19,8(r16)
    767c:	10002126 	beq	r2,zero,7704 <__sfvwrite_r+0x1ac>
    7680:	982f883a 	mov	r23,r19
    7684:	94c09336 	bltu	r18,r19,78d4 <__sfvwrite_r+0x37c>
    7688:	1881200c 	andi	r2,r3,1152
    768c:	10009e1e 	bne	r2,zero,7908 <__sfvwrite_r+0x3b0>
    7690:	81000017 	ldw	r4,0(r16)
    7694:	b80d883a 	mov	r6,r23
    7698:	e00b883a 	mov	r5,fp
    769c:	00080600 	call	8060 <memmove>
    76a0:	80c00217 	ldw	r3,8(r16)
    76a4:	81000017 	ldw	r4,0(r16)
    76a8:	9005883a 	mov	r2,r18
    76ac:	1ce7c83a 	sub	r19,r3,r19
    76b0:	25cf883a 	add	r7,r4,r23
    76b4:	84c00215 	stw	r19,8(r16)
    76b8:	81c00015 	stw	r7,0(r16)
    76bc:	a0c00217 	ldw	r3,8(r20)
    76c0:	e0b9883a 	add	fp,fp,r2
    76c4:	90a5c83a 	sub	r18,r18,r2
    76c8:	18a7c83a 	sub	r19,r3,r2
    76cc:	a4c00215 	stw	r19,8(r20)
    76d0:	983fce26 	beq	r19,zero,760c <__sfvwrite_r+0xb4>
    76d4:	80c0030b 	ldhu	r3,12(r16)
    76d8:	903fe61e 	bne	r18,zero,7674 <__sfvwrite_r+0x11c>
    76dc:	8f000017 	ldw	fp,0(r17)
    76e0:	8c800117 	ldw	r18,4(r17)
    76e4:	8c400204 	addi	r17,r17,8
    76e8:	003fe106 	br	7670 <__sfvwrite_r+0x118>
    76ec:	8cc00017 	ldw	r19,0(r17)
    76f0:	8c800117 	ldw	r18,4(r17)
    76f4:	8c400204 	addi	r17,r17,8
    76f8:	003fb306 	br	75c8 <__sfvwrite_r+0x70>
    76fc:	0005883a 	mov	r2,zero
    7700:	f800283a 	ret
    7704:	81000017 	ldw	r4,0(r16)
    7708:	80800417 	ldw	r2,16(r16)
    770c:	11005736 	bltu	r2,r4,786c <__sfvwrite_r+0x314>
    7710:	85c00517 	ldw	r23,20(r16)
    7714:	95c05536 	bltu	r18,r23,786c <__sfvwrite_r+0x314>
    7718:	00a00034 	movhi	r2,32768
    771c:	10bfffc4 	addi	r2,r2,-1
    7720:	9009883a 	mov	r4,r18
    7724:	1480012e 	bgeu	r2,r18,772c <__sfvwrite_r+0x1d4>
    7728:	1009883a 	mov	r4,r2
    772c:	b80b883a 	mov	r5,r23
    7730:	000c4fc0 	call	c4fc <__divsi3>
    7734:	15cf383a 	mul	r7,r2,r23
    7738:	81400717 	ldw	r5,28(r16)
    773c:	80800917 	ldw	r2,36(r16)
    7740:	e00d883a 	mov	r6,fp
    7744:	a809883a 	mov	r4,r21
    7748:	103ee83a 	callr	r2
    774c:	00bfdb16 	blt	zero,r2,76bc <__sfvwrite_r+0x164>
    7750:	8080030b 	ldhu	r2,12(r16)
    7754:	10801014 	ori	r2,r2,64
    7758:	8080030d 	sth	r2,12(r16)
    775c:	00bfffc4 	movi	r2,-1
    7760:	003fab06 	br	7610 <__sfvwrite_r+0xb8>
    7764:	0027883a 	mov	r19,zero
    7768:	0011883a 	mov	r8,zero
    776c:	0039883a 	mov	fp,zero
    7770:	0025883a 	mov	r18,zero
    7774:	90001f26 	beq	r18,zero,77f4 <__sfvwrite_r+0x29c>
    7778:	40005a26 	beq	r8,zero,78e4 <__sfvwrite_r+0x38c>
    777c:	982d883a 	mov	r22,r19
    7780:	94c0012e 	bgeu	r18,r19,7788 <__sfvwrite_r+0x230>
    7784:	902d883a 	mov	r22,r18
    7788:	81000017 	ldw	r4,0(r16)
    778c:	80800417 	ldw	r2,16(r16)
    7790:	b02f883a 	mov	r23,r22
    7794:	81c00517 	ldw	r7,20(r16)
    7798:	1100032e 	bgeu	r2,r4,77a8 <__sfvwrite_r+0x250>
    779c:	80c00217 	ldw	r3,8(r16)
    77a0:	38c7883a 	add	r3,r7,r3
    77a4:	1d801816 	blt	r3,r22,7808 <__sfvwrite_r+0x2b0>
    77a8:	b1c03e16 	blt	r22,r7,78a4 <__sfvwrite_r+0x34c>
    77ac:	80800917 	ldw	r2,36(r16)
    77b0:	81400717 	ldw	r5,28(r16)
    77b4:	e00d883a 	mov	r6,fp
    77b8:	da000115 	stw	r8,4(sp)
    77bc:	a809883a 	mov	r4,r21
    77c0:	103ee83a 	callr	r2
    77c4:	102f883a 	mov	r23,r2
    77c8:	da000117 	ldw	r8,4(sp)
    77cc:	00bfe00e 	bge	zero,r2,7750 <__sfvwrite_r+0x1f8>
    77d0:	9de7c83a 	sub	r19,r19,r23
    77d4:	98001f26 	beq	r19,zero,7854 <__sfvwrite_r+0x2fc>
    77d8:	a0800217 	ldw	r2,8(r20)
    77dc:	e5f9883a 	add	fp,fp,r23
    77e0:	95e5c83a 	sub	r18,r18,r23
    77e4:	15efc83a 	sub	r23,r2,r23
    77e8:	a5c00215 	stw	r23,8(r20)
    77ec:	b83f8726 	beq	r23,zero,760c <__sfvwrite_r+0xb4>
    77f0:	903fe11e 	bne	r18,zero,7778 <__sfvwrite_r+0x220>
    77f4:	8f000017 	ldw	fp,0(r17)
    77f8:	8c800117 	ldw	r18,4(r17)
    77fc:	0011883a 	mov	r8,zero
    7800:	8c400204 	addi	r17,r17,8
    7804:	003fdb06 	br	7774 <__sfvwrite_r+0x21c>
    7808:	180d883a 	mov	r6,r3
    780c:	e00b883a 	mov	r5,fp
    7810:	da000115 	stw	r8,4(sp)
    7814:	d8c00015 	stw	r3,0(sp)
    7818:	00080600 	call	8060 <memmove>
    781c:	d8c00017 	ldw	r3,0(sp)
    7820:	80800017 	ldw	r2,0(r16)
    7824:	800b883a 	mov	r5,r16
    7828:	a809883a 	mov	r4,r21
    782c:	10c5883a 	add	r2,r2,r3
    7830:	80800015 	stw	r2,0(r16)
    7834:	d8c00015 	stw	r3,0(sp)
    7838:	0006cf80 	call	6cf8 <_fflush_r>
    783c:	d8c00017 	ldw	r3,0(sp)
    7840:	da000117 	ldw	r8,4(sp)
    7844:	103fc21e 	bne	r2,zero,7750 <__sfvwrite_r+0x1f8>
    7848:	182f883a 	mov	r23,r3
    784c:	9de7c83a 	sub	r19,r19,r23
    7850:	983fe11e 	bne	r19,zero,77d8 <__sfvwrite_r+0x280>
    7854:	800b883a 	mov	r5,r16
    7858:	a809883a 	mov	r4,r21
    785c:	0006cf80 	call	6cf8 <_fflush_r>
    7860:	103fbb1e 	bne	r2,zero,7750 <__sfvwrite_r+0x1f8>
    7864:	0011883a 	mov	r8,zero
    7868:	003fdb06 	br	77d8 <__sfvwrite_r+0x280>
    786c:	94c0012e 	bgeu	r18,r19,7874 <__sfvwrite_r+0x31c>
    7870:	9027883a 	mov	r19,r18
    7874:	980d883a 	mov	r6,r19
    7878:	e00b883a 	mov	r5,fp
    787c:	00080600 	call	8060 <memmove>
    7880:	80800217 	ldw	r2,8(r16)
    7884:	80c00017 	ldw	r3,0(r16)
    7888:	14c5c83a 	sub	r2,r2,r19
    788c:	1cc7883a 	add	r3,r3,r19
    7890:	80800215 	stw	r2,8(r16)
    7894:	80c00015 	stw	r3,0(r16)
    7898:	10004326 	beq	r2,zero,79a8 <__sfvwrite_r+0x450>
    789c:	9805883a 	mov	r2,r19
    78a0:	003f8606 	br	76bc <__sfvwrite_r+0x164>
    78a4:	b00d883a 	mov	r6,r22
    78a8:	e00b883a 	mov	r5,fp
    78ac:	da000115 	stw	r8,4(sp)
    78b0:	00080600 	call	8060 <memmove>
    78b4:	80800217 	ldw	r2,8(r16)
    78b8:	80c00017 	ldw	r3,0(r16)
    78bc:	da000117 	ldw	r8,4(sp)
    78c0:	1585c83a 	sub	r2,r2,r22
    78c4:	1dad883a 	add	r22,r3,r22
    78c8:	80800215 	stw	r2,8(r16)
    78cc:	85800015 	stw	r22,0(r16)
    78d0:	003fbf06 	br	77d0 <__sfvwrite_r+0x278>
    78d4:	81000017 	ldw	r4,0(r16)
    78d8:	9027883a 	mov	r19,r18
    78dc:	902f883a 	mov	r23,r18
    78e0:	003f6c06 	br	7694 <__sfvwrite_r+0x13c>
    78e4:	900d883a 	mov	r6,r18
    78e8:	01400284 	movi	r5,10
    78ec:	e009883a 	mov	r4,fp
    78f0:	0007e340 	call	7e34 <memchr>
    78f4:	10003e26 	beq	r2,zero,79f0 <__sfvwrite_r+0x498>
    78f8:	10800044 	addi	r2,r2,1
    78fc:	1727c83a 	sub	r19,r2,fp
    7900:	02000044 	movi	r8,1
    7904:	003f9d06 	br	777c <__sfvwrite_r+0x224>
    7908:	80800517 	ldw	r2,20(r16)
    790c:	81400417 	ldw	r5,16(r16)
    7910:	81c00017 	ldw	r7,0(r16)
    7914:	10a7883a 	add	r19,r2,r2
    7918:	9885883a 	add	r2,r19,r2
    791c:	1026d7fa 	srli	r19,r2,31
    7920:	396dc83a 	sub	r22,r7,r5
    7924:	b1000044 	addi	r4,r22,1
    7928:	9885883a 	add	r2,r19,r2
    792c:	1027d07a 	srai	r19,r2,1
    7930:	2485883a 	add	r2,r4,r18
    7934:	980d883a 	mov	r6,r19
    7938:	9880022e 	bgeu	r19,r2,7944 <__sfvwrite_r+0x3ec>
    793c:	1027883a 	mov	r19,r2
    7940:	100d883a 	mov	r6,r2
    7944:	18c1000c 	andi	r3,r3,1024
    7948:	18001c26 	beq	r3,zero,79bc <__sfvwrite_r+0x464>
    794c:	300b883a 	mov	r5,r6
    7950:	a809883a 	mov	r4,r21
    7954:	00023f80 	call	23f8 <_malloc_r>
    7958:	102f883a 	mov	r23,r2
    795c:	10002926 	beq	r2,zero,7a04 <__sfvwrite_r+0x4ac>
    7960:	81400417 	ldw	r5,16(r16)
    7964:	b00d883a 	mov	r6,r22
    7968:	1009883a 	mov	r4,r2
    796c:	0007f180 	call	7f18 <memcpy>
    7970:	8080030b 	ldhu	r2,12(r16)
    7974:	00fedfc4 	movi	r3,-1153
    7978:	10c4703a 	and	r2,r2,r3
    797c:	10802014 	ori	r2,r2,128
    7980:	8080030d 	sth	r2,12(r16)
    7984:	bd89883a 	add	r4,r23,r22
    7988:	9d8fc83a 	sub	r7,r19,r22
    798c:	85c00415 	stw	r23,16(r16)
    7990:	84c00515 	stw	r19,20(r16)
    7994:	81000015 	stw	r4,0(r16)
    7998:	9027883a 	mov	r19,r18
    799c:	81c00215 	stw	r7,8(r16)
    79a0:	902f883a 	mov	r23,r18
    79a4:	003f3b06 	br	7694 <__sfvwrite_r+0x13c>
    79a8:	800b883a 	mov	r5,r16
    79ac:	a809883a 	mov	r4,r21
    79b0:	0006cf80 	call	6cf8 <_fflush_r>
    79b4:	103fb926 	beq	r2,zero,789c <__sfvwrite_r+0x344>
    79b8:	003f6506 	br	7750 <__sfvwrite_r+0x1f8>
    79bc:	a809883a 	mov	r4,r21
    79c0:	00092e00 	call	92e0 <_realloc_r>
    79c4:	102f883a 	mov	r23,r2
    79c8:	103fee1e 	bne	r2,zero,7984 <__sfvwrite_r+0x42c>
    79cc:	81400417 	ldw	r5,16(r16)
    79d0:	a809883a 	mov	r4,r21
    79d4:	00072480 	call	7248 <_free_r>
    79d8:	8080030b 	ldhu	r2,12(r16)
    79dc:	00ffdfc4 	movi	r3,-129
    79e0:	1884703a 	and	r2,r3,r2
    79e4:	00c00304 	movi	r3,12
    79e8:	a8c00015 	stw	r3,0(r21)
    79ec:	003f5906 	br	7754 <__sfvwrite_r+0x1fc>
    79f0:	94c00044 	addi	r19,r18,1
    79f4:	02000044 	movi	r8,1
    79f8:	003f6006 	br	777c <__sfvwrite_r+0x224>
    79fc:	00bfffc4 	movi	r2,-1
    7a00:	003f0306 	br	7610 <__sfvwrite_r+0xb8>
    7a04:	00800304 	movi	r2,12
    7a08:	a8800015 	stw	r2,0(r21)
    7a0c:	8080030b 	ldhu	r2,12(r16)
    7a10:	003f5006 	br	7754 <__sfvwrite_r+0x1fc>

00007a14 <_fwalk>:
    7a14:	defff704 	addi	sp,sp,-36
    7a18:	dd000415 	stw	r20,16(sp)
    7a1c:	dfc00815 	stw	ra,32(sp)
    7a20:	ddc00715 	stw	r23,28(sp)
    7a24:	dd800615 	stw	r22,24(sp)
    7a28:	dd400515 	stw	r21,20(sp)
    7a2c:	dcc00315 	stw	r19,12(sp)
    7a30:	dc800215 	stw	r18,8(sp)
    7a34:	dc400115 	stw	r17,4(sp)
    7a38:	dc000015 	stw	r16,0(sp)
    7a3c:	2500b804 	addi	r20,r4,736
    7a40:	a0002326 	beq	r20,zero,7ad0 <_fwalk+0xbc>
    7a44:	282b883a 	mov	r21,r5
    7a48:	002f883a 	mov	r23,zero
    7a4c:	05800044 	movi	r22,1
    7a50:	04ffffc4 	movi	r19,-1
    7a54:	a4400117 	ldw	r17,4(r20)
    7a58:	a4800217 	ldw	r18,8(r20)
    7a5c:	8c7fffc4 	addi	r17,r17,-1
    7a60:	88000d16 	blt	r17,zero,7a98 <_fwalk+0x84>
    7a64:	94000304 	addi	r16,r18,12
    7a68:	94800384 	addi	r18,r18,14
    7a6c:	8080000b 	ldhu	r2,0(r16)
    7a70:	8c7fffc4 	addi	r17,r17,-1
    7a74:	813ffd04 	addi	r4,r16,-12
    7a78:	b080042e 	bgeu	r22,r2,7a8c <_fwalk+0x78>
    7a7c:	9080000f 	ldh	r2,0(r18)
    7a80:	14c00226 	beq	r2,r19,7a8c <_fwalk+0x78>
    7a84:	a83ee83a 	callr	r21
    7a88:	b8aeb03a 	or	r23,r23,r2
    7a8c:	84001a04 	addi	r16,r16,104
    7a90:	94801a04 	addi	r18,r18,104
    7a94:	8cfff51e 	bne	r17,r19,7a6c <_fwalk+0x58>
    7a98:	a5000017 	ldw	r20,0(r20)
    7a9c:	a03fed1e 	bne	r20,zero,7a54 <_fwalk+0x40>
    7aa0:	b805883a 	mov	r2,r23
    7aa4:	dfc00817 	ldw	ra,32(sp)
    7aa8:	ddc00717 	ldw	r23,28(sp)
    7aac:	dd800617 	ldw	r22,24(sp)
    7ab0:	dd400517 	ldw	r21,20(sp)
    7ab4:	dd000417 	ldw	r20,16(sp)
    7ab8:	dcc00317 	ldw	r19,12(sp)
    7abc:	dc800217 	ldw	r18,8(sp)
    7ac0:	dc400117 	ldw	r17,4(sp)
    7ac4:	dc000017 	ldw	r16,0(sp)
    7ac8:	dec00904 	addi	sp,sp,36
    7acc:	f800283a 	ret
    7ad0:	002f883a 	mov	r23,zero
    7ad4:	003ff206 	br	7aa0 <_fwalk+0x8c>

00007ad8 <_fwalk_reent>:
    7ad8:	defff704 	addi	sp,sp,-36
    7adc:	dd000415 	stw	r20,16(sp)
    7ae0:	dfc00815 	stw	ra,32(sp)
    7ae4:	ddc00715 	stw	r23,28(sp)
    7ae8:	dd800615 	stw	r22,24(sp)
    7aec:	dd400515 	stw	r21,20(sp)
    7af0:	dcc00315 	stw	r19,12(sp)
    7af4:	dc800215 	stw	r18,8(sp)
    7af8:	dc400115 	stw	r17,4(sp)
    7afc:	dc000015 	stw	r16,0(sp)
    7b00:	2500b804 	addi	r20,r4,736
    7b04:	a0002326 	beq	r20,zero,7b94 <_fwalk_reent+0xbc>
    7b08:	282b883a 	mov	r21,r5
    7b0c:	2027883a 	mov	r19,r4
    7b10:	002f883a 	mov	r23,zero
    7b14:	05800044 	movi	r22,1
    7b18:	04bfffc4 	movi	r18,-1
    7b1c:	a4400117 	ldw	r17,4(r20)
    7b20:	a4000217 	ldw	r16,8(r20)
    7b24:	8c7fffc4 	addi	r17,r17,-1
    7b28:	88000c16 	blt	r17,zero,7b5c <_fwalk_reent+0x84>
    7b2c:	84000304 	addi	r16,r16,12
    7b30:	8080000b 	ldhu	r2,0(r16)
    7b34:	8c7fffc4 	addi	r17,r17,-1
    7b38:	817ffd04 	addi	r5,r16,-12
    7b3c:	b080052e 	bgeu	r22,r2,7b54 <_fwalk_reent+0x7c>
    7b40:	8080008f 	ldh	r2,2(r16)
    7b44:	9809883a 	mov	r4,r19
    7b48:	14800226 	beq	r2,r18,7b54 <_fwalk_reent+0x7c>
    7b4c:	a83ee83a 	callr	r21
    7b50:	b8aeb03a 	or	r23,r23,r2
    7b54:	84001a04 	addi	r16,r16,104
    7b58:	8cbff51e 	bne	r17,r18,7b30 <_fwalk_reent+0x58>
    7b5c:	a5000017 	ldw	r20,0(r20)
    7b60:	a03fee1e 	bne	r20,zero,7b1c <_fwalk_reent+0x44>
    7b64:	b805883a 	mov	r2,r23
    7b68:	dfc00817 	ldw	ra,32(sp)
    7b6c:	ddc00717 	ldw	r23,28(sp)
    7b70:	dd800617 	ldw	r22,24(sp)
    7b74:	dd400517 	ldw	r21,20(sp)
    7b78:	dd000417 	ldw	r20,16(sp)
    7b7c:	dcc00317 	ldw	r19,12(sp)
    7b80:	dc800217 	ldw	r18,8(sp)
    7b84:	dc400117 	ldw	r17,4(sp)
    7b88:	dc000017 	ldw	r16,0(sp)
    7b8c:	dec00904 	addi	sp,sp,36
    7b90:	f800283a 	ret
    7b94:	002f883a 	mov	r23,zero
    7b98:	003ff206 	br	7b64 <_fwalk_reent+0x8c>

00007b9c <_setlocale_r>:
    7b9c:	30001b26 	beq	r6,zero,7c0c <_setlocale_r+0x70>
    7ba0:	01400074 	movhi	r5,1
    7ba4:	defffe04 	addi	sp,sp,-8
    7ba8:	29472104 	addi	r5,r5,7300
    7bac:	3009883a 	mov	r4,r6
    7bb0:	dc000015 	stw	r16,0(sp)
    7bb4:	dfc00115 	stw	ra,4(sp)
    7bb8:	3021883a 	mov	r16,r6
    7bbc:	00099f40 	call	99f4 <strcmp>
    7bc0:	1000061e 	bne	r2,zero,7bdc <_setlocale_r+0x40>
    7bc4:	00800074 	movhi	r2,1
    7bc8:	10872004 	addi	r2,r2,7296
    7bcc:	dfc00117 	ldw	ra,4(sp)
    7bd0:	dc000017 	ldw	r16,0(sp)
    7bd4:	dec00204 	addi	sp,sp,8
    7bd8:	f800283a 	ret
    7bdc:	01400074 	movhi	r5,1
    7be0:	29472004 	addi	r5,r5,7296
    7be4:	8009883a 	mov	r4,r16
    7be8:	00099f40 	call	99f4 <strcmp>
    7bec:	103ff526 	beq	r2,zero,7bc4 <_setlocale_r+0x28>
    7bf0:	01400074 	movhi	r5,1
    7bf4:	29470b04 	addi	r5,r5,7212
    7bf8:	8009883a 	mov	r4,r16
    7bfc:	00099f40 	call	99f4 <strcmp>
    7c00:	103ff026 	beq	r2,zero,7bc4 <_setlocale_r+0x28>
    7c04:	0005883a 	mov	r2,zero
    7c08:	003ff006 	br	7bcc <_setlocale_r+0x30>
    7c0c:	00800074 	movhi	r2,1
    7c10:	10872004 	addi	r2,r2,7296
    7c14:	f800283a 	ret

00007c18 <__locale_charset>:
    7c18:	00800074 	movhi	r2,1
    7c1c:	1089d304 	addi	r2,r2,10060
    7c20:	f800283a 	ret

00007c24 <__locale_mb_cur_max>:
    7c24:	00800074 	movhi	r2,1
    7c28:	108e6f04 	addi	r2,r2,14780
    7c2c:	10800017 	ldw	r2,0(r2)
    7c30:	f800283a 	ret

00007c34 <__locale_msgcharset>:
    7c34:	00800074 	movhi	r2,1
    7c38:	1089cb04 	addi	r2,r2,10028
    7c3c:	f800283a 	ret

00007c40 <__locale_cjk_lang>:
    7c40:	0005883a 	mov	r2,zero
    7c44:	f800283a 	ret

00007c48 <_localeconv_r>:
    7c48:	00800074 	movhi	r2,1
    7c4c:	1089db04 	addi	r2,r2,10092
    7c50:	f800283a 	ret

00007c54 <setlocale>:
    7c54:	00800074 	movhi	r2,1
    7c58:	108e6e04 	addi	r2,r2,14776
    7c5c:	280d883a 	mov	r6,r5
    7c60:	200b883a 	mov	r5,r4
    7c64:	11000017 	ldw	r4,0(r2)
    7c68:	0007b9c1 	jmpi	7b9c <_setlocale_r>

00007c6c <localeconv>:
    7c6c:	00800074 	movhi	r2,1
    7c70:	1089db04 	addi	r2,r2,10092
    7c74:	f800283a 	ret

00007c78 <__smakebuf_r>:
    7c78:	2880030b 	ldhu	r2,12(r5)
    7c7c:	10c0008c 	andi	r3,r2,2
    7c80:	1800411e 	bne	r3,zero,7d88 <__smakebuf_r+0x110>
    7c84:	deffec04 	addi	sp,sp,-80
    7c88:	dc000f15 	stw	r16,60(sp)
    7c8c:	2821883a 	mov	r16,r5
    7c90:	2940038f 	ldh	r5,14(r5)
    7c94:	dc401015 	stw	r17,64(sp)
    7c98:	dfc01315 	stw	ra,76(sp)
    7c9c:	dcc01215 	stw	r19,72(sp)
    7ca0:	dc801115 	stw	r18,68(sp)
    7ca4:	2023883a 	mov	r17,r4
    7ca8:	28001c16 	blt	r5,zero,7d1c <__smakebuf_r+0xa4>
    7cac:	d80d883a 	mov	r6,sp
    7cb0:	000b59c0 	call	b59c <_fstat_r>
    7cb4:	10001816 	blt	r2,zero,7d18 <__smakebuf_r+0xa0>
    7cb8:	d8800117 	ldw	r2,4(sp)
    7cbc:	00e00014 	movui	r3,32768
    7cc0:	10bc000c 	andi	r2,r2,61440
    7cc4:	14c80020 	cmpeqi	r19,r2,8192
    7cc8:	10c03726 	beq	r2,r3,7da8 <__smakebuf_r+0x130>
    7ccc:	80c0030b 	ldhu	r3,12(r16)
    7cd0:	18c20014 	ori	r3,r3,2048
    7cd4:	80c0030d 	sth	r3,12(r16)
    7cd8:	00c80004 	movi	r3,8192
    7cdc:	10c0521e 	bne	r2,r3,7e28 <__smakebuf_r+0x1b0>
    7ce0:	8140038f 	ldh	r5,14(r16)
    7ce4:	8809883a 	mov	r4,r17
    7ce8:	000b5f80 	call	b5f8 <_isatty_r>
    7cec:	10004c26 	beq	r2,zero,7e20 <__smakebuf_r+0x1a8>
    7cf0:	8080030b 	ldhu	r2,12(r16)
    7cf4:	80c010c4 	addi	r3,r16,67
    7cf8:	80c00015 	stw	r3,0(r16)
    7cfc:	10800054 	ori	r2,r2,1
    7d00:	8080030d 	sth	r2,12(r16)
    7d04:	00800044 	movi	r2,1
    7d08:	80c00415 	stw	r3,16(r16)
    7d0c:	80800515 	stw	r2,20(r16)
    7d10:	04810004 	movi	r18,1024
    7d14:	00000706 	br	7d34 <__smakebuf_r+0xbc>
    7d18:	8080030b 	ldhu	r2,12(r16)
    7d1c:	10c0200c 	andi	r3,r2,128
    7d20:	18001f1e 	bne	r3,zero,7da0 <__smakebuf_r+0x128>
    7d24:	04810004 	movi	r18,1024
    7d28:	10820014 	ori	r2,r2,2048
    7d2c:	8080030d 	sth	r2,12(r16)
    7d30:	0027883a 	mov	r19,zero
    7d34:	900b883a 	mov	r5,r18
    7d38:	8809883a 	mov	r4,r17
    7d3c:	00023f80 	call	23f8 <_malloc_r>
    7d40:	10002c26 	beq	r2,zero,7df4 <__smakebuf_r+0x17c>
    7d44:	80c0030b 	ldhu	r3,12(r16)
    7d48:	01000034 	movhi	r4,0
    7d4c:	211b6304 	addi	r4,r4,28044
    7d50:	89000f15 	stw	r4,60(r17)
    7d54:	18c02014 	ori	r3,r3,128
    7d58:	80c0030d 	sth	r3,12(r16)
    7d5c:	80800015 	stw	r2,0(r16)
    7d60:	80800415 	stw	r2,16(r16)
    7d64:	84800515 	stw	r18,20(r16)
    7d68:	98001a1e 	bne	r19,zero,7dd4 <__smakebuf_r+0x15c>
    7d6c:	dfc01317 	ldw	ra,76(sp)
    7d70:	dcc01217 	ldw	r19,72(sp)
    7d74:	dc801117 	ldw	r18,68(sp)
    7d78:	dc401017 	ldw	r17,64(sp)
    7d7c:	dc000f17 	ldw	r16,60(sp)
    7d80:	dec01404 	addi	sp,sp,80
    7d84:	f800283a 	ret
    7d88:	288010c4 	addi	r2,r5,67
    7d8c:	28800015 	stw	r2,0(r5)
    7d90:	28800415 	stw	r2,16(r5)
    7d94:	00800044 	movi	r2,1
    7d98:	28800515 	stw	r2,20(r5)
    7d9c:	f800283a 	ret
    7da0:	04801004 	movi	r18,64
    7da4:	003fe006 	br	7d28 <__smakebuf_r+0xb0>
    7da8:	81000a17 	ldw	r4,40(r16)
    7dac:	00c00074 	movhi	r3,1
    7db0:	18e66404 	addi	r3,r3,-26224
    7db4:	20ffc51e 	bne	r4,r3,7ccc <__smakebuf_r+0x54>
    7db8:	8080030b 	ldhu	r2,12(r16)
    7dbc:	04810004 	movi	r18,1024
    7dc0:	84801315 	stw	r18,76(r16)
    7dc4:	1484b03a 	or	r2,r2,r18
    7dc8:	8080030d 	sth	r2,12(r16)
    7dcc:	0027883a 	mov	r19,zero
    7dd0:	003fd806 	br	7d34 <__smakebuf_r+0xbc>
    7dd4:	8140038f 	ldh	r5,14(r16)
    7dd8:	8809883a 	mov	r4,r17
    7ddc:	000b5f80 	call	b5f8 <_isatty_r>
    7de0:	103fe226 	beq	r2,zero,7d6c <__smakebuf_r+0xf4>
    7de4:	8080030b 	ldhu	r2,12(r16)
    7de8:	10800054 	ori	r2,r2,1
    7dec:	8080030d 	sth	r2,12(r16)
    7df0:	003fde06 	br	7d6c <__smakebuf_r+0xf4>
    7df4:	8080030b 	ldhu	r2,12(r16)
    7df8:	10c0800c 	andi	r3,r2,512
    7dfc:	183fdb1e 	bne	r3,zero,7d6c <__smakebuf_r+0xf4>
    7e00:	10800094 	ori	r2,r2,2
    7e04:	80c010c4 	addi	r3,r16,67
    7e08:	8080030d 	sth	r2,12(r16)
    7e0c:	00800044 	movi	r2,1
    7e10:	80c00015 	stw	r3,0(r16)
    7e14:	80c00415 	stw	r3,16(r16)
    7e18:	80800515 	stw	r2,20(r16)
    7e1c:	003fd306 	br	7d6c <__smakebuf_r+0xf4>
    7e20:	04810004 	movi	r18,1024
    7e24:	003fc306 	br	7d34 <__smakebuf_r+0xbc>
    7e28:	0027883a 	mov	r19,zero
    7e2c:	04810004 	movi	r18,1024
    7e30:	003fc006 	br	7d34 <__smakebuf_r+0xbc>

00007e34 <memchr>:
    7e34:	208000cc 	andi	r2,r4,3
    7e38:	280f883a 	mov	r7,r5
    7e3c:	10003426 	beq	r2,zero,7f10 <memchr+0xdc>
    7e40:	30bfffc4 	addi	r2,r6,-1
    7e44:	30001a26 	beq	r6,zero,7eb0 <memchr+0x7c>
    7e48:	20c00003 	ldbu	r3,0(r4)
    7e4c:	29803fcc 	andi	r6,r5,255
    7e50:	30c0051e 	bne	r6,r3,7e68 <memchr+0x34>
    7e54:	00001806 	br	7eb8 <memchr+0x84>
    7e58:	10001526 	beq	r2,zero,7eb0 <memchr+0x7c>
    7e5c:	20c00003 	ldbu	r3,0(r4)
    7e60:	10bfffc4 	addi	r2,r2,-1
    7e64:	30c01426 	beq	r6,r3,7eb8 <memchr+0x84>
    7e68:	21000044 	addi	r4,r4,1
    7e6c:	20c000cc 	andi	r3,r4,3
    7e70:	183ff91e 	bne	r3,zero,7e58 <memchr+0x24>
    7e74:	020000c4 	movi	r8,3
    7e78:	40801136 	bltu	r8,r2,7ec0 <memchr+0x8c>
    7e7c:	10000c26 	beq	r2,zero,7eb0 <memchr+0x7c>
    7e80:	20c00003 	ldbu	r3,0(r4)
    7e84:	29403fcc 	andi	r5,r5,255
    7e88:	28c00b26 	beq	r5,r3,7eb8 <memchr+0x84>
    7e8c:	20c00044 	addi	r3,r4,1
    7e90:	39803fcc 	andi	r6,r7,255
    7e94:	2089883a 	add	r4,r4,r2
    7e98:	00000306 	br	7ea8 <memchr+0x74>
    7e9c:	18c00044 	addi	r3,r3,1
    7ea0:	197fffc3 	ldbu	r5,-1(r3)
    7ea4:	31400526 	beq	r6,r5,7ebc <memchr+0x88>
    7ea8:	1805883a 	mov	r2,r3
    7eac:	20fffb1e 	bne	r4,r3,7e9c <memchr+0x68>
    7eb0:	0005883a 	mov	r2,zero
    7eb4:	f800283a 	ret
    7eb8:	2005883a 	mov	r2,r4
    7ebc:	f800283a 	ret
    7ec0:	28c03fcc 	andi	r3,r5,255
    7ec4:	1812923a 	slli	r9,r3,8
    7ec8:	02ffbff4 	movhi	r11,65279
    7ecc:	02a02074 	movhi	r10,32897
    7ed0:	48d2b03a 	or	r9,r9,r3
    7ed4:	4806943a 	slli	r3,r9,16
    7ed8:	5affbfc4 	addi	r11,r11,-257
    7edc:	52a02004 	addi	r10,r10,-32640
    7ee0:	48d2b03a 	or	r9,r9,r3
    7ee4:	20c00017 	ldw	r3,0(r4)
    7ee8:	48c6f03a 	xor	r3,r9,r3
    7eec:	1acd883a 	add	r6,r3,r11
    7ef0:	00c6303a 	nor	r3,zero,r3
    7ef4:	30c6703a 	and	r3,r6,r3
    7ef8:	1a86703a 	and	r3,r3,r10
    7efc:	183fe01e 	bne	r3,zero,7e80 <memchr+0x4c>
    7f00:	10bfff04 	addi	r2,r2,-4
    7f04:	21000104 	addi	r4,r4,4
    7f08:	40bff636 	bltu	r8,r2,7ee4 <memchr+0xb0>
    7f0c:	003fdb06 	br	7e7c <memchr+0x48>
    7f10:	3005883a 	mov	r2,r6
    7f14:	003fd706 	br	7e74 <memchr+0x40>

00007f18 <memcpy>:
    7f18:	defffd04 	addi	sp,sp,-12
    7f1c:	dfc00215 	stw	ra,8(sp)
    7f20:	dc400115 	stw	r17,4(sp)
    7f24:	dc000015 	stw	r16,0(sp)
    7f28:	00c003c4 	movi	r3,15
    7f2c:	2005883a 	mov	r2,r4
    7f30:	1980452e 	bgeu	r3,r6,8048 <memcpy+0x130>
    7f34:	2906b03a 	or	r3,r5,r4
    7f38:	18c000cc 	andi	r3,r3,3
    7f3c:	1800441e 	bne	r3,zero,8050 <memcpy+0x138>
    7f40:	347ffc04 	addi	r17,r6,-16
    7f44:	8822d13a 	srli	r17,r17,4
    7f48:	28c00104 	addi	r3,r5,4
    7f4c:	23400104 	addi	r13,r4,4
    7f50:	8820913a 	slli	r16,r17,4
    7f54:	2b000204 	addi	r12,r5,8
    7f58:	22c00204 	addi	r11,r4,8
    7f5c:	84000504 	addi	r16,r16,20
    7f60:	2a800304 	addi	r10,r5,12
    7f64:	22400304 	addi	r9,r4,12
    7f68:	2c21883a 	add	r16,r5,r16
    7f6c:	2811883a 	mov	r8,r5
    7f70:	200f883a 	mov	r7,r4
    7f74:	41000017 	ldw	r4,0(r8)
    7f78:	1fc00017 	ldw	ra,0(r3)
    7f7c:	63c00017 	ldw	r15,0(r12)
    7f80:	39000015 	stw	r4,0(r7)
    7f84:	53800017 	ldw	r14,0(r10)
    7f88:	6fc00015 	stw	ra,0(r13)
    7f8c:	5bc00015 	stw	r15,0(r11)
    7f90:	4b800015 	stw	r14,0(r9)
    7f94:	18c00404 	addi	r3,r3,16
    7f98:	39c00404 	addi	r7,r7,16
    7f9c:	42000404 	addi	r8,r8,16
    7fa0:	6b400404 	addi	r13,r13,16
    7fa4:	63000404 	addi	r12,r12,16
    7fa8:	5ac00404 	addi	r11,r11,16
    7fac:	52800404 	addi	r10,r10,16
    7fb0:	4a400404 	addi	r9,r9,16
    7fb4:	1c3fef1e 	bne	r3,r16,7f74 <memcpy+0x5c>
    7fb8:	89c00044 	addi	r7,r17,1
    7fbc:	380e913a 	slli	r7,r7,4
    7fc0:	310003cc 	andi	r4,r6,15
    7fc4:	02c000c4 	movi	r11,3
    7fc8:	11c7883a 	add	r3,r2,r7
    7fcc:	29cb883a 	add	r5,r5,r7
    7fd0:	5900212e 	bgeu	r11,r4,8058 <memcpy+0x140>
    7fd4:	1813883a 	mov	r9,r3
    7fd8:	2811883a 	mov	r8,r5
    7fdc:	200f883a 	mov	r7,r4
    7fe0:	42800017 	ldw	r10,0(r8)
    7fe4:	4a400104 	addi	r9,r9,4
    7fe8:	39ffff04 	addi	r7,r7,-4
    7fec:	4abfff15 	stw	r10,-4(r9)
    7ff0:	42000104 	addi	r8,r8,4
    7ff4:	59fffa36 	bltu	r11,r7,7fe0 <memcpy+0xc8>
    7ff8:	213fff04 	addi	r4,r4,-4
    7ffc:	2008d0ba 	srli	r4,r4,2
    8000:	318000cc 	andi	r6,r6,3
    8004:	21000044 	addi	r4,r4,1
    8008:	2109883a 	add	r4,r4,r4
    800c:	2109883a 	add	r4,r4,r4
    8010:	1907883a 	add	r3,r3,r4
    8014:	290b883a 	add	r5,r5,r4
    8018:	30000626 	beq	r6,zero,8034 <memcpy+0x11c>
    801c:	198d883a 	add	r6,r3,r6
    8020:	29c00003 	ldbu	r7,0(r5)
    8024:	18c00044 	addi	r3,r3,1
    8028:	29400044 	addi	r5,r5,1
    802c:	19ffffc5 	stb	r7,-1(r3)
    8030:	19bffb1e 	bne	r3,r6,8020 <memcpy+0x108>
    8034:	dfc00217 	ldw	ra,8(sp)
    8038:	dc400117 	ldw	r17,4(sp)
    803c:	dc000017 	ldw	r16,0(sp)
    8040:	dec00304 	addi	sp,sp,12
    8044:	f800283a 	ret
    8048:	2007883a 	mov	r3,r4
    804c:	003ff206 	br	8018 <memcpy+0x100>
    8050:	2007883a 	mov	r3,r4
    8054:	003ff106 	br	801c <memcpy+0x104>
    8058:	200d883a 	mov	r6,r4
    805c:	003fee06 	br	8018 <memcpy+0x100>

00008060 <memmove>:
    8060:	2005883a 	mov	r2,r4
    8064:	29000b2e 	bgeu	r5,r4,8094 <memmove+0x34>
    8068:	298f883a 	add	r7,r5,r6
    806c:	21c0092e 	bgeu	r4,r7,8094 <memmove+0x34>
    8070:	2187883a 	add	r3,r4,r6
    8074:	198bc83a 	sub	r5,r3,r6
    8078:	30004826 	beq	r6,zero,819c <memmove+0x13c>
    807c:	39ffffc4 	addi	r7,r7,-1
    8080:	39000003 	ldbu	r4,0(r7)
    8084:	18ffffc4 	addi	r3,r3,-1
    8088:	19000005 	stb	r4,0(r3)
    808c:	28fffb1e 	bne	r5,r3,807c <memmove+0x1c>
    8090:	f800283a 	ret
    8094:	00c003c4 	movi	r3,15
    8098:	1980412e 	bgeu	r3,r6,81a0 <memmove+0x140>
    809c:	2886b03a 	or	r3,r5,r2
    80a0:	18c000cc 	andi	r3,r3,3
    80a4:	1800401e 	bne	r3,zero,81a8 <memmove+0x148>
    80a8:	33fffc04 	addi	r15,r6,-16
    80ac:	781ed13a 	srli	r15,r15,4
    80b0:	28c00104 	addi	r3,r5,4
    80b4:	13400104 	addi	r13,r2,4
    80b8:	781c913a 	slli	r14,r15,4
    80bc:	2b000204 	addi	r12,r5,8
    80c0:	12c00204 	addi	r11,r2,8
    80c4:	73800504 	addi	r14,r14,20
    80c8:	2a800304 	addi	r10,r5,12
    80cc:	12400304 	addi	r9,r2,12
    80d0:	2b9d883a 	add	r14,r5,r14
    80d4:	2811883a 	mov	r8,r5
    80d8:	100f883a 	mov	r7,r2
    80dc:	41000017 	ldw	r4,0(r8)
    80e0:	39c00404 	addi	r7,r7,16
    80e4:	18c00404 	addi	r3,r3,16
    80e8:	393ffc15 	stw	r4,-16(r7)
    80ec:	193ffc17 	ldw	r4,-16(r3)
    80f0:	6b400404 	addi	r13,r13,16
    80f4:	5ac00404 	addi	r11,r11,16
    80f8:	693ffc15 	stw	r4,-16(r13)
    80fc:	61000017 	ldw	r4,0(r12)
    8100:	4a400404 	addi	r9,r9,16
    8104:	42000404 	addi	r8,r8,16
    8108:	593ffc15 	stw	r4,-16(r11)
    810c:	51000017 	ldw	r4,0(r10)
    8110:	63000404 	addi	r12,r12,16
    8114:	52800404 	addi	r10,r10,16
    8118:	493ffc15 	stw	r4,-16(r9)
    811c:	1bbfef1e 	bne	r3,r14,80dc <memmove+0x7c>
    8120:	79000044 	addi	r4,r15,1
    8124:	2008913a 	slli	r4,r4,4
    8128:	328003cc 	andi	r10,r6,15
    812c:	02c000c4 	movi	r11,3
    8130:	1107883a 	add	r3,r2,r4
    8134:	290b883a 	add	r5,r5,r4
    8138:	5a801e2e 	bgeu	r11,r10,81b4 <memmove+0x154>
    813c:	1813883a 	mov	r9,r3
    8140:	2811883a 	mov	r8,r5
    8144:	500f883a 	mov	r7,r10
    8148:	41000017 	ldw	r4,0(r8)
    814c:	4a400104 	addi	r9,r9,4
    8150:	39ffff04 	addi	r7,r7,-4
    8154:	493fff15 	stw	r4,-4(r9)
    8158:	42000104 	addi	r8,r8,4
    815c:	59fffa36 	bltu	r11,r7,8148 <memmove+0xe8>
    8160:	513fff04 	addi	r4,r10,-4
    8164:	2008d0ba 	srli	r4,r4,2
    8168:	318000cc 	andi	r6,r6,3
    816c:	21000044 	addi	r4,r4,1
    8170:	2109883a 	add	r4,r4,r4
    8174:	2109883a 	add	r4,r4,r4
    8178:	1907883a 	add	r3,r3,r4
    817c:	290b883a 	add	r5,r5,r4
    8180:	30000b26 	beq	r6,zero,81b0 <memmove+0x150>
    8184:	198d883a 	add	r6,r3,r6
    8188:	29c00003 	ldbu	r7,0(r5)
    818c:	18c00044 	addi	r3,r3,1
    8190:	29400044 	addi	r5,r5,1
    8194:	19ffffc5 	stb	r7,-1(r3)
    8198:	19bffb1e 	bne	r3,r6,8188 <memmove+0x128>
    819c:	f800283a 	ret
    81a0:	1007883a 	mov	r3,r2
    81a4:	003ff606 	br	8180 <memmove+0x120>
    81a8:	1007883a 	mov	r3,r2
    81ac:	003ff506 	br	8184 <memmove+0x124>
    81b0:	f800283a 	ret
    81b4:	500d883a 	mov	r6,r10
    81b8:	003ff106 	br	8180 <memmove+0x120>

000081bc <memset>:
    81bc:	20c000cc 	andi	r3,r4,3
    81c0:	2005883a 	mov	r2,r4
    81c4:	18004426 	beq	r3,zero,82d8 <memset+0x11c>
    81c8:	31ffffc4 	addi	r7,r6,-1
    81cc:	30004026 	beq	r6,zero,82d0 <memset+0x114>
    81d0:	2813883a 	mov	r9,r5
    81d4:	200d883a 	mov	r6,r4
    81d8:	2007883a 	mov	r3,r4
    81dc:	00000406 	br	81f0 <memset+0x34>
    81e0:	3a3fffc4 	addi	r8,r7,-1
    81e4:	31800044 	addi	r6,r6,1
    81e8:	38003926 	beq	r7,zero,82d0 <memset+0x114>
    81ec:	400f883a 	mov	r7,r8
    81f0:	18c00044 	addi	r3,r3,1
    81f4:	32400005 	stb	r9,0(r6)
    81f8:	1a0000cc 	andi	r8,r3,3
    81fc:	403ff81e 	bne	r8,zero,81e0 <memset+0x24>
    8200:	010000c4 	movi	r4,3
    8204:	21c02d2e 	bgeu	r4,r7,82bc <memset+0x100>
    8208:	29003fcc 	andi	r4,r5,255
    820c:	200c923a 	slli	r6,r4,8
    8210:	3108b03a 	or	r4,r6,r4
    8214:	200c943a 	slli	r6,r4,16
    8218:	218cb03a 	or	r6,r4,r6
    821c:	010003c4 	movi	r4,15
    8220:	21c0182e 	bgeu	r4,r7,8284 <memset+0xc8>
    8224:	3b3ffc04 	addi	r12,r7,-16
    8228:	6018d13a 	srli	r12,r12,4
    822c:	1a000104 	addi	r8,r3,4
    8230:	1ac00204 	addi	r11,r3,8
    8234:	6008913a 	slli	r4,r12,4
    8238:	1a800304 	addi	r10,r3,12
    823c:	1813883a 	mov	r9,r3
    8240:	21000504 	addi	r4,r4,20
    8244:	1909883a 	add	r4,r3,r4
    8248:	49800015 	stw	r6,0(r9)
    824c:	41800015 	stw	r6,0(r8)
    8250:	59800015 	stw	r6,0(r11)
    8254:	51800015 	stw	r6,0(r10)
    8258:	42000404 	addi	r8,r8,16
    825c:	4a400404 	addi	r9,r9,16
    8260:	5ac00404 	addi	r11,r11,16
    8264:	52800404 	addi	r10,r10,16
    8268:	413ff71e 	bne	r8,r4,8248 <memset+0x8c>
    826c:	63000044 	addi	r12,r12,1
    8270:	6018913a 	slli	r12,r12,4
    8274:	39c003cc 	andi	r7,r7,15
    8278:	010000c4 	movi	r4,3
    827c:	1b07883a 	add	r3,r3,r12
    8280:	21c00e2e 	bgeu	r4,r7,82bc <memset+0x100>
    8284:	1813883a 	mov	r9,r3
    8288:	3811883a 	mov	r8,r7
    828c:	010000c4 	movi	r4,3
    8290:	49800015 	stw	r6,0(r9)
    8294:	423fff04 	addi	r8,r8,-4
    8298:	4a400104 	addi	r9,r9,4
    829c:	223ffc36 	bltu	r4,r8,8290 <memset+0xd4>
    82a0:	393fff04 	addi	r4,r7,-4
    82a4:	2008d0ba 	srli	r4,r4,2
    82a8:	39c000cc 	andi	r7,r7,3
    82ac:	21000044 	addi	r4,r4,1
    82b0:	2109883a 	add	r4,r4,r4
    82b4:	2109883a 	add	r4,r4,r4
    82b8:	1907883a 	add	r3,r3,r4
    82bc:	38000526 	beq	r7,zero,82d4 <memset+0x118>
    82c0:	19cf883a 	add	r7,r3,r7
    82c4:	19400005 	stb	r5,0(r3)
    82c8:	18c00044 	addi	r3,r3,1
    82cc:	38fffd1e 	bne	r7,r3,82c4 <memset+0x108>
    82d0:	f800283a 	ret
    82d4:	f800283a 	ret
    82d8:	2007883a 	mov	r3,r4
    82dc:	300f883a 	mov	r7,r6
    82e0:	003fc706 	br	8200 <memset+0x44>

000082e4 <_Balloc>:
    82e4:	20801317 	ldw	r2,76(r4)
    82e8:	defffc04 	addi	sp,sp,-16
    82ec:	dc400115 	stw	r17,4(sp)
    82f0:	dc000015 	stw	r16,0(sp)
    82f4:	dfc00315 	stw	ra,12(sp)
    82f8:	dc800215 	stw	r18,8(sp)
    82fc:	2023883a 	mov	r17,r4
    8300:	2821883a 	mov	r16,r5
    8304:	10000f26 	beq	r2,zero,8344 <_Balloc+0x60>
    8308:	8407883a 	add	r3,r16,r16
    830c:	18c7883a 	add	r3,r3,r3
    8310:	10c7883a 	add	r3,r2,r3
    8314:	18800017 	ldw	r2,0(r3)
    8318:	10001126 	beq	r2,zero,8360 <_Balloc+0x7c>
    831c:	11000017 	ldw	r4,0(r2)
    8320:	19000015 	stw	r4,0(r3)
    8324:	10000415 	stw	zero,16(r2)
    8328:	10000315 	stw	zero,12(r2)
    832c:	dfc00317 	ldw	ra,12(sp)
    8330:	dc800217 	ldw	r18,8(sp)
    8334:	dc400117 	ldw	r17,4(sp)
    8338:	dc000017 	ldw	r16,0(sp)
    833c:	dec00404 	addi	sp,sp,16
    8340:	f800283a 	ret
    8344:	01800844 	movi	r6,33
    8348:	01400104 	movi	r5,4
    834c:	000b1cc0 	call	b1cc <_calloc_r>
    8350:	88801315 	stw	r2,76(r17)
    8354:	103fec1e 	bne	r2,zero,8308 <_Balloc+0x24>
    8358:	0005883a 	mov	r2,zero
    835c:	003ff306 	br	832c <_Balloc+0x48>
    8360:	01400044 	movi	r5,1
    8364:	2c24983a 	sll	r18,r5,r16
    8368:	8809883a 	mov	r4,r17
    836c:	91800144 	addi	r6,r18,5
    8370:	318d883a 	add	r6,r6,r6
    8374:	318d883a 	add	r6,r6,r6
    8378:	000b1cc0 	call	b1cc <_calloc_r>
    837c:	103ff626 	beq	r2,zero,8358 <_Balloc+0x74>
    8380:	14000115 	stw	r16,4(r2)
    8384:	14800215 	stw	r18,8(r2)
    8388:	003fe606 	br	8324 <_Balloc+0x40>

0000838c <_Bfree>:
    838c:	28000826 	beq	r5,zero,83b0 <_Bfree+0x24>
    8390:	28c00117 	ldw	r3,4(r5)
    8394:	20801317 	ldw	r2,76(r4)
    8398:	18c7883a 	add	r3,r3,r3
    839c:	18c7883a 	add	r3,r3,r3
    83a0:	10c5883a 	add	r2,r2,r3
    83a4:	10c00017 	ldw	r3,0(r2)
    83a8:	28c00015 	stw	r3,0(r5)
    83ac:	11400015 	stw	r5,0(r2)
    83b0:	f800283a 	ret

000083b4 <__multadd>:
    83b4:	defffa04 	addi	sp,sp,-24
    83b8:	dc800315 	stw	r18,12(sp)
    83bc:	dc400215 	stw	r17,8(sp)
    83c0:	dc000115 	stw	r16,4(sp)
    83c4:	2823883a 	mov	r17,r5
    83c8:	2c000417 	ldw	r16,16(r5)
    83cc:	dfc00515 	stw	ra,20(sp)
    83d0:	dcc00415 	stw	r19,16(sp)
    83d4:	2025883a 	mov	r18,r4
    83d8:	29400504 	addi	r5,r5,20
    83dc:	0011883a 	mov	r8,zero
    83e0:	28c00017 	ldw	r3,0(r5)
    83e4:	29400104 	addi	r5,r5,4
    83e8:	42000044 	addi	r8,r8,1
    83ec:	18bfffcc 	andi	r2,r3,65535
    83f0:	1185383a 	mul	r2,r2,r6
    83f4:	1806d43a 	srli	r3,r3,16
    83f8:	11cf883a 	add	r7,r2,r7
    83fc:	3808d43a 	srli	r4,r7,16
    8400:	1987383a 	mul	r3,r3,r6
    8404:	38bfffcc 	andi	r2,r7,65535
    8408:	1907883a 	add	r3,r3,r4
    840c:	1808943a 	slli	r4,r3,16
    8410:	180ed43a 	srli	r7,r3,16
    8414:	2085883a 	add	r2,r4,r2
    8418:	28bfff15 	stw	r2,-4(r5)
    841c:	443ff016 	blt	r8,r16,83e0 <__multadd+0x2c>
    8420:	38000926 	beq	r7,zero,8448 <__multadd+0x94>
    8424:	88800217 	ldw	r2,8(r17)
    8428:	80800f0e 	bge	r16,r2,8468 <__multadd+0xb4>
    842c:	80800144 	addi	r2,r16,5
    8430:	1085883a 	add	r2,r2,r2
    8434:	1085883a 	add	r2,r2,r2
    8438:	8885883a 	add	r2,r17,r2
    843c:	11c00015 	stw	r7,0(r2)
    8440:	84000044 	addi	r16,r16,1
    8444:	8c000415 	stw	r16,16(r17)
    8448:	8805883a 	mov	r2,r17
    844c:	dfc00517 	ldw	ra,20(sp)
    8450:	dcc00417 	ldw	r19,16(sp)
    8454:	dc800317 	ldw	r18,12(sp)
    8458:	dc400217 	ldw	r17,8(sp)
    845c:	dc000117 	ldw	r16,4(sp)
    8460:	dec00604 	addi	sp,sp,24
    8464:	f800283a 	ret
    8468:	89400117 	ldw	r5,4(r17)
    846c:	9009883a 	mov	r4,r18
    8470:	d9c00015 	stw	r7,0(sp)
    8474:	29400044 	addi	r5,r5,1
    8478:	00082e40 	call	82e4 <_Balloc>
    847c:	89800417 	ldw	r6,16(r17)
    8480:	89400304 	addi	r5,r17,12
    8484:	11000304 	addi	r4,r2,12
    8488:	31800084 	addi	r6,r6,2
    848c:	318d883a 	add	r6,r6,r6
    8490:	318d883a 	add	r6,r6,r6
    8494:	1027883a 	mov	r19,r2
    8498:	0007f180 	call	7f18 <memcpy>
    849c:	d9c00017 	ldw	r7,0(sp)
    84a0:	88000a26 	beq	r17,zero,84cc <__multadd+0x118>
    84a4:	88c00117 	ldw	r3,4(r17)
    84a8:	90801317 	ldw	r2,76(r18)
    84ac:	18c7883a 	add	r3,r3,r3
    84b0:	18c7883a 	add	r3,r3,r3
    84b4:	10c5883a 	add	r2,r2,r3
    84b8:	10c00017 	ldw	r3,0(r2)
    84bc:	88c00015 	stw	r3,0(r17)
    84c0:	14400015 	stw	r17,0(r2)
    84c4:	9823883a 	mov	r17,r19
    84c8:	003fd806 	br	842c <__multadd+0x78>
    84cc:	9823883a 	mov	r17,r19
    84d0:	003fd606 	br	842c <__multadd+0x78>

000084d4 <__s2b>:
    84d4:	defff904 	addi	sp,sp,-28
    84d8:	dc400115 	stw	r17,4(sp)
    84dc:	dc000015 	stw	r16,0(sp)
    84e0:	2023883a 	mov	r17,r4
    84e4:	2821883a 	mov	r16,r5
    84e8:	39000204 	addi	r4,r7,8
    84ec:	01400244 	movi	r5,9
    84f0:	dcc00315 	stw	r19,12(sp)
    84f4:	dc800215 	stw	r18,8(sp)
    84f8:	dfc00615 	stw	ra,24(sp)
    84fc:	dd400515 	stw	r21,20(sp)
    8500:	dd000415 	stw	r20,16(sp)
    8504:	3825883a 	mov	r18,r7
    8508:	3027883a 	mov	r19,r6
    850c:	000c4fc0 	call	c4fc <__divsi3>
    8510:	00c00044 	movi	r3,1
    8514:	000b883a 	mov	r5,zero
    8518:	1880030e 	bge	r3,r2,8528 <__s2b+0x54>
    851c:	18c7883a 	add	r3,r3,r3
    8520:	29400044 	addi	r5,r5,1
    8524:	18bffd16 	blt	r3,r2,851c <__s2b+0x48>
    8528:	8809883a 	mov	r4,r17
    852c:	00082e40 	call	82e4 <_Balloc>
    8530:	d8c00717 	ldw	r3,28(sp)
    8534:	10c00515 	stw	r3,20(r2)
    8538:	00c00044 	movi	r3,1
    853c:	10c00415 	stw	r3,16(r2)
    8540:	00c00244 	movi	r3,9
    8544:	1cc0210e 	bge	r3,r19,85cc <__s2b+0xf8>
    8548:	80eb883a 	add	r21,r16,r3
    854c:	a829883a 	mov	r20,r21
    8550:	84e1883a 	add	r16,r16,r19
    8554:	a1c00007 	ldb	r7,0(r20)
    8558:	01800284 	movi	r6,10
    855c:	a5000044 	addi	r20,r20,1
    8560:	100b883a 	mov	r5,r2
    8564:	39fff404 	addi	r7,r7,-48
    8568:	8809883a 	mov	r4,r17
    856c:	00083b40 	call	83b4 <__multadd>
    8570:	a43ff81e 	bne	r20,r16,8554 <__s2b+0x80>
    8574:	ace1883a 	add	r16,r21,r19
    8578:	843ffe04 	addi	r16,r16,-8
    857c:	9c800a0e 	bge	r19,r18,85a8 <__s2b+0xd4>
    8580:	94e5c83a 	sub	r18,r18,r19
    8584:	84a5883a 	add	r18,r16,r18
    8588:	81c00007 	ldb	r7,0(r16)
    858c:	01800284 	movi	r6,10
    8590:	84000044 	addi	r16,r16,1
    8594:	100b883a 	mov	r5,r2
    8598:	39fff404 	addi	r7,r7,-48
    859c:	8809883a 	mov	r4,r17
    85a0:	00083b40 	call	83b4 <__multadd>
    85a4:	84bff81e 	bne	r16,r18,8588 <__s2b+0xb4>
    85a8:	dfc00617 	ldw	ra,24(sp)
    85ac:	dd400517 	ldw	r21,20(sp)
    85b0:	dd000417 	ldw	r20,16(sp)
    85b4:	dcc00317 	ldw	r19,12(sp)
    85b8:	dc800217 	ldw	r18,8(sp)
    85bc:	dc400117 	ldw	r17,4(sp)
    85c0:	dc000017 	ldw	r16,0(sp)
    85c4:	dec00704 	addi	sp,sp,28
    85c8:	f800283a 	ret
    85cc:	84000284 	addi	r16,r16,10
    85d0:	1827883a 	mov	r19,r3
    85d4:	003fe906 	br	857c <__s2b+0xa8>

000085d8 <__hi0bits>:
    85d8:	20bfffec 	andhi	r2,r4,65535
    85dc:	1000141e 	bne	r2,zero,8630 <__hi0bits+0x58>
    85e0:	2008943a 	slli	r4,r4,16
    85e4:	00800404 	movi	r2,16
    85e8:	20ffc02c 	andhi	r3,r4,65280
    85ec:	1800021e 	bne	r3,zero,85f8 <__hi0bits+0x20>
    85f0:	2008923a 	slli	r4,r4,8
    85f4:	10800204 	addi	r2,r2,8
    85f8:	20fc002c 	andhi	r3,r4,61440
    85fc:	1800021e 	bne	r3,zero,8608 <__hi0bits+0x30>
    8600:	2008913a 	slli	r4,r4,4
    8604:	10800104 	addi	r2,r2,4
    8608:	20f0002c 	andhi	r3,r4,49152
    860c:	1800031e 	bne	r3,zero,861c <__hi0bits+0x44>
    8610:	2109883a 	add	r4,r4,r4
    8614:	10800084 	addi	r2,r2,2
    8618:	2109883a 	add	r4,r4,r4
    861c:	20000316 	blt	r4,zero,862c <__hi0bits+0x54>
    8620:	2110002c 	andhi	r4,r4,16384
    8624:	2000041e 	bne	r4,zero,8638 <__hi0bits+0x60>
    8628:	00800804 	movi	r2,32
    862c:	f800283a 	ret
    8630:	0005883a 	mov	r2,zero
    8634:	003fec06 	br	85e8 <__hi0bits+0x10>
    8638:	10800044 	addi	r2,r2,1
    863c:	f800283a 	ret

00008640 <__lo0bits>:
    8640:	20c00017 	ldw	r3,0(r4)
    8644:	188001cc 	andi	r2,r3,7
    8648:	10000826 	beq	r2,zero,866c <__lo0bits+0x2c>
    864c:	1880004c 	andi	r2,r3,1
    8650:	1000211e 	bne	r2,zero,86d8 <__lo0bits+0x98>
    8654:	1880008c 	andi	r2,r3,2
    8658:	1000211e 	bne	r2,zero,86e0 <__lo0bits+0xa0>
    865c:	1806d0ba 	srli	r3,r3,2
    8660:	00800084 	movi	r2,2
    8664:	20c00015 	stw	r3,0(r4)
    8668:	f800283a 	ret
    866c:	18bfffcc 	andi	r2,r3,65535
    8670:	10001326 	beq	r2,zero,86c0 <__lo0bits+0x80>
    8674:	0005883a 	mov	r2,zero
    8678:	19403fcc 	andi	r5,r3,255
    867c:	2800021e 	bne	r5,zero,8688 <__lo0bits+0x48>
    8680:	1806d23a 	srli	r3,r3,8
    8684:	10800204 	addi	r2,r2,8
    8688:	194003cc 	andi	r5,r3,15
    868c:	2800021e 	bne	r5,zero,8698 <__lo0bits+0x58>
    8690:	1806d13a 	srli	r3,r3,4
    8694:	10800104 	addi	r2,r2,4
    8698:	194000cc 	andi	r5,r3,3
    869c:	2800021e 	bne	r5,zero,86a8 <__lo0bits+0x68>
    86a0:	1806d0ba 	srli	r3,r3,2
    86a4:	10800084 	addi	r2,r2,2
    86a8:	1940004c 	andi	r5,r3,1
    86ac:	2800081e 	bne	r5,zero,86d0 <__lo0bits+0x90>
    86b0:	1806d07a 	srli	r3,r3,1
    86b4:	1800051e 	bne	r3,zero,86cc <__lo0bits+0x8c>
    86b8:	00800804 	movi	r2,32
    86bc:	f800283a 	ret
    86c0:	1806d43a 	srli	r3,r3,16
    86c4:	00800404 	movi	r2,16
    86c8:	003feb06 	br	8678 <__lo0bits+0x38>
    86cc:	10800044 	addi	r2,r2,1
    86d0:	20c00015 	stw	r3,0(r4)
    86d4:	f800283a 	ret
    86d8:	0005883a 	mov	r2,zero
    86dc:	f800283a 	ret
    86e0:	1806d07a 	srli	r3,r3,1
    86e4:	00800044 	movi	r2,1
    86e8:	20c00015 	stw	r3,0(r4)
    86ec:	f800283a 	ret

000086f0 <__i2b>:
    86f0:	defffd04 	addi	sp,sp,-12
    86f4:	dc000015 	stw	r16,0(sp)
    86f8:	04000044 	movi	r16,1
    86fc:	dc400115 	stw	r17,4(sp)
    8700:	2823883a 	mov	r17,r5
    8704:	800b883a 	mov	r5,r16
    8708:	dfc00215 	stw	ra,8(sp)
    870c:	00082e40 	call	82e4 <_Balloc>
    8710:	14400515 	stw	r17,20(r2)
    8714:	14000415 	stw	r16,16(r2)
    8718:	dfc00217 	ldw	ra,8(sp)
    871c:	dc400117 	ldw	r17,4(sp)
    8720:	dc000017 	ldw	r16,0(sp)
    8724:	dec00304 	addi	sp,sp,12
    8728:	f800283a 	ret

0000872c <__multiply>:
    872c:	defffa04 	addi	sp,sp,-24
    8730:	dcc00315 	stw	r19,12(sp)
    8734:	dc800215 	stw	r18,8(sp)
    8738:	34c00417 	ldw	r19,16(r6)
    873c:	2c800417 	ldw	r18,16(r5)
    8740:	dd000415 	stw	r20,16(sp)
    8744:	dc400115 	stw	r17,4(sp)
    8748:	dfc00515 	stw	ra,20(sp)
    874c:	dc000015 	stw	r16,0(sp)
    8750:	2829883a 	mov	r20,r5
    8754:	3023883a 	mov	r17,r6
    8758:	94c0050e 	bge	r18,r19,8770 <__multiply+0x44>
    875c:	9007883a 	mov	r3,r18
    8760:	3029883a 	mov	r20,r6
    8764:	9825883a 	mov	r18,r19
    8768:	2823883a 	mov	r17,r5
    876c:	1827883a 	mov	r19,r3
    8770:	a0800217 	ldw	r2,8(r20)
    8774:	94e1883a 	add	r16,r18,r19
    8778:	a1400117 	ldw	r5,4(r20)
    877c:	1400010e 	bge	r2,r16,8784 <__multiply+0x58>
    8780:	29400044 	addi	r5,r5,1
    8784:	00082e40 	call	82e4 <_Balloc>
    8788:	8415883a 	add	r10,r16,r16
    878c:	12c00504 	addi	r11,r2,20
    8790:	5295883a 	add	r10,r10,r10
    8794:	5a95883a 	add	r10,r11,r10
    8798:	5807883a 	mov	r3,r11
    879c:	5a80032e 	bgeu	r11,r10,87ac <__multiply+0x80>
    87a0:	18000015 	stw	zero,0(r3)
    87a4:	18c00104 	addi	r3,r3,4
    87a8:	1abffd36 	bltu	r3,r10,87a0 <__multiply+0x74>
    87ac:	9ce7883a 	add	r19,r19,r19
    87b0:	94a5883a 	add	r18,r18,r18
    87b4:	89800504 	addi	r6,r17,20
    87b8:	9ce7883a 	add	r19,r19,r19
    87bc:	a3400504 	addi	r13,r20,20
    87c0:	94a5883a 	add	r18,r18,r18
    87c4:	34d9883a 	add	r12,r6,r19
    87c8:	6c93883a 	add	r9,r13,r18
    87cc:	3300422e 	bgeu	r6,r12,88d8 <__multiply+0x1ac>
    87d0:	37c00017 	ldw	ra,0(r6)
    87d4:	fbffffcc 	andi	r15,ra,65535
    87d8:	78001b26 	beq	r15,zero,8848 <__multiply+0x11c>
    87dc:	5811883a 	mov	r8,r11
    87e0:	681d883a 	mov	r14,r13
    87e4:	000f883a 	mov	r7,zero
    87e8:	71000017 	ldw	r4,0(r14)
    87ec:	40c00017 	ldw	r3,0(r8)
    87f0:	73800104 	addi	r14,r14,4
    87f4:	217fffcc 	andi	r5,r4,65535
    87f8:	2bcb383a 	mul	r5,r5,r15
    87fc:	2008d43a 	srli	r4,r4,16
    8800:	1c7fffcc 	andi	r17,r3,65535
    8804:	2c4b883a 	add	r5,r5,r17
    8808:	29cb883a 	add	r5,r5,r7
    880c:	23c9383a 	mul	r4,r4,r15
    8810:	1806d43a 	srli	r3,r3,16
    8814:	280ed43a 	srli	r7,r5,16
    8818:	297fffcc 	andi	r5,r5,65535
    881c:	20c7883a 	add	r3,r4,r3
    8820:	19c7883a 	add	r3,r3,r7
    8824:	1808943a 	slli	r4,r3,16
    8828:	4023883a 	mov	r17,r8
    882c:	180ed43a 	srli	r7,r3,16
    8830:	214ab03a 	or	r5,r4,r5
    8834:	41400015 	stw	r5,0(r8)
    8838:	42000104 	addi	r8,r8,4
    883c:	727fea36 	bltu	r14,r9,87e8 <__multiply+0xbc>
    8840:	89c00115 	stw	r7,4(r17)
    8844:	37c00017 	ldw	ra,0(r6)
    8848:	f83ed43a 	srli	ra,ra,16
    884c:	f8001f26 	beq	ra,zero,88cc <__multiply+0x1a0>
    8850:	58c00017 	ldw	r3,0(r11)
    8854:	681d883a 	mov	r14,r13
    8858:	581f883a 	mov	r15,r11
    885c:	1811883a 	mov	r8,r3
    8860:	5825883a 	mov	r18,r11
    8864:	000f883a 	mov	r7,zero
    8868:	00000106 	br	8870 <__multiply+0x144>
    886c:	8825883a 	mov	r18,r17
    8870:	7140000b 	ldhu	r5,0(r14)
    8874:	4010d43a 	srli	r8,r8,16
    8878:	193fffcc 	andi	r4,r3,65535
    887c:	2fcb383a 	mul	r5,r5,ra
    8880:	7bc00104 	addi	r15,r15,4
    8884:	73800104 	addi	r14,r14,4
    8888:	2a0b883a 	add	r5,r5,r8
    888c:	29cb883a 	add	r5,r5,r7
    8890:	2806943a 	slli	r3,r5,16
    8894:	94400104 	addi	r17,r18,4
    8898:	280ad43a 	srli	r5,r5,16
    889c:	1908b03a 	or	r4,r3,r4
    88a0:	793fff15 	stw	r4,-4(r15)
    88a4:	70ffff17 	ldw	r3,-4(r14)
    88a8:	8a000017 	ldw	r8,0(r17)
    88ac:	1806d43a 	srli	r3,r3,16
    88b0:	413fffcc 	andi	r4,r8,65535
    88b4:	1fc7383a 	mul	r3,r3,ra
    88b8:	1907883a 	add	r3,r3,r4
    88bc:	1947883a 	add	r3,r3,r5
    88c0:	180ed43a 	srli	r7,r3,16
    88c4:	727fe936 	bltu	r14,r9,886c <__multiply+0x140>
    88c8:	90c00115 	stw	r3,4(r18)
    88cc:	31800104 	addi	r6,r6,4
    88d0:	5ac00104 	addi	r11,r11,4
    88d4:	333fbe36 	bltu	r6,r12,87d0 <__multiply+0xa4>
    88d8:	0400090e 	bge	zero,r16,8900 <__multiply+0x1d4>
    88dc:	50ffff17 	ldw	r3,-4(r10)
    88e0:	52bfff04 	addi	r10,r10,-4
    88e4:	18000326 	beq	r3,zero,88f4 <__multiply+0x1c8>
    88e8:	00000506 	br	8900 <__multiply+0x1d4>
    88ec:	50c00017 	ldw	r3,0(r10)
    88f0:	1800031e 	bne	r3,zero,8900 <__multiply+0x1d4>
    88f4:	843fffc4 	addi	r16,r16,-1
    88f8:	52bfff04 	addi	r10,r10,-4
    88fc:	803ffb1e 	bne	r16,zero,88ec <__multiply+0x1c0>
    8900:	14000415 	stw	r16,16(r2)
    8904:	dfc00517 	ldw	ra,20(sp)
    8908:	dd000417 	ldw	r20,16(sp)
    890c:	dcc00317 	ldw	r19,12(sp)
    8910:	dc800217 	ldw	r18,8(sp)
    8914:	dc400117 	ldw	r17,4(sp)
    8918:	dc000017 	ldw	r16,0(sp)
    891c:	dec00604 	addi	sp,sp,24
    8920:	f800283a 	ret

00008924 <__pow5mult>:
    8924:	defffa04 	addi	sp,sp,-24
    8928:	dcc00315 	stw	r19,12(sp)
    892c:	dc000015 	stw	r16,0(sp)
    8930:	dfc00515 	stw	ra,20(sp)
    8934:	dd000415 	stw	r20,16(sp)
    8938:	dc800215 	stw	r18,8(sp)
    893c:	dc400115 	stw	r17,4(sp)
    8940:	308000cc 	andi	r2,r6,3
    8944:	3021883a 	mov	r16,r6
    8948:	2027883a 	mov	r19,r4
    894c:	10002f1e 	bne	r2,zero,8a0c <__pow5mult+0xe8>
    8950:	2825883a 	mov	r18,r5
    8954:	8021d0ba 	srai	r16,r16,2
    8958:	80001a26 	beq	r16,zero,89c4 <__pow5mult+0xa0>
    895c:	9c401217 	ldw	r17,72(r19)
    8960:	8800061e 	bne	r17,zero,897c <__pow5mult+0x58>
    8964:	00003406 	br	8a38 <__pow5mult+0x114>
    8968:	8021d07a 	srai	r16,r16,1
    896c:	80001526 	beq	r16,zero,89c4 <__pow5mult+0xa0>
    8970:	88800017 	ldw	r2,0(r17)
    8974:	10001c26 	beq	r2,zero,89e8 <__pow5mult+0xc4>
    8978:	1023883a 	mov	r17,r2
    897c:	8080004c 	andi	r2,r16,1
    8980:	103ff926 	beq	r2,zero,8968 <__pow5mult+0x44>
    8984:	880d883a 	mov	r6,r17
    8988:	900b883a 	mov	r5,r18
    898c:	9809883a 	mov	r4,r19
    8990:	000872c0 	call	872c <__multiply>
    8994:	90001b26 	beq	r18,zero,8a04 <__pow5mult+0xe0>
    8998:	91000117 	ldw	r4,4(r18)
    899c:	98c01317 	ldw	r3,76(r19)
    89a0:	8021d07a 	srai	r16,r16,1
    89a4:	2109883a 	add	r4,r4,r4
    89a8:	2109883a 	add	r4,r4,r4
    89ac:	1907883a 	add	r3,r3,r4
    89b0:	19000017 	ldw	r4,0(r3)
    89b4:	91000015 	stw	r4,0(r18)
    89b8:	1c800015 	stw	r18,0(r3)
    89bc:	1025883a 	mov	r18,r2
    89c0:	803feb1e 	bne	r16,zero,8970 <__pow5mult+0x4c>
    89c4:	9005883a 	mov	r2,r18
    89c8:	dfc00517 	ldw	ra,20(sp)
    89cc:	dd000417 	ldw	r20,16(sp)
    89d0:	dcc00317 	ldw	r19,12(sp)
    89d4:	dc800217 	ldw	r18,8(sp)
    89d8:	dc400117 	ldw	r17,4(sp)
    89dc:	dc000017 	ldw	r16,0(sp)
    89e0:	dec00604 	addi	sp,sp,24
    89e4:	f800283a 	ret
    89e8:	880d883a 	mov	r6,r17
    89ec:	880b883a 	mov	r5,r17
    89f0:	9809883a 	mov	r4,r19
    89f4:	000872c0 	call	872c <__multiply>
    89f8:	88800015 	stw	r2,0(r17)
    89fc:	10000015 	stw	zero,0(r2)
    8a00:	003fdd06 	br	8978 <__pow5mult+0x54>
    8a04:	1025883a 	mov	r18,r2
    8a08:	003fd706 	br	8968 <__pow5mult+0x44>
    8a0c:	10bfffc4 	addi	r2,r2,-1
    8a10:	1085883a 	add	r2,r2,r2
    8a14:	00c00074 	movhi	r3,1
    8a18:	18c72404 	addi	r3,r3,7312
    8a1c:	1085883a 	add	r2,r2,r2
    8a20:	1885883a 	add	r2,r3,r2
    8a24:	11800017 	ldw	r6,0(r2)
    8a28:	000f883a 	mov	r7,zero
    8a2c:	00083b40 	call	83b4 <__multadd>
    8a30:	1025883a 	mov	r18,r2
    8a34:	003fc706 	br	8954 <__pow5mult+0x30>
    8a38:	05000044 	movi	r20,1
    8a3c:	a00b883a 	mov	r5,r20
    8a40:	9809883a 	mov	r4,r19
    8a44:	00082e40 	call	82e4 <_Balloc>
    8a48:	1023883a 	mov	r17,r2
    8a4c:	00809c44 	movi	r2,625
    8a50:	88800515 	stw	r2,20(r17)
    8a54:	8d000415 	stw	r20,16(r17)
    8a58:	9c401215 	stw	r17,72(r19)
    8a5c:	88000015 	stw	zero,0(r17)
    8a60:	003fc606 	br	897c <__pow5mult+0x58>

00008a64 <__lshift>:
    8a64:	defff904 	addi	sp,sp,-28
    8a68:	dd400515 	stw	r21,20(sp)
    8a6c:	dcc00315 	stw	r19,12(sp)
    8a70:	302bd17a 	srai	r21,r6,5
    8a74:	2cc00417 	ldw	r19,16(r5)
    8a78:	28800217 	ldw	r2,8(r5)
    8a7c:	dd000415 	stw	r20,16(sp)
    8a80:	ace7883a 	add	r19,r21,r19
    8a84:	dc800215 	stw	r18,8(sp)
    8a88:	dc400115 	stw	r17,4(sp)
    8a8c:	dc000015 	stw	r16,0(sp)
    8a90:	dfc00615 	stw	ra,24(sp)
    8a94:	9c000044 	addi	r16,r19,1
    8a98:	2823883a 	mov	r17,r5
    8a9c:	3029883a 	mov	r20,r6
    8aa0:	2025883a 	mov	r18,r4
    8aa4:	29400117 	ldw	r5,4(r5)
    8aa8:	1400030e 	bge	r2,r16,8ab8 <__lshift+0x54>
    8aac:	1085883a 	add	r2,r2,r2
    8ab0:	29400044 	addi	r5,r5,1
    8ab4:	143ffd16 	blt	r2,r16,8aac <__lshift+0x48>
    8ab8:	9009883a 	mov	r4,r18
    8abc:	00082e40 	call	82e4 <_Balloc>
    8ac0:	10c00504 	addi	r3,r2,20
    8ac4:	0540070e 	bge	zero,r21,8ae4 <__lshift+0x80>
    8ac8:	ad6b883a 	add	r21,r21,r21
    8acc:	ad6b883a 	add	r21,r21,r21
    8ad0:	1809883a 	mov	r4,r3
    8ad4:	1d47883a 	add	r3,r3,r21
    8ad8:	20000015 	stw	zero,0(r4)
    8adc:	21000104 	addi	r4,r4,4
    8ae0:	193ffd1e 	bne	r3,r4,8ad8 <__lshift+0x74>
    8ae4:	8a000417 	ldw	r8,16(r17)
    8ae8:	89000504 	addi	r4,r17,20
    8aec:	a18007cc 	andi	r6,r20,31
    8af0:	4211883a 	add	r8,r8,r8
    8af4:	4211883a 	add	r8,r8,r8
    8af8:	2211883a 	add	r8,r4,r8
    8afc:	30002326 	beq	r6,zero,8b8c <__lshift+0x128>
    8b00:	02400804 	movi	r9,32
    8b04:	4993c83a 	sub	r9,r9,r6
    8b08:	000b883a 	mov	r5,zero
    8b0c:	21c00017 	ldw	r7,0(r4)
    8b10:	1815883a 	mov	r10,r3
    8b14:	18c00104 	addi	r3,r3,4
    8b18:	398e983a 	sll	r7,r7,r6
    8b1c:	21000104 	addi	r4,r4,4
    8b20:	394ab03a 	or	r5,r7,r5
    8b24:	197fff15 	stw	r5,-4(r3)
    8b28:	217fff17 	ldw	r5,-4(r4)
    8b2c:	2a4ad83a 	srl	r5,r5,r9
    8b30:	223ff636 	bltu	r4,r8,8b0c <__lshift+0xa8>
    8b34:	51400115 	stw	r5,4(r10)
    8b38:	28001a1e 	bne	r5,zero,8ba4 <__lshift+0x140>
    8b3c:	843fffc4 	addi	r16,r16,-1
    8b40:	14000415 	stw	r16,16(r2)
    8b44:	88000826 	beq	r17,zero,8b68 <__lshift+0x104>
    8b48:	89000117 	ldw	r4,4(r17)
    8b4c:	90c01317 	ldw	r3,76(r18)
    8b50:	2109883a 	add	r4,r4,r4
    8b54:	2109883a 	add	r4,r4,r4
    8b58:	1907883a 	add	r3,r3,r4
    8b5c:	19000017 	ldw	r4,0(r3)
    8b60:	89000015 	stw	r4,0(r17)
    8b64:	1c400015 	stw	r17,0(r3)
    8b68:	dfc00617 	ldw	ra,24(sp)
    8b6c:	dd400517 	ldw	r21,20(sp)
    8b70:	dd000417 	ldw	r20,16(sp)
    8b74:	dcc00317 	ldw	r19,12(sp)
    8b78:	dc800217 	ldw	r18,8(sp)
    8b7c:	dc400117 	ldw	r17,4(sp)
    8b80:	dc000017 	ldw	r16,0(sp)
    8b84:	dec00704 	addi	sp,sp,28
    8b88:	f800283a 	ret
    8b8c:	21400017 	ldw	r5,0(r4)
    8b90:	18c00104 	addi	r3,r3,4
    8b94:	21000104 	addi	r4,r4,4
    8b98:	197fff15 	stw	r5,-4(r3)
    8b9c:	223ffb36 	bltu	r4,r8,8b8c <__lshift+0x128>
    8ba0:	003fe606 	br	8b3c <__lshift+0xd8>
    8ba4:	9c000084 	addi	r16,r19,2
    8ba8:	003fe406 	br	8b3c <__lshift+0xd8>

00008bac <__mcmp>:
    8bac:	20800417 	ldw	r2,16(r4)
    8bb0:	28c00417 	ldw	r3,16(r5)
    8bb4:	10c5c83a 	sub	r2,r2,r3
    8bb8:	1000111e 	bne	r2,zero,8c00 <__mcmp+0x54>
    8bbc:	18c7883a 	add	r3,r3,r3
    8bc0:	18c7883a 	add	r3,r3,r3
    8bc4:	21000504 	addi	r4,r4,20
    8bc8:	29400504 	addi	r5,r5,20
    8bcc:	20c5883a 	add	r2,r4,r3
    8bd0:	28cb883a 	add	r5,r5,r3
    8bd4:	00000106 	br	8bdc <__mcmp+0x30>
    8bd8:	20800a2e 	bgeu	r4,r2,8c04 <__mcmp+0x58>
    8bdc:	10bfff04 	addi	r2,r2,-4
    8be0:	297fff04 	addi	r5,r5,-4
    8be4:	11800017 	ldw	r6,0(r2)
    8be8:	28c00017 	ldw	r3,0(r5)
    8bec:	30fffa26 	beq	r6,r3,8bd8 <__mcmp+0x2c>
    8bf0:	30c00236 	bltu	r6,r3,8bfc <__mcmp+0x50>
    8bf4:	00800044 	movi	r2,1
    8bf8:	f800283a 	ret
    8bfc:	00bfffc4 	movi	r2,-1
    8c00:	f800283a 	ret
    8c04:	0005883a 	mov	r2,zero
    8c08:	f800283a 	ret

00008c0c <__mdiff>:
    8c0c:	28c00417 	ldw	r3,16(r5)
    8c10:	30800417 	ldw	r2,16(r6)
    8c14:	defffa04 	addi	sp,sp,-24
    8c18:	dcc00315 	stw	r19,12(sp)
    8c1c:	dc800215 	stw	r18,8(sp)
    8c20:	dfc00515 	stw	ra,20(sp)
    8c24:	dd000415 	stw	r20,16(sp)
    8c28:	dc400115 	stw	r17,4(sp)
    8c2c:	dc000015 	stw	r16,0(sp)
    8c30:	1887c83a 	sub	r3,r3,r2
    8c34:	2825883a 	mov	r18,r5
    8c38:	3027883a 	mov	r19,r6
    8c3c:	1800141e 	bne	r3,zero,8c90 <__mdiff+0x84>
    8c40:	1085883a 	add	r2,r2,r2
    8c44:	1085883a 	add	r2,r2,r2
    8c48:	2a000504 	addi	r8,r5,20
    8c4c:	34000504 	addi	r16,r6,20
    8c50:	4087883a 	add	r3,r8,r2
    8c54:	8085883a 	add	r2,r16,r2
    8c58:	00000106 	br	8c60 <__mdiff+0x54>
    8c5c:	40c0592e 	bgeu	r8,r3,8dc4 <__mdiff+0x1b8>
    8c60:	18ffff04 	addi	r3,r3,-4
    8c64:	10bfff04 	addi	r2,r2,-4
    8c68:	19c00017 	ldw	r7,0(r3)
    8c6c:	11400017 	ldw	r5,0(r2)
    8c70:	397ffa26 	beq	r7,r5,8c5c <__mdiff+0x50>
    8c74:	3940592e 	bgeu	r7,r5,8ddc <__mdiff+0x1d0>
    8c78:	9005883a 	mov	r2,r18
    8c7c:	4023883a 	mov	r17,r8
    8c80:	9825883a 	mov	r18,r19
    8c84:	05000044 	movi	r20,1
    8c88:	1027883a 	mov	r19,r2
    8c8c:	00000406 	br	8ca0 <__mdiff+0x94>
    8c90:	18005616 	blt	r3,zero,8dec <__mdiff+0x1e0>
    8c94:	34400504 	addi	r17,r6,20
    8c98:	2c000504 	addi	r16,r5,20
    8c9c:	0029883a 	mov	r20,zero
    8ca0:	91400117 	ldw	r5,4(r18)
    8ca4:	00082e40 	call	82e4 <_Balloc>
    8ca8:	92400417 	ldw	r9,16(r18)
    8cac:	9b000417 	ldw	r12,16(r19)
    8cb0:	12c00504 	addi	r11,r2,20
    8cb4:	4a51883a 	add	r8,r9,r9
    8cb8:	6319883a 	add	r12,r12,r12
    8cbc:	4211883a 	add	r8,r8,r8
    8cc0:	6319883a 	add	r12,r12,r12
    8cc4:	15000315 	stw	r20,12(r2)
    8cc8:	8211883a 	add	r8,r16,r8
    8ccc:	8b19883a 	add	r12,r17,r12
    8cd0:	0007883a 	mov	r3,zero
    8cd4:	81400017 	ldw	r5,0(r16)
    8cd8:	89c00017 	ldw	r7,0(r17)
    8cdc:	59800104 	addi	r6,r11,4
    8ce0:	293fffcc 	andi	r4,r5,65535
    8ce4:	20c7883a 	add	r3,r4,r3
    8ce8:	393fffcc 	andi	r4,r7,65535
    8cec:	1909c83a 	sub	r4,r3,r4
    8cf0:	280ad43a 	srli	r5,r5,16
    8cf4:	380ed43a 	srli	r7,r7,16
    8cf8:	2007d43a 	srai	r3,r4,16
    8cfc:	213fffcc 	andi	r4,r4,65535
    8d00:	29cbc83a 	sub	r5,r5,r7
    8d04:	28c7883a 	add	r3,r5,r3
    8d08:	180a943a 	slli	r5,r3,16
    8d0c:	8c400104 	addi	r17,r17,4
    8d10:	84000104 	addi	r16,r16,4
    8d14:	2908b03a 	or	r4,r5,r4
    8d18:	59000015 	stw	r4,0(r11)
    8d1c:	1807d43a 	srai	r3,r3,16
    8d20:	3015883a 	mov	r10,r6
    8d24:	3017883a 	mov	r11,r6
    8d28:	8b3fea36 	bltu	r17,r12,8cd4 <__mdiff+0xc8>
    8d2c:	8200162e 	bgeu	r16,r8,8d88 <__mdiff+0x17c>
    8d30:	8017883a 	mov	r11,r16
    8d34:	59400017 	ldw	r5,0(r11)
    8d38:	31800104 	addi	r6,r6,4
    8d3c:	5ac00104 	addi	r11,r11,4
    8d40:	293fffcc 	andi	r4,r5,65535
    8d44:	20c7883a 	add	r3,r4,r3
    8d48:	280ed43a 	srli	r7,r5,16
    8d4c:	180bd43a 	srai	r5,r3,16
    8d50:	193fffcc 	andi	r4,r3,65535
    8d54:	3947883a 	add	r3,r7,r5
    8d58:	180a943a 	slli	r5,r3,16
    8d5c:	1807d43a 	srai	r3,r3,16
    8d60:	2908b03a 	or	r4,r5,r4
    8d64:	313fff15 	stw	r4,-4(r6)
    8d68:	5a3ff236 	bltu	r11,r8,8d34 <__mdiff+0x128>
    8d6c:	0406303a 	nor	r3,zero,r16
    8d70:	1a07883a 	add	r3,r3,r8
    8d74:	1806d0ba 	srli	r3,r3,2
    8d78:	18c00044 	addi	r3,r3,1
    8d7c:	18c7883a 	add	r3,r3,r3
    8d80:	18c7883a 	add	r3,r3,r3
    8d84:	50d5883a 	add	r10,r10,r3
    8d88:	50ffff04 	addi	r3,r10,-4
    8d8c:	2000041e 	bne	r4,zero,8da0 <__mdiff+0x194>
    8d90:	18ffff04 	addi	r3,r3,-4
    8d94:	19000017 	ldw	r4,0(r3)
    8d98:	4a7fffc4 	addi	r9,r9,-1
    8d9c:	203ffc26 	beq	r4,zero,8d90 <__mdiff+0x184>
    8da0:	12400415 	stw	r9,16(r2)
    8da4:	dfc00517 	ldw	ra,20(sp)
    8da8:	dd000417 	ldw	r20,16(sp)
    8dac:	dcc00317 	ldw	r19,12(sp)
    8db0:	dc800217 	ldw	r18,8(sp)
    8db4:	dc400117 	ldw	r17,4(sp)
    8db8:	dc000017 	ldw	r16,0(sp)
    8dbc:	dec00604 	addi	sp,sp,24
    8dc0:	f800283a 	ret
    8dc4:	000b883a 	mov	r5,zero
    8dc8:	00082e40 	call	82e4 <_Balloc>
    8dcc:	00c00044 	movi	r3,1
    8dd0:	10c00415 	stw	r3,16(r2)
    8dd4:	10000515 	stw	zero,20(r2)
    8dd8:	003ff206 	br	8da4 <__mdiff+0x198>
    8ddc:	8023883a 	mov	r17,r16
    8de0:	0029883a 	mov	r20,zero
    8de4:	4021883a 	mov	r16,r8
    8de8:	003fad06 	br	8ca0 <__mdiff+0x94>
    8dec:	9005883a 	mov	r2,r18
    8df0:	94400504 	addi	r17,r18,20
    8df4:	9c000504 	addi	r16,r19,20
    8df8:	9825883a 	mov	r18,r19
    8dfc:	05000044 	movi	r20,1
    8e00:	1027883a 	mov	r19,r2
    8e04:	003fa606 	br	8ca0 <__mdiff+0x94>

00008e08 <__ulp>:
    8e08:	295ffc2c 	andhi	r5,r5,32752
    8e0c:	00bf3034 	movhi	r2,64704
    8e10:	2887883a 	add	r3,r5,r2
    8e14:	00c0020e 	bge	zero,r3,8e20 <__ulp+0x18>
    8e18:	0005883a 	mov	r2,zero
    8e1c:	f800283a 	ret
    8e20:	00c7c83a 	sub	r3,zero,r3
    8e24:	1807d53a 	srai	r3,r3,20
    8e28:	008004c4 	movi	r2,19
    8e2c:	10c00b0e 	bge	r2,r3,8e5c <__ulp+0x54>
    8e30:	18bffb04 	addi	r2,r3,-20
    8e34:	01000784 	movi	r4,30
    8e38:	0007883a 	mov	r3,zero
    8e3c:	20800516 	blt	r4,r2,8e54 <__ulp+0x4c>
    8e40:	010007c4 	movi	r4,31
    8e44:	2089c83a 	sub	r4,r4,r2
    8e48:	00800044 	movi	r2,1
    8e4c:	1104983a 	sll	r2,r2,r4
    8e50:	f800283a 	ret
    8e54:	00800044 	movi	r2,1
    8e58:	f800283a 	ret
    8e5c:	01400234 	movhi	r5,8
    8e60:	28c7d83a 	sra	r3,r5,r3
    8e64:	0005883a 	mov	r2,zero
    8e68:	f800283a 	ret

00008e6c <__b2d>:
    8e6c:	defffa04 	addi	sp,sp,-24
    8e70:	dc000015 	stw	r16,0(sp)
    8e74:	24000417 	ldw	r16,16(r4)
    8e78:	dc400115 	stw	r17,4(sp)
    8e7c:	24400504 	addi	r17,r4,20
    8e80:	8421883a 	add	r16,r16,r16
    8e84:	8421883a 	add	r16,r16,r16
    8e88:	8c21883a 	add	r16,r17,r16
    8e8c:	dc800215 	stw	r18,8(sp)
    8e90:	84bfff17 	ldw	r18,-4(r16)
    8e94:	dd000415 	stw	r20,16(sp)
    8e98:	dcc00315 	stw	r19,12(sp)
    8e9c:	9009883a 	mov	r4,r18
    8ea0:	2829883a 	mov	r20,r5
    8ea4:	dfc00515 	stw	ra,20(sp)
    8ea8:	00085d80 	call	85d8 <__hi0bits>
    8eac:	00c00804 	movi	r3,32
    8eb0:	1889c83a 	sub	r4,r3,r2
    8eb4:	a1000015 	stw	r4,0(r20)
    8eb8:	01000284 	movi	r4,10
    8ebc:	84ffff04 	addi	r19,r16,-4
    8ec0:	20801216 	blt	r4,r2,8f0c <__b2d+0xa0>
    8ec4:	018002c4 	movi	r6,11
    8ec8:	308dc83a 	sub	r6,r6,r2
    8ecc:	9186d83a 	srl	r3,r18,r6
    8ed0:	18cffc34 	orhi	r3,r3,16368
    8ed4:	8cc0212e 	bgeu	r17,r19,8f5c <__b2d+0xf0>
    8ed8:	813ffe17 	ldw	r4,-8(r16)
    8edc:	218cd83a 	srl	r6,r4,r6
    8ee0:	10800544 	addi	r2,r2,21
    8ee4:	9084983a 	sll	r2,r18,r2
    8ee8:	1184b03a 	or	r2,r2,r6
    8eec:	dfc00517 	ldw	ra,20(sp)
    8ef0:	dd000417 	ldw	r20,16(sp)
    8ef4:	dcc00317 	ldw	r19,12(sp)
    8ef8:	dc800217 	ldw	r18,8(sp)
    8efc:	dc400117 	ldw	r17,4(sp)
    8f00:	dc000017 	ldw	r16,0(sp)
    8f04:	dec00604 	addi	sp,sp,24
    8f08:	f800283a 	ret
    8f0c:	8cc00f2e 	bgeu	r17,r19,8f4c <__b2d+0xe0>
    8f10:	117ffd44 	addi	r5,r2,-11
    8f14:	80bffe17 	ldw	r2,-8(r16)
    8f18:	28000e26 	beq	r5,zero,8f54 <__b2d+0xe8>
    8f1c:	1949c83a 	sub	r4,r3,r5
    8f20:	9164983a 	sll	r18,r18,r5
    8f24:	1106d83a 	srl	r3,r2,r4
    8f28:	81bffe04 	addi	r6,r16,-8
    8f2c:	948ffc34 	orhi	r18,r18,16368
    8f30:	90c6b03a 	or	r3,r18,r3
    8f34:	89800e2e 	bgeu	r17,r6,8f70 <__b2d+0x104>
    8f38:	81bffd17 	ldw	r6,-12(r16)
    8f3c:	1144983a 	sll	r2,r2,r5
    8f40:	310ad83a 	srl	r5,r6,r4
    8f44:	2884b03a 	or	r2,r5,r2
    8f48:	003fe806 	br	8eec <__b2d+0x80>
    8f4c:	10bffd44 	addi	r2,r2,-11
    8f50:	1000041e 	bne	r2,zero,8f64 <__b2d+0xf8>
    8f54:	90cffc34 	orhi	r3,r18,16368
    8f58:	003fe406 	br	8eec <__b2d+0x80>
    8f5c:	000d883a 	mov	r6,zero
    8f60:	003fdf06 	br	8ee0 <__b2d+0x74>
    8f64:	90a4983a 	sll	r18,r18,r2
    8f68:	0005883a 	mov	r2,zero
    8f6c:	003ff906 	br	8f54 <__b2d+0xe8>
    8f70:	1144983a 	sll	r2,r2,r5
    8f74:	003fdd06 	br	8eec <__b2d+0x80>

00008f78 <__d2b>:
    8f78:	defff804 	addi	sp,sp,-32
    8f7c:	dc000215 	stw	r16,8(sp)
    8f80:	3021883a 	mov	r16,r6
    8f84:	dc400315 	stw	r17,12(sp)
    8f88:	8022907a 	slli	r17,r16,1
    8f8c:	dd000615 	stw	r20,24(sp)
    8f90:	2829883a 	mov	r20,r5
    8f94:	01400044 	movi	r5,1
    8f98:	dcc00515 	stw	r19,20(sp)
    8f9c:	dc800415 	stw	r18,16(sp)
    8fa0:	dfc00715 	stw	ra,28(sp)
    8fa4:	3825883a 	mov	r18,r7
    8fa8:	8822d57a 	srli	r17,r17,21
    8fac:	00082e40 	call	82e4 <_Balloc>
    8fb0:	1027883a 	mov	r19,r2
    8fb4:	00800434 	movhi	r2,16
    8fb8:	10bfffc4 	addi	r2,r2,-1
    8fbc:	808c703a 	and	r6,r16,r2
    8fc0:	88000126 	beq	r17,zero,8fc8 <__d2b+0x50>
    8fc4:	31800434 	orhi	r6,r6,16
    8fc8:	d9800015 	stw	r6,0(sp)
    8fcc:	a0002426 	beq	r20,zero,9060 <__d2b+0xe8>
    8fd0:	d9000104 	addi	r4,sp,4
    8fd4:	dd000115 	stw	r20,4(sp)
    8fd8:	00086400 	call	8640 <__lo0bits>
    8fdc:	d8c00017 	ldw	r3,0(sp)
    8fe0:	10002f1e 	bne	r2,zero,90a0 <__d2b+0x128>
    8fe4:	d9000117 	ldw	r4,4(sp)
    8fe8:	99000515 	stw	r4,20(r19)
    8fec:	1821003a 	cmpeq	r16,r3,zero
    8ff0:	01000084 	movi	r4,2
    8ff4:	2421c83a 	sub	r16,r4,r16
    8ff8:	98c00615 	stw	r3,24(r19)
    8ffc:	9c000415 	stw	r16,16(r19)
    9000:	88001f1e 	bne	r17,zero,9080 <__d2b+0x108>
    9004:	10bef384 	addi	r2,r2,-1074
    9008:	90800015 	stw	r2,0(r18)
    900c:	00900034 	movhi	r2,16384
    9010:	10bfffc4 	addi	r2,r2,-1
    9014:	8085883a 	add	r2,r16,r2
    9018:	1085883a 	add	r2,r2,r2
    901c:	1085883a 	add	r2,r2,r2
    9020:	9885883a 	add	r2,r19,r2
    9024:	11000517 	ldw	r4,20(r2)
    9028:	8020917a 	slli	r16,r16,5
    902c:	00085d80 	call	85d8 <__hi0bits>
    9030:	d8c00817 	ldw	r3,32(sp)
    9034:	8085c83a 	sub	r2,r16,r2
    9038:	18800015 	stw	r2,0(r3)
    903c:	9805883a 	mov	r2,r19
    9040:	dfc00717 	ldw	ra,28(sp)
    9044:	dd000617 	ldw	r20,24(sp)
    9048:	dcc00517 	ldw	r19,20(sp)
    904c:	dc800417 	ldw	r18,16(sp)
    9050:	dc400317 	ldw	r17,12(sp)
    9054:	dc000217 	ldw	r16,8(sp)
    9058:	dec00804 	addi	sp,sp,32
    905c:	f800283a 	ret
    9060:	d809883a 	mov	r4,sp
    9064:	00086400 	call	8640 <__lo0bits>
    9068:	d8c00017 	ldw	r3,0(sp)
    906c:	04000044 	movi	r16,1
    9070:	9c000415 	stw	r16,16(r19)
    9074:	98c00515 	stw	r3,20(r19)
    9078:	10800804 	addi	r2,r2,32
    907c:	883fe126 	beq	r17,zero,9004 <__d2b+0x8c>
    9080:	00c00d44 	movi	r3,53
    9084:	8c7ef344 	addi	r17,r17,-1075
    9088:	88a3883a 	add	r17,r17,r2
    908c:	1885c83a 	sub	r2,r3,r2
    9090:	d8c00817 	ldw	r3,32(sp)
    9094:	94400015 	stw	r17,0(r18)
    9098:	18800015 	stw	r2,0(r3)
    909c:	003fe706 	br	903c <__d2b+0xc4>
    90a0:	01000804 	movi	r4,32
    90a4:	2089c83a 	sub	r4,r4,r2
    90a8:	1908983a 	sll	r4,r3,r4
    90ac:	d9400117 	ldw	r5,4(sp)
    90b0:	1886d83a 	srl	r3,r3,r2
    90b4:	2148b03a 	or	r4,r4,r5
    90b8:	99000515 	stw	r4,20(r19)
    90bc:	d8c00015 	stw	r3,0(sp)
    90c0:	003fca06 	br	8fec <__d2b+0x74>

000090c4 <__ratio>:
    90c4:	defff904 	addi	sp,sp,-28
    90c8:	dc400315 	stw	r17,12(sp)
    90cc:	2823883a 	mov	r17,r5
    90d0:	d9400104 	addi	r5,sp,4
    90d4:	dfc00615 	stw	ra,24(sp)
    90d8:	dcc00515 	stw	r19,20(sp)
    90dc:	dc800415 	stw	r18,16(sp)
    90e0:	2027883a 	mov	r19,r4
    90e4:	dc000215 	stw	r16,8(sp)
    90e8:	0008e6c0 	call	8e6c <__b2d>
    90ec:	d80b883a 	mov	r5,sp
    90f0:	8809883a 	mov	r4,r17
    90f4:	1025883a 	mov	r18,r2
    90f8:	1821883a 	mov	r16,r3
    90fc:	0008e6c0 	call	8e6c <__b2d>
    9100:	8a000417 	ldw	r8,16(r17)
    9104:	99000417 	ldw	r4,16(r19)
    9108:	d9400117 	ldw	r5,4(sp)
    910c:	2209c83a 	sub	r4,r4,r8
    9110:	2010917a 	slli	r8,r4,5
    9114:	d9000017 	ldw	r4,0(sp)
    9118:	2909c83a 	sub	r4,r5,r4
    911c:	4109883a 	add	r4,r8,r4
    9120:	01000e0e 	bge	zero,r4,915c <__ratio+0x98>
    9124:	2008953a 	slli	r4,r4,20
    9128:	2421883a 	add	r16,r4,r16
    912c:	100d883a 	mov	r6,r2
    9130:	180f883a 	mov	r7,r3
    9134:	9009883a 	mov	r4,r18
    9138:	800b883a 	mov	r5,r16
    913c:	000cf5c0 	call	cf5c <__divdf3>
    9140:	dfc00617 	ldw	ra,24(sp)
    9144:	dcc00517 	ldw	r19,20(sp)
    9148:	dc800417 	ldw	r18,16(sp)
    914c:	dc400317 	ldw	r17,12(sp)
    9150:	dc000217 	ldw	r16,8(sp)
    9154:	dec00704 	addi	sp,sp,28
    9158:	f800283a 	ret
    915c:	2008953a 	slli	r4,r4,20
    9160:	1907c83a 	sub	r3,r3,r4
    9164:	003ff106 	br	912c <__ratio+0x68>

00009168 <_mprec_log10>:
    9168:	defffe04 	addi	sp,sp,-8
    916c:	dc000015 	stw	r16,0(sp)
    9170:	dfc00115 	stw	ra,4(sp)
    9174:	008005c4 	movi	r2,23
    9178:	2021883a 	mov	r16,r4
    917c:	11000d0e 	bge	r2,r4,91b4 <_mprec_log10+0x4c>
    9180:	0005883a 	mov	r2,zero
    9184:	00cffc34 	movhi	r3,16368
    9188:	843fffc4 	addi	r16,r16,-1
    918c:	000d883a 	mov	r6,zero
    9190:	01d00934 	movhi	r7,16420
    9194:	1009883a 	mov	r4,r2
    9198:	180b883a 	mov	r5,r3
    919c:	000da9c0 	call	da9c <__muldf3>
    91a0:	803ff91e 	bne	r16,zero,9188 <_mprec_log10+0x20>
    91a4:	dfc00117 	ldw	ra,4(sp)
    91a8:	dc000017 	ldw	r16,0(sp)
    91ac:	dec00204 	addi	sp,sp,8
    91b0:	f800283a 	ret
    91b4:	202090fa 	slli	r16,r4,3
    91b8:	00800074 	movhi	r2,1
    91bc:	10873b04 	addi	r2,r2,7404
    91c0:	1421883a 	add	r16,r2,r16
    91c4:	80800017 	ldw	r2,0(r16)
    91c8:	80c00117 	ldw	r3,4(r16)
    91cc:	dfc00117 	ldw	ra,4(sp)
    91d0:	dc000017 	ldw	r16,0(sp)
    91d4:	dec00204 	addi	sp,sp,8
    91d8:	f800283a 	ret

000091dc <__copybits>:
    91dc:	297fffc4 	addi	r5,r5,-1
    91e0:	280fd17a 	srai	r7,r5,5
    91e4:	30c00417 	ldw	r3,16(r6)
    91e8:	30800504 	addi	r2,r6,20
    91ec:	39c00044 	addi	r7,r7,1
    91f0:	18c7883a 	add	r3,r3,r3
    91f4:	39cf883a 	add	r7,r7,r7
    91f8:	18c7883a 	add	r3,r3,r3
    91fc:	39cf883a 	add	r7,r7,r7
    9200:	10c7883a 	add	r3,r2,r3
    9204:	21cf883a 	add	r7,r4,r7
    9208:	10c00d2e 	bgeu	r2,r3,9240 <__copybits+0x64>
    920c:	200b883a 	mov	r5,r4
    9210:	12000017 	ldw	r8,0(r2)
    9214:	29400104 	addi	r5,r5,4
    9218:	10800104 	addi	r2,r2,4
    921c:	2a3fff15 	stw	r8,-4(r5)
    9220:	10fffb36 	bltu	r2,r3,9210 <__copybits+0x34>
    9224:	1985c83a 	sub	r2,r3,r6
    9228:	10bffac4 	addi	r2,r2,-21
    922c:	1004d0ba 	srli	r2,r2,2
    9230:	10800044 	addi	r2,r2,1
    9234:	1085883a 	add	r2,r2,r2
    9238:	1085883a 	add	r2,r2,r2
    923c:	2089883a 	add	r4,r4,r2
    9240:	21c0032e 	bgeu	r4,r7,9250 <__copybits+0x74>
    9244:	20000015 	stw	zero,0(r4)
    9248:	21000104 	addi	r4,r4,4
    924c:	21fffd36 	bltu	r4,r7,9244 <__copybits+0x68>
    9250:	f800283a 	ret

00009254 <__any_on>:
    9254:	20c00417 	ldw	r3,16(r4)
    9258:	2805d17a 	srai	r2,r5,5
    925c:	21000504 	addi	r4,r4,20
    9260:	18800d0e 	bge	r3,r2,9298 <__any_on+0x44>
    9264:	18c7883a 	add	r3,r3,r3
    9268:	18c7883a 	add	r3,r3,r3
    926c:	20c7883a 	add	r3,r4,r3
    9270:	20c0192e 	bgeu	r4,r3,92d8 <__any_on+0x84>
    9274:	18bfff17 	ldw	r2,-4(r3)
    9278:	18ffff04 	addi	r3,r3,-4
    927c:	1000041e 	bne	r2,zero,9290 <__any_on+0x3c>
    9280:	20c0142e 	bgeu	r4,r3,92d4 <__any_on+0x80>
    9284:	18ffff04 	addi	r3,r3,-4
    9288:	19400017 	ldw	r5,0(r3)
    928c:	283ffc26 	beq	r5,zero,9280 <__any_on+0x2c>
    9290:	00800044 	movi	r2,1
    9294:	f800283a 	ret
    9298:	10c00a0e 	bge	r2,r3,92c4 <__any_on+0x70>
    929c:	1085883a 	add	r2,r2,r2
    92a0:	1085883a 	add	r2,r2,r2
    92a4:	294007cc 	andi	r5,r5,31
    92a8:	2087883a 	add	r3,r4,r2
    92ac:	283ff026 	beq	r5,zero,9270 <__any_on+0x1c>
    92b0:	19800017 	ldw	r6,0(r3)
    92b4:	3144d83a 	srl	r2,r6,r5
    92b8:	114a983a 	sll	r5,r2,r5
    92bc:	317ff41e 	bne	r6,r5,9290 <__any_on+0x3c>
    92c0:	003feb06 	br	9270 <__any_on+0x1c>
    92c4:	1085883a 	add	r2,r2,r2
    92c8:	1085883a 	add	r2,r2,r2
    92cc:	2087883a 	add	r3,r4,r2
    92d0:	003fe706 	br	9270 <__any_on+0x1c>
    92d4:	f800283a 	ret
    92d8:	0005883a 	mov	r2,zero
    92dc:	f800283a 	ret

000092e0 <_realloc_r>:
    92e0:	defff604 	addi	sp,sp,-40
    92e4:	dc800215 	stw	r18,8(sp)
    92e8:	dfc00915 	stw	ra,36(sp)
    92ec:	df000815 	stw	fp,32(sp)
    92f0:	ddc00715 	stw	r23,28(sp)
    92f4:	dd800615 	stw	r22,24(sp)
    92f8:	dd400515 	stw	r21,20(sp)
    92fc:	dd000415 	stw	r20,16(sp)
    9300:	dcc00315 	stw	r19,12(sp)
    9304:	dc400115 	stw	r17,4(sp)
    9308:	dc000015 	stw	r16,0(sp)
    930c:	3025883a 	mov	r18,r6
    9310:	2800b726 	beq	r5,zero,95f0 <_realloc_r+0x310>
    9314:	282b883a 	mov	r21,r5
    9318:	2029883a 	mov	r20,r4
    931c:	000f2940 	call	f294 <__malloc_lock>
    9320:	a8bfff17 	ldw	r2,-4(r21)
    9324:	043fff04 	movi	r16,-4
    9328:	90c002c4 	addi	r3,r18,11
    932c:	01000584 	movi	r4,22
    9330:	acfffe04 	addi	r19,r21,-8
    9334:	1420703a 	and	r16,r2,r16
    9338:	20c0332e 	bgeu	r4,r3,9408 <_realloc_r+0x128>
    933c:	047ffe04 	movi	r17,-8
    9340:	1c62703a 	and	r17,r3,r17
    9344:	8807883a 	mov	r3,r17
    9348:	88005816 	blt	r17,zero,94ac <_realloc_r+0x1cc>
    934c:	8c805736 	bltu	r17,r18,94ac <_realloc_r+0x1cc>
    9350:	80c0300e 	bge	r16,r3,9414 <_realloc_r+0x134>
    9354:	07000074 	movhi	fp,1
    9358:	e707c004 	addi	fp,fp,7936
    935c:	e1c00217 	ldw	r7,8(fp)
    9360:	9c09883a 	add	r4,r19,r16
    9364:	22000117 	ldw	r8,4(r4)
    9368:	21c06326 	beq	r4,r7,94f8 <_realloc_r+0x218>
    936c:	017fff84 	movi	r5,-2
    9370:	414a703a 	and	r5,r8,r5
    9374:	214b883a 	add	r5,r4,r5
    9378:	29800117 	ldw	r6,4(r5)
    937c:	3180004c 	andi	r6,r6,1
    9380:	30003f26 	beq	r6,zero,9480 <_realloc_r+0x1a0>
    9384:	1080004c 	andi	r2,r2,1
    9388:	10008326 	beq	r2,zero,9598 <_realloc_r+0x2b8>
    938c:	900b883a 	mov	r5,r18
    9390:	a009883a 	mov	r4,r20
    9394:	00023f80 	call	23f8 <_malloc_r>
    9398:	1025883a 	mov	r18,r2
    939c:	10011e26 	beq	r2,zero,9818 <_realloc_r+0x538>
    93a0:	a93fff17 	ldw	r4,-4(r21)
    93a4:	10fffe04 	addi	r3,r2,-8
    93a8:	00bfff84 	movi	r2,-2
    93ac:	2084703a 	and	r2,r4,r2
    93b0:	9885883a 	add	r2,r19,r2
    93b4:	1880ee26 	beq	r3,r2,9770 <_realloc_r+0x490>
    93b8:	81bfff04 	addi	r6,r16,-4
    93bc:	00800904 	movi	r2,36
    93c0:	1180b836 	bltu	r2,r6,96a4 <_realloc_r+0x3c4>
    93c4:	00c004c4 	movi	r3,19
    93c8:	19809636 	bltu	r3,r6,9624 <_realloc_r+0x344>
    93cc:	9005883a 	mov	r2,r18
    93d0:	a807883a 	mov	r3,r21
    93d4:	19000017 	ldw	r4,0(r3)
    93d8:	11000015 	stw	r4,0(r2)
    93dc:	19000117 	ldw	r4,4(r3)
    93e0:	11000115 	stw	r4,4(r2)
    93e4:	18c00217 	ldw	r3,8(r3)
    93e8:	10c00215 	stw	r3,8(r2)
    93ec:	a80b883a 	mov	r5,r21
    93f0:	a009883a 	mov	r4,r20
    93f4:	00072480 	call	7248 <_free_r>
    93f8:	a009883a 	mov	r4,r20
    93fc:	000f2b80 	call	f2b8 <__malloc_unlock>
    9400:	9005883a 	mov	r2,r18
    9404:	00001206 	br	9450 <_realloc_r+0x170>
    9408:	00c00404 	movi	r3,16
    940c:	1823883a 	mov	r17,r3
    9410:	003fce06 	br	934c <_realloc_r+0x6c>
    9414:	a825883a 	mov	r18,r21
    9418:	8445c83a 	sub	r2,r16,r17
    941c:	00c003c4 	movi	r3,15
    9420:	18802636 	bltu	r3,r2,94bc <_realloc_r+0x1dc>
    9424:	99800117 	ldw	r6,4(r19)
    9428:	9c07883a 	add	r3,r19,r16
    942c:	3180004c 	andi	r6,r6,1
    9430:	3420b03a 	or	r16,r6,r16
    9434:	9c000115 	stw	r16,4(r19)
    9438:	18800117 	ldw	r2,4(r3)
    943c:	10800054 	ori	r2,r2,1
    9440:	18800115 	stw	r2,4(r3)
    9444:	a009883a 	mov	r4,r20
    9448:	000f2b80 	call	f2b8 <__malloc_unlock>
    944c:	9005883a 	mov	r2,r18
    9450:	dfc00917 	ldw	ra,36(sp)
    9454:	df000817 	ldw	fp,32(sp)
    9458:	ddc00717 	ldw	r23,28(sp)
    945c:	dd800617 	ldw	r22,24(sp)
    9460:	dd400517 	ldw	r21,20(sp)
    9464:	dd000417 	ldw	r20,16(sp)
    9468:	dcc00317 	ldw	r19,12(sp)
    946c:	dc800217 	ldw	r18,8(sp)
    9470:	dc400117 	ldw	r17,4(sp)
    9474:	dc000017 	ldw	r16,0(sp)
    9478:	dec00a04 	addi	sp,sp,40
    947c:	f800283a 	ret
    9480:	017fff04 	movi	r5,-4
    9484:	414a703a 	and	r5,r8,r5
    9488:	814d883a 	add	r6,r16,r5
    948c:	30c01f16 	blt	r6,r3,950c <_realloc_r+0x22c>
    9490:	20800317 	ldw	r2,12(r4)
    9494:	20c00217 	ldw	r3,8(r4)
    9498:	a825883a 	mov	r18,r21
    949c:	3021883a 	mov	r16,r6
    94a0:	18800315 	stw	r2,12(r3)
    94a4:	10c00215 	stw	r3,8(r2)
    94a8:	003fdb06 	br	9418 <_realloc_r+0x138>
    94ac:	00800304 	movi	r2,12
    94b0:	a0800015 	stw	r2,0(r20)
    94b4:	0005883a 	mov	r2,zero
    94b8:	003fe506 	br	9450 <_realloc_r+0x170>
    94bc:	98c00117 	ldw	r3,4(r19)
    94c0:	9c4b883a 	add	r5,r19,r17
    94c4:	11000054 	ori	r4,r2,1
    94c8:	18c0004c 	andi	r3,r3,1
    94cc:	1c62b03a 	or	r17,r3,r17
    94d0:	9c400115 	stw	r17,4(r19)
    94d4:	29000115 	stw	r4,4(r5)
    94d8:	2885883a 	add	r2,r5,r2
    94dc:	10c00117 	ldw	r3,4(r2)
    94e0:	29400204 	addi	r5,r5,8
    94e4:	a009883a 	mov	r4,r20
    94e8:	18c00054 	ori	r3,r3,1
    94ec:	10c00115 	stw	r3,4(r2)
    94f0:	00072480 	call	7248 <_free_r>
    94f4:	003fd306 	br	9444 <_realloc_r+0x164>
    94f8:	017fff04 	movi	r5,-4
    94fc:	414a703a 	and	r5,r8,r5
    9500:	89800404 	addi	r6,r17,16
    9504:	8151883a 	add	r8,r16,r5
    9508:	4180590e 	bge	r8,r6,9670 <_realloc_r+0x390>
    950c:	1080004c 	andi	r2,r2,1
    9510:	103f9e1e 	bne	r2,zero,938c <_realloc_r+0xac>
    9514:	adbffe17 	ldw	r22,-8(r21)
    9518:	00bfff04 	movi	r2,-4
    951c:	9dadc83a 	sub	r22,r19,r22
    9520:	b1800117 	ldw	r6,4(r22)
    9524:	3084703a 	and	r2,r6,r2
    9528:	20002026 	beq	r4,zero,95ac <_realloc_r+0x2cc>
    952c:	80af883a 	add	r23,r16,r2
    9530:	b96f883a 	add	r23,r23,r5
    9534:	21c05f26 	beq	r4,r7,96b4 <_realloc_r+0x3d4>
    9538:	b8c01c16 	blt	r23,r3,95ac <_realloc_r+0x2cc>
    953c:	20800317 	ldw	r2,12(r4)
    9540:	20c00217 	ldw	r3,8(r4)
    9544:	81bfff04 	addi	r6,r16,-4
    9548:	01000904 	movi	r4,36
    954c:	18800315 	stw	r2,12(r3)
    9550:	10c00215 	stw	r3,8(r2)
    9554:	b0c00217 	ldw	r3,8(r22)
    9558:	b0800317 	ldw	r2,12(r22)
    955c:	b4800204 	addi	r18,r22,8
    9560:	18800315 	stw	r2,12(r3)
    9564:	10c00215 	stw	r3,8(r2)
    9568:	21801b36 	bltu	r4,r6,95d8 <_realloc_r+0x2f8>
    956c:	008004c4 	movi	r2,19
    9570:	1180352e 	bgeu	r2,r6,9648 <_realloc_r+0x368>
    9574:	a8800017 	ldw	r2,0(r21)
    9578:	b0800215 	stw	r2,8(r22)
    957c:	a8800117 	ldw	r2,4(r21)
    9580:	b0800315 	stw	r2,12(r22)
    9584:	008006c4 	movi	r2,27
    9588:	11807f36 	bltu	r2,r6,9788 <_realloc_r+0x4a8>
    958c:	b0800404 	addi	r2,r22,16
    9590:	ad400204 	addi	r21,r21,8
    9594:	00002d06 	br	964c <_realloc_r+0x36c>
    9598:	adbffe17 	ldw	r22,-8(r21)
    959c:	00bfff04 	movi	r2,-4
    95a0:	9dadc83a 	sub	r22,r19,r22
    95a4:	b1000117 	ldw	r4,4(r22)
    95a8:	2084703a 	and	r2,r4,r2
    95ac:	b03f7726 	beq	r22,zero,938c <_realloc_r+0xac>
    95b0:	80af883a 	add	r23,r16,r2
    95b4:	b8ff7516 	blt	r23,r3,938c <_realloc_r+0xac>
    95b8:	b0800317 	ldw	r2,12(r22)
    95bc:	b0c00217 	ldw	r3,8(r22)
    95c0:	81bfff04 	addi	r6,r16,-4
    95c4:	01000904 	movi	r4,36
    95c8:	18800315 	stw	r2,12(r3)
    95cc:	10c00215 	stw	r3,8(r2)
    95d0:	b4800204 	addi	r18,r22,8
    95d4:	21bfe52e 	bgeu	r4,r6,956c <_realloc_r+0x28c>
    95d8:	a80b883a 	mov	r5,r21
    95dc:	9009883a 	mov	r4,r18
    95e0:	00080600 	call	8060 <memmove>
    95e4:	b821883a 	mov	r16,r23
    95e8:	b027883a 	mov	r19,r22
    95ec:	003f8a06 	br	9418 <_realloc_r+0x138>
    95f0:	300b883a 	mov	r5,r6
    95f4:	dfc00917 	ldw	ra,36(sp)
    95f8:	df000817 	ldw	fp,32(sp)
    95fc:	ddc00717 	ldw	r23,28(sp)
    9600:	dd800617 	ldw	r22,24(sp)
    9604:	dd400517 	ldw	r21,20(sp)
    9608:	dd000417 	ldw	r20,16(sp)
    960c:	dcc00317 	ldw	r19,12(sp)
    9610:	dc800217 	ldw	r18,8(sp)
    9614:	dc400117 	ldw	r17,4(sp)
    9618:	dc000017 	ldw	r16,0(sp)
    961c:	dec00a04 	addi	sp,sp,40
    9620:	00023f81 	jmpi	23f8 <_malloc_r>
    9624:	a8c00017 	ldw	r3,0(r21)
    9628:	90c00015 	stw	r3,0(r18)
    962c:	a8c00117 	ldw	r3,4(r21)
    9630:	90c00115 	stw	r3,4(r18)
    9634:	00c006c4 	movi	r3,27
    9638:	19804536 	bltu	r3,r6,9750 <_realloc_r+0x470>
    963c:	90800204 	addi	r2,r18,8
    9640:	a8c00204 	addi	r3,r21,8
    9644:	003f6306 	br	93d4 <_realloc_r+0xf4>
    9648:	9005883a 	mov	r2,r18
    964c:	a8c00017 	ldw	r3,0(r21)
    9650:	b821883a 	mov	r16,r23
    9654:	b027883a 	mov	r19,r22
    9658:	10c00015 	stw	r3,0(r2)
    965c:	a8c00117 	ldw	r3,4(r21)
    9660:	10c00115 	stw	r3,4(r2)
    9664:	a8c00217 	ldw	r3,8(r21)
    9668:	10c00215 	stw	r3,8(r2)
    966c:	003f6a06 	br	9418 <_realloc_r+0x138>
    9670:	9c67883a 	add	r19,r19,r17
    9674:	4445c83a 	sub	r2,r8,r17
    9678:	e4c00215 	stw	r19,8(fp)
    967c:	10800054 	ori	r2,r2,1
    9680:	98800115 	stw	r2,4(r19)
    9684:	a8bfff17 	ldw	r2,-4(r21)
    9688:	a009883a 	mov	r4,r20
    968c:	1080004c 	andi	r2,r2,1
    9690:	1462b03a 	or	r17,r2,r17
    9694:	ac7fff15 	stw	r17,-4(r21)
    9698:	000f2b80 	call	f2b8 <__malloc_unlock>
    969c:	a805883a 	mov	r2,r21
    96a0:	003f6b06 	br	9450 <_realloc_r+0x170>
    96a4:	a80b883a 	mov	r5,r21
    96a8:	9009883a 	mov	r4,r18
    96ac:	00080600 	call	8060 <memmove>
    96b0:	003f4e06 	br	93ec <_realloc_r+0x10c>
    96b4:	89000404 	addi	r4,r17,16
    96b8:	b93fbc16 	blt	r23,r4,95ac <_realloc_r+0x2cc>
    96bc:	b0800317 	ldw	r2,12(r22)
    96c0:	b0c00217 	ldw	r3,8(r22)
    96c4:	81bfff04 	addi	r6,r16,-4
    96c8:	01000904 	movi	r4,36
    96cc:	18800315 	stw	r2,12(r3)
    96d0:	10c00215 	stw	r3,8(r2)
    96d4:	b4800204 	addi	r18,r22,8
    96d8:	21804336 	bltu	r4,r6,97e8 <_realloc_r+0x508>
    96dc:	008004c4 	movi	r2,19
    96e0:	11803f2e 	bgeu	r2,r6,97e0 <_realloc_r+0x500>
    96e4:	a8800017 	ldw	r2,0(r21)
    96e8:	b0800215 	stw	r2,8(r22)
    96ec:	a8800117 	ldw	r2,4(r21)
    96f0:	b0800315 	stw	r2,12(r22)
    96f4:	008006c4 	movi	r2,27
    96f8:	11803f36 	bltu	r2,r6,97f8 <_realloc_r+0x518>
    96fc:	b0800404 	addi	r2,r22,16
    9700:	ad400204 	addi	r21,r21,8
    9704:	a8c00017 	ldw	r3,0(r21)
    9708:	10c00015 	stw	r3,0(r2)
    970c:	a8c00117 	ldw	r3,4(r21)
    9710:	10c00115 	stw	r3,4(r2)
    9714:	a8c00217 	ldw	r3,8(r21)
    9718:	10c00215 	stw	r3,8(r2)
    971c:	b447883a 	add	r3,r22,r17
    9720:	bc45c83a 	sub	r2,r23,r17
    9724:	e0c00215 	stw	r3,8(fp)
    9728:	10800054 	ori	r2,r2,1
    972c:	18800115 	stw	r2,4(r3)
    9730:	b0800117 	ldw	r2,4(r22)
    9734:	a009883a 	mov	r4,r20
    9738:	1080004c 	andi	r2,r2,1
    973c:	1462b03a 	or	r17,r2,r17
    9740:	b4400115 	stw	r17,4(r22)
    9744:	000f2b80 	call	f2b8 <__malloc_unlock>
    9748:	9005883a 	mov	r2,r18
    974c:	003f4006 	br	9450 <_realloc_r+0x170>
    9750:	a8c00217 	ldw	r3,8(r21)
    9754:	90c00215 	stw	r3,8(r18)
    9758:	a8c00317 	ldw	r3,12(r21)
    975c:	90c00315 	stw	r3,12(r18)
    9760:	30801126 	beq	r6,r2,97a8 <_realloc_r+0x4c8>
    9764:	90800404 	addi	r2,r18,16
    9768:	a8c00404 	addi	r3,r21,16
    976c:	003f1906 	br	93d4 <_realloc_r+0xf4>
    9770:	90ffff17 	ldw	r3,-4(r18)
    9774:	00bfff04 	movi	r2,-4
    9778:	a825883a 	mov	r18,r21
    977c:	1884703a 	and	r2,r3,r2
    9780:	80a1883a 	add	r16,r16,r2
    9784:	003f2406 	br	9418 <_realloc_r+0x138>
    9788:	a8800217 	ldw	r2,8(r21)
    978c:	b0800415 	stw	r2,16(r22)
    9790:	a8800317 	ldw	r2,12(r21)
    9794:	b0800515 	stw	r2,20(r22)
    9798:	31000a26 	beq	r6,r4,97c4 <_realloc_r+0x4e4>
    979c:	b0800604 	addi	r2,r22,24
    97a0:	ad400404 	addi	r21,r21,16
    97a4:	003fa906 	br	964c <_realloc_r+0x36c>
    97a8:	a9000417 	ldw	r4,16(r21)
    97ac:	90800604 	addi	r2,r18,24
    97b0:	a8c00604 	addi	r3,r21,24
    97b4:	91000415 	stw	r4,16(r18)
    97b8:	a9000517 	ldw	r4,20(r21)
    97bc:	91000515 	stw	r4,20(r18)
    97c0:	003f0406 	br	93d4 <_realloc_r+0xf4>
    97c4:	a8c00417 	ldw	r3,16(r21)
    97c8:	ad400604 	addi	r21,r21,24
    97cc:	b0800804 	addi	r2,r22,32
    97d0:	b0c00615 	stw	r3,24(r22)
    97d4:	a8ffff17 	ldw	r3,-4(r21)
    97d8:	b0c00715 	stw	r3,28(r22)
    97dc:	003f9b06 	br	964c <_realloc_r+0x36c>
    97e0:	9005883a 	mov	r2,r18
    97e4:	003fc706 	br	9704 <_realloc_r+0x424>
    97e8:	a80b883a 	mov	r5,r21
    97ec:	9009883a 	mov	r4,r18
    97f0:	00080600 	call	8060 <memmove>
    97f4:	003fc906 	br	971c <_realloc_r+0x43c>
    97f8:	a8800217 	ldw	r2,8(r21)
    97fc:	b0800415 	stw	r2,16(r22)
    9800:	a8800317 	ldw	r2,12(r21)
    9804:	b0800515 	stw	r2,20(r22)
    9808:	31000726 	beq	r6,r4,9828 <_realloc_r+0x548>
    980c:	b0800604 	addi	r2,r22,24
    9810:	ad400404 	addi	r21,r21,16
    9814:	003fbb06 	br	9704 <_realloc_r+0x424>
    9818:	a009883a 	mov	r4,r20
    981c:	000f2b80 	call	f2b8 <__malloc_unlock>
    9820:	0005883a 	mov	r2,zero
    9824:	003f0a06 	br	9450 <_realloc_r+0x170>
    9828:	a8c00417 	ldw	r3,16(r21)
    982c:	ad400604 	addi	r21,r21,24
    9830:	b0800804 	addi	r2,r22,32
    9834:	b0c00615 	stw	r3,24(r22)
    9838:	a8ffff17 	ldw	r3,-4(r21)
    983c:	b0c00715 	stw	r3,28(r22)
    9840:	003fb006 	br	9704 <_realloc_r+0x424>

00009844 <__fpclassifyd>:
    9844:	00a00034 	movhi	r2,32768
    9848:	10bfffc4 	addi	r2,r2,-1
    984c:	2884703a 	and	r2,r5,r2
    9850:	10000726 	beq	r2,zero,9870 <__fpclassifyd+0x2c>
    9854:	00fffc34 	movhi	r3,65520
    9858:	019ff834 	movhi	r6,32736
    985c:	28c7883a 	add	r3,r5,r3
    9860:	31bfffc4 	addi	r6,r6,-1
    9864:	30c00536 	bltu	r6,r3,987c <__fpclassifyd+0x38>
    9868:	00800104 	movi	r2,4
    986c:	f800283a 	ret
    9870:	2000021e 	bne	r4,zero,987c <__fpclassifyd+0x38>
    9874:	00800084 	movi	r2,2
    9878:	f800283a 	ret
    987c:	00dffc34 	movhi	r3,32752
    9880:	019ff834 	movhi	r6,32736
    9884:	28cb883a 	add	r5,r5,r3
    9888:	31bfffc4 	addi	r6,r6,-1
    988c:	317ff62e 	bgeu	r6,r5,9868 <__fpclassifyd+0x24>
    9890:	01400434 	movhi	r5,16
    9894:	297fffc4 	addi	r5,r5,-1
    9898:	28800236 	bltu	r5,r2,98a4 <__fpclassifyd+0x60>
    989c:	008000c4 	movi	r2,3
    98a0:	f800283a 	ret
    98a4:	10c00226 	beq	r2,r3,98b0 <__fpclassifyd+0x6c>
    98a8:	0005883a 	mov	r2,zero
    98ac:	f800283a 	ret
    98b0:	2005003a 	cmpeq	r2,r4,zero
    98b4:	f800283a 	ret

000098b8 <__sread>:
    98b8:	defffe04 	addi	sp,sp,-8
    98bc:	dc000015 	stw	r16,0(sp)
    98c0:	2821883a 	mov	r16,r5
    98c4:	2940038f 	ldh	r5,14(r5)
    98c8:	dfc00115 	stw	ra,4(sp)
    98cc:	000b6ac0 	call	b6ac <_read_r>
    98d0:	10000716 	blt	r2,zero,98f0 <__sread+0x38>
    98d4:	80c01417 	ldw	r3,80(r16)
    98d8:	1887883a 	add	r3,r3,r2
    98dc:	80c01415 	stw	r3,80(r16)
    98e0:	dfc00117 	ldw	ra,4(sp)
    98e4:	dc000017 	ldw	r16,0(sp)
    98e8:	dec00204 	addi	sp,sp,8
    98ec:	f800283a 	ret
    98f0:	80c0030b 	ldhu	r3,12(r16)
    98f4:	18fbffcc 	andi	r3,r3,61439
    98f8:	80c0030d 	sth	r3,12(r16)
    98fc:	dfc00117 	ldw	ra,4(sp)
    9900:	dc000017 	ldw	r16,0(sp)
    9904:	dec00204 	addi	sp,sp,8
    9908:	f800283a 	ret

0000990c <__seofread>:
    990c:	0005883a 	mov	r2,zero
    9910:	f800283a 	ret

00009914 <__swrite>:
    9914:	2880030b 	ldhu	r2,12(r5)
    9918:	defffb04 	addi	sp,sp,-20
    991c:	dcc00315 	stw	r19,12(sp)
    9920:	dc800215 	stw	r18,8(sp)
    9924:	dc400115 	stw	r17,4(sp)
    9928:	dc000015 	stw	r16,0(sp)
    992c:	dfc00415 	stw	ra,16(sp)
    9930:	10c0400c 	andi	r3,r2,256
    9934:	2821883a 	mov	r16,r5
    9938:	2023883a 	mov	r17,r4
    993c:	3025883a 	mov	r18,r6
    9940:	3827883a 	mov	r19,r7
    9944:	18000526 	beq	r3,zero,995c <__swrite+0x48>
    9948:	2940038f 	ldh	r5,14(r5)
    994c:	01c00084 	movi	r7,2
    9950:	000d883a 	mov	r6,zero
    9954:	000b64c0 	call	b64c <_lseek_r>
    9958:	8080030b 	ldhu	r2,12(r16)
    995c:	8140038f 	ldh	r5,14(r16)
    9960:	10bbffcc 	andi	r2,r2,61439
    9964:	980f883a 	mov	r7,r19
    9968:	900d883a 	mov	r6,r18
    996c:	8809883a 	mov	r4,r17
    9970:	8080030d 	sth	r2,12(r16)
    9974:	dfc00417 	ldw	ra,16(sp)
    9978:	dcc00317 	ldw	r19,12(sp)
    997c:	dc800217 	ldw	r18,8(sp)
    9980:	dc400117 	ldw	r17,4(sp)
    9984:	dc000017 	ldw	r16,0(sp)
    9988:	dec00504 	addi	sp,sp,20
    998c:	000b1181 	jmpi	b118 <_write_r>

00009990 <__sseek>:
    9990:	defffe04 	addi	sp,sp,-8
    9994:	dc000015 	stw	r16,0(sp)
    9998:	2821883a 	mov	r16,r5
    999c:	2940038f 	ldh	r5,14(r5)
    99a0:	dfc00115 	stw	ra,4(sp)
    99a4:	000b64c0 	call	b64c <_lseek_r>
    99a8:	00ffffc4 	movi	r3,-1
    99ac:	10c00826 	beq	r2,r3,99d0 <__sseek+0x40>
    99b0:	80c0030b 	ldhu	r3,12(r16)
    99b4:	80801415 	stw	r2,80(r16)
    99b8:	18c40014 	ori	r3,r3,4096
    99bc:	80c0030d 	sth	r3,12(r16)
    99c0:	dfc00117 	ldw	ra,4(sp)
    99c4:	dc000017 	ldw	r16,0(sp)
    99c8:	dec00204 	addi	sp,sp,8
    99cc:	f800283a 	ret
    99d0:	80c0030b 	ldhu	r3,12(r16)
    99d4:	18fbffcc 	andi	r3,r3,61439
    99d8:	80c0030d 	sth	r3,12(r16)
    99dc:	dfc00117 	ldw	ra,4(sp)
    99e0:	dc000017 	ldw	r16,0(sp)
    99e4:	dec00204 	addi	sp,sp,8
    99e8:	f800283a 	ret

000099ec <__sclose>:
    99ec:	2940038f 	ldh	r5,14(r5)
    99f0:	000b1781 	jmpi	b178 <_close_r>

000099f4 <strcmp>:
    99f4:	2144b03a 	or	r2,r4,r5
    99f8:	108000cc 	andi	r2,r2,3
    99fc:	1000171e 	bne	r2,zero,9a5c <strcmp+0x68>
    9a00:	20800017 	ldw	r2,0(r4)
    9a04:	28c00017 	ldw	r3,0(r5)
    9a08:	10c0141e 	bne	r2,r3,9a5c <strcmp+0x68>
    9a0c:	027fbff4 	movhi	r9,65279
    9a10:	4a7fbfc4 	addi	r9,r9,-257
    9a14:	0086303a 	nor	r3,zero,r2
    9a18:	02202074 	movhi	r8,32897
    9a1c:	1245883a 	add	r2,r2,r9
    9a20:	42202004 	addi	r8,r8,-32640
    9a24:	10c4703a 	and	r2,r2,r3
    9a28:	1204703a 	and	r2,r2,r8
    9a2c:	10000226 	beq	r2,zero,9a38 <strcmp+0x44>
    9a30:	00002306 	br	9ac0 <strcmp+0xcc>
    9a34:	1000221e 	bne	r2,zero,9ac0 <strcmp+0xcc>
    9a38:	21000104 	addi	r4,r4,4
    9a3c:	20c00017 	ldw	r3,0(r4)
    9a40:	29400104 	addi	r5,r5,4
    9a44:	29800017 	ldw	r6,0(r5)
    9a48:	1a4f883a 	add	r7,r3,r9
    9a4c:	00c4303a 	nor	r2,zero,r3
    9a50:	3884703a 	and	r2,r7,r2
    9a54:	1204703a 	and	r2,r2,r8
    9a58:	19bff626 	beq	r3,r6,9a34 <strcmp+0x40>
    9a5c:	20800003 	ldbu	r2,0(r4)
    9a60:	10c03fcc 	andi	r3,r2,255
    9a64:	18c0201c 	xori	r3,r3,128
    9a68:	18ffe004 	addi	r3,r3,-128
    9a6c:	18000c26 	beq	r3,zero,9aa0 <strcmp+0xac>
    9a70:	29800007 	ldb	r6,0(r5)
    9a74:	19800326 	beq	r3,r6,9a84 <strcmp+0x90>
    9a78:	00001306 	br	9ac8 <strcmp+0xd4>
    9a7c:	29800007 	ldb	r6,0(r5)
    9a80:	11800b1e 	bne	r2,r6,9ab0 <strcmp+0xbc>
    9a84:	21000044 	addi	r4,r4,1
    9a88:	20c00003 	ldbu	r3,0(r4)
    9a8c:	29400044 	addi	r5,r5,1
    9a90:	18803fcc 	andi	r2,r3,255
    9a94:	1080201c 	xori	r2,r2,128
    9a98:	10bfe004 	addi	r2,r2,-128
    9a9c:	103ff71e 	bne	r2,zero,9a7c <strcmp+0x88>
    9aa0:	0007883a 	mov	r3,zero
    9aa4:	28800003 	ldbu	r2,0(r5)
    9aa8:	1885c83a 	sub	r2,r3,r2
    9aac:	f800283a 	ret
    9ab0:	28800003 	ldbu	r2,0(r5)
    9ab4:	18c03fcc 	andi	r3,r3,255
    9ab8:	1885c83a 	sub	r2,r3,r2
    9abc:	f800283a 	ret
    9ac0:	0005883a 	mov	r2,zero
    9ac4:	f800283a 	ret
    9ac8:	10c03fcc 	andi	r3,r2,255
    9acc:	003ff506 	br	9aa4 <strcmp+0xb0>

00009ad0 <__sprint_r.part.0>:
    9ad0:	28801917 	ldw	r2,100(r5)
    9ad4:	defff604 	addi	sp,sp,-40
    9ad8:	dd400515 	stw	r21,20(sp)
    9adc:	dfc00915 	stw	ra,36(sp)
    9ae0:	df000815 	stw	fp,32(sp)
    9ae4:	ddc00715 	stw	r23,28(sp)
    9ae8:	dd800615 	stw	r22,24(sp)
    9aec:	dd000415 	stw	r20,16(sp)
    9af0:	dcc00315 	stw	r19,12(sp)
    9af4:	dc800215 	stw	r18,8(sp)
    9af8:	dc400115 	stw	r17,4(sp)
    9afc:	dc000015 	stw	r16,0(sp)
    9b00:	1088000c 	andi	r2,r2,8192
    9b04:	302b883a 	mov	r21,r6
    9b08:	10002e26 	beq	r2,zero,9bc4 <__sprint_r.part.0+0xf4>
    9b0c:	30800217 	ldw	r2,8(r6)
    9b10:	35800017 	ldw	r22,0(r6)
    9b14:	10002926 	beq	r2,zero,9bbc <__sprint_r.part.0+0xec>
    9b18:	2827883a 	mov	r19,r5
    9b1c:	2029883a 	mov	r20,r4
    9b20:	b5c00104 	addi	r23,r22,4
    9b24:	04bfffc4 	movi	r18,-1
    9b28:	bc400017 	ldw	r17,0(r23)
    9b2c:	b4000017 	ldw	r16,0(r22)
    9b30:	0039883a 	mov	fp,zero
    9b34:	8822d0ba 	srli	r17,r17,2
    9b38:	8800031e 	bne	r17,zero,9b48 <__sprint_r.part.0+0x78>
    9b3c:	00001806 	br	9ba0 <__sprint_r.part.0+0xd0>
    9b40:	84000104 	addi	r16,r16,4
    9b44:	8f001526 	beq	r17,fp,9b9c <__sprint_r.part.0+0xcc>
    9b48:	81400017 	ldw	r5,0(r16)
    9b4c:	980d883a 	mov	r6,r19
    9b50:	a009883a 	mov	r4,r20
    9b54:	000b4f80 	call	b4f8 <_fputwc_r>
    9b58:	e7000044 	addi	fp,fp,1
    9b5c:	14bff81e 	bne	r2,r18,9b40 <__sprint_r.part.0+0x70>
    9b60:	9005883a 	mov	r2,r18
    9b64:	a8000215 	stw	zero,8(r21)
    9b68:	a8000115 	stw	zero,4(r21)
    9b6c:	dfc00917 	ldw	ra,36(sp)
    9b70:	df000817 	ldw	fp,32(sp)
    9b74:	ddc00717 	ldw	r23,28(sp)
    9b78:	dd800617 	ldw	r22,24(sp)
    9b7c:	dd400517 	ldw	r21,20(sp)
    9b80:	dd000417 	ldw	r20,16(sp)
    9b84:	dcc00317 	ldw	r19,12(sp)
    9b88:	dc800217 	ldw	r18,8(sp)
    9b8c:	dc400117 	ldw	r17,4(sp)
    9b90:	dc000017 	ldw	r16,0(sp)
    9b94:	dec00a04 	addi	sp,sp,40
    9b98:	f800283a 	ret
    9b9c:	a8800217 	ldw	r2,8(r21)
    9ba0:	8c63883a 	add	r17,r17,r17
    9ba4:	8c63883a 	add	r17,r17,r17
    9ba8:	1445c83a 	sub	r2,r2,r17
    9bac:	a8800215 	stw	r2,8(r21)
    9bb0:	b5800204 	addi	r22,r22,8
    9bb4:	bdc00204 	addi	r23,r23,8
    9bb8:	103fdb1e 	bne	r2,zero,9b28 <__sprint_r.part.0+0x58>
    9bbc:	0005883a 	mov	r2,zero
    9bc0:	003fe806 	br	9b64 <__sprint_r.part.0+0x94>
    9bc4:	00075580 	call	7558 <__sfvwrite_r>
    9bc8:	003fe606 	br	9b64 <__sprint_r.part.0+0x94>

00009bcc <__sprint_r>:
    9bcc:	30c00217 	ldw	r3,8(r6)
    9bd0:	18000126 	beq	r3,zero,9bd8 <__sprint_r+0xc>
    9bd4:	0009ad01 	jmpi	9ad0 <__sprint_r.part.0>
    9bd8:	30000115 	stw	zero,4(r6)
    9bdc:	0005883a 	mov	r2,zero
    9be0:	f800283a 	ret

00009be4 <___vfiprintf_internal_r>:
    9be4:	deffc904 	addi	sp,sp,-220
    9be8:	df003515 	stw	fp,212(sp)
    9bec:	dd003115 	stw	r20,196(sp)
    9bf0:	dfc03615 	stw	ra,216(sp)
    9bf4:	ddc03415 	stw	r23,208(sp)
    9bf8:	dd803315 	stw	r22,204(sp)
    9bfc:	dd403215 	stw	r21,200(sp)
    9c00:	dcc03015 	stw	r19,192(sp)
    9c04:	dc802f15 	stw	r18,188(sp)
    9c08:	dc402e15 	stw	r17,184(sp)
    9c0c:	dc002d15 	stw	r16,180(sp)
    9c10:	d9002015 	stw	r4,128(sp)
    9c14:	d9c02215 	stw	r7,136(sp)
    9c18:	2829883a 	mov	r20,r5
    9c1c:	3039883a 	mov	fp,r6
    9c20:	20000226 	beq	r4,zero,9c2c <___vfiprintf_internal_r+0x48>
    9c24:	20800e17 	ldw	r2,56(r4)
    9c28:	1000cf26 	beq	r2,zero,9f68 <___vfiprintf_internal_r+0x384>
    9c2c:	a080030b 	ldhu	r2,12(r20)
    9c30:	10c8000c 	andi	r3,r2,8192
    9c34:	1800061e 	bne	r3,zero,9c50 <___vfiprintf_internal_r+0x6c>
    9c38:	a1001917 	ldw	r4,100(r20)
    9c3c:	00f7ffc4 	movi	r3,-8193
    9c40:	10880014 	ori	r2,r2,8192
    9c44:	20c6703a 	and	r3,r4,r3
    9c48:	a080030d 	sth	r2,12(r20)
    9c4c:	a0c01915 	stw	r3,100(r20)
    9c50:	10c0020c 	andi	r3,r2,8
    9c54:	1800a926 	beq	r3,zero,9efc <___vfiprintf_internal_r+0x318>
    9c58:	a0c00417 	ldw	r3,16(r20)
    9c5c:	1800a726 	beq	r3,zero,9efc <___vfiprintf_internal_r+0x318>
    9c60:	1080068c 	andi	r2,r2,26
    9c64:	00c00284 	movi	r3,10
    9c68:	10c0ac26 	beq	r2,r3,9f1c <___vfiprintf_internal_r+0x338>
    9c6c:	da801a04 	addi	r10,sp,104
    9c70:	da801e15 	stw	r10,120(sp)
    9c74:	d8801e17 	ldw	r2,120(sp)
    9c78:	da8019c4 	addi	r10,sp,103
    9c7c:	05800074 	movhi	r22,1
    9c80:	05c00074 	movhi	r23,1
    9c84:	da801f15 	stw	r10,124(sp)
    9c88:	1295c83a 	sub	r10,r2,r10
    9c8c:	b5877104 	addi	r22,r22,7620
    9c90:	bdc76d04 	addi	r23,r23,7604
    9c94:	dec01a15 	stw	sp,104(sp)
    9c98:	d8001c15 	stw	zero,112(sp)
    9c9c:	d8001b15 	stw	zero,108(sp)
    9ca0:	d8002615 	stw	zero,152(sp)
    9ca4:	d8002315 	stw	zero,140(sp)
    9ca8:	da802715 	stw	r10,156(sp)
    9cac:	d811883a 	mov	r8,sp
    9cb0:	dd002115 	stw	r20,132(sp)
    9cb4:	e021883a 	mov	r16,fp
    9cb8:	80800007 	ldb	r2,0(r16)
    9cbc:	1003ea26 	beq	r2,zero,ac68 <___vfiprintf_internal_r+0x1084>
    9cc0:	00c00944 	movi	r3,37
    9cc4:	8025883a 	mov	r18,r16
    9cc8:	10c0021e 	bne	r2,r3,9cd4 <___vfiprintf_internal_r+0xf0>
    9ccc:	00001606 	br	9d28 <___vfiprintf_internal_r+0x144>
    9cd0:	10c00326 	beq	r2,r3,9ce0 <___vfiprintf_internal_r+0xfc>
    9cd4:	94800044 	addi	r18,r18,1
    9cd8:	90800007 	ldb	r2,0(r18)
    9cdc:	103ffc1e 	bne	r2,zero,9cd0 <___vfiprintf_internal_r+0xec>
    9ce0:	9423c83a 	sub	r17,r18,r16
    9ce4:	88001026 	beq	r17,zero,9d28 <___vfiprintf_internal_r+0x144>
    9ce8:	d8c01c17 	ldw	r3,112(sp)
    9cec:	d8801b17 	ldw	r2,108(sp)
    9cf0:	44000015 	stw	r16,0(r8)
    9cf4:	88c7883a 	add	r3,r17,r3
    9cf8:	10800044 	addi	r2,r2,1
    9cfc:	44400115 	stw	r17,4(r8)
    9d00:	d8c01c15 	stw	r3,112(sp)
    9d04:	d8801b15 	stw	r2,108(sp)
    9d08:	010001c4 	movi	r4,7
    9d0c:	2080760e 	bge	r4,r2,9ee8 <___vfiprintf_internal_r+0x304>
    9d10:	1803821e 	bne	r3,zero,ab1c <___vfiprintf_internal_r+0xf38>
    9d14:	da802317 	ldw	r10,140(sp)
    9d18:	d8001b15 	stw	zero,108(sp)
    9d1c:	d811883a 	mov	r8,sp
    9d20:	5455883a 	add	r10,r10,r17
    9d24:	da802315 	stw	r10,140(sp)
    9d28:	90800007 	ldb	r2,0(r18)
    9d2c:	10044626 	beq	r2,zero,ae48 <___vfiprintf_internal_r+0x1264>
    9d30:	90c00047 	ldb	r3,1(r18)
    9d34:	94000044 	addi	r16,r18,1
    9d38:	d8001d85 	stb	zero,118(sp)
    9d3c:	0009883a 	mov	r4,zero
    9d40:	000f883a 	mov	r7,zero
    9d44:	027fffc4 	movi	r9,-1
    9d48:	0023883a 	mov	r17,zero
    9d4c:	0029883a 	mov	r20,zero
    9d50:	01401604 	movi	r5,88
    9d54:	01800244 	movi	r6,9
    9d58:	03400a84 	movi	r13,42
    9d5c:	03001b04 	movi	r12,108
    9d60:	84000044 	addi	r16,r16,1
    9d64:	18bff804 	addi	r2,r3,-32
    9d68:	28827336 	bltu	r5,r2,a738 <___vfiprintf_internal_r+0xb54>
    9d6c:	100490ba 	slli	r2,r2,2
    9d70:	02800074 	movhi	r10,1
    9d74:	52a76104 	addi	r10,r10,-25212
    9d78:	1285883a 	add	r2,r2,r10
    9d7c:	10800017 	ldw	r2,0(r2)
    9d80:	1000683a 	jmp	r2
    9d84:	0000a46c 	andhi	zero,zero,657
    9d88:	0000a738 	rdprs	zero,zero,668
    9d8c:	0000a738 	rdprs	zero,zero,668
    9d90:	0000a48c 	andi	zero,zero,658
    9d94:	0000a738 	rdprs	zero,zero,668
    9d98:	0000a738 	rdprs	zero,zero,668
    9d9c:	0000a738 	rdprs	zero,zero,668
    9da0:	0000a738 	rdprs	zero,zero,668
    9da4:	0000a738 	rdprs	zero,zero,668
    9da8:	0000a738 	rdprs	zero,zero,668
    9dac:	0000a674 	movhi	zero,665
    9db0:	0000a690 	cmplti	zero,zero,666
    9db4:	0000a738 	rdprs	zero,zero,668
    9db8:	00009f78 	rdprs	zero,zero,637
    9dbc:	0000a6a0 	cmpeqi	zero,zero,666
    9dc0:	0000a738 	rdprs	zero,zero,668
    9dc4:	0000a498 	cmpnei	zero,zero,658
    9dc8:	0000a4a4 	muli	zero,zero,658
    9dcc:	0000a4a4 	muli	zero,zero,658
    9dd0:	0000a4a4 	muli	zero,zero,658
    9dd4:	0000a4a4 	muli	zero,zero,658
    9dd8:	0000a4a4 	muli	zero,zero,658
    9ddc:	0000a4a4 	muli	zero,zero,658
    9de0:	0000a4a4 	muli	zero,zero,658
    9de4:	0000a4a4 	muli	zero,zero,658
    9de8:	0000a4a4 	muli	zero,zero,658
    9dec:	0000a738 	rdprs	zero,zero,668
    9df0:	0000a738 	rdprs	zero,zero,668
    9df4:	0000a738 	rdprs	zero,zero,668
    9df8:	0000a738 	rdprs	zero,zero,668
    9dfc:	0000a738 	rdprs	zero,zero,668
    9e00:	0000a738 	rdprs	zero,zero,668
    9e04:	0000a738 	rdprs	zero,zero,668
    9e08:	0000a738 	rdprs	zero,zero,668
    9e0c:	0000a738 	rdprs	zero,zero,668
    9e10:	0000a738 	rdprs	zero,zero,668
    9e14:	0000a4d0 	cmplti	zero,zero,659
    9e18:	0000a738 	rdprs	zero,zero,668
    9e1c:	0000a738 	rdprs	zero,zero,668
    9e20:	0000a738 	rdprs	zero,zero,668
    9e24:	0000a738 	rdprs	zero,zero,668
    9e28:	0000a738 	rdprs	zero,zero,668
    9e2c:	0000a738 	rdprs	zero,zero,668
    9e30:	0000a738 	rdprs	zero,zero,668
    9e34:	0000a738 	rdprs	zero,zero,668
    9e38:	0000a738 	rdprs	zero,zero,668
    9e3c:	0000a738 	rdprs	zero,zero,668
    9e40:	0000a508 	cmpgei	zero,zero,660
    9e44:	0000a738 	rdprs	zero,zero,668
    9e48:	0000a738 	rdprs	zero,zero,668
    9e4c:	0000a738 	rdprs	zero,zero,668
    9e50:	0000a738 	rdprs	zero,zero,668
    9e54:	0000a738 	rdprs	zero,zero,668
    9e58:	0000a560 	cmpeqi	zero,zero,661
    9e5c:	0000a738 	rdprs	zero,zero,668
    9e60:	0000a738 	rdprs	zero,zero,668
    9e64:	0000a5d0 	cmplti	zero,zero,663
    9e68:	0000a738 	rdprs	zero,zero,668
    9e6c:	0000a738 	rdprs	zero,zero,668
    9e70:	0000a738 	rdprs	zero,zero,668
    9e74:	0000a738 	rdprs	zero,zero,668
    9e78:	0000a738 	rdprs	zero,zero,668
    9e7c:	0000a738 	rdprs	zero,zero,668
    9e80:	0000a738 	rdprs	zero,zero,668
    9e84:	0000a738 	rdprs	zero,zero,668
    9e88:	0000a738 	rdprs	zero,zero,668
    9e8c:	0000a738 	rdprs	zero,zero,668
    9e90:	0000a37c 	xorhi	zero,zero,653
    9e94:	0000a3a8 	cmpgeui	zero,zero,654
    9e98:	0000a738 	rdprs	zero,zero,668
    9e9c:	0000a738 	rdprs	zero,zero,668
    9ea0:	0000a738 	rdprs	zero,zero,668
    9ea4:	0000a6e0 	cmpeqi	zero,zero,667
    9ea8:	0000a3a8 	cmpgeui	zero,zero,654
    9eac:	0000a738 	rdprs	zero,zero,668
    9eb0:	0000a738 	rdprs	zero,zero,668
    9eb4:	0000a23c 	xorhi	zero,zero,648
    9eb8:	0000a738 	rdprs	zero,zero,668
    9ebc:	0000a24c 	andi	zero,zero,649
    9ec0:	0000a288 	cmpgei	zero,zero,650
    9ec4:	00009f84 	movi	zero,638
    9ec8:	0000a230 	cmpltui	zero,zero,648
    9ecc:	0000a738 	rdprs	zero,zero,668
    9ed0:	0000a60c 	andi	zero,zero,664
    9ed4:	0000a738 	rdprs	zero,zero,668
    9ed8:	0000a664 	muli	zero,zero,665
    9edc:	0000a738 	rdprs	zero,zero,668
    9ee0:	0000a738 	rdprs	zero,zero,668
    9ee4:	0000a328 	cmpgeui	zero,zero,652
    9ee8:	42000204 	addi	r8,r8,8
    9eec:	da802317 	ldw	r10,140(sp)
    9ef0:	5455883a 	add	r10,r10,r17
    9ef4:	da802315 	stw	r10,140(sp)
    9ef8:	003f8b06 	br	9d28 <___vfiprintf_internal_r+0x144>
    9efc:	d9002017 	ldw	r4,128(sp)
    9f00:	a00b883a 	mov	r5,r20
    9f04:	00051000 	call	5100 <__swsetup_r>
    9f08:	1003b11e 	bne	r2,zero,add0 <___vfiprintf_internal_r+0x11ec>
    9f0c:	a080030b 	ldhu	r2,12(r20)
    9f10:	00c00284 	movi	r3,10
    9f14:	1080068c 	andi	r2,r2,26
    9f18:	10ff541e 	bne	r2,r3,9c6c <___vfiprintf_internal_r+0x88>
    9f1c:	a080038f 	ldh	r2,14(r20)
    9f20:	103f5216 	blt	r2,zero,9c6c <___vfiprintf_internal_r+0x88>
    9f24:	d9c02217 	ldw	r7,136(sp)
    9f28:	d9002017 	ldw	r4,128(sp)
    9f2c:	e00d883a 	mov	r6,fp
    9f30:	a00b883a 	mov	r5,r20
    9f34:	000b05c0 	call	b05c <__sbprintf>
    9f38:	dfc03617 	ldw	ra,216(sp)
    9f3c:	df003517 	ldw	fp,212(sp)
    9f40:	ddc03417 	ldw	r23,208(sp)
    9f44:	dd803317 	ldw	r22,204(sp)
    9f48:	dd403217 	ldw	r21,200(sp)
    9f4c:	dd003117 	ldw	r20,196(sp)
    9f50:	dcc03017 	ldw	r19,192(sp)
    9f54:	dc802f17 	ldw	r18,188(sp)
    9f58:	dc402e17 	ldw	r17,184(sp)
    9f5c:	dc002d17 	ldw	r16,180(sp)
    9f60:	dec03704 	addi	sp,sp,220
    9f64:	f800283a 	ret
    9f68:	00070d40 	call	70d4 <__sinit>
    9f6c:	003f2f06 	br	9c2c <___vfiprintf_internal_r+0x48>
    9f70:	0463c83a 	sub	r17,zero,r17
    9f74:	d8802215 	stw	r2,136(sp)
    9f78:	a5000114 	ori	r20,r20,4
    9f7c:	80c00007 	ldb	r3,0(r16)
    9f80:	003f7706 	br	9d60 <___vfiprintf_internal_r+0x17c>
    9f84:	00800c04 	movi	r2,48
    9f88:	da802217 	ldw	r10,136(sp)
    9f8c:	d8801d05 	stb	r2,116(sp)
    9f90:	00801e04 	movi	r2,120
    9f94:	d8801d45 	stb	r2,117(sp)
    9f98:	d8001d85 	stb	zero,118(sp)
    9f9c:	50c00104 	addi	r3,r10,4
    9fa0:	54800017 	ldw	r18,0(r10)
    9fa4:	0027883a 	mov	r19,zero
    9fa8:	a0800094 	ori	r2,r20,2
    9fac:	48030b16 	blt	r9,zero,abdc <___vfiprintf_internal_r+0xff8>
    9fb0:	00bfdfc4 	movi	r2,-129
    9fb4:	a096703a 	and	r11,r20,r2
    9fb8:	d8c02215 	stw	r3,136(sp)
    9fbc:	5d000094 	ori	r20,r11,2
    9fc0:	90032b1e 	bne	r18,zero,ac70 <___vfiprintf_internal_r+0x108c>
    9fc4:	00800074 	movhi	r2,1
    9fc8:	10870c04 	addi	r2,r2,7216
    9fcc:	d8802615 	stw	r2,152(sp)
    9fd0:	0039883a 	mov	fp,zero
    9fd4:	48017b1e 	bne	r9,zero,a5c4 <___vfiprintf_internal_r+0x9e0>
    9fd8:	0013883a 	mov	r9,zero
    9fdc:	0027883a 	mov	r19,zero
    9fe0:	dd401a04 	addi	r21,sp,104
    9fe4:	4825883a 	mov	r18,r9
    9fe8:	4cc0010e 	bge	r9,r19,9ff0 <___vfiprintf_internal_r+0x40c>
    9fec:	9825883a 	mov	r18,r19
    9ff0:	e7003fcc 	andi	fp,fp,255
    9ff4:	e700201c 	xori	fp,fp,128
    9ff8:	e73fe004 	addi	fp,fp,-128
    9ffc:	e0000126 	beq	fp,zero,a004 <___vfiprintf_internal_r+0x420>
    a000:	94800044 	addi	r18,r18,1
    a004:	a380008c 	andi	r14,r20,2
    a008:	70000126 	beq	r14,zero,a010 <___vfiprintf_internal_r+0x42c>
    a00c:	94800084 	addi	r18,r18,2
    a010:	a700210c 	andi	fp,r20,132
    a014:	e001df1e 	bne	fp,zero,a794 <___vfiprintf_internal_r+0xbb0>
    a018:	8c87c83a 	sub	r3,r17,r18
    a01c:	00c1dd0e 	bge	zero,r3,a794 <___vfiprintf_internal_r+0xbb0>
    a020:	01c00404 	movi	r7,16
    a024:	d8801c17 	ldw	r2,112(sp)
    a028:	38c3ad0e 	bge	r7,r3,aee0 <___vfiprintf_internal_r+0x12fc>
    a02c:	02800074 	movhi	r10,1
    a030:	52877104 	addi	r10,r10,7620
    a034:	dc002915 	stw	r16,164(sp)
    a038:	d9801b17 	ldw	r6,108(sp)
    a03c:	da802415 	stw	r10,144(sp)
    a040:	03c001c4 	movi	r15,7
    a044:	da402515 	stw	r9,148(sp)
    a048:	db802815 	stw	r14,160(sp)
    a04c:	1821883a 	mov	r16,r3
    a050:	00000506 	br	a068 <___vfiprintf_internal_r+0x484>
    a054:	31400084 	addi	r5,r6,2
    a058:	42000204 	addi	r8,r8,8
    a05c:	200d883a 	mov	r6,r4
    a060:	843ffc04 	addi	r16,r16,-16
    a064:	3c000d0e 	bge	r7,r16,a09c <___vfiprintf_internal_r+0x4b8>
    a068:	10800404 	addi	r2,r2,16
    a06c:	31000044 	addi	r4,r6,1
    a070:	45800015 	stw	r22,0(r8)
    a074:	41c00115 	stw	r7,4(r8)
    a078:	d8801c15 	stw	r2,112(sp)
    a07c:	d9001b15 	stw	r4,108(sp)
    a080:	793ff40e 	bge	r15,r4,a054 <___vfiprintf_internal_r+0x470>
    a084:	1001b51e 	bne	r2,zero,a75c <___vfiprintf_internal_r+0xb78>
    a088:	843ffc04 	addi	r16,r16,-16
    a08c:	000d883a 	mov	r6,zero
    a090:	01400044 	movi	r5,1
    a094:	d811883a 	mov	r8,sp
    a098:	3c3ff316 	blt	r7,r16,a068 <___vfiprintf_internal_r+0x484>
    a09c:	8007883a 	mov	r3,r16
    a0a0:	da402517 	ldw	r9,148(sp)
    a0a4:	db802817 	ldw	r14,160(sp)
    a0a8:	dc002917 	ldw	r16,164(sp)
    a0ac:	da802417 	ldw	r10,144(sp)
    a0b0:	1885883a 	add	r2,r3,r2
    a0b4:	40c00115 	stw	r3,4(r8)
    a0b8:	42800015 	stw	r10,0(r8)
    a0bc:	d8801c15 	stw	r2,112(sp)
    a0c0:	d9401b15 	stw	r5,108(sp)
    a0c4:	00c001c4 	movi	r3,7
    a0c8:	19426016 	blt	r3,r5,aa4c <___vfiprintf_internal_r+0xe68>
    a0cc:	d8c01d87 	ldb	r3,118(sp)
    a0d0:	42000204 	addi	r8,r8,8
    a0d4:	29000044 	addi	r4,r5,1
    a0d8:	1801b31e 	bne	r3,zero,a7a8 <___vfiprintf_internal_r+0xbc4>
    a0dc:	7001c026 	beq	r14,zero,a7e0 <___vfiprintf_internal_r+0xbfc>
    a0e0:	d8c01d04 	addi	r3,sp,116
    a0e4:	10800084 	addi	r2,r2,2
    a0e8:	40c00015 	stw	r3,0(r8)
    a0ec:	00c00084 	movi	r3,2
    a0f0:	40c00115 	stw	r3,4(r8)
    a0f4:	d8801c15 	stw	r2,112(sp)
    a0f8:	d9001b15 	stw	r4,108(sp)
    a0fc:	00c001c4 	movi	r3,7
    a100:	1902650e 	bge	r3,r4,aa98 <___vfiprintf_internal_r+0xeb4>
    a104:	10029a1e 	bne	r2,zero,ab70 <___vfiprintf_internal_r+0xf8c>
    a108:	00c02004 	movi	r3,128
    a10c:	01000044 	movi	r4,1
    a110:	000b883a 	mov	r5,zero
    a114:	d811883a 	mov	r8,sp
    a118:	e0c1b31e 	bne	fp,r3,a7e8 <___vfiprintf_internal_r+0xc04>
    a11c:	8cb9c83a 	sub	fp,r17,r18
    a120:	0701b10e 	bge	zero,fp,a7e8 <___vfiprintf_internal_r+0xc04>
    a124:	01c00404 	movi	r7,16
    a128:	3f03890e 	bge	r7,fp,af50 <___vfiprintf_internal_r+0x136c>
    a12c:	00c00074 	movhi	r3,1
    a130:	18c76d04 	addi	r3,r3,7604
    a134:	d8c02415 	stw	r3,144(sp)
    a138:	8007883a 	mov	r3,r16
    a13c:	034001c4 	movi	r13,7
    a140:	e021883a 	mov	r16,fp
    a144:	da402515 	stw	r9,148(sp)
    a148:	1839883a 	mov	fp,r3
    a14c:	00000506 	br	a164 <___vfiprintf_internal_r+0x580>
    a150:	29800084 	addi	r6,r5,2
    a154:	42000204 	addi	r8,r8,8
    a158:	180b883a 	mov	r5,r3
    a15c:	843ffc04 	addi	r16,r16,-16
    a160:	3c000d0e 	bge	r7,r16,a198 <___vfiprintf_internal_r+0x5b4>
    a164:	10800404 	addi	r2,r2,16
    a168:	28c00044 	addi	r3,r5,1
    a16c:	45c00015 	stw	r23,0(r8)
    a170:	41c00115 	stw	r7,4(r8)
    a174:	d8801c15 	stw	r2,112(sp)
    a178:	d8c01b15 	stw	r3,108(sp)
    a17c:	68fff40e 	bge	r13,r3,a150 <___vfiprintf_internal_r+0x56c>
    a180:	1002241e 	bne	r2,zero,aa14 <___vfiprintf_internal_r+0xe30>
    a184:	843ffc04 	addi	r16,r16,-16
    a188:	01800044 	movi	r6,1
    a18c:	000b883a 	mov	r5,zero
    a190:	d811883a 	mov	r8,sp
    a194:	3c3ff316 	blt	r7,r16,a164 <___vfiprintf_internal_r+0x580>
    a198:	da402517 	ldw	r9,148(sp)
    a19c:	e007883a 	mov	r3,fp
    a1a0:	8039883a 	mov	fp,r16
    a1a4:	1821883a 	mov	r16,r3
    a1a8:	d8c02417 	ldw	r3,144(sp)
    a1ac:	1705883a 	add	r2,r2,fp
    a1b0:	47000115 	stw	fp,4(r8)
    a1b4:	40c00015 	stw	r3,0(r8)
    a1b8:	d8801c15 	stw	r2,112(sp)
    a1bc:	d9801b15 	stw	r6,108(sp)
    a1c0:	00c001c4 	movi	r3,7
    a1c4:	19827616 	blt	r3,r6,aba0 <___vfiprintf_internal_r+0xfbc>
    a1c8:	4cf9c83a 	sub	fp,r9,r19
    a1cc:	42000204 	addi	r8,r8,8
    a1d0:	31000044 	addi	r4,r6,1
    a1d4:	300b883a 	mov	r5,r6
    a1d8:	07018516 	blt	zero,fp,a7f0 <___vfiprintf_internal_r+0xc0c>
    a1dc:	9885883a 	add	r2,r19,r2
    a1e0:	45400015 	stw	r21,0(r8)
    a1e4:	44c00115 	stw	r19,4(r8)
    a1e8:	d8801c15 	stw	r2,112(sp)
    a1ec:	d9001b15 	stw	r4,108(sp)
    a1f0:	00c001c4 	movi	r3,7
    a1f4:	1901dd0e 	bge	r3,r4,a96c <___vfiprintf_internal_r+0xd88>
    a1f8:	1002401e 	bne	r2,zero,aafc <___vfiprintf_internal_r+0xf18>
    a1fc:	d8001b15 	stw	zero,108(sp)
    a200:	a2c0010c 	andi	r11,r20,4
    a204:	58000226 	beq	r11,zero,a210 <___vfiprintf_internal_r+0x62c>
    a208:	8ca7c83a 	sub	r19,r17,r18
    a20c:	04c2f216 	blt	zero,r19,add8 <___vfiprintf_internal_r+0x11f4>
    a210:	8c80010e 	bge	r17,r18,a218 <___vfiprintf_internal_r+0x634>
    a214:	9023883a 	mov	r17,r18
    a218:	da802317 	ldw	r10,140(sp)
    a21c:	5455883a 	add	r10,r10,r17
    a220:	da802315 	stw	r10,140(sp)
    a224:	d8001b15 	stw	zero,108(sp)
    a228:	d811883a 	mov	r8,sp
    a22c:	003ea206 	br	9cb8 <___vfiprintf_internal_r+0xd4>
    a230:	a5000814 	ori	r20,r20,32
    a234:	80c00007 	ldb	r3,0(r16)
    a238:	003ec906 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a23c:	80c00007 	ldb	r3,0(r16)
    a240:	1b030926 	beq	r3,r12,ae68 <___vfiprintf_internal_r+0x1284>
    a244:	a5000414 	ori	r20,r20,16
    a248:	003ec506 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a24c:	21003fcc 	andi	r4,r4,255
    a250:	20035e1e 	bne	r4,zero,afcc <___vfiprintf_internal_r+0x13e8>
    a254:	a080080c 	andi	r2,r20,32
    a258:	1002a526 	beq	r2,zero,acf0 <___vfiprintf_internal_r+0x110c>
    a25c:	da802217 	ldw	r10,136(sp)
    a260:	50800017 	ldw	r2,0(r10)
    a264:	da802317 	ldw	r10,140(sp)
    a268:	5007d7fa 	srai	r3,r10,31
    a26c:	da802217 	ldw	r10,136(sp)
    a270:	10c00115 	stw	r3,4(r2)
    a274:	52800104 	addi	r10,r10,4
    a278:	da802215 	stw	r10,136(sp)
    a27c:	da802317 	ldw	r10,140(sp)
    a280:	12800015 	stw	r10,0(r2)
    a284:	003e8c06 	br	9cb8 <___vfiprintf_internal_r+0xd4>
    a288:	21003fcc 	andi	r4,r4,255
    a28c:	2003511e 	bne	r4,zero,afd4 <___vfiprintf_internal_r+0x13f0>
    a290:	a080080c 	andi	r2,r20,32
    a294:	1000a126 	beq	r2,zero,a51c <___vfiprintf_internal_r+0x938>
    a298:	da802217 	ldw	r10,136(sp)
    a29c:	d8001d85 	stb	zero,118(sp)
    a2a0:	50800204 	addi	r2,r10,8
    a2a4:	54800017 	ldw	r18,0(r10)
    a2a8:	54c00117 	ldw	r19,4(r10)
    a2ac:	4802b416 	blt	r9,zero,ad80 <___vfiprintf_internal_r+0x119c>
    a2b0:	013fdfc4 	movi	r4,-129
    a2b4:	94c6b03a 	or	r3,r18,r19
    a2b8:	d8802215 	stw	r2,136(sp)
    a2bc:	a128703a 	and	r20,r20,r4
    a2c0:	1800a226 	beq	r3,zero,a54c <___vfiprintf_internal_r+0x968>
    a2c4:	0039883a 	mov	fp,zero
    a2c8:	dd401a04 	addi	r21,sp,104
    a2cc:	9006d0fa 	srli	r3,r18,3
    a2d0:	9808977a 	slli	r4,r19,29
    a2d4:	9826d0fa 	srli	r19,r19,3
    a2d8:	948001cc 	andi	r18,r18,7
    a2dc:	90800c04 	addi	r2,r18,48
    a2e0:	ad7fffc4 	addi	r21,r21,-1
    a2e4:	20e4b03a 	or	r18,r4,r3
    a2e8:	a8800005 	stb	r2,0(r21)
    a2ec:	94c6b03a 	or	r3,r18,r19
    a2f0:	183ff61e 	bne	r3,zero,a2cc <___vfiprintf_internal_r+0x6e8>
    a2f4:	a0c0004c 	andi	r3,r20,1
    a2f8:	18005926 	beq	r3,zero,a460 <___vfiprintf_internal_r+0x87c>
    a2fc:	10803fcc 	andi	r2,r2,255
    a300:	1080201c 	xori	r2,r2,128
    a304:	10bfe004 	addi	r2,r2,-128
    a308:	00c00c04 	movi	r3,48
    a30c:	10c05426 	beq	r2,r3,a460 <___vfiprintf_internal_r+0x87c>
    a310:	da801e17 	ldw	r10,120(sp)
    a314:	a8bfffc4 	addi	r2,r21,-1
    a318:	a8ffffc5 	stb	r3,-1(r21)
    a31c:	50a7c83a 	sub	r19,r10,r2
    a320:	102b883a 	mov	r21,r2
    a324:	003f2f06 	br	9fe4 <___vfiprintf_internal_r+0x400>
    a328:	21003fcc 	andi	r4,r4,255
    a32c:	2003421e 	bne	r4,zero,b038 <___vfiprintf_internal_r+0x1454>
    a330:	00800074 	movhi	r2,1
    a334:	10870c04 	addi	r2,r2,7216
    a338:	d8802615 	stw	r2,152(sp)
    a33c:	a080080c 	andi	r2,r20,32
    a340:	1000aa26 	beq	r2,zero,a5ec <___vfiprintf_internal_r+0xa08>
    a344:	da802217 	ldw	r10,136(sp)
    a348:	54800017 	ldw	r18,0(r10)
    a34c:	54c00117 	ldw	r19,4(r10)
    a350:	52800204 	addi	r10,r10,8
    a354:	da802215 	stw	r10,136(sp)
    a358:	a080004c 	andi	r2,r20,1
    a35c:	1001d226 	beq	r2,zero,aaa8 <___vfiprintf_internal_r+0xec4>
    a360:	94c4b03a 	or	r2,r18,r19
    a364:	1002351e 	bne	r2,zero,ac3c <___vfiprintf_internal_r+0x1058>
    a368:	d8001d85 	stb	zero,118(sp)
    a36c:	48022216 	blt	r9,zero,abf8 <___vfiprintf_internal_r+0x1014>
    a370:	00bfdfc4 	movi	r2,-129
    a374:	a0a8703a 	and	r20,r20,r2
    a378:	003f1506 	br	9fd0 <___vfiprintf_internal_r+0x3ec>
    a37c:	da802217 	ldw	r10,136(sp)
    a380:	04800044 	movi	r18,1
    a384:	d8001d85 	stb	zero,118(sp)
    a388:	50800017 	ldw	r2,0(r10)
    a38c:	52800104 	addi	r10,r10,4
    a390:	da802215 	stw	r10,136(sp)
    a394:	d8801005 	stb	r2,64(sp)
    a398:	9027883a 	mov	r19,r18
    a39c:	dd401004 	addi	r21,sp,64
    a3a0:	0013883a 	mov	r9,zero
    a3a4:	003f1706 	br	a004 <___vfiprintf_internal_r+0x420>
    a3a8:	21003fcc 	andi	r4,r4,255
    a3ac:	2003201e 	bne	r4,zero,b030 <___vfiprintf_internal_r+0x144c>
    a3b0:	a080080c 	andi	r2,r20,32
    a3b4:	10004b26 	beq	r2,zero,a4e4 <___vfiprintf_internal_r+0x900>
    a3b8:	da802217 	ldw	r10,136(sp)
    a3bc:	50800117 	ldw	r2,4(r10)
    a3c0:	54800017 	ldw	r18,0(r10)
    a3c4:	52800204 	addi	r10,r10,8
    a3c8:	da802215 	stw	r10,136(sp)
    a3cc:	1027883a 	mov	r19,r2
    a3d0:	10022c16 	blt	r2,zero,ac84 <___vfiprintf_internal_r+0x10a0>
    a3d4:	df001d83 	ldbu	fp,118(sp)
    a3d8:	48007216 	blt	r9,zero,a5a4 <___vfiprintf_internal_r+0x9c0>
    a3dc:	00ffdfc4 	movi	r3,-129
    a3e0:	94c4b03a 	or	r2,r18,r19
    a3e4:	a0e8703a 	and	r20,r20,r3
    a3e8:	1000cc26 	beq	r2,zero,a71c <___vfiprintf_internal_r+0xb38>
    a3ec:	98021026 	beq	r19,zero,ac30 <___vfiprintf_internal_r+0x104c>
    a3f0:	dc402415 	stw	r17,144(sp)
    a3f4:	dc002515 	stw	r16,148(sp)
    a3f8:	9823883a 	mov	r17,r19
    a3fc:	9021883a 	mov	r16,r18
    a400:	dd401a04 	addi	r21,sp,104
    a404:	4825883a 	mov	r18,r9
    a408:	4027883a 	mov	r19,r8
    a40c:	8009883a 	mov	r4,r16
    a410:	880b883a 	mov	r5,r17
    a414:	01800284 	movi	r6,10
    a418:	000f883a 	mov	r7,zero
    a41c:	000bfc40 	call	bfc4 <__umoddi3>
    a420:	10800c04 	addi	r2,r2,48
    a424:	ad7fffc4 	addi	r21,r21,-1
    a428:	8009883a 	mov	r4,r16
    a42c:	880b883a 	mov	r5,r17
    a430:	a8800005 	stb	r2,0(r21)
    a434:	01800284 	movi	r6,10
    a438:	000f883a 	mov	r7,zero
    a43c:	000ba4c0 	call	ba4c <__udivdi3>
    a440:	1021883a 	mov	r16,r2
    a444:	10c4b03a 	or	r2,r2,r3
    a448:	1823883a 	mov	r17,r3
    a44c:	103fef1e 	bne	r2,zero,a40c <___vfiprintf_internal_r+0x828>
    a450:	dc402417 	ldw	r17,144(sp)
    a454:	dc002517 	ldw	r16,148(sp)
    a458:	9013883a 	mov	r9,r18
    a45c:	9811883a 	mov	r8,r19
    a460:	da801e17 	ldw	r10,120(sp)
    a464:	5567c83a 	sub	r19,r10,r21
    a468:	003ede06 	br	9fe4 <___vfiprintf_internal_r+0x400>
    a46c:	38803fcc 	andi	r2,r7,255
    a470:	1080201c 	xori	r2,r2,128
    a474:	10bfe004 	addi	r2,r2,-128
    a478:	1002371e 	bne	r2,zero,ad58 <___vfiprintf_internal_r+0x1174>
    a47c:	01000044 	movi	r4,1
    a480:	01c00804 	movi	r7,32
    a484:	80c00007 	ldb	r3,0(r16)
    a488:	003e3506 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a48c:	a5000054 	ori	r20,r20,1
    a490:	80c00007 	ldb	r3,0(r16)
    a494:	003e3206 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a498:	a5002014 	ori	r20,r20,128
    a49c:	80c00007 	ldb	r3,0(r16)
    a4a0:	003e2f06 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a4a4:	8015883a 	mov	r10,r16
    a4a8:	0023883a 	mov	r17,zero
    a4ac:	18bff404 	addi	r2,r3,-48
    a4b0:	50c00007 	ldb	r3,0(r10)
    a4b4:	8c4002a4 	muli	r17,r17,10
    a4b8:	84000044 	addi	r16,r16,1
    a4bc:	8015883a 	mov	r10,r16
    a4c0:	1463883a 	add	r17,r2,r17
    a4c4:	18bff404 	addi	r2,r3,-48
    a4c8:	30bff92e 	bgeu	r6,r2,a4b0 <___vfiprintf_internal_r+0x8cc>
    a4cc:	003e2506 	br	9d64 <___vfiprintf_internal_r+0x180>
    a4d0:	21003fcc 	andi	r4,r4,255
    a4d4:	2002d41e 	bne	r4,zero,b028 <___vfiprintf_internal_r+0x1444>
    a4d8:	a5000414 	ori	r20,r20,16
    a4dc:	a080080c 	andi	r2,r20,32
    a4e0:	103fb51e 	bne	r2,zero,a3b8 <___vfiprintf_internal_r+0x7d4>
    a4e4:	a080040c 	andi	r2,r20,16
    a4e8:	1001f826 	beq	r2,zero,accc <___vfiprintf_internal_r+0x10e8>
    a4ec:	da802217 	ldw	r10,136(sp)
    a4f0:	54800017 	ldw	r18,0(r10)
    a4f4:	52800104 	addi	r10,r10,4
    a4f8:	da802215 	stw	r10,136(sp)
    a4fc:	9027d7fa 	srai	r19,r18,31
    a500:	9805883a 	mov	r2,r19
    a504:	003fb206 	br	a3d0 <___vfiprintf_internal_r+0x7ec>
    a508:	21003fcc 	andi	r4,r4,255
    a50c:	2002c41e 	bne	r4,zero,b020 <___vfiprintf_internal_r+0x143c>
    a510:	a5000414 	ori	r20,r20,16
    a514:	a080080c 	andi	r2,r20,32
    a518:	103f5f1e 	bne	r2,zero,a298 <___vfiprintf_internal_r+0x6b4>
    a51c:	a080040c 	andi	r2,r20,16
    a520:	10020f26 	beq	r2,zero,ad60 <___vfiprintf_internal_r+0x117c>
    a524:	da802217 	ldw	r10,136(sp)
    a528:	d8001d85 	stb	zero,118(sp)
    a52c:	0027883a 	mov	r19,zero
    a530:	50800104 	addi	r2,r10,4
    a534:	54800017 	ldw	r18,0(r10)
    a538:	48021116 	blt	r9,zero,ad80 <___vfiprintf_internal_r+0x119c>
    a53c:	00ffdfc4 	movi	r3,-129
    a540:	d8802215 	stw	r2,136(sp)
    a544:	a0e8703a 	and	r20,r20,r3
    a548:	903f5e1e 	bne	r18,zero,a2c4 <___vfiprintf_internal_r+0x6e0>
    a54c:	0039883a 	mov	fp,zero
    a550:	4802a626 	beq	r9,zero,afec <___vfiprintf_internal_r+0x1408>
    a554:	0025883a 	mov	r18,zero
    a558:	0027883a 	mov	r19,zero
    a55c:	003f5a06 	br	a2c8 <___vfiprintf_internal_r+0x6e4>
    a560:	21003fcc 	andi	r4,r4,255
    a564:	20029f1e 	bne	r4,zero,afe4 <___vfiprintf_internal_r+0x1400>
    a568:	a5000414 	ori	r20,r20,16
    a56c:	a080080c 	andi	r2,r20,32
    a570:	10005e1e 	bne	r2,zero,a6ec <___vfiprintf_internal_r+0xb08>
    a574:	a080040c 	andi	r2,r20,16
    a578:	1001a21e 	bne	r2,zero,ac04 <___vfiprintf_internal_r+0x1020>
    a57c:	a080100c 	andi	r2,r20,64
    a580:	d8001d85 	stb	zero,118(sp)
    a584:	da802217 	ldw	r10,136(sp)
    a588:	1002231e 	bne	r2,zero,ae18 <___vfiprintf_internal_r+0x1234>
    a58c:	50800104 	addi	r2,r10,4
    a590:	54800017 	ldw	r18,0(r10)
    a594:	0027883a 	mov	r19,zero
    a598:	4801a00e 	bge	r9,zero,ac1c <___vfiprintf_internal_r+0x1038>
    a59c:	d8802215 	stw	r2,136(sp)
    a5a0:	0039883a 	mov	fp,zero
    a5a4:	94c4b03a 	or	r2,r18,r19
    a5a8:	103f901e 	bne	r2,zero,a3ec <___vfiprintf_internal_r+0x808>
    a5ac:	00800044 	movi	r2,1
    a5b0:	10803fcc 	andi	r2,r2,255
    a5b4:	00c00044 	movi	r3,1
    a5b8:	10c05926 	beq	r2,r3,a720 <___vfiprintf_internal_r+0xb3c>
    a5bc:	00c00084 	movi	r3,2
    a5c0:	10ffe41e 	bne	r2,r3,a554 <___vfiprintf_internal_r+0x970>
    a5c4:	0025883a 	mov	r18,zero
    a5c8:	0027883a 	mov	r19,zero
    a5cc:	00013d06 	br	aac4 <___vfiprintf_internal_r+0xee0>
    a5d0:	21003fcc 	andi	r4,r4,255
    a5d4:	2002811e 	bne	r4,zero,afdc <___vfiprintf_internal_r+0x13f8>
    a5d8:	00800074 	movhi	r2,1
    a5dc:	10870704 	addi	r2,r2,7196
    a5e0:	d8802615 	stw	r2,152(sp)
    a5e4:	a080080c 	andi	r2,r20,32
    a5e8:	103f561e 	bne	r2,zero,a344 <___vfiprintf_internal_r+0x760>
    a5ec:	a080040c 	andi	r2,r20,16
    a5f0:	1001d126 	beq	r2,zero,ad38 <___vfiprintf_internal_r+0x1154>
    a5f4:	da802217 	ldw	r10,136(sp)
    a5f8:	0027883a 	mov	r19,zero
    a5fc:	54800017 	ldw	r18,0(r10)
    a600:	52800104 	addi	r10,r10,4
    a604:	da802215 	stw	r10,136(sp)
    a608:	003f5306 	br	a358 <___vfiprintf_internal_r+0x774>
    a60c:	da802217 	ldw	r10,136(sp)
    a610:	d8001d85 	stb	zero,118(sp)
    a614:	55400017 	ldw	r21,0(r10)
    a618:	50c00104 	addi	r3,r10,4
    a61c:	a8024226 	beq	r21,zero,af28 <___vfiprintf_internal_r+0x1344>
    a620:	48021816 	blt	r9,zero,ae84 <___vfiprintf_internal_r+0x12a0>
    a624:	480d883a 	mov	r6,r9
    a628:	000b883a 	mov	r5,zero
    a62c:	a809883a 	mov	r4,r21
    a630:	d8c02a15 	stw	r3,168(sp)
    a634:	da002b15 	stw	r8,172(sp)
    a638:	da402c15 	stw	r9,176(sp)
    a63c:	0007e340 	call	7e34 <memchr>
    a640:	d8c02a17 	ldw	r3,168(sp)
    a644:	da002b17 	ldw	r8,172(sp)
    a648:	da402c17 	ldw	r9,176(sp)
    a64c:	10024826 	beq	r2,zero,af70 <___vfiprintf_internal_r+0x138c>
    a650:	1567c83a 	sub	r19,r2,r21
    a654:	df001d83 	ldbu	fp,118(sp)
    a658:	d8c02215 	stw	r3,136(sp)
    a65c:	0013883a 	mov	r9,zero
    a660:	003e6006 	br	9fe4 <___vfiprintf_internal_r+0x400>
    a664:	21003fcc 	andi	r4,r4,255
    a668:	203fc026 	beq	r4,zero,a56c <___vfiprintf_internal_r+0x988>
    a66c:	d9c01d85 	stb	r7,118(sp)
    a670:	003fbe06 	br	a56c <___vfiprintf_internal_r+0x988>
    a674:	da802217 	ldw	r10,136(sp)
    a678:	54400017 	ldw	r17,0(r10)
    a67c:	50800104 	addi	r2,r10,4
    a680:	883e3b16 	blt	r17,zero,9f70 <___vfiprintf_internal_r+0x38c>
    a684:	d8802215 	stw	r2,136(sp)
    a688:	80c00007 	ldb	r3,0(r16)
    a68c:	003db406 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a690:	01000044 	movi	r4,1
    a694:	01c00ac4 	movi	r7,43
    a698:	80c00007 	ldb	r3,0(r16)
    a69c:	003db006 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a6a0:	80c00007 	ldb	r3,0(r16)
    a6a4:	82800044 	addi	r10,r16,1
    a6a8:	1b423c26 	beq	r3,r13,af9c <___vfiprintf_internal_r+0x13b8>
    a6ac:	18bff404 	addi	r2,r3,-48
    a6b0:	0013883a 	mov	r9,zero
    a6b4:	30822b36 	bltu	r6,r2,af64 <___vfiprintf_internal_r+0x1380>
    a6b8:	50c00007 	ldb	r3,0(r10)
    a6bc:	4a4002a4 	muli	r9,r9,10
    a6c0:	54000044 	addi	r16,r10,1
    a6c4:	8015883a 	mov	r10,r16
    a6c8:	4893883a 	add	r9,r9,r2
    a6cc:	18bff404 	addi	r2,r3,-48
    a6d0:	30bff92e 	bgeu	r6,r2,a6b8 <___vfiprintf_internal_r+0xad4>
    a6d4:	483da30e 	bge	r9,zero,9d64 <___vfiprintf_internal_r+0x180>
    a6d8:	027fffc4 	movi	r9,-1
    a6dc:	003da106 	br	9d64 <___vfiprintf_internal_r+0x180>
    a6e0:	a5001014 	ori	r20,r20,64
    a6e4:	80c00007 	ldb	r3,0(r16)
    a6e8:	003d9d06 	br	9d60 <___vfiprintf_internal_r+0x17c>
    a6ec:	da802217 	ldw	r10,136(sp)
    a6f0:	d8001d85 	stb	zero,118(sp)
    a6f4:	50c00204 	addi	r3,r10,8
    a6f8:	54800017 	ldw	r18,0(r10)
    a6fc:	54c00117 	ldw	r19,4(r10)
    a700:	4801ca16 	blt	r9,zero,ae2c <___vfiprintf_internal_r+0x1248>
    a704:	013fdfc4 	movi	r4,-129
    a708:	94c4b03a 	or	r2,r18,r19
    a70c:	d8c02215 	stw	r3,136(sp)
    a710:	a128703a 	and	r20,r20,r4
    a714:	0039883a 	mov	fp,zero
    a718:	103f341e 	bne	r2,zero,a3ec <___vfiprintf_internal_r+0x808>
    a71c:	483e2e26 	beq	r9,zero,9fd8 <___vfiprintf_internal_r+0x3f4>
    a720:	0025883a 	mov	r18,zero
    a724:	94800c04 	addi	r18,r18,48
    a728:	dc8019c5 	stb	r18,103(sp)
    a72c:	dcc02717 	ldw	r19,156(sp)
    a730:	dd4019c4 	addi	r21,sp,103
    a734:	003e2b06 	br	9fe4 <___vfiprintf_internal_r+0x400>
    a738:	21003fcc 	andi	r4,r4,255
    a73c:	2002361e 	bne	r4,zero,b018 <___vfiprintf_internal_r+0x1434>
    a740:	1801c126 	beq	r3,zero,ae48 <___vfiprintf_internal_r+0x1264>
    a744:	04800044 	movi	r18,1
    a748:	d8c01005 	stb	r3,64(sp)
    a74c:	d8001d85 	stb	zero,118(sp)
    a750:	9027883a 	mov	r19,r18
    a754:	dd401004 	addi	r21,sp,64
    a758:	003f1106 	br	a3a0 <___vfiprintf_internal_r+0x7bc>
    a75c:	d9402117 	ldw	r5,132(sp)
    a760:	d9002017 	ldw	r4,128(sp)
    a764:	d9801a04 	addi	r6,sp,104
    a768:	d9c02b15 	stw	r7,172(sp)
    a76c:	dbc02a15 	stw	r15,168(sp)
    a770:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    a774:	d9c02b17 	ldw	r7,172(sp)
    a778:	dbc02a17 	ldw	r15,168(sp)
    a77c:	10006d1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    a780:	d9801b17 	ldw	r6,108(sp)
    a784:	d8801c17 	ldw	r2,112(sp)
    a788:	d811883a 	mov	r8,sp
    a78c:	31400044 	addi	r5,r6,1
    a790:	003e3306 	br	a060 <___vfiprintf_internal_r+0x47c>
    a794:	d9401b17 	ldw	r5,108(sp)
    a798:	d8801c17 	ldw	r2,112(sp)
    a79c:	29000044 	addi	r4,r5,1
    a7a0:	d8c01d87 	ldb	r3,118(sp)
    a7a4:	183e4d26 	beq	r3,zero,a0dc <___vfiprintf_internal_r+0x4f8>
    a7a8:	00c00044 	movi	r3,1
    a7ac:	d9401d84 	addi	r5,sp,118
    a7b0:	10c5883a 	add	r2,r2,r3
    a7b4:	41400015 	stw	r5,0(r8)
    a7b8:	40c00115 	stw	r3,4(r8)
    a7bc:	d8801c15 	stw	r2,112(sp)
    a7c0:	d9001b15 	stw	r4,108(sp)
    a7c4:	014001c4 	movi	r5,7
    a7c8:	2900a90e 	bge	r5,r4,aa70 <___vfiprintf_internal_r+0xe8c>
    a7cc:	1000da1e 	bne	r2,zero,ab38 <___vfiprintf_internal_r+0xf54>
    a7d0:	7000ab1e 	bne	r14,zero,aa80 <___vfiprintf_internal_r+0xe9c>
    a7d4:	000b883a 	mov	r5,zero
    a7d8:	1809883a 	mov	r4,r3
    a7dc:	d811883a 	mov	r8,sp
    a7e0:	00c02004 	movi	r3,128
    a7e4:	e0fe4d26 	beq	fp,r3,a11c <___vfiprintf_internal_r+0x538>
    a7e8:	4cf9c83a 	sub	fp,r9,r19
    a7ec:	073e7b0e 	bge	zero,fp,a1dc <___vfiprintf_internal_r+0x5f8>
    a7f0:	01c00404 	movi	r7,16
    a7f4:	3f01900e 	bge	r7,fp,ae38 <___vfiprintf_internal_r+0x1254>
    a7f8:	00c00074 	movhi	r3,1
    a7fc:	18c76d04 	addi	r3,r3,7604
    a800:	d8c02415 	stw	r3,144(sp)
    a804:	034001c4 	movi	r13,7
    a808:	00000506 	br	a820 <___vfiprintf_internal_r+0xc3c>
    a80c:	29000084 	addi	r4,r5,2
    a810:	42000204 	addi	r8,r8,8
    a814:	180b883a 	mov	r5,r3
    a818:	e73ffc04 	addi	fp,fp,-16
    a81c:	3f000d0e 	bge	r7,fp,a854 <___vfiprintf_internal_r+0xc70>
    a820:	10800404 	addi	r2,r2,16
    a824:	28c00044 	addi	r3,r5,1
    a828:	45c00015 	stw	r23,0(r8)
    a82c:	41c00115 	stw	r7,4(r8)
    a830:	d8801c15 	stw	r2,112(sp)
    a834:	d8c01b15 	stw	r3,108(sp)
    a838:	68fff40e 	bge	r13,r3,a80c <___vfiprintf_internal_r+0xc28>
    a83c:	1000101e 	bne	r2,zero,a880 <___vfiprintf_internal_r+0xc9c>
    a840:	e73ffc04 	addi	fp,fp,-16
    a844:	01000044 	movi	r4,1
    a848:	000b883a 	mov	r5,zero
    a84c:	d811883a 	mov	r8,sp
    a850:	3f3ff316 	blt	r7,fp,a820 <___vfiprintf_internal_r+0xc3c>
    a854:	da802417 	ldw	r10,144(sp)
    a858:	1705883a 	add	r2,r2,fp
    a85c:	47000115 	stw	fp,4(r8)
    a860:	42800015 	stw	r10,0(r8)
    a864:	d8801c15 	stw	r2,112(sp)
    a868:	d9001b15 	stw	r4,108(sp)
    a86c:	00c001c4 	movi	r3,7
    a870:	19003616 	blt	r3,r4,a94c <___vfiprintf_internal_r+0xd68>
    a874:	42000204 	addi	r8,r8,8
    a878:	21000044 	addi	r4,r4,1
    a87c:	003e5706 	br	a1dc <___vfiprintf_internal_r+0x5f8>
    a880:	d9402117 	ldw	r5,132(sp)
    a884:	d9002017 	ldw	r4,128(sp)
    a888:	d9801a04 	addi	r6,sp,104
    a88c:	d9c02b15 	stw	r7,172(sp)
    a890:	db402a15 	stw	r13,168(sp)
    a894:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    a898:	d9c02b17 	ldw	r7,172(sp)
    a89c:	db402a17 	ldw	r13,168(sp)
    a8a0:	1000241e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    a8a4:	d9401b17 	ldw	r5,108(sp)
    a8a8:	d8801c17 	ldw	r2,112(sp)
    a8ac:	d811883a 	mov	r8,sp
    a8b0:	29000044 	addi	r4,r5,1
    a8b4:	003fd806 	br	a818 <___vfiprintf_internal_r+0xc34>
    a8b8:	d9401b17 	ldw	r5,108(sp)
    a8bc:	00c00074 	movhi	r3,1
    a8c0:	18c77104 	addi	r3,r3,7620
    a8c4:	d8c02415 	stw	r3,144(sp)
    a8c8:	29400044 	addi	r5,r5,1
    a8cc:	d8c02417 	ldw	r3,144(sp)
    a8d0:	14c5883a 	add	r2,r2,r19
    a8d4:	44c00115 	stw	r19,4(r8)
    a8d8:	40c00015 	stw	r3,0(r8)
    a8dc:	d8801c15 	stw	r2,112(sp)
    a8e0:	d9401b15 	stw	r5,108(sp)
    a8e4:	00c001c4 	movi	r3,7
    a8e8:	1940070e 	bge	r3,r5,a908 <___vfiprintf_internal_r+0xd24>
    a8ec:	103e4826 	beq	r2,zero,a210 <___vfiprintf_internal_r+0x62c>
    a8f0:	d9402117 	ldw	r5,132(sp)
    a8f4:	d9002017 	ldw	r4,128(sp)
    a8f8:	d9801a04 	addi	r6,sp,104
    a8fc:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    a900:	10000c1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    a904:	d8801c17 	ldw	r2,112(sp)
    a908:	8c80010e 	bge	r17,r18,a910 <___vfiprintf_internal_r+0xd2c>
    a90c:	9023883a 	mov	r17,r18
    a910:	da802317 	ldw	r10,140(sp)
    a914:	5455883a 	add	r10,r10,r17
    a918:	da802315 	stw	r10,140(sp)
    a91c:	103e4126 	beq	r2,zero,a224 <___vfiprintf_internal_r+0x640>
    a920:	d9402117 	ldw	r5,132(sp)
    a924:	d9002017 	ldw	r4,128(sp)
    a928:	d9801a04 	addi	r6,sp,104
    a92c:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    a930:	103e3c26 	beq	r2,zero,a224 <___vfiprintf_internal_r+0x640>
    a934:	dd002117 	ldw	r20,132(sp)
    a938:	a080030b 	ldhu	r2,12(r20)
    a93c:	1080100c 	andi	r2,r2,64
    a940:	1001231e 	bne	r2,zero,add0 <___vfiprintf_internal_r+0x11ec>
    a944:	d8802317 	ldw	r2,140(sp)
    a948:	003d7b06 	br	9f38 <___vfiprintf_internal_r+0x354>
    a94c:	1000991e 	bne	r2,zero,abb4 <___vfiprintf_internal_r+0xfd0>
    a950:	00c00044 	movi	r3,1
    a954:	9805883a 	mov	r2,r19
    a958:	dd400015 	stw	r21,0(sp)
    a95c:	dcc00115 	stw	r19,4(sp)
    a960:	dcc01c15 	stw	r19,112(sp)
    a964:	d8c01b15 	stw	r3,108(sp)
    a968:	d811883a 	mov	r8,sp
    a96c:	42000204 	addi	r8,r8,8
    a970:	a2c0010c 	andi	r11,r20,4
    a974:	583fe426 	beq	r11,zero,a908 <___vfiprintf_internal_r+0xd24>
    a978:	8ca7c83a 	sub	r19,r17,r18
    a97c:	04ffe20e 	bge	zero,r19,a908 <___vfiprintf_internal_r+0xd24>
    a980:	01c00404 	movi	r7,16
    a984:	3cffcc0e 	bge	r7,r19,a8b8 <___vfiprintf_internal_r+0xcd4>
    a988:	02800074 	movhi	r10,1
    a98c:	52877104 	addi	r10,r10,7620
    a990:	d9001b17 	ldw	r4,108(sp)
    a994:	da802415 	stw	r10,144(sp)
    a998:	382b883a 	mov	r21,r7
    a99c:	050001c4 	movi	r20,7
    a9a0:	df002017 	ldw	fp,128(sp)
    a9a4:	00000506 	br	a9bc <___vfiprintf_internal_r+0xdd8>
    a9a8:	21400084 	addi	r5,r4,2
    a9ac:	42000204 	addi	r8,r8,8
    a9b0:	1809883a 	mov	r4,r3
    a9b4:	9cfffc04 	addi	r19,r19,-16
    a9b8:	acffc40e 	bge	r21,r19,a8cc <___vfiprintf_internal_r+0xce8>
    a9bc:	10800404 	addi	r2,r2,16
    a9c0:	20c00044 	addi	r3,r4,1
    a9c4:	45800015 	stw	r22,0(r8)
    a9c8:	45400115 	stw	r21,4(r8)
    a9cc:	d8801c15 	stw	r2,112(sp)
    a9d0:	d8c01b15 	stw	r3,108(sp)
    a9d4:	a0fff40e 	bge	r20,r3,a9a8 <___vfiprintf_internal_r+0xdc4>
    a9d8:	1000041e 	bne	r2,zero,a9ec <___vfiprintf_internal_r+0xe08>
    a9dc:	01400044 	movi	r5,1
    a9e0:	0009883a 	mov	r4,zero
    a9e4:	d811883a 	mov	r8,sp
    a9e8:	003ff206 	br	a9b4 <___vfiprintf_internal_r+0xdd0>
    a9ec:	d9402117 	ldw	r5,132(sp)
    a9f0:	d9801a04 	addi	r6,sp,104
    a9f4:	e009883a 	mov	r4,fp
    a9f8:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    a9fc:	103fcd1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    aa00:	d9001b17 	ldw	r4,108(sp)
    aa04:	d8801c17 	ldw	r2,112(sp)
    aa08:	d811883a 	mov	r8,sp
    aa0c:	21400044 	addi	r5,r4,1
    aa10:	003fe806 	br	a9b4 <___vfiprintf_internal_r+0xdd0>
    aa14:	d9402117 	ldw	r5,132(sp)
    aa18:	d9002017 	ldw	r4,128(sp)
    aa1c:	d9801a04 	addi	r6,sp,104
    aa20:	d9c02b15 	stw	r7,172(sp)
    aa24:	db402a15 	stw	r13,168(sp)
    aa28:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    aa2c:	d9c02b17 	ldw	r7,172(sp)
    aa30:	db402a17 	ldw	r13,168(sp)
    aa34:	103fbf1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    aa38:	d9401b17 	ldw	r5,108(sp)
    aa3c:	d8801c17 	ldw	r2,112(sp)
    aa40:	d811883a 	mov	r8,sp
    aa44:	29800044 	addi	r6,r5,1
    aa48:	003dc406 	br	a15c <___vfiprintf_internal_r+0x578>
    aa4c:	1000d21e 	bne	r2,zero,ad98 <___vfiprintf_internal_r+0x11b4>
    aa50:	d8c01d87 	ldb	r3,118(sp)
    aa54:	18009526 	beq	r3,zero,acac <___vfiprintf_internal_r+0x10c8>
    aa58:	00800044 	movi	r2,1
    aa5c:	d8c01d84 	addi	r3,sp,118
    aa60:	1009883a 	mov	r4,r2
    aa64:	d8c00015 	stw	r3,0(sp)
    aa68:	d8800115 	stw	r2,4(sp)
    aa6c:	d811883a 	mov	r8,sp
    aa70:	200b883a 	mov	r5,r4
    aa74:	42000204 	addi	r8,r8,8
    aa78:	21000044 	addi	r4,r4,1
    aa7c:	003d9706 	br	a0dc <___vfiprintf_internal_r+0x4f8>
    aa80:	d9001d04 	addi	r4,sp,116
    aa84:	00800084 	movi	r2,2
    aa88:	d9000015 	stw	r4,0(sp)
    aa8c:	d8800115 	stw	r2,4(sp)
    aa90:	1809883a 	mov	r4,r3
    aa94:	d811883a 	mov	r8,sp
    aa98:	200b883a 	mov	r5,r4
    aa9c:	42000204 	addi	r8,r8,8
    aaa0:	21000044 	addi	r4,r4,1
    aaa4:	003f4e06 	br	a7e0 <___vfiprintf_internal_r+0xbfc>
    aaa8:	d8001d85 	stb	zero,118(sp)
    aaac:	48005016 	blt	r9,zero,abf0 <___vfiprintf_internal_r+0x100c>
    aab0:	00ffdfc4 	movi	r3,-129
    aab4:	94c4b03a 	or	r2,r18,r19
    aab8:	a0e8703a 	and	r20,r20,r3
    aabc:	103d4426 	beq	r2,zero,9fd0 <___vfiprintf_internal_r+0x3ec>
    aac0:	0039883a 	mov	fp,zero
    aac4:	d9002617 	ldw	r4,152(sp)
    aac8:	dd401a04 	addi	r21,sp,104
    aacc:	908003cc 	andi	r2,r18,15
    aad0:	9806973a 	slli	r3,r19,28
    aad4:	2085883a 	add	r2,r4,r2
    aad8:	9024d13a 	srli	r18,r18,4
    aadc:	10800003 	ldbu	r2,0(r2)
    aae0:	9826d13a 	srli	r19,r19,4
    aae4:	ad7fffc4 	addi	r21,r21,-1
    aae8:	1ca4b03a 	or	r18,r3,r18
    aaec:	a8800005 	stb	r2,0(r21)
    aaf0:	94c4b03a 	or	r2,r18,r19
    aaf4:	103ff51e 	bne	r2,zero,aacc <___vfiprintf_internal_r+0xee8>
    aaf8:	003e5906 	br	a460 <___vfiprintf_internal_r+0x87c>
    aafc:	d9402117 	ldw	r5,132(sp)
    ab00:	d9002017 	ldw	r4,128(sp)
    ab04:	d9801a04 	addi	r6,sp,104
    ab08:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    ab0c:	103f891e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    ab10:	d8801c17 	ldw	r2,112(sp)
    ab14:	d811883a 	mov	r8,sp
    ab18:	003f9506 	br	a970 <___vfiprintf_internal_r+0xd8c>
    ab1c:	d9402117 	ldw	r5,132(sp)
    ab20:	d9002017 	ldw	r4,128(sp)
    ab24:	d9801a04 	addi	r6,sp,104
    ab28:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    ab2c:	103f811e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    ab30:	d811883a 	mov	r8,sp
    ab34:	003ced06 	br	9eec <___vfiprintf_internal_r+0x308>
    ab38:	d9402117 	ldw	r5,132(sp)
    ab3c:	d9002017 	ldw	r4,128(sp)
    ab40:	d9801a04 	addi	r6,sp,104
    ab44:	da402c15 	stw	r9,176(sp)
    ab48:	db802a15 	stw	r14,168(sp)
    ab4c:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    ab50:	da402c17 	ldw	r9,176(sp)
    ab54:	db802a17 	ldw	r14,168(sp)
    ab58:	103f761e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    ab5c:	d9401b17 	ldw	r5,108(sp)
    ab60:	d8801c17 	ldw	r2,112(sp)
    ab64:	d811883a 	mov	r8,sp
    ab68:	29000044 	addi	r4,r5,1
    ab6c:	003d5b06 	br	a0dc <___vfiprintf_internal_r+0x4f8>
    ab70:	d9402117 	ldw	r5,132(sp)
    ab74:	d9002017 	ldw	r4,128(sp)
    ab78:	d9801a04 	addi	r6,sp,104
    ab7c:	da402c15 	stw	r9,176(sp)
    ab80:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    ab84:	da402c17 	ldw	r9,176(sp)
    ab88:	103f6a1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    ab8c:	d9401b17 	ldw	r5,108(sp)
    ab90:	d8801c17 	ldw	r2,112(sp)
    ab94:	d811883a 	mov	r8,sp
    ab98:	29000044 	addi	r4,r5,1
    ab9c:	003f1006 	br	a7e0 <___vfiprintf_internal_r+0xbfc>
    aba0:	1000c31e 	bne	r2,zero,aeb0 <___vfiprintf_internal_r+0x12cc>
    aba4:	01000044 	movi	r4,1
    aba8:	000b883a 	mov	r5,zero
    abac:	d811883a 	mov	r8,sp
    abb0:	003f0d06 	br	a7e8 <___vfiprintf_internal_r+0xc04>
    abb4:	d9402117 	ldw	r5,132(sp)
    abb8:	d9002017 	ldw	r4,128(sp)
    abbc:	d9801a04 	addi	r6,sp,104
    abc0:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    abc4:	103f5b1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    abc8:	d9001b17 	ldw	r4,108(sp)
    abcc:	d8801c17 	ldw	r2,112(sp)
    abd0:	d811883a 	mov	r8,sp
    abd4:	21000044 	addi	r4,r4,1
    abd8:	003d8006 	br	a1dc <___vfiprintf_internal_r+0x5f8>
    abdc:	01000074 	movhi	r4,1
    abe0:	21070c04 	addi	r4,r4,7216
    abe4:	d9002615 	stw	r4,152(sp)
    abe8:	d8c02215 	stw	r3,136(sp)
    abec:	1029883a 	mov	r20,r2
    abf0:	94c4b03a 	or	r2,r18,r19
    abf4:	103fb21e 	bne	r2,zero,aac0 <___vfiprintf_internal_r+0xedc>
    abf8:	0039883a 	mov	fp,zero
    abfc:	00800084 	movi	r2,2
    ac00:	003e6b06 	br	a5b0 <___vfiprintf_internal_r+0x9cc>
    ac04:	da802217 	ldw	r10,136(sp)
    ac08:	d8001d85 	stb	zero,118(sp)
    ac0c:	0027883a 	mov	r19,zero
    ac10:	50800104 	addi	r2,r10,4
    ac14:	54800017 	ldw	r18,0(r10)
    ac18:	483e6016 	blt	r9,zero,a59c <___vfiprintf_internal_r+0x9b8>
    ac1c:	00ffdfc4 	movi	r3,-129
    ac20:	d8802215 	stw	r2,136(sp)
    ac24:	a0e8703a 	and	r20,r20,r3
    ac28:	0039883a 	mov	fp,zero
    ac2c:	903ebb26 	beq	r18,zero,a71c <___vfiprintf_internal_r+0xb38>
    ac30:	00800244 	movi	r2,9
    ac34:	14bdee36 	bltu	r2,r18,a3f0 <___vfiprintf_internal_r+0x80c>
    ac38:	003eba06 	br	a724 <___vfiprintf_internal_r+0xb40>
    ac3c:	00800c04 	movi	r2,48
    ac40:	d8c01d45 	stb	r3,117(sp)
    ac44:	d8801d05 	stb	r2,116(sp)
    ac48:	d8001d85 	stb	zero,118(sp)
    ac4c:	a0c00094 	ori	r3,r20,2
    ac50:	4800a916 	blt	r9,zero,aef8 <___vfiprintf_internal_r+0x1314>
    ac54:	00bfdfc4 	movi	r2,-129
    ac58:	a096703a 	and	r11,r20,r2
    ac5c:	5d000094 	ori	r20,r11,2
    ac60:	0039883a 	mov	fp,zero
    ac64:	003f9706 	br	aac4 <___vfiprintf_internal_r+0xee0>
    ac68:	8025883a 	mov	r18,r16
    ac6c:	003c2e06 	br	9d28 <___vfiprintf_internal_r+0x144>
    ac70:	00800074 	movhi	r2,1
    ac74:	10870c04 	addi	r2,r2,7216
    ac78:	0039883a 	mov	fp,zero
    ac7c:	d8802615 	stw	r2,152(sp)
    ac80:	003f9006 	br	aac4 <___vfiprintf_internal_r+0xee0>
    ac84:	04a5c83a 	sub	r18,zero,r18
    ac88:	07000b44 	movi	fp,45
    ac8c:	9004c03a 	cmpne	r2,r18,zero
    ac90:	04e7c83a 	sub	r19,zero,r19
    ac94:	df001d85 	stb	fp,118(sp)
    ac98:	98a7c83a 	sub	r19,r19,r2
    ac9c:	48009f16 	blt	r9,zero,af1c <___vfiprintf_internal_r+0x1338>
    aca0:	00bfdfc4 	movi	r2,-129
    aca4:	a0a8703a 	and	r20,r20,r2
    aca8:	003dd006 	br	a3ec <___vfiprintf_internal_r+0x808>
    acac:	70004c26 	beq	r14,zero,ade0 <___vfiprintf_internal_r+0x11fc>
    acb0:	00800084 	movi	r2,2
    acb4:	d8c01d04 	addi	r3,sp,116
    acb8:	d8c00015 	stw	r3,0(sp)
    acbc:	d8800115 	stw	r2,4(sp)
    acc0:	01000044 	movi	r4,1
    acc4:	d811883a 	mov	r8,sp
    acc8:	003f7306 	br	aa98 <___vfiprintf_internal_r+0xeb4>
    accc:	a080100c 	andi	r2,r20,64
    acd0:	da802217 	ldw	r10,136(sp)
    acd4:	103e0626 	beq	r2,zero,a4f0 <___vfiprintf_internal_r+0x90c>
    acd8:	5480000f 	ldh	r18,0(r10)
    acdc:	52800104 	addi	r10,r10,4
    ace0:	da802215 	stw	r10,136(sp)
    ace4:	9027d7fa 	srai	r19,r18,31
    ace8:	9805883a 	mov	r2,r19
    acec:	003db806 	br	a3d0 <___vfiprintf_internal_r+0x7ec>
    acf0:	a080040c 	andi	r2,r20,16
    acf4:	1000091e 	bne	r2,zero,ad1c <___vfiprintf_internal_r+0x1138>
    acf8:	a2c0100c 	andi	r11,r20,64
    acfc:	58000726 	beq	r11,zero,ad1c <___vfiprintf_internal_r+0x1138>
    ad00:	da802217 	ldw	r10,136(sp)
    ad04:	50800017 	ldw	r2,0(r10)
    ad08:	52800104 	addi	r10,r10,4
    ad0c:	da802215 	stw	r10,136(sp)
    ad10:	da802317 	ldw	r10,140(sp)
    ad14:	1280000d 	sth	r10,0(r2)
    ad18:	003be706 	br	9cb8 <___vfiprintf_internal_r+0xd4>
    ad1c:	da802217 	ldw	r10,136(sp)
    ad20:	50800017 	ldw	r2,0(r10)
    ad24:	52800104 	addi	r10,r10,4
    ad28:	da802215 	stw	r10,136(sp)
    ad2c:	da802317 	ldw	r10,140(sp)
    ad30:	12800015 	stw	r10,0(r2)
    ad34:	003be006 	br	9cb8 <___vfiprintf_internal_r+0xd4>
    ad38:	a080100c 	andi	r2,r20,64
    ad3c:	da802217 	ldw	r10,136(sp)
    ad40:	10003026 	beq	r2,zero,ae04 <___vfiprintf_internal_r+0x1220>
    ad44:	5480000b 	ldhu	r18,0(r10)
    ad48:	52800104 	addi	r10,r10,4
    ad4c:	0027883a 	mov	r19,zero
    ad50:	da802215 	stw	r10,136(sp)
    ad54:	003d8006 	br	a358 <___vfiprintf_internal_r+0x774>
    ad58:	80c00007 	ldb	r3,0(r16)
    ad5c:	003c0006 	br	9d60 <___vfiprintf_internal_r+0x17c>
    ad60:	a080100c 	andi	r2,r20,64
    ad64:	d8001d85 	stb	zero,118(sp)
    ad68:	da802217 	ldw	r10,136(sp)
    ad6c:	1000201e 	bne	r2,zero,adf0 <___vfiprintf_internal_r+0x120c>
    ad70:	50800104 	addi	r2,r10,4
    ad74:	54800017 	ldw	r18,0(r10)
    ad78:	0027883a 	mov	r19,zero
    ad7c:	483def0e 	bge	r9,zero,a53c <___vfiprintf_internal_r+0x958>
    ad80:	94c6b03a 	or	r3,r18,r19
    ad84:	d8802215 	stw	r2,136(sp)
    ad88:	183d4e1e 	bne	r3,zero,a2c4 <___vfiprintf_internal_r+0x6e0>
    ad8c:	0039883a 	mov	fp,zero
    ad90:	0005883a 	mov	r2,zero
    ad94:	003e0606 	br	a5b0 <___vfiprintf_internal_r+0x9cc>
    ad98:	d9402117 	ldw	r5,132(sp)
    ad9c:	d9002017 	ldw	r4,128(sp)
    ada0:	d9801a04 	addi	r6,sp,104
    ada4:	da402c15 	stw	r9,176(sp)
    ada8:	db802a15 	stw	r14,168(sp)
    adac:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    adb0:	da402c17 	ldw	r9,176(sp)
    adb4:	db802a17 	ldw	r14,168(sp)
    adb8:	103ede1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    adbc:	d9401b17 	ldw	r5,108(sp)
    adc0:	d8801c17 	ldw	r2,112(sp)
    adc4:	d811883a 	mov	r8,sp
    adc8:	29000044 	addi	r4,r5,1
    adcc:	003e7406 	br	a7a0 <___vfiprintf_internal_r+0xbbc>
    add0:	00bfffc4 	movi	r2,-1
    add4:	003c5806 	br	9f38 <___vfiprintf_internal_r+0x354>
    add8:	d811883a 	mov	r8,sp
    addc:	003ee806 	br	a980 <___vfiprintf_internal_r+0xd9c>
    ade0:	000b883a 	mov	r5,zero
    ade4:	01000044 	movi	r4,1
    ade8:	d811883a 	mov	r8,sp
    adec:	003e7c06 	br	a7e0 <___vfiprintf_internal_r+0xbfc>
    adf0:	50800104 	addi	r2,r10,4
    adf4:	5480000b 	ldhu	r18,0(r10)
    adf8:	0027883a 	mov	r19,zero
    adfc:	483dcf0e 	bge	r9,zero,a53c <___vfiprintf_internal_r+0x958>
    ae00:	003fdf06 	br	ad80 <___vfiprintf_internal_r+0x119c>
    ae04:	54800017 	ldw	r18,0(r10)
    ae08:	52800104 	addi	r10,r10,4
    ae0c:	0027883a 	mov	r19,zero
    ae10:	da802215 	stw	r10,136(sp)
    ae14:	003d5006 	br	a358 <___vfiprintf_internal_r+0x774>
    ae18:	50800104 	addi	r2,r10,4
    ae1c:	5480000b 	ldhu	r18,0(r10)
    ae20:	0027883a 	mov	r19,zero
    ae24:	483f7d0e 	bge	r9,zero,ac1c <___vfiprintf_internal_r+0x1038>
    ae28:	003ddc06 	br	a59c <___vfiprintf_internal_r+0x9b8>
    ae2c:	d8c02215 	stw	r3,136(sp)
    ae30:	0039883a 	mov	fp,zero
    ae34:	003ddb06 	br	a5a4 <___vfiprintf_internal_r+0x9c0>
    ae38:	02800074 	movhi	r10,1
    ae3c:	52876d04 	addi	r10,r10,7604
    ae40:	da802415 	stw	r10,144(sp)
    ae44:	003e8306 	br	a854 <___vfiprintf_internal_r+0xc70>
    ae48:	d8801c17 	ldw	r2,112(sp)
    ae4c:	dd002117 	ldw	r20,132(sp)
    ae50:	103eb926 	beq	r2,zero,a938 <___vfiprintf_internal_r+0xd54>
    ae54:	d9002017 	ldw	r4,128(sp)
    ae58:	d9801a04 	addi	r6,sp,104
    ae5c:	a00b883a 	mov	r5,r20
    ae60:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    ae64:	003eb406 	br	a938 <___vfiprintf_internal_r+0xd54>
    ae68:	80c00043 	ldbu	r3,1(r16)
    ae6c:	a5000814 	ori	r20,r20,32
    ae70:	84000044 	addi	r16,r16,1
    ae74:	18c03fcc 	andi	r3,r3,255
    ae78:	18c0201c 	xori	r3,r3,128
    ae7c:	18ffe004 	addi	r3,r3,-128
    ae80:	003bb706 	br	9d60 <___vfiprintf_internal_r+0x17c>
    ae84:	a809883a 	mov	r4,r21
    ae88:	d8c02a15 	stw	r3,168(sp)
    ae8c:	da002b15 	stw	r8,172(sp)
    ae90:	0002d980 	call	2d98 <strlen>
    ae94:	d8c02a17 	ldw	r3,168(sp)
    ae98:	1027883a 	mov	r19,r2
    ae9c:	df001d83 	ldbu	fp,118(sp)
    aea0:	d8c02215 	stw	r3,136(sp)
    aea4:	0013883a 	mov	r9,zero
    aea8:	da002b17 	ldw	r8,172(sp)
    aeac:	003c4d06 	br	9fe4 <___vfiprintf_internal_r+0x400>
    aeb0:	d9402117 	ldw	r5,132(sp)
    aeb4:	d9002017 	ldw	r4,128(sp)
    aeb8:	d9801a04 	addi	r6,sp,104
    aebc:	da402c15 	stw	r9,176(sp)
    aec0:	0009ad00 	call	9ad0 <__sprint_r.part.0>
    aec4:	da402c17 	ldw	r9,176(sp)
    aec8:	103e9a1e 	bne	r2,zero,a934 <___vfiprintf_internal_r+0xd50>
    aecc:	d9401b17 	ldw	r5,108(sp)
    aed0:	d8801c17 	ldw	r2,112(sp)
    aed4:	d811883a 	mov	r8,sp
    aed8:	29000044 	addi	r4,r5,1
    aedc:	003e4206 	br	a7e8 <___vfiprintf_internal_r+0xc04>
    aee0:	d9401b17 	ldw	r5,108(sp)
    aee4:	01000074 	movhi	r4,1
    aee8:	21077104 	addi	r4,r4,7620
    aeec:	d9002415 	stw	r4,144(sp)
    aef0:	29400044 	addi	r5,r5,1
    aef4:	003c6d06 	br	a0ac <___vfiprintf_internal_r+0x4c8>
    aef8:	0039883a 	mov	fp,zero
    aefc:	00800084 	movi	r2,2
    af00:	10803fcc 	andi	r2,r2,255
    af04:	01000044 	movi	r4,1
    af08:	11001e26 	beq	r2,r4,af84 <___vfiprintf_internal_r+0x13a0>
    af0c:	01000084 	movi	r4,2
    af10:	11001e1e 	bne	r2,r4,af8c <___vfiprintf_internal_r+0x13a8>
    af14:	1829883a 	mov	r20,r3
    af18:	003eea06 	br	aac4 <___vfiprintf_internal_r+0xee0>
    af1c:	a007883a 	mov	r3,r20
    af20:	00800044 	movi	r2,1
    af24:	003ff606 	br	af00 <___vfiprintf_internal_r+0x131c>
    af28:	00800184 	movi	r2,6
    af2c:	1240012e 	bgeu	r2,r9,af34 <___vfiprintf_internal_r+0x1350>
    af30:	1013883a 	mov	r9,r2
    af34:	4827883a 	mov	r19,r9
    af38:	4825883a 	mov	r18,r9
    af3c:	48001516 	blt	r9,zero,af94 <___vfiprintf_internal_r+0x13b0>
    af40:	05400074 	movhi	r21,1
    af44:	d8c02215 	stw	r3,136(sp)
    af48:	ad471104 	addi	r21,r21,7236
    af4c:	003d1406 	br	a3a0 <___vfiprintf_internal_r+0x7bc>
    af50:	02800074 	movhi	r10,1
    af54:	52876d04 	addi	r10,r10,7604
    af58:	da802415 	stw	r10,144(sp)
    af5c:	200d883a 	mov	r6,r4
    af60:	003c9106 	br	a1a8 <___vfiprintf_internal_r+0x5c4>
    af64:	5021883a 	mov	r16,r10
    af68:	0013883a 	mov	r9,zero
    af6c:	003b7d06 	br	9d64 <___vfiprintf_internal_r+0x180>
    af70:	4827883a 	mov	r19,r9
    af74:	df001d83 	ldbu	fp,118(sp)
    af78:	d8c02215 	stw	r3,136(sp)
    af7c:	0013883a 	mov	r9,zero
    af80:	003c1806 	br	9fe4 <___vfiprintf_internal_r+0x400>
    af84:	1829883a 	mov	r20,r3
    af88:	003d1806 	br	a3ec <___vfiprintf_internal_r+0x808>
    af8c:	1829883a 	mov	r20,r3
    af90:	003ccd06 	br	a2c8 <___vfiprintf_internal_r+0x6e4>
    af94:	0025883a 	mov	r18,zero
    af98:	003fe906 	br	af40 <___vfiprintf_internal_r+0x135c>
    af9c:	d8802217 	ldw	r2,136(sp)
    afa0:	80c00043 	ldbu	r3,1(r16)
    afa4:	5021883a 	mov	r16,r10
    afa8:	12400017 	ldw	r9,0(r2)
    afac:	10800104 	addi	r2,r2,4
    afb0:	d8802215 	stw	r2,136(sp)
    afb4:	483faf0e 	bge	r9,zero,ae74 <___vfiprintf_internal_r+0x1290>
    afb8:	18c03fcc 	andi	r3,r3,255
    afbc:	18c0201c 	xori	r3,r3,128
    afc0:	027fffc4 	movi	r9,-1
    afc4:	18ffe004 	addi	r3,r3,-128
    afc8:	003b6506 	br	9d60 <___vfiprintf_internal_r+0x17c>
    afcc:	d9c01d85 	stb	r7,118(sp)
    afd0:	003ca006 	br	a254 <___vfiprintf_internal_r+0x670>
    afd4:	d9c01d85 	stb	r7,118(sp)
    afd8:	003cad06 	br	a290 <___vfiprintf_internal_r+0x6ac>
    afdc:	d9c01d85 	stb	r7,118(sp)
    afe0:	003d7d06 	br	a5d8 <___vfiprintf_internal_r+0x9f4>
    afe4:	d9c01d85 	stb	r7,118(sp)
    afe8:	003d5f06 	br	a568 <___vfiprintf_internal_r+0x984>
    afec:	a080004c 	andi	r2,r20,1
    aff0:	0039883a 	mov	fp,zero
    aff4:	10000526 	beq	r2,zero,b00c <___vfiprintf_internal_r+0x1428>
    aff8:	00800c04 	movi	r2,48
    affc:	d88019c5 	stb	r2,103(sp)
    b000:	dcc02717 	ldw	r19,156(sp)
    b004:	dd4019c4 	addi	r21,sp,103
    b008:	003bf606 	br	9fe4 <___vfiprintf_internal_r+0x400>
    b00c:	0027883a 	mov	r19,zero
    b010:	dd401a04 	addi	r21,sp,104
    b014:	003bf306 	br	9fe4 <___vfiprintf_internal_r+0x400>
    b018:	d9c01d85 	stb	r7,118(sp)
    b01c:	003dc806 	br	a740 <___vfiprintf_internal_r+0xb5c>
    b020:	d9c01d85 	stb	r7,118(sp)
    b024:	003d3a06 	br	a510 <___vfiprintf_internal_r+0x92c>
    b028:	d9c01d85 	stb	r7,118(sp)
    b02c:	003d2a06 	br	a4d8 <___vfiprintf_internal_r+0x8f4>
    b030:	d9c01d85 	stb	r7,118(sp)
    b034:	003cde06 	br	a3b0 <___vfiprintf_internal_r+0x7cc>
    b038:	d9c01d85 	stb	r7,118(sp)
    b03c:	003cbc06 	br	a330 <___vfiprintf_internal_r+0x74c>

0000b040 <__vfiprintf_internal>:
    b040:	00800074 	movhi	r2,1
    b044:	108e6e04 	addi	r2,r2,14776
    b048:	300f883a 	mov	r7,r6
    b04c:	280d883a 	mov	r6,r5
    b050:	200b883a 	mov	r5,r4
    b054:	11000017 	ldw	r4,0(r2)
    b058:	0009be41 	jmpi	9be4 <___vfiprintf_internal_r>

0000b05c <__sbprintf>:
    b05c:	2880030b 	ldhu	r2,12(r5)
    b060:	2ac01917 	ldw	r11,100(r5)
    b064:	2a80038b 	ldhu	r10,14(r5)
    b068:	2a400717 	ldw	r9,28(r5)
    b06c:	2a000917 	ldw	r8,36(r5)
    b070:	defee204 	addi	sp,sp,-1144
    b074:	00c10004 	movi	r3,1024
    b078:	dc011a15 	stw	r16,1128(sp)
    b07c:	10bfff4c 	andi	r2,r2,65533
    b080:	2821883a 	mov	r16,r5
    b084:	d8cb883a 	add	r5,sp,r3
    b088:	dc811c15 	stw	r18,1136(sp)
    b08c:	dc411b15 	stw	r17,1132(sp)
    b090:	dfc11d15 	stw	ra,1140(sp)
    b094:	2025883a 	mov	r18,r4
    b098:	d881030d 	sth	r2,1036(sp)
    b09c:	dac11915 	stw	r11,1124(sp)
    b0a0:	da81038d 	sth	r10,1038(sp)
    b0a4:	da410715 	stw	r9,1052(sp)
    b0a8:	da010915 	stw	r8,1060(sp)
    b0ac:	dec10015 	stw	sp,1024(sp)
    b0b0:	dec10415 	stw	sp,1040(sp)
    b0b4:	d8c10215 	stw	r3,1032(sp)
    b0b8:	d8c10515 	stw	r3,1044(sp)
    b0bc:	d8010615 	stw	zero,1048(sp)
    b0c0:	0009be40 	call	9be4 <___vfiprintf_internal_r>
    b0c4:	1023883a 	mov	r17,r2
    b0c8:	10000416 	blt	r2,zero,b0dc <__sbprintf+0x80>
    b0cc:	d9410004 	addi	r5,sp,1024
    b0d0:	9009883a 	mov	r4,r18
    b0d4:	0006cf80 	call	6cf8 <_fflush_r>
    b0d8:	10000d1e 	bne	r2,zero,b110 <__sbprintf+0xb4>
    b0dc:	d881030b 	ldhu	r2,1036(sp)
    b0e0:	1080100c 	andi	r2,r2,64
    b0e4:	10000326 	beq	r2,zero,b0f4 <__sbprintf+0x98>
    b0e8:	8080030b 	ldhu	r2,12(r16)
    b0ec:	10801014 	ori	r2,r2,64
    b0f0:	8080030d 	sth	r2,12(r16)
    b0f4:	8805883a 	mov	r2,r17
    b0f8:	dfc11d17 	ldw	ra,1140(sp)
    b0fc:	dc811c17 	ldw	r18,1136(sp)
    b100:	dc411b17 	ldw	r17,1132(sp)
    b104:	dc011a17 	ldw	r16,1128(sp)
    b108:	dec11e04 	addi	sp,sp,1144
    b10c:	f800283a 	ret
    b110:	047fffc4 	movi	r17,-1
    b114:	003ff106 	br	b0dc <__sbprintf+0x80>

0000b118 <_write_r>:
    b118:	defffd04 	addi	sp,sp,-12
    b11c:	2805883a 	mov	r2,r5
    b120:	dc000015 	stw	r16,0(sp)
    b124:	04000074 	movhi	r16,1
    b128:	dc400115 	stw	r17,4(sp)
    b12c:	300b883a 	mov	r5,r6
    b130:	84154304 	addi	r16,r16,21772
    b134:	2023883a 	mov	r17,r4
    b138:	380d883a 	mov	r6,r7
    b13c:	1009883a 	mov	r4,r2
    b140:	dfc00215 	stw	ra,8(sp)
    b144:	80000015 	stw	zero,0(r16)
    b148:	000f5940 	call	f594 <write>
    b14c:	00ffffc4 	movi	r3,-1
    b150:	10c00526 	beq	r2,r3,b168 <_write_r+0x50>
    b154:	dfc00217 	ldw	ra,8(sp)
    b158:	dc400117 	ldw	r17,4(sp)
    b15c:	dc000017 	ldw	r16,0(sp)
    b160:	dec00304 	addi	sp,sp,12
    b164:	f800283a 	ret
    b168:	80c00017 	ldw	r3,0(r16)
    b16c:	183ff926 	beq	r3,zero,b154 <_write_r+0x3c>
    b170:	88c00015 	stw	r3,0(r17)
    b174:	003ff706 	br	b154 <_write_r+0x3c>

0000b178 <_close_r>:
    b178:	defffd04 	addi	sp,sp,-12
    b17c:	dc000015 	stw	r16,0(sp)
    b180:	04000074 	movhi	r16,1
    b184:	dc400115 	stw	r17,4(sp)
    b188:	84154304 	addi	r16,r16,21772
    b18c:	2023883a 	mov	r17,r4
    b190:	2809883a 	mov	r4,r5
    b194:	dfc00215 	stw	ra,8(sp)
    b198:	80000015 	stw	zero,0(r16)
    b19c:	000ed540 	call	ed54 <close>
    b1a0:	00ffffc4 	movi	r3,-1
    b1a4:	10c00526 	beq	r2,r3,b1bc <_close_r+0x44>
    b1a8:	dfc00217 	ldw	ra,8(sp)
    b1ac:	dc400117 	ldw	r17,4(sp)
    b1b0:	dc000017 	ldw	r16,0(sp)
    b1b4:	dec00304 	addi	sp,sp,12
    b1b8:	f800283a 	ret
    b1bc:	80c00017 	ldw	r3,0(r16)
    b1c0:	183ff926 	beq	r3,zero,b1a8 <_close_r+0x30>
    b1c4:	88c00015 	stw	r3,0(r17)
    b1c8:	003ff706 	br	b1a8 <_close_r+0x30>

0000b1cc <_calloc_r>:
    b1cc:	298b383a 	mul	r5,r5,r6
    b1d0:	defffe04 	addi	sp,sp,-8
    b1d4:	dfc00115 	stw	ra,4(sp)
    b1d8:	dc000015 	stw	r16,0(sp)
    b1dc:	00023f80 	call	23f8 <_malloc_r>
    b1e0:	10002926 	beq	r2,zero,b288 <_calloc_r+0xbc>
    b1e4:	11bfff17 	ldw	r6,-4(r2)
    b1e8:	1021883a 	mov	r16,r2
    b1ec:	00bfff04 	movi	r2,-4
    b1f0:	308c703a 	and	r6,r6,r2
    b1f4:	00c00904 	movi	r3,36
    b1f8:	308d883a 	add	r6,r6,r2
    b1fc:	19801636 	bltu	r3,r6,b258 <_calloc_r+0x8c>
    b200:	008004c4 	movi	r2,19
    b204:	11800b2e 	bgeu	r2,r6,b234 <_calloc_r+0x68>
    b208:	80000015 	stw	zero,0(r16)
    b20c:	80000115 	stw	zero,4(r16)
    b210:	008006c4 	movi	r2,27
    b214:	11801a2e 	bgeu	r2,r6,b280 <_calloc_r+0xb4>
    b218:	80000215 	stw	zero,8(r16)
    b21c:	80000315 	stw	zero,12(r16)
    b220:	30c0151e 	bne	r6,r3,b278 <_calloc_r+0xac>
    b224:	80000415 	stw	zero,16(r16)
    b228:	80800604 	addi	r2,r16,24
    b22c:	80000515 	stw	zero,20(r16)
    b230:	00000106 	br	b238 <_calloc_r+0x6c>
    b234:	8005883a 	mov	r2,r16
    b238:	10000015 	stw	zero,0(r2)
    b23c:	10000115 	stw	zero,4(r2)
    b240:	10000215 	stw	zero,8(r2)
    b244:	8005883a 	mov	r2,r16
    b248:	dfc00117 	ldw	ra,4(sp)
    b24c:	dc000017 	ldw	r16,0(sp)
    b250:	dec00204 	addi	sp,sp,8
    b254:	f800283a 	ret
    b258:	000b883a 	mov	r5,zero
    b25c:	8009883a 	mov	r4,r16
    b260:	00081bc0 	call	81bc <memset>
    b264:	8005883a 	mov	r2,r16
    b268:	dfc00117 	ldw	ra,4(sp)
    b26c:	dc000017 	ldw	r16,0(sp)
    b270:	dec00204 	addi	sp,sp,8
    b274:	f800283a 	ret
    b278:	80800404 	addi	r2,r16,16
    b27c:	003fee06 	br	b238 <_calloc_r+0x6c>
    b280:	80800204 	addi	r2,r16,8
    b284:	003fec06 	br	b238 <_calloc_r+0x6c>
    b288:	0005883a 	mov	r2,zero
    b28c:	003fee06 	br	b248 <_calloc_r+0x7c>

0000b290 <_fclose_r>:
    b290:	28003926 	beq	r5,zero,b378 <_fclose_r+0xe8>
    b294:	defffc04 	addi	sp,sp,-16
    b298:	dc400115 	stw	r17,4(sp)
    b29c:	dc000015 	stw	r16,0(sp)
    b2a0:	dfc00315 	stw	ra,12(sp)
    b2a4:	dc800215 	stw	r18,8(sp)
    b2a8:	2023883a 	mov	r17,r4
    b2ac:	2821883a 	mov	r16,r5
    b2b0:	20000226 	beq	r4,zero,b2bc <_fclose_r+0x2c>
    b2b4:	20800e17 	ldw	r2,56(r4)
    b2b8:	10002726 	beq	r2,zero,b358 <_fclose_r+0xc8>
    b2bc:	8080030f 	ldh	r2,12(r16)
    b2c0:	1000071e 	bne	r2,zero,b2e0 <_fclose_r+0x50>
    b2c4:	0005883a 	mov	r2,zero
    b2c8:	dfc00317 	ldw	ra,12(sp)
    b2cc:	dc800217 	ldw	r18,8(sp)
    b2d0:	dc400117 	ldw	r17,4(sp)
    b2d4:	dc000017 	ldw	r16,0(sp)
    b2d8:	dec00404 	addi	sp,sp,16
    b2dc:	f800283a 	ret
    b2e0:	800b883a 	mov	r5,r16
    b2e4:	8809883a 	mov	r4,r17
    b2e8:	0006adc0 	call	6adc <__sflush_r>
    b2ec:	1025883a 	mov	r18,r2
    b2f0:	80800b17 	ldw	r2,44(r16)
    b2f4:	10000426 	beq	r2,zero,b308 <_fclose_r+0x78>
    b2f8:	81400717 	ldw	r5,28(r16)
    b2fc:	8809883a 	mov	r4,r17
    b300:	103ee83a 	callr	r2
    b304:	10001616 	blt	r2,zero,b360 <_fclose_r+0xd0>
    b308:	8080030b 	ldhu	r2,12(r16)
    b30c:	1080200c 	andi	r2,r2,128
    b310:	1000151e 	bne	r2,zero,b368 <_fclose_r+0xd8>
    b314:	81400c17 	ldw	r5,48(r16)
    b318:	28000526 	beq	r5,zero,b330 <_fclose_r+0xa0>
    b31c:	80801004 	addi	r2,r16,64
    b320:	28800226 	beq	r5,r2,b32c <_fclose_r+0x9c>
    b324:	8809883a 	mov	r4,r17
    b328:	00072480 	call	7248 <_free_r>
    b32c:	80000c15 	stw	zero,48(r16)
    b330:	81401117 	ldw	r5,68(r16)
    b334:	28000326 	beq	r5,zero,b344 <_fclose_r+0xb4>
    b338:	8809883a 	mov	r4,r17
    b33c:	00072480 	call	7248 <_free_r>
    b340:	80001115 	stw	zero,68(r16)
    b344:	00070e40 	call	70e4 <__sfp_lock_acquire>
    b348:	8000030d 	sth	zero,12(r16)
    b34c:	00070e80 	call	70e8 <__sfp_lock_release>
    b350:	9005883a 	mov	r2,r18
    b354:	003fdc06 	br	b2c8 <_fclose_r+0x38>
    b358:	00070d40 	call	70d4 <__sinit>
    b35c:	003fd706 	br	b2bc <_fclose_r+0x2c>
    b360:	04bfffc4 	movi	r18,-1
    b364:	003fe806 	br	b308 <_fclose_r+0x78>
    b368:	81400417 	ldw	r5,16(r16)
    b36c:	8809883a 	mov	r4,r17
    b370:	00072480 	call	7248 <_free_r>
    b374:	003fe706 	br	b314 <_fclose_r+0x84>
    b378:	0005883a 	mov	r2,zero
    b37c:	f800283a 	ret

0000b380 <fclose>:
    b380:	00800074 	movhi	r2,1
    b384:	108e6e04 	addi	r2,r2,14776
    b388:	200b883a 	mov	r5,r4
    b38c:	11000017 	ldw	r4,0(r2)
    b390:	000b2901 	jmpi	b290 <_fclose_r>

0000b394 <__fputwc>:
    b394:	defff804 	addi	sp,sp,-32
    b398:	dcc00415 	stw	r19,16(sp)
    b39c:	dc800315 	stw	r18,12(sp)
    b3a0:	dc000115 	stw	r16,4(sp)
    b3a4:	dfc00715 	stw	ra,28(sp)
    b3a8:	dd400615 	stw	r21,24(sp)
    b3ac:	dd000515 	stw	r20,20(sp)
    b3b0:	dc400215 	stw	r17,8(sp)
    b3b4:	2027883a 	mov	r19,r4
    b3b8:	2825883a 	mov	r18,r5
    b3bc:	3021883a 	mov	r16,r6
    b3c0:	0007c240 	call	7c24 <__locale_mb_cur_max>
    b3c4:	00c00044 	movi	r3,1
    b3c8:	10c03e26 	beq	r2,r3,b4c4 <__fputwc+0x130>
    b3cc:	81c01704 	addi	r7,r16,92
    b3d0:	900d883a 	mov	r6,r18
    b3d4:	d80b883a 	mov	r5,sp
    b3d8:	9809883a 	mov	r4,r19
    b3dc:	000b8640 	call	b864 <_wcrtomb_r>
    b3e0:	1029883a 	mov	r20,r2
    b3e4:	00bfffc4 	movi	r2,-1
    b3e8:	a0802026 	beq	r20,r2,b46c <__fputwc+0xd8>
    b3ec:	d9400003 	ldbu	r5,0(sp)
    b3f0:	a0001c26 	beq	r20,zero,b464 <__fputwc+0xd0>
    b3f4:	0023883a 	mov	r17,zero
    b3f8:	05400284 	movi	r21,10
    b3fc:	00000906 	br	b424 <__fputwc+0x90>
    b400:	80800017 	ldw	r2,0(r16)
    b404:	11400005 	stb	r5,0(r2)
    b408:	80c00017 	ldw	r3,0(r16)
    b40c:	18c00044 	addi	r3,r3,1
    b410:	80c00015 	stw	r3,0(r16)
    b414:	8c400044 	addi	r17,r17,1
    b418:	dc45883a 	add	r2,sp,r17
    b41c:	8d00112e 	bgeu	r17,r20,b464 <__fputwc+0xd0>
    b420:	11400003 	ldbu	r5,0(r2)
    b424:	80c00217 	ldw	r3,8(r16)
    b428:	18ffffc4 	addi	r3,r3,-1
    b42c:	80c00215 	stw	r3,8(r16)
    b430:	183ff30e 	bge	r3,zero,b400 <__fputwc+0x6c>
    b434:	80800617 	ldw	r2,24(r16)
    b438:	18801916 	blt	r3,r2,b4a0 <__fputwc+0x10c>
    b43c:	80800017 	ldw	r2,0(r16)
    b440:	11400005 	stb	r5,0(r2)
    b444:	80800017 	ldw	r2,0(r16)
    b448:	10c00003 	ldbu	r3,0(r2)
    b44c:	10800044 	addi	r2,r2,1
    b450:	1d402326 	beq	r3,r21,b4e0 <__fputwc+0x14c>
    b454:	80800015 	stw	r2,0(r16)
    b458:	8c400044 	addi	r17,r17,1
    b45c:	dc45883a 	add	r2,sp,r17
    b460:	8d3fef36 	bltu	r17,r20,b420 <__fputwc+0x8c>
    b464:	9005883a 	mov	r2,r18
    b468:	00000406 	br	b47c <__fputwc+0xe8>
    b46c:	80c0030b 	ldhu	r3,12(r16)
    b470:	a005883a 	mov	r2,r20
    b474:	18c01014 	ori	r3,r3,64
    b478:	80c0030d 	sth	r3,12(r16)
    b47c:	dfc00717 	ldw	ra,28(sp)
    b480:	dd400617 	ldw	r21,24(sp)
    b484:	dd000517 	ldw	r20,20(sp)
    b488:	dcc00417 	ldw	r19,16(sp)
    b48c:	dc800317 	ldw	r18,12(sp)
    b490:	dc400217 	ldw	r17,8(sp)
    b494:	dc000117 	ldw	r16,4(sp)
    b498:	dec00804 	addi	sp,sp,32
    b49c:	f800283a 	ret
    b4a0:	800d883a 	mov	r6,r16
    b4a4:	29403fcc 	andi	r5,r5,255
    b4a8:	9809883a 	mov	r4,r19
    b4ac:	000b70c0 	call	b70c <__swbuf_r>
    b4b0:	10bfffe0 	cmpeqi	r2,r2,-1
    b4b4:	10803fcc 	andi	r2,r2,255
    b4b8:	103fd626 	beq	r2,zero,b414 <__fputwc+0x80>
    b4bc:	00bfffc4 	movi	r2,-1
    b4c0:	003fee06 	br	b47c <__fputwc+0xe8>
    b4c4:	90ffffc4 	addi	r3,r18,-1
    b4c8:	01003f84 	movi	r4,254
    b4cc:	20ffbf36 	bltu	r4,r3,b3cc <__fputwc+0x38>
    b4d0:	900b883a 	mov	r5,r18
    b4d4:	dc800005 	stb	r18,0(sp)
    b4d8:	1029883a 	mov	r20,r2
    b4dc:	003fc506 	br	b3f4 <__fputwc+0x60>
    b4e0:	800d883a 	mov	r6,r16
    b4e4:	a80b883a 	mov	r5,r21
    b4e8:	9809883a 	mov	r4,r19
    b4ec:	000b70c0 	call	b70c <__swbuf_r>
    b4f0:	10bfffe0 	cmpeqi	r2,r2,-1
    b4f4:	003fef06 	br	b4b4 <__fputwc+0x120>

0000b4f8 <_fputwc_r>:
    b4f8:	3080030b 	ldhu	r2,12(r6)
    b4fc:	10c8000c 	andi	r3,r2,8192
    b500:	1800051e 	bne	r3,zero,b518 <_fputwc_r+0x20>
    b504:	30c01917 	ldw	r3,100(r6)
    b508:	10880014 	ori	r2,r2,8192
    b50c:	3080030d 	sth	r2,12(r6)
    b510:	18880014 	ori	r2,r3,8192
    b514:	30801915 	stw	r2,100(r6)
    b518:	000b3941 	jmpi	b394 <__fputwc>

0000b51c <fputwc>:
    b51c:	00800074 	movhi	r2,1
    b520:	defffc04 	addi	sp,sp,-16
    b524:	108e6e04 	addi	r2,r2,14776
    b528:	dc000115 	stw	r16,4(sp)
    b52c:	14000017 	ldw	r16,0(r2)
    b530:	dc400215 	stw	r17,8(sp)
    b534:	dfc00315 	stw	ra,12(sp)
    b538:	2023883a 	mov	r17,r4
    b53c:	80000226 	beq	r16,zero,b548 <fputwc+0x2c>
    b540:	80800e17 	ldw	r2,56(r16)
    b544:	10001026 	beq	r2,zero,b588 <fputwc+0x6c>
    b548:	2880030b 	ldhu	r2,12(r5)
    b54c:	10c8000c 	andi	r3,r2,8192
    b550:	1800051e 	bne	r3,zero,b568 <fputwc+0x4c>
    b554:	28c01917 	ldw	r3,100(r5)
    b558:	10880014 	ori	r2,r2,8192
    b55c:	2880030d 	sth	r2,12(r5)
    b560:	18880014 	ori	r2,r3,8192
    b564:	28801915 	stw	r2,100(r5)
    b568:	280d883a 	mov	r6,r5
    b56c:	8009883a 	mov	r4,r16
    b570:	880b883a 	mov	r5,r17
    b574:	dfc00317 	ldw	ra,12(sp)
    b578:	dc400217 	ldw	r17,8(sp)
    b57c:	dc000117 	ldw	r16,4(sp)
    b580:	dec00404 	addi	sp,sp,16
    b584:	000b3941 	jmpi	b394 <__fputwc>
    b588:	8009883a 	mov	r4,r16
    b58c:	d9400015 	stw	r5,0(sp)
    b590:	00070d40 	call	70d4 <__sinit>
    b594:	d9400017 	ldw	r5,0(sp)
    b598:	003feb06 	br	b548 <fputwc+0x2c>

0000b59c <_fstat_r>:
    b59c:	defffd04 	addi	sp,sp,-12
    b5a0:	2805883a 	mov	r2,r5
    b5a4:	dc000015 	stw	r16,0(sp)
    b5a8:	04000074 	movhi	r16,1
    b5ac:	dc400115 	stw	r17,4(sp)
    b5b0:	84154304 	addi	r16,r16,21772
    b5b4:	2023883a 	mov	r17,r4
    b5b8:	300b883a 	mov	r5,r6
    b5bc:	1009883a 	mov	r4,r2
    b5c0:	dfc00215 	stw	ra,8(sp)
    b5c4:	80000015 	stw	zero,0(r16)
    b5c8:	000ee8c0 	call	ee8c <fstat>
    b5cc:	00ffffc4 	movi	r3,-1
    b5d0:	10c00526 	beq	r2,r3,b5e8 <_fstat_r+0x4c>
    b5d4:	dfc00217 	ldw	ra,8(sp)
    b5d8:	dc400117 	ldw	r17,4(sp)
    b5dc:	dc000017 	ldw	r16,0(sp)
    b5e0:	dec00304 	addi	sp,sp,12
    b5e4:	f800283a 	ret
    b5e8:	80c00017 	ldw	r3,0(r16)
    b5ec:	183ff926 	beq	r3,zero,b5d4 <_fstat_r+0x38>
    b5f0:	88c00015 	stw	r3,0(r17)
    b5f4:	003ff706 	br	b5d4 <_fstat_r+0x38>

0000b5f8 <_isatty_r>:
    b5f8:	defffd04 	addi	sp,sp,-12
    b5fc:	dc000015 	stw	r16,0(sp)
    b600:	04000074 	movhi	r16,1
    b604:	dc400115 	stw	r17,4(sp)
    b608:	84154304 	addi	r16,r16,21772
    b60c:	2023883a 	mov	r17,r4
    b610:	2809883a 	mov	r4,r5
    b614:	dfc00215 	stw	ra,8(sp)
    b618:	80000015 	stw	zero,0(r16)
    b61c:	000ef780 	call	ef78 <isatty>
    b620:	00ffffc4 	movi	r3,-1
    b624:	10c00526 	beq	r2,r3,b63c <_isatty_r+0x44>
    b628:	dfc00217 	ldw	ra,8(sp)
    b62c:	dc400117 	ldw	r17,4(sp)
    b630:	dc000017 	ldw	r16,0(sp)
    b634:	dec00304 	addi	sp,sp,12
    b638:	f800283a 	ret
    b63c:	80c00017 	ldw	r3,0(r16)
    b640:	183ff926 	beq	r3,zero,b628 <_isatty_r+0x30>
    b644:	88c00015 	stw	r3,0(r17)
    b648:	003ff706 	br	b628 <_isatty_r+0x30>

0000b64c <_lseek_r>:
    b64c:	defffd04 	addi	sp,sp,-12
    b650:	2805883a 	mov	r2,r5
    b654:	dc000015 	stw	r16,0(sp)
    b658:	04000074 	movhi	r16,1
    b65c:	dc400115 	stw	r17,4(sp)
    b660:	300b883a 	mov	r5,r6
    b664:	84154304 	addi	r16,r16,21772
    b668:	2023883a 	mov	r17,r4
    b66c:	380d883a 	mov	r6,r7
    b670:	1009883a 	mov	r4,r2
    b674:	dfc00215 	stw	ra,8(sp)
    b678:	80000015 	stw	zero,0(r16)
    b67c:	000f1440 	call	f144 <lseek>
    b680:	00ffffc4 	movi	r3,-1
    b684:	10c00526 	beq	r2,r3,b69c <_lseek_r+0x50>
    b688:	dfc00217 	ldw	ra,8(sp)
    b68c:	dc400117 	ldw	r17,4(sp)
    b690:	dc000017 	ldw	r16,0(sp)
    b694:	dec00304 	addi	sp,sp,12
    b698:	f800283a 	ret
    b69c:	80c00017 	ldw	r3,0(r16)
    b6a0:	183ff926 	beq	r3,zero,b688 <_lseek_r+0x3c>
    b6a4:	88c00015 	stw	r3,0(r17)
    b6a8:	003ff706 	br	b688 <_lseek_r+0x3c>

0000b6ac <_read_r>:
    b6ac:	defffd04 	addi	sp,sp,-12
    b6b0:	2805883a 	mov	r2,r5
    b6b4:	dc000015 	stw	r16,0(sp)
    b6b8:	04000074 	movhi	r16,1
    b6bc:	dc400115 	stw	r17,4(sp)
    b6c0:	300b883a 	mov	r5,r6
    b6c4:	84154304 	addi	r16,r16,21772
    b6c8:	2023883a 	mov	r17,r4
    b6cc:	380d883a 	mov	r6,r7
    b6d0:	1009883a 	mov	r4,r2
    b6d4:	dfc00215 	stw	ra,8(sp)
    b6d8:	80000015 	stw	zero,0(r16)
    b6dc:	000f3180 	call	f318 <read>
    b6e0:	00ffffc4 	movi	r3,-1
    b6e4:	10c00526 	beq	r2,r3,b6fc <_read_r+0x50>
    b6e8:	dfc00217 	ldw	ra,8(sp)
    b6ec:	dc400117 	ldw	r17,4(sp)
    b6f0:	dc000017 	ldw	r16,0(sp)
    b6f4:	dec00304 	addi	sp,sp,12
    b6f8:	f800283a 	ret
    b6fc:	80c00017 	ldw	r3,0(r16)
    b700:	183ff926 	beq	r3,zero,b6e8 <_read_r+0x3c>
    b704:	88c00015 	stw	r3,0(r17)
    b708:	003ff706 	br	b6e8 <_read_r+0x3c>

0000b70c <__swbuf_r>:
    b70c:	defffb04 	addi	sp,sp,-20
    b710:	dcc00315 	stw	r19,12(sp)
    b714:	dc800215 	stw	r18,8(sp)
    b718:	dc000015 	stw	r16,0(sp)
    b71c:	dfc00415 	stw	ra,16(sp)
    b720:	dc400115 	stw	r17,4(sp)
    b724:	2025883a 	mov	r18,r4
    b728:	2827883a 	mov	r19,r5
    b72c:	3021883a 	mov	r16,r6
    b730:	20000226 	beq	r4,zero,b73c <__swbuf_r+0x30>
    b734:	20800e17 	ldw	r2,56(r4)
    b738:	10004226 	beq	r2,zero,b844 <__swbuf_r+0x138>
    b73c:	80800617 	ldw	r2,24(r16)
    b740:	8100030b 	ldhu	r4,12(r16)
    b744:	80800215 	stw	r2,8(r16)
    b748:	2080020c 	andi	r2,r4,8
    b74c:	10003626 	beq	r2,zero,b828 <__swbuf_r+0x11c>
    b750:	80c00417 	ldw	r3,16(r16)
    b754:	18003426 	beq	r3,zero,b828 <__swbuf_r+0x11c>
    b758:	2088000c 	andi	r2,r4,8192
    b75c:	9c403fcc 	andi	r17,r19,255
    b760:	10001a26 	beq	r2,zero,b7cc <__swbuf_r+0xc0>
    b764:	80800017 	ldw	r2,0(r16)
    b768:	81000517 	ldw	r4,20(r16)
    b76c:	10c7c83a 	sub	r3,r2,r3
    b770:	1900200e 	bge	r3,r4,b7f4 <__swbuf_r+0xe8>
    b774:	18c00044 	addi	r3,r3,1
    b778:	81000217 	ldw	r4,8(r16)
    b77c:	11400044 	addi	r5,r2,1
    b780:	81400015 	stw	r5,0(r16)
    b784:	213fffc4 	addi	r4,r4,-1
    b788:	81000215 	stw	r4,8(r16)
    b78c:	14c00005 	stb	r19,0(r2)
    b790:	80800517 	ldw	r2,20(r16)
    b794:	10c01e26 	beq	r2,r3,b810 <__swbuf_r+0x104>
    b798:	8080030b 	ldhu	r2,12(r16)
    b79c:	1080004c 	andi	r2,r2,1
    b7a0:	10000226 	beq	r2,zero,b7ac <__swbuf_r+0xa0>
    b7a4:	00800284 	movi	r2,10
    b7a8:	88801926 	beq	r17,r2,b810 <__swbuf_r+0x104>
    b7ac:	8805883a 	mov	r2,r17
    b7b0:	dfc00417 	ldw	ra,16(sp)
    b7b4:	dcc00317 	ldw	r19,12(sp)
    b7b8:	dc800217 	ldw	r18,8(sp)
    b7bc:	dc400117 	ldw	r17,4(sp)
    b7c0:	dc000017 	ldw	r16,0(sp)
    b7c4:	dec00504 	addi	sp,sp,20
    b7c8:	f800283a 	ret
    b7cc:	81401917 	ldw	r5,100(r16)
    b7d0:	00b7ffc4 	movi	r2,-8193
    b7d4:	21080014 	ori	r4,r4,8192
    b7d8:	2884703a 	and	r2,r5,r2
    b7dc:	80801915 	stw	r2,100(r16)
    b7e0:	80800017 	ldw	r2,0(r16)
    b7e4:	8100030d 	sth	r4,12(r16)
    b7e8:	81000517 	ldw	r4,20(r16)
    b7ec:	10c7c83a 	sub	r3,r2,r3
    b7f0:	193fe016 	blt	r3,r4,b774 <__swbuf_r+0x68>
    b7f4:	800b883a 	mov	r5,r16
    b7f8:	9009883a 	mov	r4,r18
    b7fc:	0006cf80 	call	6cf8 <_fflush_r>
    b800:	1000071e 	bne	r2,zero,b820 <__swbuf_r+0x114>
    b804:	80800017 	ldw	r2,0(r16)
    b808:	00c00044 	movi	r3,1
    b80c:	003fda06 	br	b778 <__swbuf_r+0x6c>
    b810:	800b883a 	mov	r5,r16
    b814:	9009883a 	mov	r4,r18
    b818:	0006cf80 	call	6cf8 <_fflush_r>
    b81c:	103fe326 	beq	r2,zero,b7ac <__swbuf_r+0xa0>
    b820:	00bfffc4 	movi	r2,-1
    b824:	003fe206 	br	b7b0 <__swbuf_r+0xa4>
    b828:	800b883a 	mov	r5,r16
    b82c:	9009883a 	mov	r4,r18
    b830:	00051000 	call	5100 <__swsetup_r>
    b834:	103ffa1e 	bne	r2,zero,b820 <__swbuf_r+0x114>
    b838:	8100030b 	ldhu	r4,12(r16)
    b83c:	80c00417 	ldw	r3,16(r16)
    b840:	003fc506 	br	b758 <__swbuf_r+0x4c>
    b844:	00070d40 	call	70d4 <__sinit>
    b848:	003fbc06 	br	b73c <__swbuf_r+0x30>

0000b84c <__swbuf>:
    b84c:	00800074 	movhi	r2,1
    b850:	108e6e04 	addi	r2,r2,14776
    b854:	280d883a 	mov	r6,r5
    b858:	200b883a 	mov	r5,r4
    b85c:	11000017 	ldw	r4,0(r2)
    b860:	000b70c1 	jmpi	b70c <__swbuf_r>

0000b864 <_wcrtomb_r>:
    b864:	defff604 	addi	sp,sp,-40
    b868:	00800074 	movhi	r2,1
    b86c:	dc800815 	stw	r18,32(sp)
    b870:	dc400715 	stw	r17,28(sp)
    b874:	dc000615 	stw	r16,24(sp)
    b878:	108e7004 	addi	r2,r2,14784
    b87c:	dfc00915 	stw	ra,36(sp)
    b880:	2021883a 	mov	r16,r4
    b884:	3823883a 	mov	r17,r7
    b888:	14800017 	ldw	r18,0(r2)
    b88c:	28001426 	beq	r5,zero,b8e0 <_wcrtomb_r+0x7c>
    b890:	d9400415 	stw	r5,16(sp)
    b894:	d9800515 	stw	r6,20(sp)
    b898:	0007c180 	call	7c18 <__locale_charset>
    b89c:	d9800517 	ldw	r6,20(sp)
    b8a0:	d9400417 	ldw	r5,16(sp)
    b8a4:	100f883a 	mov	r7,r2
    b8a8:	dc400015 	stw	r17,0(sp)
    b8ac:	8009883a 	mov	r4,r16
    b8b0:	903ee83a 	callr	r18
    b8b4:	00ffffc4 	movi	r3,-1
    b8b8:	10c0031e 	bne	r2,r3,b8c8 <_wcrtomb_r+0x64>
    b8bc:	88000015 	stw	zero,0(r17)
    b8c0:	00c02284 	movi	r3,138
    b8c4:	80c00015 	stw	r3,0(r16)
    b8c8:	dfc00917 	ldw	ra,36(sp)
    b8cc:	dc800817 	ldw	r18,32(sp)
    b8d0:	dc400717 	ldw	r17,28(sp)
    b8d4:	dc000617 	ldw	r16,24(sp)
    b8d8:	dec00a04 	addi	sp,sp,40
    b8dc:	f800283a 	ret
    b8e0:	0007c180 	call	7c18 <__locale_charset>
    b8e4:	100f883a 	mov	r7,r2
    b8e8:	dc400015 	stw	r17,0(sp)
    b8ec:	000d883a 	mov	r6,zero
    b8f0:	d9400104 	addi	r5,sp,4
    b8f4:	8009883a 	mov	r4,r16
    b8f8:	903ee83a 	callr	r18
    b8fc:	003fed06 	br	b8b4 <_wcrtomb_r+0x50>

0000b900 <wcrtomb>:
    b900:	defff604 	addi	sp,sp,-40
    b904:	00800074 	movhi	r2,1
    b908:	dc800615 	stw	r18,24(sp)
    b90c:	dc400515 	stw	r17,20(sp)
    b910:	108e6e04 	addi	r2,r2,14776
    b914:	dfc00915 	stw	ra,36(sp)
    b918:	dd000815 	stw	r20,32(sp)
    b91c:	dcc00715 	stw	r19,28(sp)
    b920:	dc000415 	stw	r16,16(sp)
    b924:	3025883a 	mov	r18,r6
    b928:	14400017 	ldw	r17,0(r2)
    b92c:	20001926 	beq	r4,zero,b994 <wcrtomb+0x94>
    b930:	00800074 	movhi	r2,1
    b934:	108e7004 	addi	r2,r2,14784
    b938:	15000017 	ldw	r20,0(r2)
    b93c:	2021883a 	mov	r16,r4
    b940:	2827883a 	mov	r19,r5
    b944:	0007c180 	call	7c18 <__locale_charset>
    b948:	100f883a 	mov	r7,r2
    b94c:	dc800015 	stw	r18,0(sp)
    b950:	980d883a 	mov	r6,r19
    b954:	800b883a 	mov	r5,r16
    b958:	8809883a 	mov	r4,r17
    b95c:	a03ee83a 	callr	r20
    b960:	00ffffc4 	movi	r3,-1
    b964:	10c0031e 	bne	r2,r3,b974 <wcrtomb+0x74>
    b968:	90000015 	stw	zero,0(r18)
    b96c:	00c02284 	movi	r3,138
    b970:	88c00015 	stw	r3,0(r17)
    b974:	dfc00917 	ldw	ra,36(sp)
    b978:	dd000817 	ldw	r20,32(sp)
    b97c:	dcc00717 	ldw	r19,28(sp)
    b980:	dc800617 	ldw	r18,24(sp)
    b984:	dc400517 	ldw	r17,20(sp)
    b988:	dc000417 	ldw	r16,16(sp)
    b98c:	dec00a04 	addi	sp,sp,40
    b990:	f800283a 	ret
    b994:	00800074 	movhi	r2,1
    b998:	108e7004 	addi	r2,r2,14784
    b99c:	14000017 	ldw	r16,0(r2)
    b9a0:	0007c180 	call	7c18 <__locale_charset>
    b9a4:	100f883a 	mov	r7,r2
    b9a8:	dc800015 	stw	r18,0(sp)
    b9ac:	000d883a 	mov	r6,zero
    b9b0:	d9400104 	addi	r5,sp,4
    b9b4:	8809883a 	mov	r4,r17
    b9b8:	803ee83a 	callr	r16
    b9bc:	003fe806 	br	b960 <wcrtomb+0x60>

0000b9c0 <__ascii_wctomb>:
    b9c0:	28000526 	beq	r5,zero,b9d8 <__ascii_wctomb+0x18>
    b9c4:	00803fc4 	movi	r2,255
    b9c8:	11800536 	bltu	r2,r6,b9e0 <__ascii_wctomb+0x20>
    b9cc:	29800005 	stb	r6,0(r5)
    b9d0:	00800044 	movi	r2,1
    b9d4:	f800283a 	ret
    b9d8:	0005883a 	mov	r2,zero
    b9dc:	f800283a 	ret
    b9e0:	00802284 	movi	r2,138
    b9e4:	20800015 	stw	r2,0(r4)
    b9e8:	00bfffc4 	movi	r2,-1
    b9ec:	f800283a 	ret

0000b9f0 <_wctomb_r>:
    b9f0:	00800074 	movhi	r2,1
    b9f4:	defff904 	addi	sp,sp,-28
    b9f8:	108e7004 	addi	r2,r2,14784
    b9fc:	dfc00615 	stw	ra,24(sp)
    ba00:	dc400515 	stw	r17,20(sp)
    ba04:	dc000415 	stw	r16,16(sp)
    ba08:	3823883a 	mov	r17,r7
    ba0c:	14000017 	ldw	r16,0(r2)
    ba10:	d9000115 	stw	r4,4(sp)
    ba14:	d9400215 	stw	r5,8(sp)
    ba18:	d9800315 	stw	r6,12(sp)
    ba1c:	0007c180 	call	7c18 <__locale_charset>
    ba20:	d9800317 	ldw	r6,12(sp)
    ba24:	d9400217 	ldw	r5,8(sp)
    ba28:	d9000117 	ldw	r4,4(sp)
    ba2c:	100f883a 	mov	r7,r2
    ba30:	dc400015 	stw	r17,0(sp)
    ba34:	803ee83a 	callr	r16
    ba38:	dfc00617 	ldw	ra,24(sp)
    ba3c:	dc400517 	ldw	r17,20(sp)
    ba40:	dc000417 	ldw	r16,16(sp)
    ba44:	dec00704 	addi	sp,sp,28
    ba48:	f800283a 	ret

0000ba4c <__udivdi3>:
    ba4c:	defff504 	addi	sp,sp,-44
    ba50:	dcc00415 	stw	r19,16(sp)
    ba54:	dc000115 	stw	r16,4(sp)
    ba58:	dfc00a15 	stw	ra,40(sp)
    ba5c:	df000915 	stw	fp,36(sp)
    ba60:	ddc00815 	stw	r23,32(sp)
    ba64:	dd800715 	stw	r22,28(sp)
    ba68:	dd400615 	stw	r21,24(sp)
    ba6c:	dd000515 	stw	r20,20(sp)
    ba70:	dc800315 	stw	r18,12(sp)
    ba74:	dc400215 	stw	r17,8(sp)
    ba78:	2027883a 	mov	r19,r4
    ba7c:	2821883a 	mov	r16,r5
    ba80:	3800411e 	bne	r7,zero,bb88 <__udivdi3+0x13c>
    ba84:	3023883a 	mov	r17,r6
    ba88:	2025883a 	mov	r18,r4
    ba8c:	2980522e 	bgeu	r5,r6,bbd8 <__udivdi3+0x18c>
    ba90:	00bfffd4 	movui	r2,65535
    ba94:	282d883a 	mov	r22,r5
    ba98:	1180a836 	bltu	r2,r6,bd3c <__udivdi3+0x2f0>
    ba9c:	00803fc4 	movi	r2,255
    baa0:	1185803a 	cmpltu	r2,r2,r6
    baa4:	100490fa 	slli	r2,r2,3
    baa8:	3086d83a 	srl	r3,r6,r2
    baac:	01000074 	movhi	r4,1
    bab0:	21077504 	addi	r4,r4,7636
    bab4:	20c7883a 	add	r3,r4,r3
    bab8:	18c00003 	ldbu	r3,0(r3)
    babc:	1885883a 	add	r2,r3,r2
    bac0:	00c00804 	movi	r3,32
    bac4:	1887c83a 	sub	r3,r3,r2
    bac8:	18000526 	beq	r3,zero,bae0 <__udivdi3+0x94>
    bacc:	80e0983a 	sll	r16,r16,r3
    bad0:	9884d83a 	srl	r2,r19,r2
    bad4:	30e2983a 	sll	r17,r6,r3
    bad8:	98e4983a 	sll	r18,r19,r3
    badc:	142cb03a 	or	r22,r2,r16
    bae0:	882ad43a 	srli	r21,r17,16
    bae4:	b009883a 	mov	r4,r22
    bae8:	8d3fffcc 	andi	r20,r17,65535
    baec:	a80b883a 	mov	r5,r21
    baf0:	000c6580 	call	c658 <__umodsi3>
    baf4:	b009883a 	mov	r4,r22
    baf8:	a80b883a 	mov	r5,r21
    bafc:	1027883a 	mov	r19,r2
    bb00:	000c5f40 	call	c5f4 <__udivsi3>
    bb04:	102d883a 	mov	r22,r2
    bb08:	9826943a 	slli	r19,r19,16
    bb0c:	9004d43a 	srli	r2,r18,16
    bb10:	a5a1383a 	mul	r16,r20,r22
    bb14:	14c4b03a 	or	r2,r2,r19
    bb18:	1400052e 	bgeu	r2,r16,bb30 <__udivdi3+0xe4>
    bb1c:	1445883a 	add	r2,r2,r17
    bb20:	b0ffffc4 	addi	r3,r22,-1
    bb24:	14400136 	bltu	r2,r17,bb2c <__udivdi3+0xe0>
    bb28:	14012336 	bltu	r2,r16,bfb8 <__udivdi3+0x56c>
    bb2c:	182d883a 	mov	r22,r3
    bb30:	1421c83a 	sub	r16,r2,r16
    bb34:	a80b883a 	mov	r5,r21
    bb38:	8009883a 	mov	r4,r16
    bb3c:	000c6580 	call	c658 <__umodsi3>
    bb40:	1027883a 	mov	r19,r2
    bb44:	a80b883a 	mov	r5,r21
    bb48:	8009883a 	mov	r4,r16
    bb4c:	000c5f40 	call	c5f4 <__udivsi3>
    bb50:	9826943a 	slli	r19,r19,16
    bb54:	a0a9383a 	mul	r20,r20,r2
    bb58:	94bfffcc 	andi	r18,r18,65535
    bb5c:	94e4b03a 	or	r18,r18,r19
    bb60:	9500052e 	bgeu	r18,r20,bb78 <__udivdi3+0x12c>
    bb64:	8ca5883a 	add	r18,r17,r18
    bb68:	10ffffc4 	addi	r3,r2,-1
    bb6c:	9440f136 	bltu	r18,r17,bf34 <__udivdi3+0x4e8>
    bb70:	9500f02e 	bgeu	r18,r20,bf34 <__udivdi3+0x4e8>
    bb74:	10bfff84 	addi	r2,r2,-2
    bb78:	b00c943a 	slli	r6,r22,16
    bb7c:	0007883a 	mov	r3,zero
    bb80:	3084b03a 	or	r2,r6,r2
    bb84:	00005906 	br	bcec <__udivdi3+0x2a0>
    bb88:	29c05636 	bltu	r5,r7,bce4 <__udivdi3+0x298>
    bb8c:	00bfffd4 	movui	r2,65535
    bb90:	11c0622e 	bgeu	r2,r7,bd1c <__udivdi3+0x2d0>
    bb94:	00804034 	movhi	r2,256
    bb98:	10bfffc4 	addi	r2,r2,-1
    bb9c:	11c0ee36 	bltu	r2,r7,bf58 <__udivdi3+0x50c>
    bba0:	00800404 	movi	r2,16
    bba4:	3886d83a 	srl	r3,r7,r2
    bba8:	01000074 	movhi	r4,1
    bbac:	21077504 	addi	r4,r4,7636
    bbb0:	20c7883a 	add	r3,r4,r3
    bbb4:	18c00003 	ldbu	r3,0(r3)
    bbb8:	05400804 	movi	r21,32
    bbbc:	1885883a 	add	r2,r3,r2
    bbc0:	a8abc83a 	sub	r21,r21,r2
    bbc4:	a800621e 	bne	r21,zero,bd50 <__udivdi3+0x304>
    bbc8:	3c00e936 	bltu	r7,r16,bf70 <__udivdi3+0x524>
    bbcc:	9985403a 	cmpgeu	r2,r19,r6
    bbd0:	0007883a 	mov	r3,zero
    bbd4:	00004506 	br	bcec <__udivdi3+0x2a0>
    bbd8:	3000041e 	bne	r6,zero,bbec <__udivdi3+0x1a0>
    bbdc:	000b883a 	mov	r5,zero
    bbe0:	01000044 	movi	r4,1
    bbe4:	000c5f40 	call	c5f4 <__udivsi3>
    bbe8:	1023883a 	mov	r17,r2
    bbec:	00bfffd4 	movui	r2,65535
    bbf0:	14404e2e 	bgeu	r2,r17,bd2c <__udivdi3+0x2e0>
    bbf4:	00804034 	movhi	r2,256
    bbf8:	10bfffc4 	addi	r2,r2,-1
    bbfc:	1440d836 	bltu	r2,r17,bf60 <__udivdi3+0x514>
    bc00:	00800404 	movi	r2,16
    bc04:	8886d83a 	srl	r3,r17,r2
    bc08:	01000074 	movhi	r4,1
    bc0c:	21077504 	addi	r4,r4,7636
    bc10:	20c7883a 	add	r3,r4,r3
    bc14:	18c00003 	ldbu	r3,0(r3)
    bc18:	1885883a 	add	r2,r3,r2
    bc1c:	00c00804 	movi	r3,32
    bc20:	1887c83a 	sub	r3,r3,r2
    bc24:	18008f1e 	bne	r3,zero,be64 <__udivdi3+0x418>
    bc28:	882ad43a 	srli	r21,r17,16
    bc2c:	8461c83a 	sub	r16,r16,r17
    bc30:	8d3fffcc 	andi	r20,r17,65535
    bc34:	00c00044 	movi	r3,1
    bc38:	8009883a 	mov	r4,r16
    bc3c:	a80b883a 	mov	r5,r21
    bc40:	d8c00015 	stw	r3,0(sp)
    bc44:	000c6580 	call	c658 <__umodsi3>
    bc48:	8009883a 	mov	r4,r16
    bc4c:	a80b883a 	mov	r5,r21
    bc50:	1027883a 	mov	r19,r2
    bc54:	000c5f40 	call	c5f4 <__udivsi3>
    bc58:	9826943a 	slli	r19,r19,16
    bc5c:	9008d43a 	srli	r4,r18,16
    bc60:	1521383a 	mul	r16,r2,r20
    bc64:	102d883a 	mov	r22,r2
    bc68:	24c8b03a 	or	r4,r4,r19
    bc6c:	d8c00017 	ldw	r3,0(sp)
    bc70:	2400052e 	bgeu	r4,r16,bc88 <__udivdi3+0x23c>
    bc74:	2449883a 	add	r4,r4,r17
    bc78:	b0bfffc4 	addi	r2,r22,-1
    bc7c:	24400136 	bltu	r4,r17,bc84 <__udivdi3+0x238>
    bc80:	2400ca36 	bltu	r4,r16,bfac <__udivdi3+0x560>
    bc84:	102d883a 	mov	r22,r2
    bc88:	2421c83a 	sub	r16,r4,r16
    bc8c:	a80b883a 	mov	r5,r21
    bc90:	8009883a 	mov	r4,r16
    bc94:	d8c00015 	stw	r3,0(sp)
    bc98:	000c6580 	call	c658 <__umodsi3>
    bc9c:	1027883a 	mov	r19,r2
    bca0:	a80b883a 	mov	r5,r21
    bca4:	8009883a 	mov	r4,r16
    bca8:	000c5f40 	call	c5f4 <__udivsi3>
    bcac:	9826943a 	slli	r19,r19,16
    bcb0:	1529383a 	mul	r20,r2,r20
    bcb4:	94bfffcc 	andi	r18,r18,65535
    bcb8:	94e4b03a 	or	r18,r18,r19
    bcbc:	d8c00017 	ldw	r3,0(sp)
    bcc0:	9500052e 	bgeu	r18,r20,bcd8 <__udivdi3+0x28c>
    bcc4:	8ca5883a 	add	r18,r17,r18
    bcc8:	113fffc4 	addi	r4,r2,-1
    bccc:	94409736 	bltu	r18,r17,bf2c <__udivdi3+0x4e0>
    bcd0:	9500962e 	bgeu	r18,r20,bf2c <__udivdi3+0x4e0>
    bcd4:	10bfff84 	addi	r2,r2,-2
    bcd8:	b00c943a 	slli	r6,r22,16
    bcdc:	3084b03a 	or	r2,r6,r2
    bce0:	00000206 	br	bcec <__udivdi3+0x2a0>
    bce4:	0007883a 	mov	r3,zero
    bce8:	0005883a 	mov	r2,zero
    bcec:	dfc00a17 	ldw	ra,40(sp)
    bcf0:	df000917 	ldw	fp,36(sp)
    bcf4:	ddc00817 	ldw	r23,32(sp)
    bcf8:	dd800717 	ldw	r22,28(sp)
    bcfc:	dd400617 	ldw	r21,24(sp)
    bd00:	dd000517 	ldw	r20,20(sp)
    bd04:	dcc00417 	ldw	r19,16(sp)
    bd08:	dc800317 	ldw	r18,12(sp)
    bd0c:	dc400217 	ldw	r17,8(sp)
    bd10:	dc000117 	ldw	r16,4(sp)
    bd14:	dec00b04 	addi	sp,sp,44
    bd18:	f800283a 	ret
    bd1c:	00803fc4 	movi	r2,255
    bd20:	11c5803a 	cmpltu	r2,r2,r7
    bd24:	100490fa 	slli	r2,r2,3
    bd28:	003f9e06 	br	bba4 <__udivdi3+0x158>
    bd2c:	00803fc4 	movi	r2,255
    bd30:	1445803a 	cmpltu	r2,r2,r17
    bd34:	100490fa 	slli	r2,r2,3
    bd38:	003fb206 	br	bc04 <__udivdi3+0x1b8>
    bd3c:	00804034 	movhi	r2,256
    bd40:	10bfffc4 	addi	r2,r2,-1
    bd44:	11808836 	bltu	r2,r6,bf68 <__udivdi3+0x51c>
    bd48:	00800404 	movi	r2,16
    bd4c:	003f5606 	br	baa8 <__udivdi3+0x5c>
    bd50:	30aed83a 	srl	r23,r6,r2
    bd54:	3d4e983a 	sll	r7,r7,r21
    bd58:	80acd83a 	srl	r22,r16,r2
    bd5c:	9884d83a 	srl	r2,r19,r2
    bd60:	3deeb03a 	or	r23,r7,r23
    bd64:	b824d43a 	srli	r18,r23,16
    bd68:	8560983a 	sll	r16,r16,r21
    bd6c:	b009883a 	mov	r4,r22
    bd70:	900b883a 	mov	r5,r18
    bd74:	3568983a 	sll	r20,r6,r21
    bd78:	1420b03a 	or	r16,r2,r16
    bd7c:	000c6580 	call	c658 <__umodsi3>
    bd80:	b009883a 	mov	r4,r22
    bd84:	900b883a 	mov	r5,r18
    bd88:	1023883a 	mov	r17,r2
    bd8c:	000c5f40 	call	c5f4 <__udivsi3>
    bd90:	8808943a 	slli	r4,r17,16
    bd94:	bf3fffcc 	andi	fp,r23,65535
    bd98:	8006d43a 	srli	r3,r16,16
    bd9c:	e0a3383a 	mul	r17,fp,r2
    bda0:	100d883a 	mov	r6,r2
    bda4:	1906b03a 	or	r3,r3,r4
    bda8:	1c40042e 	bgeu	r3,r17,bdbc <__udivdi3+0x370>
    bdac:	1dc7883a 	add	r3,r3,r23
    bdb0:	10bfffc4 	addi	r2,r2,-1
    bdb4:	1dc0752e 	bgeu	r3,r23,bf8c <__udivdi3+0x540>
    bdb8:	100d883a 	mov	r6,r2
    bdbc:	1c63c83a 	sub	r17,r3,r17
    bdc0:	900b883a 	mov	r5,r18
    bdc4:	8809883a 	mov	r4,r17
    bdc8:	d9800015 	stw	r6,0(sp)
    bdcc:	000c6580 	call	c658 <__umodsi3>
    bdd0:	102d883a 	mov	r22,r2
    bdd4:	8809883a 	mov	r4,r17
    bdd8:	900b883a 	mov	r5,r18
    bddc:	000c5f40 	call	c5f4 <__udivsi3>
    bde0:	b02c943a 	slli	r22,r22,16
    bde4:	e089383a 	mul	r4,fp,r2
    bde8:	843fffcc 	andi	r16,r16,65535
    bdec:	85a0b03a 	or	r16,r16,r22
    bdf0:	d9800017 	ldw	r6,0(sp)
    bdf4:	8100042e 	bgeu	r16,r4,be08 <__udivdi3+0x3bc>
    bdf8:	85e1883a 	add	r16,r16,r23
    bdfc:	10ffffc4 	addi	r3,r2,-1
    be00:	85c05e2e 	bgeu	r16,r23,bf7c <__udivdi3+0x530>
    be04:	1805883a 	mov	r2,r3
    be08:	300c943a 	slli	r6,r6,16
    be0c:	a17fffcc 	andi	r5,r20,65535
    be10:	a028d43a 	srli	r20,r20,16
    be14:	3084b03a 	or	r2,r6,r2
    be18:	10ffffcc 	andi	r3,r2,65535
    be1c:	100cd43a 	srli	r6,r2,16
    be20:	194f383a 	mul	r7,r3,r5
    be24:	1d07383a 	mul	r3,r3,r20
    be28:	314b383a 	mul	r5,r6,r5
    be2c:	3810d43a 	srli	r8,r7,16
    be30:	8121c83a 	sub	r16,r16,r4
    be34:	1947883a 	add	r3,r3,r5
    be38:	40c7883a 	add	r3,r8,r3
    be3c:	350d383a 	mul	r6,r6,r20
    be40:	1940022e 	bgeu	r3,r5,be4c <__udivdi3+0x400>
    be44:	01000074 	movhi	r4,1
    be48:	310d883a 	add	r6,r6,r4
    be4c:	1828d43a 	srli	r20,r3,16
    be50:	a18d883a 	add	r6,r20,r6
    be54:	81803e36 	bltu	r16,r6,bf50 <__udivdi3+0x504>
    be58:	81803826 	beq	r16,r6,bf3c <__udivdi3+0x4f0>
    be5c:	0007883a 	mov	r3,zero
    be60:	003fa206 	br	bcec <__udivdi3+0x2a0>
    be64:	88e2983a 	sll	r17,r17,r3
    be68:	80a8d83a 	srl	r20,r16,r2
    be6c:	80e0983a 	sll	r16,r16,r3
    be70:	882ad43a 	srli	r21,r17,16
    be74:	9884d83a 	srl	r2,r19,r2
    be78:	a009883a 	mov	r4,r20
    be7c:	a80b883a 	mov	r5,r21
    be80:	142eb03a 	or	r23,r2,r16
    be84:	98e4983a 	sll	r18,r19,r3
    be88:	000c6580 	call	c658 <__umodsi3>
    be8c:	a009883a 	mov	r4,r20
    be90:	a80b883a 	mov	r5,r21
    be94:	1021883a 	mov	r16,r2
    be98:	000c5f40 	call	c5f4 <__udivsi3>
    be9c:	1039883a 	mov	fp,r2
    bea0:	8d3fffcc 	andi	r20,r17,65535
    bea4:	8020943a 	slli	r16,r16,16
    bea8:	b804d43a 	srli	r2,r23,16
    beac:	a72d383a 	mul	r22,r20,fp
    beb0:	1404b03a 	or	r2,r2,r16
    beb4:	1580062e 	bgeu	r2,r22,bed0 <__udivdi3+0x484>
    beb8:	1445883a 	add	r2,r2,r17
    bebc:	e0ffffc4 	addi	r3,fp,-1
    bec0:	14403836 	bltu	r2,r17,bfa4 <__udivdi3+0x558>
    bec4:	1580372e 	bgeu	r2,r22,bfa4 <__udivdi3+0x558>
    bec8:	e73fff84 	addi	fp,fp,-2
    becc:	1445883a 	add	r2,r2,r17
    bed0:	15adc83a 	sub	r22,r2,r22
    bed4:	a80b883a 	mov	r5,r21
    bed8:	b009883a 	mov	r4,r22
    bedc:	000c6580 	call	c658 <__umodsi3>
    bee0:	1027883a 	mov	r19,r2
    bee4:	b009883a 	mov	r4,r22
    bee8:	a80b883a 	mov	r5,r21
    beec:	000c5f40 	call	c5f4 <__udivsi3>
    bef0:	9826943a 	slli	r19,r19,16
    bef4:	a0a1383a 	mul	r16,r20,r2
    bef8:	b93fffcc 	andi	r4,r23,65535
    befc:	24c8b03a 	or	r4,r4,r19
    bf00:	2400062e 	bgeu	r4,r16,bf1c <__udivdi3+0x4d0>
    bf04:	2449883a 	add	r4,r4,r17
    bf08:	10ffffc4 	addi	r3,r2,-1
    bf0c:	24402336 	bltu	r4,r17,bf9c <__udivdi3+0x550>
    bf10:	2400222e 	bgeu	r4,r16,bf9c <__udivdi3+0x550>
    bf14:	10bfff84 	addi	r2,r2,-2
    bf18:	2449883a 	add	r4,r4,r17
    bf1c:	e038943a 	slli	fp,fp,16
    bf20:	2421c83a 	sub	r16,r4,r16
    bf24:	e086b03a 	or	r3,fp,r2
    bf28:	003f4306 	br	bc38 <__udivdi3+0x1ec>
    bf2c:	2005883a 	mov	r2,r4
    bf30:	003f6906 	br	bcd8 <__udivdi3+0x28c>
    bf34:	1805883a 	mov	r2,r3
    bf38:	003f0f06 	br	bb78 <__udivdi3+0x12c>
    bf3c:	1806943a 	slli	r3,r3,16
    bf40:	9d66983a 	sll	r19,r19,r21
    bf44:	39ffffcc 	andi	r7,r7,65535
    bf48:	19c7883a 	add	r3,r3,r7
    bf4c:	98ffc32e 	bgeu	r19,r3,be5c <__udivdi3+0x410>
    bf50:	10bfffc4 	addi	r2,r2,-1
    bf54:	003fc106 	br	be5c <__udivdi3+0x410>
    bf58:	00800604 	movi	r2,24
    bf5c:	003f1106 	br	bba4 <__udivdi3+0x158>
    bf60:	00800604 	movi	r2,24
    bf64:	003f2706 	br	bc04 <__udivdi3+0x1b8>
    bf68:	00800604 	movi	r2,24
    bf6c:	003ece06 	br	baa8 <__udivdi3+0x5c>
    bf70:	0007883a 	mov	r3,zero
    bf74:	00800044 	movi	r2,1
    bf78:	003f5c06 	br	bcec <__udivdi3+0x2a0>
    bf7c:	813fa12e 	bgeu	r16,r4,be04 <__udivdi3+0x3b8>
    bf80:	10bfff84 	addi	r2,r2,-2
    bf84:	85e1883a 	add	r16,r16,r23
    bf88:	003f9f06 	br	be08 <__udivdi3+0x3bc>
    bf8c:	1c7f8a2e 	bgeu	r3,r17,bdb8 <__udivdi3+0x36c>
    bf90:	31bfff84 	addi	r6,r6,-2
    bf94:	1dc7883a 	add	r3,r3,r23
    bf98:	003f8806 	br	bdbc <__udivdi3+0x370>
    bf9c:	1805883a 	mov	r2,r3
    bfa0:	003fde06 	br	bf1c <__udivdi3+0x4d0>
    bfa4:	1839883a 	mov	fp,r3
    bfa8:	003fc906 	br	bed0 <__udivdi3+0x484>
    bfac:	b5bfff84 	addi	r22,r22,-2
    bfb0:	2449883a 	add	r4,r4,r17
    bfb4:	003f3406 	br	bc88 <__udivdi3+0x23c>
    bfb8:	b5bfff84 	addi	r22,r22,-2
    bfbc:	1445883a 	add	r2,r2,r17
    bfc0:	003edb06 	br	bb30 <__udivdi3+0xe4>

0000bfc4 <__umoddi3>:
    bfc4:	defff404 	addi	sp,sp,-48
    bfc8:	df000a15 	stw	fp,40(sp)
    bfcc:	dc400315 	stw	r17,12(sp)
    bfd0:	dc000215 	stw	r16,8(sp)
    bfd4:	dfc00b15 	stw	ra,44(sp)
    bfd8:	ddc00915 	stw	r23,36(sp)
    bfdc:	dd800815 	stw	r22,32(sp)
    bfe0:	dd400715 	stw	r21,28(sp)
    bfe4:	dd000615 	stw	r20,24(sp)
    bfe8:	dcc00515 	stw	r19,20(sp)
    bfec:	dc800415 	stw	r18,16(sp)
    bff0:	2021883a 	mov	r16,r4
    bff4:	2823883a 	mov	r17,r5
    bff8:	2839883a 	mov	fp,r5
    bffc:	38003c1e 	bne	r7,zero,c0f0 <__umoddi3+0x12c>
    c000:	3027883a 	mov	r19,r6
    c004:	2029883a 	mov	r20,r4
    c008:	2980512e 	bgeu	r5,r6,c150 <__umoddi3+0x18c>
    c00c:	00bfffd4 	movui	r2,65535
    c010:	11809a36 	bltu	r2,r6,c27c <__umoddi3+0x2b8>
    c014:	01003fc4 	movi	r4,255
    c018:	2189803a 	cmpltu	r4,r4,r6
    c01c:	200890fa 	slli	r4,r4,3
    c020:	3104d83a 	srl	r2,r6,r4
    c024:	00c00074 	movhi	r3,1
    c028:	18c77504 	addi	r3,r3,7636
    c02c:	1885883a 	add	r2,r3,r2
    c030:	10c00003 	ldbu	r3,0(r2)
    c034:	00800804 	movi	r2,32
    c038:	1909883a 	add	r4,r3,r4
    c03c:	1125c83a 	sub	r18,r2,r4
    c040:	90000526 	beq	r18,zero,c058 <__umoddi3+0x94>
    c044:	8ca2983a 	sll	r17,r17,r18
    c048:	8108d83a 	srl	r4,r16,r4
    c04c:	34a6983a 	sll	r19,r6,r18
    c050:	84a8983a 	sll	r20,r16,r18
    c054:	2478b03a 	or	fp,r4,r17
    c058:	982ed43a 	srli	r23,r19,16
    c05c:	e009883a 	mov	r4,fp
    c060:	9dbfffcc 	andi	r22,r19,65535
    c064:	b80b883a 	mov	r5,r23
    c068:	000c6580 	call	c658 <__umodsi3>
    c06c:	e009883a 	mov	r4,fp
    c070:	b80b883a 	mov	r5,r23
    c074:	102b883a 	mov	r21,r2
    c078:	000c5f40 	call	c5f4 <__udivsi3>
    c07c:	a806943a 	slli	r3,r21,16
    c080:	a008d43a 	srli	r4,r20,16
    c084:	b085383a 	mul	r2,r22,r2
    c088:	20c8b03a 	or	r4,r4,r3
    c08c:	2080032e 	bgeu	r4,r2,c09c <__umoddi3+0xd8>
    c090:	24c9883a 	add	r4,r4,r19
    c094:	24c00136 	bltu	r4,r19,c09c <__umoddi3+0xd8>
    c098:	20811036 	bltu	r4,r2,c4dc <__umoddi3+0x518>
    c09c:	20abc83a 	sub	r21,r4,r2
    c0a0:	b80b883a 	mov	r5,r23
    c0a4:	a809883a 	mov	r4,r21
    c0a8:	000c6580 	call	c658 <__umodsi3>
    c0ac:	1023883a 	mov	r17,r2
    c0b0:	b80b883a 	mov	r5,r23
    c0b4:	a809883a 	mov	r4,r21
    c0b8:	000c5f40 	call	c5f4 <__udivsi3>
    c0bc:	8822943a 	slli	r17,r17,16
    c0c0:	b085383a 	mul	r2,r22,r2
    c0c4:	a0ffffcc 	andi	r3,r20,65535
    c0c8:	1c46b03a 	or	r3,r3,r17
    c0cc:	1880042e 	bgeu	r3,r2,c0e0 <__umoddi3+0x11c>
    c0d0:	1cc7883a 	add	r3,r3,r19
    c0d4:	1cc00236 	bltu	r3,r19,c0e0 <__umoddi3+0x11c>
    c0d8:	1880012e 	bgeu	r3,r2,c0e0 <__umoddi3+0x11c>
    c0dc:	1cc7883a 	add	r3,r3,r19
    c0e0:	1885c83a 	sub	r2,r3,r2
    c0e4:	1484d83a 	srl	r2,r2,r18
    c0e8:	0007883a 	mov	r3,zero
    c0ec:	00004f06 	br	c22c <__umoddi3+0x268>
    c0f0:	29c04c36 	bltu	r5,r7,c224 <__umoddi3+0x260>
    c0f4:	00bfffd4 	movui	r2,65535
    c0f8:	11c0582e 	bgeu	r2,r7,c25c <__umoddi3+0x298>
    c0fc:	00804034 	movhi	r2,256
    c100:	10bfffc4 	addi	r2,r2,-1
    c104:	11c0e736 	bltu	r2,r7,c4a4 <__umoddi3+0x4e0>
    c108:	01000404 	movi	r4,16
    c10c:	3904d83a 	srl	r2,r7,r4
    c110:	00c00074 	movhi	r3,1
    c114:	18c77504 	addi	r3,r3,7636
    c118:	1885883a 	add	r2,r3,r2
    c11c:	14c00003 	ldbu	r19,0(r2)
    c120:	00c00804 	movi	r3,32
    c124:	9927883a 	add	r19,r19,r4
    c128:	1ce9c83a 	sub	r20,r3,r19
    c12c:	a000581e 	bne	r20,zero,c290 <__umoddi3+0x2cc>
    c130:	3c400136 	bltu	r7,r17,c138 <__umoddi3+0x174>
    c134:	8180eb36 	bltu	r16,r6,c4e4 <__umoddi3+0x520>
    c138:	8185c83a 	sub	r2,r16,r6
    c13c:	89e3c83a 	sub	r17,r17,r7
    c140:	8089803a 	cmpltu	r4,r16,r2
    c144:	8939c83a 	sub	fp,r17,r4
    c148:	e007883a 	mov	r3,fp
    c14c:	00003706 	br	c22c <__umoddi3+0x268>
    c150:	3000041e 	bne	r6,zero,c164 <__umoddi3+0x1a0>
    c154:	000b883a 	mov	r5,zero
    c158:	01000044 	movi	r4,1
    c15c:	000c5f40 	call	c5f4 <__udivsi3>
    c160:	1027883a 	mov	r19,r2
    c164:	00bfffd4 	movui	r2,65535
    c168:	14c0402e 	bgeu	r2,r19,c26c <__umoddi3+0x2a8>
    c16c:	00804034 	movhi	r2,256
    c170:	10bfffc4 	addi	r2,r2,-1
    c174:	14c0cd36 	bltu	r2,r19,c4ac <__umoddi3+0x4e8>
    c178:	00800404 	movi	r2,16
    c17c:	9886d83a 	srl	r3,r19,r2
    c180:	01000074 	movhi	r4,1
    c184:	21077504 	addi	r4,r4,7636
    c188:	20c7883a 	add	r3,r4,r3
    c18c:	18c00003 	ldbu	r3,0(r3)
    c190:	1887883a 	add	r3,r3,r2
    c194:	00800804 	movi	r2,32
    c198:	10e5c83a 	sub	r18,r2,r3
    c19c:	9000901e 	bne	r18,zero,c3e0 <__umoddi3+0x41c>
    c1a0:	982cd43a 	srli	r22,r19,16
    c1a4:	8ce3c83a 	sub	r17,r17,r19
    c1a8:	9d7fffcc 	andi	r21,r19,65535
    c1ac:	b00b883a 	mov	r5,r22
    c1b0:	8809883a 	mov	r4,r17
    c1b4:	000c6580 	call	c658 <__umodsi3>
    c1b8:	8809883a 	mov	r4,r17
    c1bc:	b00b883a 	mov	r5,r22
    c1c0:	1021883a 	mov	r16,r2
    c1c4:	000c5f40 	call	c5f4 <__udivsi3>
    c1c8:	8006943a 	slli	r3,r16,16
    c1cc:	a008d43a 	srli	r4,r20,16
    c1d0:	1545383a 	mul	r2,r2,r21
    c1d4:	20c8b03a 	or	r4,r4,r3
    c1d8:	2080042e 	bgeu	r4,r2,c1ec <__umoddi3+0x228>
    c1dc:	24c9883a 	add	r4,r4,r19
    c1e0:	24c00236 	bltu	r4,r19,c1ec <__umoddi3+0x228>
    c1e4:	2080012e 	bgeu	r4,r2,c1ec <__umoddi3+0x228>
    c1e8:	24c9883a 	add	r4,r4,r19
    c1ec:	20a1c83a 	sub	r16,r4,r2
    c1f0:	b00b883a 	mov	r5,r22
    c1f4:	8009883a 	mov	r4,r16
    c1f8:	000c6580 	call	c658 <__umodsi3>
    c1fc:	1023883a 	mov	r17,r2
    c200:	b00b883a 	mov	r5,r22
    c204:	8009883a 	mov	r4,r16
    c208:	000c5f40 	call	c5f4 <__udivsi3>
    c20c:	8822943a 	slli	r17,r17,16
    c210:	1545383a 	mul	r2,r2,r21
    c214:	a53fffcc 	andi	r20,r20,65535
    c218:	a446b03a 	or	r3,r20,r17
    c21c:	18bfb02e 	bgeu	r3,r2,c0e0 <__umoddi3+0x11c>
    c220:	003fab06 	br	c0d0 <__umoddi3+0x10c>
    c224:	2005883a 	mov	r2,r4
    c228:	2807883a 	mov	r3,r5
    c22c:	dfc00b17 	ldw	ra,44(sp)
    c230:	df000a17 	ldw	fp,40(sp)
    c234:	ddc00917 	ldw	r23,36(sp)
    c238:	dd800817 	ldw	r22,32(sp)
    c23c:	dd400717 	ldw	r21,28(sp)
    c240:	dd000617 	ldw	r20,24(sp)
    c244:	dcc00517 	ldw	r19,20(sp)
    c248:	dc800417 	ldw	r18,16(sp)
    c24c:	dc400317 	ldw	r17,12(sp)
    c250:	dc000217 	ldw	r16,8(sp)
    c254:	dec00c04 	addi	sp,sp,48
    c258:	f800283a 	ret
    c25c:	04c03fc4 	movi	r19,255
    c260:	99c9803a 	cmpltu	r4,r19,r7
    c264:	200890fa 	slli	r4,r4,3
    c268:	003fa806 	br	c10c <__umoddi3+0x148>
    c26c:	00803fc4 	movi	r2,255
    c270:	14c5803a 	cmpltu	r2,r2,r19
    c274:	100490fa 	slli	r2,r2,3
    c278:	003fc006 	br	c17c <__umoddi3+0x1b8>
    c27c:	00804034 	movhi	r2,256
    c280:	10bfffc4 	addi	r2,r2,-1
    c284:	11808b36 	bltu	r2,r6,c4b4 <__umoddi3+0x4f0>
    c288:	01000404 	movi	r4,16
    c28c:	003f6406 	br	c020 <__umoddi3+0x5c>
    c290:	34c4d83a 	srl	r2,r6,r19
    c294:	3d0e983a 	sll	r7,r7,r20
    c298:	8cf8d83a 	srl	fp,r17,r19
    c29c:	8d10983a 	sll	r8,r17,r20
    c2a0:	38aab03a 	or	r21,r7,r2
    c2a4:	a82cd43a 	srli	r22,r21,16
    c2a8:	84e2d83a 	srl	r17,r16,r19
    c2ac:	e009883a 	mov	r4,fp
    c2b0:	b00b883a 	mov	r5,r22
    c2b4:	8a22b03a 	or	r17,r17,r8
    c2b8:	3524983a 	sll	r18,r6,r20
    c2bc:	000c6580 	call	c658 <__umodsi3>
    c2c0:	e009883a 	mov	r4,fp
    c2c4:	b00b883a 	mov	r5,r22
    c2c8:	102f883a 	mov	r23,r2
    c2cc:	000c5f40 	call	c5f4 <__udivsi3>
    c2d0:	100d883a 	mov	r6,r2
    c2d4:	b808943a 	slli	r4,r23,16
    c2d8:	aa3fffcc 	andi	r8,r21,65535
    c2dc:	8804d43a 	srli	r2,r17,16
    c2e0:	41af383a 	mul	r23,r8,r6
    c2e4:	8520983a 	sll	r16,r16,r20
    c2e8:	1104b03a 	or	r2,r2,r4
    c2ec:	15c0042e 	bgeu	r2,r23,c300 <__umoddi3+0x33c>
    c2f0:	1545883a 	add	r2,r2,r21
    c2f4:	30ffffc4 	addi	r3,r6,-1
    c2f8:	1540742e 	bgeu	r2,r21,c4cc <__umoddi3+0x508>
    c2fc:	180d883a 	mov	r6,r3
    c300:	15efc83a 	sub	r23,r2,r23
    c304:	b00b883a 	mov	r5,r22
    c308:	b809883a 	mov	r4,r23
    c30c:	d9800115 	stw	r6,4(sp)
    c310:	da000015 	stw	r8,0(sp)
    c314:	000c6580 	call	c658 <__umodsi3>
    c318:	b00b883a 	mov	r5,r22
    c31c:	b809883a 	mov	r4,r23
    c320:	1039883a 	mov	fp,r2
    c324:	000c5f40 	call	c5f4 <__udivsi3>
    c328:	da000017 	ldw	r8,0(sp)
    c32c:	e038943a 	slli	fp,fp,16
    c330:	100b883a 	mov	r5,r2
    c334:	4089383a 	mul	r4,r8,r2
    c338:	8a3fffcc 	andi	r8,r17,65535
    c33c:	4710b03a 	or	r8,r8,fp
    c340:	d9800117 	ldw	r6,4(sp)
    c344:	4100042e 	bgeu	r8,r4,c358 <__umoddi3+0x394>
    c348:	4551883a 	add	r8,r8,r21
    c34c:	10bfffc4 	addi	r2,r2,-1
    c350:	45405a2e 	bgeu	r8,r21,c4bc <__umoddi3+0x4f8>
    c354:	100b883a 	mov	r5,r2
    c358:	300c943a 	slli	r6,r6,16
    c35c:	91ffffcc 	andi	r7,r18,65535
    c360:	9004d43a 	srli	r2,r18,16
    c364:	314cb03a 	or	r6,r6,r5
    c368:	317fffcc 	andi	r5,r6,65535
    c36c:	300cd43a 	srli	r6,r6,16
    c370:	29d3383a 	mul	r9,r5,r7
    c374:	288b383a 	mul	r5,r5,r2
    c378:	31cf383a 	mul	r7,r6,r7
    c37c:	4806d43a 	srli	r3,r9,16
    c380:	4111c83a 	sub	r8,r8,r4
    c384:	29cb883a 	add	r5,r5,r7
    c388:	194b883a 	add	r5,r3,r5
    c38c:	3085383a 	mul	r2,r6,r2
    c390:	29c0022e 	bgeu	r5,r7,c39c <__umoddi3+0x3d8>
    c394:	00c00074 	movhi	r3,1
    c398:	10c5883a 	add	r2,r2,r3
    c39c:	2808d43a 	srli	r4,r5,16
    c3a0:	280a943a 	slli	r5,r5,16
    c3a4:	4a7fffcc 	andi	r9,r9,65535
    c3a8:	2085883a 	add	r2,r4,r2
    c3ac:	2a4b883a 	add	r5,r5,r9
    c3b0:	40803636 	bltu	r8,r2,c48c <__umoddi3+0x4c8>
    c3b4:	40804d26 	beq	r8,r2,c4ec <__umoddi3+0x528>
    c3b8:	4089c83a 	sub	r4,r8,r2
    c3bc:	280f883a 	mov	r7,r5
    c3c0:	81cfc83a 	sub	r7,r16,r7
    c3c4:	81c7803a 	cmpltu	r3,r16,r7
    c3c8:	20c7c83a 	sub	r3,r4,r3
    c3cc:	1cc4983a 	sll	r2,r3,r19
    c3d0:	3d0ed83a 	srl	r7,r7,r20
    c3d4:	1d06d83a 	srl	r3,r3,r20
    c3d8:	11c4b03a 	or	r2,r2,r7
    c3dc:	003f9306 	br	c22c <__umoddi3+0x268>
    c3e0:	9ca6983a 	sll	r19,r19,r18
    c3e4:	88e8d83a 	srl	r20,r17,r3
    c3e8:	80c4d83a 	srl	r2,r16,r3
    c3ec:	982cd43a 	srli	r22,r19,16
    c3f0:	8ca2983a 	sll	r17,r17,r18
    c3f4:	a009883a 	mov	r4,r20
    c3f8:	b00b883a 	mov	r5,r22
    c3fc:	1478b03a 	or	fp,r2,r17
    c400:	000c6580 	call	c658 <__umodsi3>
    c404:	a009883a 	mov	r4,r20
    c408:	b00b883a 	mov	r5,r22
    c40c:	1023883a 	mov	r17,r2
    c410:	000c5f40 	call	c5f4 <__udivsi3>
    c414:	9d7fffcc 	andi	r21,r19,65535
    c418:	880a943a 	slli	r5,r17,16
    c41c:	e008d43a 	srli	r4,fp,16
    c420:	a885383a 	mul	r2,r21,r2
    c424:	84a8983a 	sll	r20,r16,r18
    c428:	2148b03a 	or	r4,r4,r5
    c42c:	2080042e 	bgeu	r4,r2,c440 <__umoddi3+0x47c>
    c430:	24c9883a 	add	r4,r4,r19
    c434:	24c00236 	bltu	r4,r19,c440 <__umoddi3+0x47c>
    c438:	2080012e 	bgeu	r4,r2,c440 <__umoddi3+0x47c>
    c43c:	24c9883a 	add	r4,r4,r19
    c440:	20a3c83a 	sub	r17,r4,r2
    c444:	b00b883a 	mov	r5,r22
    c448:	8809883a 	mov	r4,r17
    c44c:	000c6580 	call	c658 <__umodsi3>
    c450:	102f883a 	mov	r23,r2
    c454:	8809883a 	mov	r4,r17
    c458:	b00b883a 	mov	r5,r22
    c45c:	000c5f40 	call	c5f4 <__udivsi3>
    c460:	b82e943a 	slli	r23,r23,16
    c464:	a885383a 	mul	r2,r21,r2
    c468:	e13fffcc 	andi	r4,fp,65535
    c46c:	25c8b03a 	or	r4,r4,r23
    c470:	2080042e 	bgeu	r4,r2,c484 <__umoddi3+0x4c0>
    c474:	24c9883a 	add	r4,r4,r19
    c478:	24c00236 	bltu	r4,r19,c484 <__umoddi3+0x4c0>
    c47c:	2080012e 	bgeu	r4,r2,c484 <__umoddi3+0x4c0>
    c480:	24c9883a 	add	r4,r4,r19
    c484:	20a3c83a 	sub	r17,r4,r2
    c488:	003f4806 	br	c1ac <__umoddi3+0x1e8>
    c48c:	2c8fc83a 	sub	r7,r5,r18
    c490:	1545c83a 	sub	r2,r2,r21
    c494:	29cb803a 	cmpltu	r5,r5,r7
    c498:	1145c83a 	sub	r2,r2,r5
    c49c:	4089c83a 	sub	r4,r8,r2
    c4a0:	003fc706 	br	c3c0 <__umoddi3+0x3fc>
    c4a4:	01000604 	movi	r4,24
    c4a8:	003f1806 	br	c10c <__umoddi3+0x148>
    c4ac:	00800604 	movi	r2,24
    c4b0:	003f3206 	br	c17c <__umoddi3+0x1b8>
    c4b4:	01000604 	movi	r4,24
    c4b8:	003ed906 	br	c020 <__umoddi3+0x5c>
    c4bc:	413fa52e 	bgeu	r8,r4,c354 <__umoddi3+0x390>
    c4c0:	297fff84 	addi	r5,r5,-2
    c4c4:	4551883a 	add	r8,r8,r21
    c4c8:	003fa306 	br	c358 <__umoddi3+0x394>
    c4cc:	15ff8b2e 	bgeu	r2,r23,c2fc <__umoddi3+0x338>
    c4d0:	31bfff84 	addi	r6,r6,-2
    c4d4:	1545883a 	add	r2,r2,r21
    c4d8:	003f8906 	br	c300 <__umoddi3+0x33c>
    c4dc:	24c9883a 	add	r4,r4,r19
    c4e0:	003eee06 	br	c09c <__umoddi3+0xd8>
    c4e4:	8005883a 	mov	r2,r16
    c4e8:	003f1706 	br	c148 <__umoddi3+0x184>
    c4ec:	817fe736 	bltu	r16,r5,c48c <__umoddi3+0x4c8>
    c4f0:	280f883a 	mov	r7,r5
    c4f4:	0009883a 	mov	r4,zero
    c4f8:	003fb106 	br	c3c0 <__umoddi3+0x3fc>

0000c4fc <__divsi3>:
    c4fc:	20001b16 	blt	r4,zero,c56c <__divsi3+0x70>
    c500:	000f883a 	mov	r7,zero
    c504:	28001616 	blt	r5,zero,c560 <__divsi3+0x64>
    c508:	200d883a 	mov	r6,r4
    c50c:	29001a2e 	bgeu	r5,r4,c578 <__divsi3+0x7c>
    c510:	00800804 	movi	r2,32
    c514:	00c00044 	movi	r3,1
    c518:	00000106 	br	c520 <__divsi3+0x24>
    c51c:	10000d26 	beq	r2,zero,c554 <__divsi3+0x58>
    c520:	294b883a 	add	r5,r5,r5
    c524:	10bfffc4 	addi	r2,r2,-1
    c528:	18c7883a 	add	r3,r3,r3
    c52c:	293ffb36 	bltu	r5,r4,c51c <__divsi3+0x20>
    c530:	0005883a 	mov	r2,zero
    c534:	18000726 	beq	r3,zero,c554 <__divsi3+0x58>
    c538:	0005883a 	mov	r2,zero
    c53c:	31400236 	bltu	r6,r5,c548 <__divsi3+0x4c>
    c540:	314dc83a 	sub	r6,r6,r5
    c544:	10c4b03a 	or	r2,r2,r3
    c548:	1806d07a 	srli	r3,r3,1
    c54c:	280ad07a 	srli	r5,r5,1
    c550:	183ffa1e 	bne	r3,zero,c53c <__divsi3+0x40>
    c554:	38000126 	beq	r7,zero,c55c <__divsi3+0x60>
    c558:	0085c83a 	sub	r2,zero,r2
    c55c:	f800283a 	ret
    c560:	014bc83a 	sub	r5,zero,r5
    c564:	39c0005c 	xori	r7,r7,1
    c568:	003fe706 	br	c508 <__divsi3+0xc>
    c56c:	0109c83a 	sub	r4,zero,r4
    c570:	01c00044 	movi	r7,1
    c574:	003fe306 	br	c504 <__divsi3+0x8>
    c578:	00c00044 	movi	r3,1
    c57c:	003fee06 	br	c538 <__divsi3+0x3c>

0000c580 <__modsi3>:
    c580:	20001716 	blt	r4,zero,c5e0 <__modsi3+0x60>
    c584:	000f883a 	mov	r7,zero
    c588:	2005883a 	mov	r2,r4
    c58c:	28001216 	blt	r5,zero,c5d8 <__modsi3+0x58>
    c590:	2900162e 	bgeu	r5,r4,c5ec <__modsi3+0x6c>
    c594:	01800804 	movi	r6,32
    c598:	00c00044 	movi	r3,1
    c59c:	00000106 	br	c5a4 <__modsi3+0x24>
    c5a0:	30000a26 	beq	r6,zero,c5cc <__modsi3+0x4c>
    c5a4:	294b883a 	add	r5,r5,r5
    c5a8:	31bfffc4 	addi	r6,r6,-1
    c5ac:	18c7883a 	add	r3,r3,r3
    c5b0:	293ffb36 	bltu	r5,r4,c5a0 <__modsi3+0x20>
    c5b4:	18000526 	beq	r3,zero,c5cc <__modsi3+0x4c>
    c5b8:	1806d07a 	srli	r3,r3,1
    c5bc:	11400136 	bltu	r2,r5,c5c4 <__modsi3+0x44>
    c5c0:	1145c83a 	sub	r2,r2,r5
    c5c4:	280ad07a 	srli	r5,r5,1
    c5c8:	183ffb1e 	bne	r3,zero,c5b8 <__modsi3+0x38>
    c5cc:	38000126 	beq	r7,zero,c5d4 <__modsi3+0x54>
    c5d0:	0085c83a 	sub	r2,zero,r2
    c5d4:	f800283a 	ret
    c5d8:	014bc83a 	sub	r5,zero,r5
    c5dc:	003fec06 	br	c590 <__modsi3+0x10>
    c5e0:	0109c83a 	sub	r4,zero,r4
    c5e4:	01c00044 	movi	r7,1
    c5e8:	003fe706 	br	c588 <__modsi3+0x8>
    c5ec:	00c00044 	movi	r3,1
    c5f0:	003ff106 	br	c5b8 <__modsi3+0x38>

0000c5f4 <__udivsi3>:
    c5f4:	200d883a 	mov	r6,r4
    c5f8:	2900152e 	bgeu	r5,r4,c650 <__udivsi3+0x5c>
    c5fc:	28001416 	blt	r5,zero,c650 <__udivsi3+0x5c>
    c600:	00800804 	movi	r2,32
    c604:	00c00044 	movi	r3,1
    c608:	00000206 	br	c614 <__udivsi3+0x20>
    c60c:	10000e26 	beq	r2,zero,c648 <__udivsi3+0x54>
    c610:	28000516 	blt	r5,zero,c628 <__udivsi3+0x34>
    c614:	294b883a 	add	r5,r5,r5
    c618:	10bfffc4 	addi	r2,r2,-1
    c61c:	18c7883a 	add	r3,r3,r3
    c620:	293ffa36 	bltu	r5,r4,c60c <__udivsi3+0x18>
    c624:	18000826 	beq	r3,zero,c648 <__udivsi3+0x54>
    c628:	0005883a 	mov	r2,zero
    c62c:	31400236 	bltu	r6,r5,c638 <__udivsi3+0x44>
    c630:	314dc83a 	sub	r6,r6,r5
    c634:	10c4b03a 	or	r2,r2,r3
    c638:	1806d07a 	srli	r3,r3,1
    c63c:	280ad07a 	srli	r5,r5,1
    c640:	183ffa1e 	bne	r3,zero,c62c <__udivsi3+0x38>
    c644:	f800283a 	ret
    c648:	0005883a 	mov	r2,zero
    c64c:	f800283a 	ret
    c650:	00c00044 	movi	r3,1
    c654:	003ff406 	br	c628 <__udivsi3+0x34>

0000c658 <__umodsi3>:
    c658:	2005883a 	mov	r2,r4
    c65c:	2900122e 	bgeu	r5,r4,c6a8 <__umodsi3+0x50>
    c660:	28001116 	blt	r5,zero,c6a8 <__umodsi3+0x50>
    c664:	01800804 	movi	r6,32
    c668:	00c00044 	movi	r3,1
    c66c:	00000206 	br	c678 <__umodsi3+0x20>
    c670:	30000c26 	beq	r6,zero,c6a4 <__umodsi3+0x4c>
    c674:	28000516 	blt	r5,zero,c68c <__umodsi3+0x34>
    c678:	294b883a 	add	r5,r5,r5
    c67c:	31bfffc4 	addi	r6,r6,-1
    c680:	18c7883a 	add	r3,r3,r3
    c684:	293ffa36 	bltu	r5,r4,c670 <__umodsi3+0x18>
    c688:	18000626 	beq	r3,zero,c6a4 <__umodsi3+0x4c>
    c68c:	1806d07a 	srli	r3,r3,1
    c690:	11400136 	bltu	r2,r5,c698 <__umodsi3+0x40>
    c694:	1145c83a 	sub	r2,r2,r5
    c698:	280ad07a 	srli	r5,r5,1
    c69c:	183ffb1e 	bne	r3,zero,c68c <__umodsi3+0x34>
    c6a0:	f800283a 	ret
    c6a4:	f800283a 	ret
    c6a8:	00c00044 	movi	r3,1
    c6ac:	003ff706 	br	c68c <__umodsi3+0x34>

0000c6b0 <__adddf3>:
    c6b0:	02c00434 	movhi	r11,16
    c6b4:	5affffc4 	addi	r11,r11,-1
    c6b8:	2806d7fa 	srli	r3,r5,31
    c6bc:	2ad4703a 	and	r10,r5,r11
    c6c0:	3ad2703a 	and	r9,r7,r11
    c6c4:	3804d53a 	srli	r2,r7,20
    c6c8:	3018d77a 	srli	r12,r6,29
    c6cc:	280ad53a 	srli	r5,r5,20
    c6d0:	501490fa 	slli	r10,r10,3
    c6d4:	2010d77a 	srli	r8,r4,29
    c6d8:	481290fa 	slli	r9,r9,3
    c6dc:	380ed7fa 	srli	r7,r7,31
    c6e0:	defffb04 	addi	sp,sp,-20
    c6e4:	dc800215 	stw	r18,8(sp)
    c6e8:	dc400115 	stw	r17,4(sp)
    c6ec:	dc000015 	stw	r16,0(sp)
    c6f0:	dfc00415 	stw	ra,16(sp)
    c6f4:	dcc00315 	stw	r19,12(sp)
    c6f8:	1c803fcc 	andi	r18,r3,255
    c6fc:	2c01ffcc 	andi	r16,r5,2047
    c700:	5210b03a 	or	r8,r10,r8
    c704:	202290fa 	slli	r17,r4,3
    c708:	1081ffcc 	andi	r2,r2,2047
    c70c:	4b12b03a 	or	r9,r9,r12
    c710:	300c90fa 	slli	r6,r6,3
    c714:	91c07526 	beq	r18,r7,c8ec <__adddf3+0x23c>
    c718:	8087c83a 	sub	r3,r16,r2
    c71c:	00c0ab0e 	bge	zero,r3,c9cc <__adddf3+0x31c>
    c720:	10002a1e 	bne	r2,zero,c7cc <__adddf3+0x11c>
    c724:	4984b03a 	or	r2,r9,r6
    c728:	1000961e 	bne	r2,zero,c984 <__adddf3+0x2d4>
    c72c:	888001cc 	andi	r2,r17,7
    c730:	10000726 	beq	r2,zero,c750 <__adddf3+0xa0>
    c734:	888003cc 	andi	r2,r17,15
    c738:	00c00104 	movi	r3,4
    c73c:	10c00426 	beq	r2,r3,c750 <__adddf3+0xa0>
    c740:	88c7883a 	add	r3,r17,r3
    c744:	1c63803a 	cmpltu	r17,r3,r17
    c748:	4451883a 	add	r8,r8,r17
    c74c:	1823883a 	mov	r17,r3
    c750:	4080202c 	andhi	r2,r8,128
    c754:	10005926 	beq	r2,zero,c8bc <__adddf3+0x20c>
    c758:	84000044 	addi	r16,r16,1
    c75c:	0081ffc4 	movi	r2,2047
    c760:	8080ba26 	beq	r16,r2,ca4c <__adddf3+0x39c>
    c764:	00bfe034 	movhi	r2,65408
    c768:	10bfffc4 	addi	r2,r2,-1
    c76c:	4090703a 	and	r8,r8,r2
    c770:	4004977a 	slli	r2,r8,29
    c774:	4010927a 	slli	r8,r8,9
    c778:	8822d0fa 	srli	r17,r17,3
    c77c:	8401ffcc 	andi	r16,r16,2047
    c780:	4010d33a 	srli	r8,r8,12
    c784:	9007883a 	mov	r3,r18
    c788:	1444b03a 	or	r2,r2,r17
    c78c:	8401ffcc 	andi	r16,r16,2047
    c790:	8020953a 	slli	r16,r16,20
    c794:	18c03fcc 	andi	r3,r3,255
    c798:	01000434 	movhi	r4,16
    c79c:	213fffc4 	addi	r4,r4,-1
    c7a0:	180697fa 	slli	r3,r3,31
    c7a4:	4110703a 	and	r8,r8,r4
    c7a8:	4410b03a 	or	r8,r8,r16
    c7ac:	40c6b03a 	or	r3,r8,r3
    c7b0:	dfc00417 	ldw	ra,16(sp)
    c7b4:	dcc00317 	ldw	r19,12(sp)
    c7b8:	dc800217 	ldw	r18,8(sp)
    c7bc:	dc400117 	ldw	r17,4(sp)
    c7c0:	dc000017 	ldw	r16,0(sp)
    c7c4:	dec00504 	addi	sp,sp,20
    c7c8:	f800283a 	ret
    c7cc:	0081ffc4 	movi	r2,2047
    c7d0:	80bfd626 	beq	r16,r2,c72c <__adddf3+0x7c>
    c7d4:	4a402034 	orhi	r9,r9,128
    c7d8:	00800e04 	movi	r2,56
    c7dc:	10c09f16 	blt	r2,r3,ca5c <__adddf3+0x3ac>
    c7e0:	008007c4 	movi	r2,31
    c7e4:	10c0c216 	blt	r2,r3,caf0 <__adddf3+0x440>
    c7e8:	00800804 	movi	r2,32
    c7ec:	10c5c83a 	sub	r2,r2,r3
    c7f0:	488a983a 	sll	r5,r9,r2
    c7f4:	30c8d83a 	srl	r4,r6,r3
    c7f8:	3084983a 	sll	r2,r6,r2
    c7fc:	48c6d83a 	srl	r3,r9,r3
    c800:	290cb03a 	or	r6,r5,r4
    c804:	1004c03a 	cmpne	r2,r2,zero
    c808:	308cb03a 	or	r6,r6,r2
    c80c:	898dc83a 	sub	r6,r17,r6
    c810:	89a3803a 	cmpltu	r17,r17,r6
    c814:	40d1c83a 	sub	r8,r8,r3
    c818:	4451c83a 	sub	r8,r8,r17
    c81c:	3023883a 	mov	r17,r6
    c820:	4080202c 	andhi	r2,r8,128
    c824:	10002326 	beq	r2,zero,c8b4 <__adddf3+0x204>
    c828:	04c02034 	movhi	r19,128
    c82c:	9cffffc4 	addi	r19,r19,-1
    c830:	44e6703a 	and	r19,r8,r19
    c834:	98007626 	beq	r19,zero,ca10 <__adddf3+0x360>
    c838:	9809883a 	mov	r4,r19
    c83c:	000ecb40 	call	ecb4 <__clzsi2>
    c840:	10fffe04 	addi	r3,r2,-8
    c844:	010007c4 	movi	r4,31
    c848:	20c07716 	blt	r4,r3,ca28 <__adddf3+0x378>
    c84c:	00800804 	movi	r2,32
    c850:	10c5c83a 	sub	r2,r2,r3
    c854:	8884d83a 	srl	r2,r17,r2
    c858:	98d0983a 	sll	r8,r19,r3
    c85c:	88e2983a 	sll	r17,r17,r3
    c860:	1204b03a 	or	r2,r2,r8
    c864:	1c007416 	blt	r3,r16,ca38 <__adddf3+0x388>
    c868:	1c21c83a 	sub	r16,r3,r16
    c86c:	82000044 	addi	r8,r16,1
    c870:	00c007c4 	movi	r3,31
    c874:	1a009116 	blt	r3,r8,cabc <__adddf3+0x40c>
    c878:	00c00804 	movi	r3,32
    c87c:	1a07c83a 	sub	r3,r3,r8
    c880:	8a08d83a 	srl	r4,r17,r8
    c884:	88e2983a 	sll	r17,r17,r3
    c888:	10c6983a 	sll	r3,r2,r3
    c88c:	1210d83a 	srl	r8,r2,r8
    c890:	8804c03a 	cmpne	r2,r17,zero
    c894:	1906b03a 	or	r3,r3,r4
    c898:	18a2b03a 	or	r17,r3,r2
    c89c:	0021883a 	mov	r16,zero
    c8a0:	003fa206 	br	c72c <__adddf3+0x7c>
    c8a4:	1890b03a 	or	r8,r3,r2
    c8a8:	40017d26 	beq	r8,zero,cea0 <__adddf3+0x7f0>
    c8ac:	1011883a 	mov	r8,r2
    c8b0:	1823883a 	mov	r17,r3
    c8b4:	888001cc 	andi	r2,r17,7
    c8b8:	103f9e1e 	bne	r2,zero,c734 <__adddf3+0x84>
    c8bc:	4004977a 	slli	r2,r8,29
    c8c0:	8822d0fa 	srli	r17,r17,3
    c8c4:	4010d0fa 	srli	r8,r8,3
    c8c8:	9007883a 	mov	r3,r18
    c8cc:	1444b03a 	or	r2,r2,r17
    c8d0:	0101ffc4 	movi	r4,2047
    c8d4:	81002426 	beq	r16,r4,c968 <__adddf3+0x2b8>
    c8d8:	8120703a 	and	r16,r16,r4
    c8dc:	01000434 	movhi	r4,16
    c8e0:	213fffc4 	addi	r4,r4,-1
    c8e4:	4110703a 	and	r8,r8,r4
    c8e8:	003fa806 	br	c78c <__adddf3+0xdc>
    c8ec:	8089c83a 	sub	r4,r16,r2
    c8f0:	01005e0e 	bge	zero,r4,ca6c <__adddf3+0x3bc>
    c8f4:	10002b26 	beq	r2,zero,c9a4 <__adddf3+0x2f4>
    c8f8:	0081ffc4 	movi	r2,2047
    c8fc:	80bf8b26 	beq	r16,r2,c72c <__adddf3+0x7c>
    c900:	4a402034 	orhi	r9,r9,128
    c904:	00800e04 	movi	r2,56
    c908:	1100a40e 	bge	r2,r4,cb9c <__adddf3+0x4ec>
    c90c:	498cb03a 	or	r6,r9,r6
    c910:	300ac03a 	cmpne	r5,r6,zero
    c914:	0013883a 	mov	r9,zero
    c918:	2c4b883a 	add	r5,r5,r17
    c91c:	2c63803a 	cmpltu	r17,r5,r17
    c920:	4a11883a 	add	r8,r9,r8
    c924:	8a11883a 	add	r8,r17,r8
    c928:	2823883a 	mov	r17,r5
    c92c:	4080202c 	andhi	r2,r8,128
    c930:	103fe026 	beq	r2,zero,c8b4 <__adddf3+0x204>
    c934:	84000044 	addi	r16,r16,1
    c938:	0081ffc4 	movi	r2,2047
    c93c:	8080d226 	beq	r16,r2,cc88 <__adddf3+0x5d8>
    c940:	00bfe034 	movhi	r2,65408
    c944:	10bfffc4 	addi	r2,r2,-1
    c948:	4090703a 	and	r8,r8,r2
    c94c:	880ad07a 	srli	r5,r17,1
    c950:	400897fa 	slli	r4,r8,31
    c954:	88c0004c 	andi	r3,r17,1
    c958:	28e2b03a 	or	r17,r5,r3
    c95c:	4010d07a 	srli	r8,r8,1
    c960:	2462b03a 	or	r17,r4,r17
    c964:	003f7106 	br	c72c <__adddf3+0x7c>
    c968:	4088b03a 	or	r4,r8,r2
    c96c:	20014526 	beq	r4,zero,ce84 <__adddf3+0x7d4>
    c970:	01000434 	movhi	r4,16
    c974:	42000234 	orhi	r8,r8,8
    c978:	213fffc4 	addi	r4,r4,-1
    c97c:	4110703a 	and	r8,r8,r4
    c980:	003f8206 	br	c78c <__adddf3+0xdc>
    c984:	18ffffc4 	addi	r3,r3,-1
    c988:	1800491e 	bne	r3,zero,cab0 <__adddf3+0x400>
    c98c:	898bc83a 	sub	r5,r17,r6
    c990:	8963803a 	cmpltu	r17,r17,r5
    c994:	4251c83a 	sub	r8,r8,r9
    c998:	4451c83a 	sub	r8,r8,r17
    c99c:	2823883a 	mov	r17,r5
    c9a0:	003f9f06 	br	c820 <__adddf3+0x170>
    c9a4:	4984b03a 	or	r2,r9,r6
    c9a8:	103f6026 	beq	r2,zero,c72c <__adddf3+0x7c>
    c9ac:	213fffc4 	addi	r4,r4,-1
    c9b0:	2000931e 	bne	r4,zero,cc00 <__adddf3+0x550>
    c9b4:	898d883a 	add	r6,r17,r6
    c9b8:	3463803a 	cmpltu	r17,r6,r17
    c9bc:	4251883a 	add	r8,r8,r9
    c9c0:	8a11883a 	add	r8,r17,r8
    c9c4:	3023883a 	mov	r17,r6
    c9c8:	003fd806 	br	c92c <__adddf3+0x27c>
    c9cc:	1800541e 	bne	r3,zero,cb20 <__adddf3+0x470>
    c9d0:	80800044 	addi	r2,r16,1
    c9d4:	1081ffcc 	andi	r2,r2,2047
    c9d8:	00c00044 	movi	r3,1
    c9dc:	1880a00e 	bge	r3,r2,cc60 <__adddf3+0x5b0>
    c9e0:	8989c83a 	sub	r4,r17,r6
    c9e4:	8905803a 	cmpltu	r2,r17,r4
    c9e8:	4267c83a 	sub	r19,r8,r9
    c9ec:	98a7c83a 	sub	r19,r19,r2
    c9f0:	9880202c 	andhi	r2,r19,128
    c9f4:	10006326 	beq	r2,zero,cb84 <__adddf3+0x4d4>
    c9f8:	3463c83a 	sub	r17,r6,r17
    c9fc:	4a07c83a 	sub	r3,r9,r8
    ca00:	344d803a 	cmpltu	r6,r6,r17
    ca04:	19a7c83a 	sub	r19,r3,r6
    ca08:	3825883a 	mov	r18,r7
    ca0c:	983f8a1e 	bne	r19,zero,c838 <__adddf3+0x188>
    ca10:	8809883a 	mov	r4,r17
    ca14:	000ecb40 	call	ecb4 <__clzsi2>
    ca18:	10800804 	addi	r2,r2,32
    ca1c:	10fffe04 	addi	r3,r2,-8
    ca20:	010007c4 	movi	r4,31
    ca24:	20ff890e 	bge	r4,r3,c84c <__adddf3+0x19c>
    ca28:	10bff604 	addi	r2,r2,-40
    ca2c:	8884983a 	sll	r2,r17,r2
    ca30:	0023883a 	mov	r17,zero
    ca34:	1c3f8c0e 	bge	r3,r16,c868 <__adddf3+0x1b8>
    ca38:	023fe034 	movhi	r8,65408
    ca3c:	423fffc4 	addi	r8,r8,-1
    ca40:	80e1c83a 	sub	r16,r16,r3
    ca44:	1210703a 	and	r8,r2,r8
    ca48:	003f3806 	br	c72c <__adddf3+0x7c>
    ca4c:	9007883a 	mov	r3,r18
    ca50:	0011883a 	mov	r8,zero
    ca54:	0005883a 	mov	r2,zero
    ca58:	003f4c06 	br	c78c <__adddf3+0xdc>
    ca5c:	498cb03a 	or	r6,r9,r6
    ca60:	300cc03a 	cmpne	r6,r6,zero
    ca64:	0007883a 	mov	r3,zero
    ca68:	003f6806 	br	c80c <__adddf3+0x15c>
    ca6c:	20009c1e 	bne	r4,zero,cce0 <__adddf3+0x630>
    ca70:	80800044 	addi	r2,r16,1
    ca74:	1141ffcc 	andi	r5,r2,2047
    ca78:	01000044 	movi	r4,1
    ca7c:	2140670e 	bge	r4,r5,cc1c <__adddf3+0x56c>
    ca80:	0101ffc4 	movi	r4,2047
    ca84:	11007f26 	beq	r2,r4,cc84 <__adddf3+0x5d4>
    ca88:	898d883a 	add	r6,r17,r6
    ca8c:	4247883a 	add	r3,r8,r9
    ca90:	3451803a 	cmpltu	r8,r6,r17
    ca94:	40d1883a 	add	r8,r8,r3
    ca98:	402297fa 	slli	r17,r8,31
    ca9c:	300cd07a 	srli	r6,r6,1
    caa0:	4010d07a 	srli	r8,r8,1
    caa4:	1021883a 	mov	r16,r2
    caa8:	89a2b03a 	or	r17,r17,r6
    caac:	003f1f06 	br	c72c <__adddf3+0x7c>
    cab0:	0081ffc4 	movi	r2,2047
    cab4:	80bf481e 	bne	r16,r2,c7d8 <__adddf3+0x128>
    cab8:	003f1c06 	br	c72c <__adddf3+0x7c>
    cabc:	843ff844 	addi	r16,r16,-31
    cac0:	01000804 	movi	r4,32
    cac4:	1406d83a 	srl	r3,r2,r16
    cac8:	41005026 	beq	r8,r4,cc0c <__adddf3+0x55c>
    cacc:	01001004 	movi	r4,64
    cad0:	2211c83a 	sub	r8,r4,r8
    cad4:	1204983a 	sll	r2,r2,r8
    cad8:	88a2b03a 	or	r17,r17,r2
    cadc:	8822c03a 	cmpne	r17,r17,zero
    cae0:	1c62b03a 	or	r17,r3,r17
    cae4:	0011883a 	mov	r8,zero
    cae8:	0021883a 	mov	r16,zero
    caec:	003f7106 	br	c8b4 <__adddf3+0x204>
    caf0:	193ff804 	addi	r4,r3,-32
    caf4:	00800804 	movi	r2,32
    caf8:	4908d83a 	srl	r4,r9,r4
    cafc:	18804526 	beq	r3,r2,cc14 <__adddf3+0x564>
    cb00:	00801004 	movi	r2,64
    cb04:	10c5c83a 	sub	r2,r2,r3
    cb08:	4886983a 	sll	r3,r9,r2
    cb0c:	198cb03a 	or	r6,r3,r6
    cb10:	300cc03a 	cmpne	r6,r6,zero
    cb14:	218cb03a 	or	r6,r4,r6
    cb18:	0007883a 	mov	r3,zero
    cb1c:	003f3b06 	br	c80c <__adddf3+0x15c>
    cb20:	80002a26 	beq	r16,zero,cbcc <__adddf3+0x51c>
    cb24:	0101ffc4 	movi	r4,2047
    cb28:	11006826 	beq	r2,r4,cccc <__adddf3+0x61c>
    cb2c:	00c7c83a 	sub	r3,zero,r3
    cb30:	42002034 	orhi	r8,r8,128
    cb34:	01000e04 	movi	r4,56
    cb38:	20c07c16 	blt	r4,r3,cd2c <__adddf3+0x67c>
    cb3c:	010007c4 	movi	r4,31
    cb40:	20c0da16 	blt	r4,r3,ceac <__adddf3+0x7fc>
    cb44:	01000804 	movi	r4,32
    cb48:	20c9c83a 	sub	r4,r4,r3
    cb4c:	4114983a 	sll	r10,r8,r4
    cb50:	88cad83a 	srl	r5,r17,r3
    cb54:	8908983a 	sll	r4,r17,r4
    cb58:	40c6d83a 	srl	r3,r8,r3
    cb5c:	5162b03a 	or	r17,r10,r5
    cb60:	2008c03a 	cmpne	r4,r4,zero
    cb64:	8922b03a 	or	r17,r17,r4
    cb68:	3463c83a 	sub	r17,r6,r17
    cb6c:	48c7c83a 	sub	r3,r9,r3
    cb70:	344d803a 	cmpltu	r6,r6,r17
    cb74:	1991c83a 	sub	r8,r3,r6
    cb78:	1021883a 	mov	r16,r2
    cb7c:	3825883a 	mov	r18,r7
    cb80:	003f2706 	br	c820 <__adddf3+0x170>
    cb84:	24d0b03a 	or	r8,r4,r19
    cb88:	40001b1e 	bne	r8,zero,cbf8 <__adddf3+0x548>
    cb8c:	0005883a 	mov	r2,zero
    cb90:	0007883a 	mov	r3,zero
    cb94:	0021883a 	mov	r16,zero
    cb98:	003f4d06 	br	c8d0 <__adddf3+0x220>
    cb9c:	008007c4 	movi	r2,31
    cba0:	11003c16 	blt	r2,r4,cc94 <__adddf3+0x5e4>
    cba4:	00800804 	movi	r2,32
    cba8:	1105c83a 	sub	r2,r2,r4
    cbac:	488e983a 	sll	r7,r9,r2
    cbb0:	310ad83a 	srl	r5,r6,r4
    cbb4:	3084983a 	sll	r2,r6,r2
    cbb8:	4912d83a 	srl	r9,r9,r4
    cbbc:	394ab03a 	or	r5,r7,r5
    cbc0:	1004c03a 	cmpne	r2,r2,zero
    cbc4:	288ab03a 	or	r5,r5,r2
    cbc8:	003f5306 	br	c918 <__adddf3+0x268>
    cbcc:	4448b03a 	or	r4,r8,r17
    cbd0:	20003e26 	beq	r4,zero,cccc <__adddf3+0x61c>
    cbd4:	00c6303a 	nor	r3,zero,r3
    cbd8:	18003a1e 	bne	r3,zero,ccc4 <__adddf3+0x614>
    cbdc:	3463c83a 	sub	r17,r6,r17
    cbe0:	4a07c83a 	sub	r3,r9,r8
    cbe4:	344d803a 	cmpltu	r6,r6,r17
    cbe8:	1991c83a 	sub	r8,r3,r6
    cbec:	1021883a 	mov	r16,r2
    cbf0:	3825883a 	mov	r18,r7
    cbf4:	003f0a06 	br	c820 <__adddf3+0x170>
    cbf8:	2023883a 	mov	r17,r4
    cbfc:	003f0d06 	br	c834 <__adddf3+0x184>
    cc00:	0081ffc4 	movi	r2,2047
    cc04:	80bf3f1e 	bne	r16,r2,c904 <__adddf3+0x254>
    cc08:	003ec806 	br	c72c <__adddf3+0x7c>
    cc0c:	0005883a 	mov	r2,zero
    cc10:	003fb106 	br	cad8 <__adddf3+0x428>
    cc14:	0007883a 	mov	r3,zero
    cc18:	003fbc06 	br	cb0c <__adddf3+0x45c>
    cc1c:	4444b03a 	or	r2,r8,r17
    cc20:	8000871e 	bne	r16,zero,ce40 <__adddf3+0x790>
    cc24:	1000ba26 	beq	r2,zero,cf10 <__adddf3+0x860>
    cc28:	4984b03a 	or	r2,r9,r6
    cc2c:	103ebf26 	beq	r2,zero,c72c <__adddf3+0x7c>
    cc30:	8985883a 	add	r2,r17,r6
    cc34:	4247883a 	add	r3,r8,r9
    cc38:	1451803a 	cmpltu	r8,r2,r17
    cc3c:	40d1883a 	add	r8,r8,r3
    cc40:	40c0202c 	andhi	r3,r8,128
    cc44:	1023883a 	mov	r17,r2
    cc48:	183f1a26 	beq	r3,zero,c8b4 <__adddf3+0x204>
    cc4c:	00bfe034 	movhi	r2,65408
    cc50:	10bfffc4 	addi	r2,r2,-1
    cc54:	2021883a 	mov	r16,r4
    cc58:	4090703a 	and	r8,r8,r2
    cc5c:	003eb306 	br	c72c <__adddf3+0x7c>
    cc60:	4444b03a 	or	r2,r8,r17
    cc64:	8000291e 	bne	r16,zero,cd0c <__adddf3+0x65c>
    cc68:	10004b1e 	bne	r2,zero,cd98 <__adddf3+0x6e8>
    cc6c:	4990b03a 	or	r8,r9,r6
    cc70:	40008b26 	beq	r8,zero,cea0 <__adddf3+0x7f0>
    cc74:	4811883a 	mov	r8,r9
    cc78:	3023883a 	mov	r17,r6
    cc7c:	3825883a 	mov	r18,r7
    cc80:	003eaa06 	br	c72c <__adddf3+0x7c>
    cc84:	1021883a 	mov	r16,r2
    cc88:	0011883a 	mov	r8,zero
    cc8c:	0005883a 	mov	r2,zero
    cc90:	003f0f06 	br	c8d0 <__adddf3+0x220>
    cc94:	217ff804 	addi	r5,r4,-32
    cc98:	00800804 	movi	r2,32
    cc9c:	494ad83a 	srl	r5,r9,r5
    cca0:	20807d26 	beq	r4,r2,ce98 <__adddf3+0x7e8>
    cca4:	00801004 	movi	r2,64
    cca8:	1109c83a 	sub	r4,r2,r4
    ccac:	4912983a 	sll	r9,r9,r4
    ccb0:	498cb03a 	or	r6,r9,r6
    ccb4:	300cc03a 	cmpne	r6,r6,zero
    ccb8:	298ab03a 	or	r5,r5,r6
    ccbc:	0013883a 	mov	r9,zero
    ccc0:	003f1506 	br	c918 <__adddf3+0x268>
    ccc4:	0101ffc4 	movi	r4,2047
    ccc8:	113f9a1e 	bne	r2,r4,cb34 <__adddf3+0x484>
    cccc:	4811883a 	mov	r8,r9
    ccd0:	3023883a 	mov	r17,r6
    ccd4:	1021883a 	mov	r16,r2
    ccd8:	3825883a 	mov	r18,r7
    ccdc:	003e9306 	br	c72c <__adddf3+0x7c>
    cce0:	8000161e 	bne	r16,zero,cd3c <__adddf3+0x68c>
    cce4:	444ab03a 	or	r5,r8,r17
    cce8:	28005126 	beq	r5,zero,ce30 <__adddf3+0x780>
    ccec:	0108303a 	nor	r4,zero,r4
    ccf0:	20004d1e 	bne	r4,zero,ce28 <__adddf3+0x778>
    ccf4:	89a3883a 	add	r17,r17,r6
    ccf8:	4253883a 	add	r9,r8,r9
    ccfc:	898d803a 	cmpltu	r6,r17,r6
    cd00:	3251883a 	add	r8,r6,r9
    cd04:	1021883a 	mov	r16,r2
    cd08:	003f0806 	br	c92c <__adddf3+0x27c>
    cd0c:	1000301e 	bne	r2,zero,cdd0 <__adddf3+0x720>
    cd10:	4984b03a 	or	r2,r9,r6
    cd14:	10007126 	beq	r2,zero,cedc <__adddf3+0x82c>
    cd18:	4811883a 	mov	r8,r9
    cd1c:	3023883a 	mov	r17,r6
    cd20:	3825883a 	mov	r18,r7
    cd24:	0401ffc4 	movi	r16,2047
    cd28:	003e8006 	br	c72c <__adddf3+0x7c>
    cd2c:	4462b03a 	or	r17,r8,r17
    cd30:	8822c03a 	cmpne	r17,r17,zero
    cd34:	0007883a 	mov	r3,zero
    cd38:	003f8b06 	br	cb68 <__adddf3+0x4b8>
    cd3c:	0141ffc4 	movi	r5,2047
    cd40:	11403b26 	beq	r2,r5,ce30 <__adddf3+0x780>
    cd44:	0109c83a 	sub	r4,zero,r4
    cd48:	42002034 	orhi	r8,r8,128
    cd4c:	01400e04 	movi	r5,56
    cd50:	29006716 	blt	r5,r4,cef0 <__adddf3+0x840>
    cd54:	014007c4 	movi	r5,31
    cd58:	29007016 	blt	r5,r4,cf1c <__adddf3+0x86c>
    cd5c:	01400804 	movi	r5,32
    cd60:	290bc83a 	sub	r5,r5,r4
    cd64:	4154983a 	sll	r10,r8,r5
    cd68:	890ed83a 	srl	r7,r17,r4
    cd6c:	894a983a 	sll	r5,r17,r5
    cd70:	4108d83a 	srl	r4,r8,r4
    cd74:	51e2b03a 	or	r17,r10,r7
    cd78:	280ac03a 	cmpne	r5,r5,zero
    cd7c:	8962b03a 	or	r17,r17,r5
    cd80:	89a3883a 	add	r17,r17,r6
    cd84:	2253883a 	add	r9,r4,r9
    cd88:	898d803a 	cmpltu	r6,r17,r6
    cd8c:	3251883a 	add	r8,r6,r9
    cd90:	1021883a 	mov	r16,r2
    cd94:	003ee506 	br	c92c <__adddf3+0x27c>
    cd98:	4984b03a 	or	r2,r9,r6
    cd9c:	103e6326 	beq	r2,zero,c72c <__adddf3+0x7c>
    cda0:	8987c83a 	sub	r3,r17,r6
    cda4:	88c9803a 	cmpltu	r4,r17,r3
    cda8:	4245c83a 	sub	r2,r8,r9
    cdac:	1105c83a 	sub	r2,r2,r4
    cdb0:	1100202c 	andhi	r4,r2,128
    cdb4:	203ebb26 	beq	r4,zero,c8a4 <__adddf3+0x1f4>
    cdb8:	3463c83a 	sub	r17,r6,r17
    cdbc:	4a07c83a 	sub	r3,r9,r8
    cdc0:	344d803a 	cmpltu	r6,r6,r17
    cdc4:	1991c83a 	sub	r8,r3,r6
    cdc8:	3825883a 	mov	r18,r7
    cdcc:	003e5706 	br	c72c <__adddf3+0x7c>
    cdd0:	4984b03a 	or	r2,r9,r6
    cdd4:	10002e26 	beq	r2,zero,ce90 <__adddf3+0x7e0>
    cdd8:	4004d0fa 	srli	r2,r8,3
    cddc:	8822d0fa 	srli	r17,r17,3
    cde0:	4010977a 	slli	r8,r8,29
    cde4:	10c0022c 	andhi	r3,r2,8
    cde8:	4462b03a 	or	r17,r8,r17
    cdec:	18000826 	beq	r3,zero,ce10 <__adddf3+0x760>
    cdf0:	4808d0fa 	srli	r4,r9,3
    cdf4:	20c0022c 	andhi	r3,r4,8
    cdf8:	1800051e 	bne	r3,zero,ce10 <__adddf3+0x760>
    cdfc:	300cd0fa 	srli	r6,r6,3
    ce00:	4806977a 	slli	r3,r9,29
    ce04:	2005883a 	mov	r2,r4
    ce08:	3825883a 	mov	r18,r7
    ce0c:	19a2b03a 	or	r17,r3,r6
    ce10:	8810d77a 	srli	r8,r17,29
    ce14:	100490fa 	slli	r2,r2,3
    ce18:	882290fa 	slli	r17,r17,3
    ce1c:	0401ffc4 	movi	r16,2047
    ce20:	4090b03a 	or	r8,r8,r2
    ce24:	003e4106 	br	c72c <__adddf3+0x7c>
    ce28:	0141ffc4 	movi	r5,2047
    ce2c:	117fc71e 	bne	r2,r5,cd4c <__adddf3+0x69c>
    ce30:	4811883a 	mov	r8,r9
    ce34:	3023883a 	mov	r17,r6
    ce38:	1021883a 	mov	r16,r2
    ce3c:	003e3b06 	br	c72c <__adddf3+0x7c>
    ce40:	10002f26 	beq	r2,zero,cf00 <__adddf3+0x850>
    ce44:	4984b03a 	or	r2,r9,r6
    ce48:	10001126 	beq	r2,zero,ce90 <__adddf3+0x7e0>
    ce4c:	4004d0fa 	srli	r2,r8,3
    ce50:	8822d0fa 	srli	r17,r17,3
    ce54:	4010977a 	slli	r8,r8,29
    ce58:	10c0022c 	andhi	r3,r2,8
    ce5c:	4462b03a 	or	r17,r8,r17
    ce60:	183feb26 	beq	r3,zero,ce10 <__adddf3+0x760>
    ce64:	4808d0fa 	srli	r4,r9,3
    ce68:	20c0022c 	andhi	r3,r4,8
    ce6c:	183fe81e 	bne	r3,zero,ce10 <__adddf3+0x760>
    ce70:	300cd0fa 	srli	r6,r6,3
    ce74:	4806977a 	slli	r3,r9,29
    ce78:	2005883a 	mov	r2,r4
    ce7c:	19a2b03a 	or	r17,r3,r6
    ce80:	003fe306 	br	ce10 <__adddf3+0x760>
    ce84:	0011883a 	mov	r8,zero
    ce88:	0005883a 	mov	r2,zero
    ce8c:	003e3f06 	br	c78c <__adddf3+0xdc>
    ce90:	0401ffc4 	movi	r16,2047
    ce94:	003e2506 	br	c72c <__adddf3+0x7c>
    ce98:	0013883a 	mov	r9,zero
    ce9c:	003f8406 	br	ccb0 <__adddf3+0x600>
    cea0:	0005883a 	mov	r2,zero
    cea4:	0007883a 	mov	r3,zero
    cea8:	003e8906 	br	c8d0 <__adddf3+0x220>
    ceac:	197ff804 	addi	r5,r3,-32
    ceb0:	01000804 	movi	r4,32
    ceb4:	414ad83a 	srl	r5,r8,r5
    ceb8:	19002426 	beq	r3,r4,cf4c <__adddf3+0x89c>
    cebc:	01001004 	movi	r4,64
    cec0:	20c7c83a 	sub	r3,r4,r3
    cec4:	40c6983a 	sll	r3,r8,r3
    cec8:	1c46b03a 	or	r3,r3,r17
    cecc:	1806c03a 	cmpne	r3,r3,zero
    ced0:	28e2b03a 	or	r17,r5,r3
    ced4:	0007883a 	mov	r3,zero
    ced8:	003f2306 	br	cb68 <__adddf3+0x4b8>
    cedc:	0007883a 	mov	r3,zero
    cee0:	5811883a 	mov	r8,r11
    cee4:	00bfffc4 	movi	r2,-1
    cee8:	0401ffc4 	movi	r16,2047
    ceec:	003e7806 	br	c8d0 <__adddf3+0x220>
    cef0:	4462b03a 	or	r17,r8,r17
    cef4:	8822c03a 	cmpne	r17,r17,zero
    cef8:	0009883a 	mov	r4,zero
    cefc:	003fa006 	br	cd80 <__adddf3+0x6d0>
    cf00:	4811883a 	mov	r8,r9
    cf04:	3023883a 	mov	r17,r6
    cf08:	0401ffc4 	movi	r16,2047
    cf0c:	003e0706 	br	c72c <__adddf3+0x7c>
    cf10:	4811883a 	mov	r8,r9
    cf14:	3023883a 	mov	r17,r6
    cf18:	003e0406 	br	c72c <__adddf3+0x7c>
    cf1c:	21fff804 	addi	r7,r4,-32
    cf20:	01400804 	movi	r5,32
    cf24:	41ced83a 	srl	r7,r8,r7
    cf28:	21400a26 	beq	r4,r5,cf54 <__adddf3+0x8a4>
    cf2c:	01401004 	movi	r5,64
    cf30:	2909c83a 	sub	r4,r5,r4
    cf34:	4108983a 	sll	r4,r8,r4
    cf38:	2448b03a 	or	r4,r4,r17
    cf3c:	2008c03a 	cmpne	r4,r4,zero
    cf40:	3922b03a 	or	r17,r7,r4
    cf44:	0009883a 	mov	r4,zero
    cf48:	003f8d06 	br	cd80 <__adddf3+0x6d0>
    cf4c:	0007883a 	mov	r3,zero
    cf50:	003fdd06 	br	cec8 <__adddf3+0x818>
    cf54:	0009883a 	mov	r4,zero
    cf58:	003ff706 	br	cf38 <__adddf3+0x888>

0000cf5c <__divdf3>:
    cf5c:	defff204 	addi	sp,sp,-56
    cf60:	dd400915 	stw	r21,36(sp)
    cf64:	282ad53a 	srli	r21,r5,20
    cf68:	dd000815 	stw	r20,32(sp)
    cf6c:	2828d7fa 	srli	r20,r5,31
    cf70:	dc000415 	stw	r16,16(sp)
    cf74:	04000434 	movhi	r16,16
    cf78:	df000c15 	stw	fp,48(sp)
    cf7c:	843fffc4 	addi	r16,r16,-1
    cf80:	dfc00d15 	stw	ra,52(sp)
    cf84:	ddc00b15 	stw	r23,44(sp)
    cf88:	dd800a15 	stw	r22,40(sp)
    cf8c:	dcc00715 	stw	r19,28(sp)
    cf90:	dc800615 	stw	r18,24(sp)
    cf94:	dc400515 	stw	r17,20(sp)
    cf98:	ad41ffcc 	andi	r21,r21,2047
    cf9c:	2c20703a 	and	r16,r5,r16
    cfa0:	a7003fcc 	andi	fp,r20,255
    cfa4:	a8006126 	beq	r21,zero,d12c <__divdf3+0x1d0>
    cfa8:	0081ffc4 	movi	r2,2047
    cfac:	2025883a 	mov	r18,r4
    cfb0:	a8803726 	beq	r21,r2,d090 <__divdf3+0x134>
    cfb4:	80800434 	orhi	r2,r16,16
    cfb8:	100490fa 	slli	r2,r2,3
    cfbc:	2020d77a 	srli	r16,r4,29
    cfc0:	202490fa 	slli	r18,r4,3
    cfc4:	ad7f0044 	addi	r21,r21,-1023
    cfc8:	80a0b03a 	or	r16,r16,r2
    cfcc:	0027883a 	mov	r19,zero
    cfd0:	0013883a 	mov	r9,zero
    cfd4:	3804d53a 	srli	r2,r7,20
    cfd8:	382cd7fa 	srli	r22,r7,31
    cfdc:	04400434 	movhi	r17,16
    cfe0:	8c7fffc4 	addi	r17,r17,-1
    cfe4:	1081ffcc 	andi	r2,r2,2047
    cfe8:	3011883a 	mov	r8,r6
    cfec:	3c62703a 	and	r17,r7,r17
    cff0:	b5c03fcc 	andi	r23,r22,255
    cff4:	10006c26 	beq	r2,zero,d1a8 <__divdf3+0x24c>
    cff8:	00c1ffc4 	movi	r3,2047
    cffc:	10c06426 	beq	r2,r3,d190 <__divdf3+0x234>
    d000:	88c00434 	orhi	r3,r17,16
    d004:	180690fa 	slli	r3,r3,3
    d008:	3022d77a 	srli	r17,r6,29
    d00c:	301090fa 	slli	r8,r6,3
    d010:	10bf0044 	addi	r2,r2,-1023
    d014:	88e2b03a 	or	r17,r17,r3
    d018:	000f883a 	mov	r7,zero
    d01c:	a58cf03a 	xor	r6,r20,r22
    d020:	3cc8b03a 	or	r4,r7,r19
    d024:	a8abc83a 	sub	r21,r21,r2
    d028:	008003c4 	movi	r2,15
    d02c:	3007883a 	mov	r3,r6
    d030:	34c03fcc 	andi	r19,r6,255
    d034:	11009036 	bltu	r2,r4,d278 <__divdf3+0x31c>
    d038:	200890ba 	slli	r4,r4,2
    d03c:	00800074 	movhi	r2,1
    d040:	10b41404 	addi	r2,r2,-12208
    d044:	2089883a 	add	r4,r4,r2
    d048:	20800017 	ldw	r2,0(r4)
    d04c:	1000683a 	jmp	r2
    d050:	0000d278 	rdprs	zero,zero,841
    d054:	0000d0c8 	cmpgei	zero,zero,835
    d058:	0000d268 	cmpgeui	zero,zero,841
    d05c:	0000d0bc 	xorhi	zero,zero,834
    d060:	0000d268 	cmpgeui	zero,zero,841
    d064:	0000d23c 	xorhi	zero,zero,840
    d068:	0000d268 	cmpgeui	zero,zero,841
    d06c:	0000d0bc 	xorhi	zero,zero,834
    d070:	0000d0c8 	cmpgei	zero,zero,835
    d074:	0000d0c8 	cmpgei	zero,zero,835
    d078:	0000d23c 	xorhi	zero,zero,840
    d07c:	0000d0bc 	xorhi	zero,zero,834
    d080:	0000d0ac 	andhi	zero,zero,834
    d084:	0000d0ac 	andhi	zero,zero,834
    d088:	0000d0ac 	andhi	zero,zero,834
    d08c:	0000d55c 	xori	zero,zero,853
    d090:	2404b03a 	or	r2,r4,r16
    d094:	1000661e 	bne	r2,zero,d230 <__divdf3+0x2d4>
    d098:	04c00204 	movi	r19,8
    d09c:	0021883a 	mov	r16,zero
    d0a0:	0025883a 	mov	r18,zero
    d0a4:	02400084 	movi	r9,2
    d0a8:	003fca06 	br	cfd4 <__divdf3+0x78>
    d0ac:	8023883a 	mov	r17,r16
    d0b0:	9011883a 	mov	r8,r18
    d0b4:	e02f883a 	mov	r23,fp
    d0b8:	480f883a 	mov	r7,r9
    d0bc:	00800084 	movi	r2,2
    d0c0:	3881311e 	bne	r7,r2,d588 <__divdf3+0x62c>
    d0c4:	b827883a 	mov	r19,r23
    d0c8:	98c0004c 	andi	r3,r19,1
    d0cc:	0081ffc4 	movi	r2,2047
    d0d0:	000b883a 	mov	r5,zero
    d0d4:	0025883a 	mov	r18,zero
    d0d8:	1004953a 	slli	r2,r2,20
    d0dc:	18c03fcc 	andi	r3,r3,255
    d0e0:	04400434 	movhi	r17,16
    d0e4:	8c7fffc4 	addi	r17,r17,-1
    d0e8:	180697fa 	slli	r3,r3,31
    d0ec:	2c4a703a 	and	r5,r5,r17
    d0f0:	288ab03a 	or	r5,r5,r2
    d0f4:	28c6b03a 	or	r3,r5,r3
    d0f8:	9005883a 	mov	r2,r18
    d0fc:	dfc00d17 	ldw	ra,52(sp)
    d100:	df000c17 	ldw	fp,48(sp)
    d104:	ddc00b17 	ldw	r23,44(sp)
    d108:	dd800a17 	ldw	r22,40(sp)
    d10c:	dd400917 	ldw	r21,36(sp)
    d110:	dd000817 	ldw	r20,32(sp)
    d114:	dcc00717 	ldw	r19,28(sp)
    d118:	dc800617 	ldw	r18,24(sp)
    d11c:	dc400517 	ldw	r17,20(sp)
    d120:	dc000417 	ldw	r16,16(sp)
    d124:	dec00e04 	addi	sp,sp,56
    d128:	f800283a 	ret
    d12c:	2404b03a 	or	r2,r4,r16
    d130:	2027883a 	mov	r19,r4
    d134:	10003926 	beq	r2,zero,d21c <__divdf3+0x2c0>
    d138:	80012e26 	beq	r16,zero,d5f4 <__divdf3+0x698>
    d13c:	8009883a 	mov	r4,r16
    d140:	d9800315 	stw	r6,12(sp)
    d144:	d9c00215 	stw	r7,8(sp)
    d148:	000ecb40 	call	ecb4 <__clzsi2>
    d14c:	d9800317 	ldw	r6,12(sp)
    d150:	d9c00217 	ldw	r7,8(sp)
    d154:	113ffd44 	addi	r4,r2,-11
    d158:	00c00704 	movi	r3,28
    d15c:	19012116 	blt	r3,r4,d5e4 <__divdf3+0x688>
    d160:	00c00744 	movi	r3,29
    d164:	147ffe04 	addi	r17,r2,-8
    d168:	1907c83a 	sub	r3,r3,r4
    d16c:	8460983a 	sll	r16,r16,r17
    d170:	98c6d83a 	srl	r3,r19,r3
    d174:	9c64983a 	sll	r18,r19,r17
    d178:	1c20b03a 	or	r16,r3,r16
    d17c:	1080fcc4 	addi	r2,r2,1011
    d180:	00abc83a 	sub	r21,zero,r2
    d184:	0027883a 	mov	r19,zero
    d188:	0013883a 	mov	r9,zero
    d18c:	003f9106 	br	cfd4 <__divdf3+0x78>
    d190:	3446b03a 	or	r3,r6,r17
    d194:	18001f1e 	bne	r3,zero,d214 <__divdf3+0x2b8>
    d198:	0023883a 	mov	r17,zero
    d19c:	0011883a 	mov	r8,zero
    d1a0:	01c00084 	movi	r7,2
    d1a4:	003f9d06 	br	d01c <__divdf3+0xc0>
    d1a8:	3446b03a 	or	r3,r6,r17
    d1ac:	18001526 	beq	r3,zero,d204 <__divdf3+0x2a8>
    d1b0:	88011b26 	beq	r17,zero,d620 <__divdf3+0x6c4>
    d1b4:	8809883a 	mov	r4,r17
    d1b8:	d9800315 	stw	r6,12(sp)
    d1bc:	da400115 	stw	r9,4(sp)
    d1c0:	000ecb40 	call	ecb4 <__clzsi2>
    d1c4:	d9800317 	ldw	r6,12(sp)
    d1c8:	da400117 	ldw	r9,4(sp)
    d1cc:	113ffd44 	addi	r4,r2,-11
    d1d0:	00c00704 	movi	r3,28
    d1d4:	19010e16 	blt	r3,r4,d610 <__divdf3+0x6b4>
    d1d8:	00c00744 	movi	r3,29
    d1dc:	123ffe04 	addi	r8,r2,-8
    d1e0:	1907c83a 	sub	r3,r3,r4
    d1e4:	8a22983a 	sll	r17,r17,r8
    d1e8:	30c6d83a 	srl	r3,r6,r3
    d1ec:	3210983a 	sll	r8,r6,r8
    d1f0:	1c62b03a 	or	r17,r3,r17
    d1f4:	1080fcc4 	addi	r2,r2,1011
    d1f8:	0085c83a 	sub	r2,zero,r2
    d1fc:	000f883a 	mov	r7,zero
    d200:	003f8606 	br	d01c <__divdf3+0xc0>
    d204:	0023883a 	mov	r17,zero
    d208:	0011883a 	mov	r8,zero
    d20c:	01c00044 	movi	r7,1
    d210:	003f8206 	br	d01c <__divdf3+0xc0>
    d214:	01c000c4 	movi	r7,3
    d218:	003f8006 	br	d01c <__divdf3+0xc0>
    d21c:	04c00104 	movi	r19,4
    d220:	0021883a 	mov	r16,zero
    d224:	0025883a 	mov	r18,zero
    d228:	02400044 	movi	r9,1
    d22c:	003f6906 	br	cfd4 <__divdf3+0x78>
    d230:	04c00304 	movi	r19,12
    d234:	024000c4 	movi	r9,3
    d238:	003f6606 	br	cfd4 <__divdf3+0x78>
    d23c:	01400434 	movhi	r5,16
    d240:	0007883a 	mov	r3,zero
    d244:	297fffc4 	addi	r5,r5,-1
    d248:	04bfffc4 	movi	r18,-1
    d24c:	0081ffc4 	movi	r2,2047
    d250:	003fa106 	br	d0d8 <__divdf3+0x17c>
    d254:	00c00044 	movi	r3,1
    d258:	1887c83a 	sub	r3,r3,r2
    d25c:	01000e04 	movi	r4,56
    d260:	20c1210e 	bge	r4,r3,d6e8 <__divdf3+0x78c>
    d264:	98c0004c 	andi	r3,r19,1
    d268:	0005883a 	mov	r2,zero
    d26c:	000b883a 	mov	r5,zero
    d270:	0025883a 	mov	r18,zero
    d274:	003f9806 	br	d0d8 <__divdf3+0x17c>
    d278:	8c00fd36 	bltu	r17,r16,d670 <__divdf3+0x714>
    d27c:	8440fb26 	beq	r16,r17,d66c <__divdf3+0x710>
    d280:	8007883a 	mov	r3,r16
    d284:	ad7fffc4 	addi	r21,r21,-1
    d288:	0021883a 	mov	r16,zero
    d28c:	4004d63a 	srli	r2,r8,24
    d290:	8822923a 	slli	r17,r17,8
    d294:	1809883a 	mov	r4,r3
    d298:	402c923a 	slli	r22,r8,8
    d29c:	88b8b03a 	or	fp,r17,r2
    d2a0:	e028d43a 	srli	r20,fp,16
    d2a4:	d8c00015 	stw	r3,0(sp)
    d2a8:	e5ffffcc 	andi	r23,fp,65535
    d2ac:	a00b883a 	mov	r5,r20
    d2b0:	000c5f40 	call	c5f4 <__udivsi3>
    d2b4:	d8c00017 	ldw	r3,0(sp)
    d2b8:	a00b883a 	mov	r5,r20
    d2bc:	d8800315 	stw	r2,12(sp)
    d2c0:	1809883a 	mov	r4,r3
    d2c4:	000c6580 	call	c658 <__umodsi3>
    d2c8:	d9800317 	ldw	r6,12(sp)
    d2cc:	1006943a 	slli	r3,r2,16
    d2d0:	9004d43a 	srli	r2,r18,16
    d2d4:	b9a3383a 	mul	r17,r23,r6
    d2d8:	10c4b03a 	or	r2,r2,r3
    d2dc:	1440062e 	bgeu	r2,r17,d2f8 <__divdf3+0x39c>
    d2e0:	1705883a 	add	r2,r2,fp
    d2e4:	30ffffc4 	addi	r3,r6,-1
    d2e8:	1700ee36 	bltu	r2,fp,d6a4 <__divdf3+0x748>
    d2ec:	1440ed2e 	bgeu	r2,r17,d6a4 <__divdf3+0x748>
    d2f0:	31bfff84 	addi	r6,r6,-2
    d2f4:	1705883a 	add	r2,r2,fp
    d2f8:	1463c83a 	sub	r17,r2,r17
    d2fc:	a00b883a 	mov	r5,r20
    d300:	8809883a 	mov	r4,r17
    d304:	d9800315 	stw	r6,12(sp)
    d308:	000c5f40 	call	c5f4 <__udivsi3>
    d30c:	a00b883a 	mov	r5,r20
    d310:	8809883a 	mov	r4,r17
    d314:	d8800215 	stw	r2,8(sp)
    d318:	000c6580 	call	c658 <__umodsi3>
    d31c:	d9c00217 	ldw	r7,8(sp)
    d320:	1004943a 	slli	r2,r2,16
    d324:	94bfffcc 	andi	r18,r18,65535
    d328:	b9d1383a 	mul	r8,r23,r7
    d32c:	90a4b03a 	or	r18,r18,r2
    d330:	d9800317 	ldw	r6,12(sp)
    d334:	9200062e 	bgeu	r18,r8,d350 <__divdf3+0x3f4>
    d338:	9725883a 	add	r18,r18,fp
    d33c:	38bfffc4 	addi	r2,r7,-1
    d340:	9700d636 	bltu	r18,fp,d69c <__divdf3+0x740>
    d344:	9200d52e 	bgeu	r18,r8,d69c <__divdf3+0x740>
    d348:	39ffff84 	addi	r7,r7,-2
    d34c:	9725883a 	add	r18,r18,fp
    d350:	3004943a 	slli	r2,r6,16
    d354:	b012d43a 	srli	r9,r22,16
    d358:	b1bfffcc 	andi	r6,r22,65535
    d35c:	11e2b03a 	or	r17,r2,r7
    d360:	8806d43a 	srli	r3,r17,16
    d364:	893fffcc 	andi	r4,r17,65535
    d368:	218b383a 	mul	r5,r4,r6
    d36c:	30c5383a 	mul	r2,r6,r3
    d370:	2249383a 	mul	r4,r4,r9
    d374:	280ed43a 	srli	r7,r5,16
    d378:	9225c83a 	sub	r18,r18,r8
    d37c:	2089883a 	add	r4,r4,r2
    d380:	3909883a 	add	r4,r7,r4
    d384:	1a47383a 	mul	r3,r3,r9
    d388:	2080022e 	bgeu	r4,r2,d394 <__divdf3+0x438>
    d38c:	00800074 	movhi	r2,1
    d390:	1887883a 	add	r3,r3,r2
    d394:	2004d43a 	srli	r2,r4,16
    d398:	2008943a 	slli	r4,r4,16
    d39c:	297fffcc 	andi	r5,r5,65535
    d3a0:	10c7883a 	add	r3,r2,r3
    d3a4:	2149883a 	add	r4,r4,r5
    d3a8:	90c0a536 	bltu	r18,r3,d640 <__divdf3+0x6e4>
    d3ac:	90c0bf26 	beq	r18,r3,d6ac <__divdf3+0x750>
    d3b0:	90c7c83a 	sub	r3,r18,r3
    d3b4:	810fc83a 	sub	r7,r16,r4
    d3b8:	81e5803a 	cmpltu	r18,r16,r7
    d3bc:	1ca5c83a 	sub	r18,r3,r18
    d3c0:	e480c126 	beq	fp,r18,d6c8 <__divdf3+0x76c>
    d3c4:	a00b883a 	mov	r5,r20
    d3c8:	9009883a 	mov	r4,r18
    d3cc:	d9800315 	stw	r6,12(sp)
    d3d0:	d9c00215 	stw	r7,8(sp)
    d3d4:	da400115 	stw	r9,4(sp)
    d3d8:	000c5f40 	call	c5f4 <__udivsi3>
    d3dc:	a00b883a 	mov	r5,r20
    d3e0:	9009883a 	mov	r4,r18
    d3e4:	d8800015 	stw	r2,0(sp)
    d3e8:	000c6580 	call	c658 <__umodsi3>
    d3ec:	d9c00217 	ldw	r7,8(sp)
    d3f0:	da000017 	ldw	r8,0(sp)
    d3f4:	1006943a 	slli	r3,r2,16
    d3f8:	3804d43a 	srli	r2,r7,16
    d3fc:	ba21383a 	mul	r16,r23,r8
    d400:	d9800317 	ldw	r6,12(sp)
    d404:	10c4b03a 	or	r2,r2,r3
    d408:	da400117 	ldw	r9,4(sp)
    d40c:	1400062e 	bgeu	r2,r16,d428 <__divdf3+0x4cc>
    d410:	1705883a 	add	r2,r2,fp
    d414:	40ffffc4 	addi	r3,r8,-1
    d418:	1700ad36 	bltu	r2,fp,d6d0 <__divdf3+0x774>
    d41c:	1400ac2e 	bgeu	r2,r16,d6d0 <__divdf3+0x774>
    d420:	423fff84 	addi	r8,r8,-2
    d424:	1705883a 	add	r2,r2,fp
    d428:	1421c83a 	sub	r16,r2,r16
    d42c:	a00b883a 	mov	r5,r20
    d430:	8009883a 	mov	r4,r16
    d434:	d9800315 	stw	r6,12(sp)
    d438:	d9c00215 	stw	r7,8(sp)
    d43c:	da000015 	stw	r8,0(sp)
    d440:	da400115 	stw	r9,4(sp)
    d444:	000c5f40 	call	c5f4 <__udivsi3>
    d448:	8009883a 	mov	r4,r16
    d44c:	a00b883a 	mov	r5,r20
    d450:	1025883a 	mov	r18,r2
    d454:	000c6580 	call	c658 <__umodsi3>
    d458:	d9c00217 	ldw	r7,8(sp)
    d45c:	1004943a 	slli	r2,r2,16
    d460:	bcaf383a 	mul	r23,r23,r18
    d464:	393fffcc 	andi	r4,r7,65535
    d468:	2088b03a 	or	r4,r4,r2
    d46c:	d9800317 	ldw	r6,12(sp)
    d470:	da000017 	ldw	r8,0(sp)
    d474:	da400117 	ldw	r9,4(sp)
    d478:	25c0062e 	bgeu	r4,r23,d494 <__divdf3+0x538>
    d47c:	2709883a 	add	r4,r4,fp
    d480:	90bfffc4 	addi	r2,r18,-1
    d484:	27009436 	bltu	r4,fp,d6d8 <__divdf3+0x77c>
    d488:	25c0932e 	bgeu	r4,r23,d6d8 <__divdf3+0x77c>
    d48c:	94bfff84 	addi	r18,r18,-2
    d490:	2709883a 	add	r4,r4,fp
    d494:	4004943a 	slli	r2,r8,16
    d498:	25efc83a 	sub	r23,r4,r23
    d49c:	1490b03a 	or	r8,r2,r18
    d4a0:	4008d43a 	srli	r4,r8,16
    d4a4:	40ffffcc 	andi	r3,r8,65535
    d4a8:	30c5383a 	mul	r2,r6,r3
    d4ac:	1a47383a 	mul	r3,r3,r9
    d4b0:	310d383a 	mul	r6,r6,r4
    d4b4:	100ad43a 	srli	r5,r2,16
    d4b8:	4913383a 	mul	r9,r9,r4
    d4bc:	1987883a 	add	r3,r3,r6
    d4c0:	28c7883a 	add	r3,r5,r3
    d4c4:	1980022e 	bgeu	r3,r6,d4d0 <__divdf3+0x574>
    d4c8:	01000074 	movhi	r4,1
    d4cc:	4913883a 	add	r9,r9,r4
    d4d0:	1808d43a 	srli	r4,r3,16
    d4d4:	1806943a 	slli	r3,r3,16
    d4d8:	10bfffcc 	andi	r2,r2,65535
    d4dc:	2253883a 	add	r9,r4,r9
    d4e0:	1887883a 	add	r3,r3,r2
    d4e4:	ba403836 	bltu	r23,r9,d5c8 <__divdf3+0x66c>
    d4e8:	ba403626 	beq	r23,r9,d5c4 <__divdf3+0x668>
    d4ec:	42000054 	ori	r8,r8,1
    d4f0:	a880ffc4 	addi	r2,r21,1023
    d4f4:	00bf570e 	bge	zero,r2,d254 <__divdf3+0x2f8>
    d4f8:	40c001cc 	andi	r3,r8,7
    d4fc:	18000726 	beq	r3,zero,d51c <__divdf3+0x5c0>
    d500:	40c003cc 	andi	r3,r8,15
    d504:	01000104 	movi	r4,4
    d508:	19000426 	beq	r3,r4,d51c <__divdf3+0x5c0>
    d50c:	4107883a 	add	r3,r8,r4
    d510:	1a11803a 	cmpltu	r8,r3,r8
    d514:	8a23883a 	add	r17,r17,r8
    d518:	1811883a 	mov	r8,r3
    d51c:	88c0402c 	andhi	r3,r17,256
    d520:	18000426 	beq	r3,zero,d534 <__divdf3+0x5d8>
    d524:	00ffc034 	movhi	r3,65280
    d528:	18ffffc4 	addi	r3,r3,-1
    d52c:	a8810004 	addi	r2,r21,1024
    d530:	88e2703a 	and	r17,r17,r3
    d534:	00c1ff84 	movi	r3,2046
    d538:	18bee316 	blt	r3,r2,d0c8 <__divdf3+0x16c>
    d53c:	8824977a 	slli	r18,r17,29
    d540:	4010d0fa 	srli	r8,r8,3
    d544:	8822927a 	slli	r17,r17,9
    d548:	1081ffcc 	andi	r2,r2,2047
    d54c:	9224b03a 	or	r18,r18,r8
    d550:	880ad33a 	srli	r5,r17,12
    d554:	98c0004c 	andi	r3,r19,1
    d558:	003edf06 	br	d0d8 <__divdf3+0x17c>
    d55c:	8080022c 	andhi	r2,r16,8
    d560:	10001226 	beq	r2,zero,d5ac <__divdf3+0x650>
    d564:	8880022c 	andhi	r2,r17,8
    d568:	1000101e 	bne	r2,zero,d5ac <__divdf3+0x650>
    d56c:	00800434 	movhi	r2,16
    d570:	89400234 	orhi	r5,r17,8
    d574:	10bfffc4 	addi	r2,r2,-1
    d578:	b007883a 	mov	r3,r22
    d57c:	288a703a 	and	r5,r5,r2
    d580:	4025883a 	mov	r18,r8
    d584:	003f3106 	br	d24c <__divdf3+0x2f0>
    d588:	008000c4 	movi	r2,3
    d58c:	3880a626 	beq	r7,r2,d828 <__divdf3+0x8cc>
    d590:	00800044 	movi	r2,1
    d594:	3880521e 	bne	r7,r2,d6e0 <__divdf3+0x784>
    d598:	b807883a 	mov	r3,r23
    d59c:	0005883a 	mov	r2,zero
    d5a0:	000b883a 	mov	r5,zero
    d5a4:	0025883a 	mov	r18,zero
    d5a8:	003ecb06 	br	d0d8 <__divdf3+0x17c>
    d5ac:	00800434 	movhi	r2,16
    d5b0:	81400234 	orhi	r5,r16,8
    d5b4:	10bfffc4 	addi	r2,r2,-1
    d5b8:	a007883a 	mov	r3,r20
    d5bc:	288a703a 	and	r5,r5,r2
    d5c0:	003f2206 	br	d24c <__divdf3+0x2f0>
    d5c4:	183fca26 	beq	r3,zero,d4f0 <__divdf3+0x594>
    d5c8:	e5ef883a 	add	r23,fp,r23
    d5cc:	40bfffc4 	addi	r2,r8,-1
    d5d0:	bf00392e 	bgeu	r23,fp,d6b8 <__divdf3+0x75c>
    d5d4:	1011883a 	mov	r8,r2
    d5d8:	ba7fc41e 	bne	r23,r9,d4ec <__divdf3+0x590>
    d5dc:	b0ffc31e 	bne	r22,r3,d4ec <__divdf3+0x590>
    d5e0:	003fc306 	br	d4f0 <__divdf3+0x594>
    d5e4:	143ff604 	addi	r16,r2,-40
    d5e8:	9c20983a 	sll	r16,r19,r16
    d5ec:	0025883a 	mov	r18,zero
    d5f0:	003ee206 	br	d17c <__divdf3+0x220>
    d5f4:	d9800315 	stw	r6,12(sp)
    d5f8:	d9c00215 	stw	r7,8(sp)
    d5fc:	000ecb40 	call	ecb4 <__clzsi2>
    d600:	10800804 	addi	r2,r2,32
    d604:	d9c00217 	ldw	r7,8(sp)
    d608:	d9800317 	ldw	r6,12(sp)
    d60c:	003ed106 	br	d154 <__divdf3+0x1f8>
    d610:	147ff604 	addi	r17,r2,-40
    d614:	3462983a 	sll	r17,r6,r17
    d618:	0011883a 	mov	r8,zero
    d61c:	003ef506 	br	d1f4 <__divdf3+0x298>
    d620:	3009883a 	mov	r4,r6
    d624:	d9800315 	stw	r6,12(sp)
    d628:	da400115 	stw	r9,4(sp)
    d62c:	000ecb40 	call	ecb4 <__clzsi2>
    d630:	10800804 	addi	r2,r2,32
    d634:	da400117 	ldw	r9,4(sp)
    d638:	d9800317 	ldw	r6,12(sp)
    d63c:	003ee306 	br	d1cc <__divdf3+0x270>
    d640:	85a1883a 	add	r16,r16,r22
    d644:	8585803a 	cmpltu	r2,r16,r22
    d648:	1705883a 	add	r2,r2,fp
    d64c:	14a5883a 	add	r18,r2,r18
    d650:	88bfffc4 	addi	r2,r17,-1
    d654:	e4800c2e 	bgeu	fp,r18,d688 <__divdf3+0x72c>
    d658:	90c03e36 	bltu	r18,r3,d754 <__divdf3+0x7f8>
    d65c:	1c806926 	beq	r3,r18,d804 <__divdf3+0x8a8>
    d660:	90c7c83a 	sub	r3,r18,r3
    d664:	1023883a 	mov	r17,r2
    d668:	003f5206 	br	d3b4 <__divdf3+0x458>
    d66c:	923f0436 	bltu	r18,r8,d280 <__divdf3+0x324>
    d670:	800897fa 	slli	r4,r16,31
    d674:	9004d07a 	srli	r2,r18,1
    d678:	8006d07a 	srli	r3,r16,1
    d67c:	902097fa 	slli	r16,r18,31
    d680:	20a4b03a 	or	r18,r4,r2
    d684:	003f0106 	br	d28c <__divdf3+0x330>
    d688:	e4bff51e 	bne	fp,r18,d660 <__divdf3+0x704>
    d68c:	85bff22e 	bgeu	r16,r22,d658 <__divdf3+0x6fc>
    d690:	e0c7c83a 	sub	r3,fp,r3
    d694:	1023883a 	mov	r17,r2
    d698:	003f4606 	br	d3b4 <__divdf3+0x458>
    d69c:	100f883a 	mov	r7,r2
    d6a0:	003f2b06 	br	d350 <__divdf3+0x3f4>
    d6a4:	180d883a 	mov	r6,r3
    d6a8:	003f1306 	br	d2f8 <__divdf3+0x39c>
    d6ac:	813fe436 	bltu	r16,r4,d640 <__divdf3+0x6e4>
    d6b0:	0007883a 	mov	r3,zero
    d6b4:	003f3f06 	br	d3b4 <__divdf3+0x458>
    d6b8:	ba402c36 	bltu	r23,r9,d76c <__divdf3+0x810>
    d6bc:	4dc05426 	beq	r9,r23,d810 <__divdf3+0x8b4>
    d6c0:	1011883a 	mov	r8,r2
    d6c4:	003f8906 	br	d4ec <__divdf3+0x590>
    d6c8:	023fffc4 	movi	r8,-1
    d6cc:	003f8806 	br	d4f0 <__divdf3+0x594>
    d6d0:	1811883a 	mov	r8,r3
    d6d4:	003f5406 	br	d428 <__divdf3+0x4cc>
    d6d8:	1025883a 	mov	r18,r2
    d6dc:	003f6d06 	br	d494 <__divdf3+0x538>
    d6e0:	b827883a 	mov	r19,r23
    d6e4:	003f8206 	br	d4f0 <__divdf3+0x594>
    d6e8:	010007c4 	movi	r4,31
    d6ec:	20c02616 	blt	r4,r3,d788 <__divdf3+0x82c>
    d6f0:	00800804 	movi	r2,32
    d6f4:	10c5c83a 	sub	r2,r2,r3
    d6f8:	888a983a 	sll	r5,r17,r2
    d6fc:	40c8d83a 	srl	r4,r8,r3
    d700:	4084983a 	sll	r2,r8,r2
    d704:	88e2d83a 	srl	r17,r17,r3
    d708:	2906b03a 	or	r3,r5,r4
    d70c:	1004c03a 	cmpne	r2,r2,zero
    d710:	1886b03a 	or	r3,r3,r2
    d714:	188001cc 	andi	r2,r3,7
    d718:	10000726 	beq	r2,zero,d738 <__divdf3+0x7dc>
    d71c:	188003cc 	andi	r2,r3,15
    d720:	01000104 	movi	r4,4
    d724:	11000426 	beq	r2,r4,d738 <__divdf3+0x7dc>
    d728:	1805883a 	mov	r2,r3
    d72c:	10c00104 	addi	r3,r2,4
    d730:	1885803a 	cmpltu	r2,r3,r2
    d734:	88a3883a 	add	r17,r17,r2
    d738:	8880202c 	andhi	r2,r17,128
    d73c:	10002726 	beq	r2,zero,d7dc <__divdf3+0x880>
    d740:	98c0004c 	andi	r3,r19,1
    d744:	00800044 	movi	r2,1
    d748:	000b883a 	mov	r5,zero
    d74c:	0025883a 	mov	r18,zero
    d750:	003e6106 	br	d0d8 <__divdf3+0x17c>
    d754:	85a1883a 	add	r16,r16,r22
    d758:	8585803a 	cmpltu	r2,r16,r22
    d75c:	1705883a 	add	r2,r2,fp
    d760:	14a5883a 	add	r18,r2,r18
    d764:	8c7fff84 	addi	r17,r17,-2
    d768:	003f1106 	br	d3b0 <__divdf3+0x454>
    d76c:	b589883a 	add	r4,r22,r22
    d770:	25ad803a 	cmpltu	r22,r4,r22
    d774:	b739883a 	add	fp,r22,fp
    d778:	40bfff84 	addi	r2,r8,-2
    d77c:	bf2f883a 	add	r23,r23,fp
    d780:	202d883a 	mov	r22,r4
    d784:	003f9306 	br	d5d4 <__divdf3+0x678>
    d788:	013ff844 	movi	r4,-31
    d78c:	2085c83a 	sub	r2,r4,r2
    d790:	8888d83a 	srl	r4,r17,r2
    d794:	00800804 	movi	r2,32
    d798:	18802126 	beq	r3,r2,d820 <__divdf3+0x8c4>
    d79c:	00801004 	movi	r2,64
    d7a0:	10c5c83a 	sub	r2,r2,r3
    d7a4:	8884983a 	sll	r2,r17,r2
    d7a8:	1204b03a 	or	r2,r2,r8
    d7ac:	1004c03a 	cmpne	r2,r2,zero
    d7b0:	2084b03a 	or	r2,r4,r2
    d7b4:	144001cc 	andi	r17,r2,7
    d7b8:	88000d1e 	bne	r17,zero,d7f0 <__divdf3+0x894>
    d7bc:	000b883a 	mov	r5,zero
    d7c0:	1024d0fa 	srli	r18,r2,3
    d7c4:	98c0004c 	andi	r3,r19,1
    d7c8:	0005883a 	mov	r2,zero
    d7cc:	9464b03a 	or	r18,r18,r17
    d7d0:	003e4106 	br	d0d8 <__divdf3+0x17c>
    d7d4:	1007883a 	mov	r3,r2
    d7d8:	0023883a 	mov	r17,zero
    d7dc:	880a927a 	slli	r5,r17,9
    d7e0:	1805883a 	mov	r2,r3
    d7e4:	8822977a 	slli	r17,r17,29
    d7e8:	280ad33a 	srli	r5,r5,12
    d7ec:	003ff406 	br	d7c0 <__divdf3+0x864>
    d7f0:	10c003cc 	andi	r3,r2,15
    d7f4:	01000104 	movi	r4,4
    d7f8:	193ff626 	beq	r3,r4,d7d4 <__divdf3+0x878>
    d7fc:	0023883a 	mov	r17,zero
    d800:	003fca06 	br	d72c <__divdf3+0x7d0>
    d804:	813fd336 	bltu	r16,r4,d754 <__divdf3+0x7f8>
    d808:	1023883a 	mov	r17,r2
    d80c:	003fa806 	br	d6b0 <__divdf3+0x754>
    d810:	b0ffd636 	bltu	r22,r3,d76c <__divdf3+0x810>
    d814:	1011883a 	mov	r8,r2
    d818:	b0ff341e 	bne	r22,r3,d4ec <__divdf3+0x590>
    d81c:	003f3406 	br	d4f0 <__divdf3+0x594>
    d820:	0005883a 	mov	r2,zero
    d824:	003fe006 	br	d7a8 <__divdf3+0x84c>
    d828:	00800434 	movhi	r2,16
    d82c:	89400234 	orhi	r5,r17,8
    d830:	10bfffc4 	addi	r2,r2,-1
    d834:	b807883a 	mov	r3,r23
    d838:	288a703a 	and	r5,r5,r2
    d83c:	4025883a 	mov	r18,r8
    d840:	003e8206 	br	d24c <__divdf3+0x2f0>

0000d844 <__eqdf2>:
    d844:	2804d53a 	srli	r2,r5,20
    d848:	3806d53a 	srli	r3,r7,20
    d84c:	02000434 	movhi	r8,16
    d850:	423fffc4 	addi	r8,r8,-1
    d854:	1081ffcc 	andi	r2,r2,2047
    d858:	0281ffc4 	movi	r10,2047
    d85c:	2a12703a 	and	r9,r5,r8
    d860:	18c1ffcc 	andi	r3,r3,2047
    d864:	3a10703a 	and	r8,r7,r8
    d868:	280ad7fa 	srli	r5,r5,31
    d86c:	380ed7fa 	srli	r7,r7,31
    d870:	12801026 	beq	r2,r10,d8b4 <__eqdf2+0x70>
    d874:	0281ffc4 	movi	r10,2047
    d878:	1a800a26 	beq	r3,r10,d8a4 <__eqdf2+0x60>
    d87c:	10c00226 	beq	r2,r3,d888 <__eqdf2+0x44>
    d880:	00800044 	movi	r2,1
    d884:	f800283a 	ret
    d888:	4a3ffd1e 	bne	r9,r8,d880 <__eqdf2+0x3c>
    d88c:	21bffc1e 	bne	r4,r6,d880 <__eqdf2+0x3c>
    d890:	29c00c26 	beq	r5,r7,d8c4 <__eqdf2+0x80>
    d894:	103ffa1e 	bne	r2,zero,d880 <__eqdf2+0x3c>
    d898:	2244b03a 	or	r2,r4,r9
    d89c:	1004c03a 	cmpne	r2,r2,zero
    d8a0:	f800283a 	ret
    d8a4:	3214b03a 	or	r10,r6,r8
    d8a8:	503ff426 	beq	r10,zero,d87c <__eqdf2+0x38>
    d8ac:	00800044 	movi	r2,1
    d8b0:	f800283a 	ret
    d8b4:	2254b03a 	or	r10,r4,r9
    d8b8:	503fee26 	beq	r10,zero,d874 <__eqdf2+0x30>
    d8bc:	00800044 	movi	r2,1
    d8c0:	f800283a 	ret
    d8c4:	0005883a 	mov	r2,zero
    d8c8:	f800283a 	ret

0000d8cc <__gedf2>:
    d8cc:	2804d53a 	srli	r2,r5,20
    d8d0:	3806d53a 	srli	r3,r7,20
    d8d4:	02000434 	movhi	r8,16
    d8d8:	423fffc4 	addi	r8,r8,-1
    d8dc:	1081ffcc 	andi	r2,r2,2047
    d8e0:	0241ffc4 	movi	r9,2047
    d8e4:	2a14703a 	and	r10,r5,r8
    d8e8:	18c1ffcc 	andi	r3,r3,2047
    d8ec:	3a10703a 	and	r8,r7,r8
    d8f0:	280ad7fa 	srli	r5,r5,31
    d8f4:	380ed7fa 	srli	r7,r7,31
    d8f8:	12401d26 	beq	r2,r9,d970 <__gedf2+0xa4>
    d8fc:	0241ffc4 	movi	r9,2047
    d900:	1a401226 	beq	r3,r9,d94c <__gedf2+0x80>
    d904:	1000081e 	bne	r2,zero,d928 <__gedf2+0x5c>
    d908:	2296b03a 	or	r11,r4,r10
    d90c:	5813003a 	cmpeq	r9,r11,zero
    d910:	1800091e 	bne	r3,zero,d938 <__gedf2+0x6c>
    d914:	3218b03a 	or	r12,r6,r8
    d918:	6000071e 	bne	r12,zero,d938 <__gedf2+0x6c>
    d91c:	0005883a 	mov	r2,zero
    d920:	5800101e 	bne	r11,zero,d964 <__gedf2+0x98>
    d924:	f800283a 	ret
    d928:	18000c1e 	bne	r3,zero,d95c <__gedf2+0x90>
    d92c:	3212b03a 	or	r9,r6,r8
    d930:	48000c26 	beq	r9,zero,d964 <__gedf2+0x98>
    d934:	0013883a 	mov	r9,zero
    d938:	39c03fcc 	andi	r7,r7,255
    d93c:	48000826 	beq	r9,zero,d960 <__gedf2+0x94>
    d940:	38000926 	beq	r7,zero,d968 <__gedf2+0x9c>
    d944:	00800044 	movi	r2,1
    d948:	f800283a 	ret
    d94c:	3212b03a 	or	r9,r6,r8
    d950:	483fec26 	beq	r9,zero,d904 <__gedf2+0x38>
    d954:	00bfff84 	movi	r2,-2
    d958:	f800283a 	ret
    d95c:	39c03fcc 	andi	r7,r7,255
    d960:	29c00626 	beq	r5,r7,d97c <__gedf2+0xb0>
    d964:	283ff726 	beq	r5,zero,d944 <__gedf2+0x78>
    d968:	00bfffc4 	movi	r2,-1
    d96c:	f800283a 	ret
    d970:	2292b03a 	or	r9,r4,r10
    d974:	483fe126 	beq	r9,zero,d8fc <__gedf2+0x30>
    d978:	003ff606 	br	d954 <__gedf2+0x88>
    d97c:	18bff916 	blt	r3,r2,d964 <__gedf2+0x98>
    d980:	10c00316 	blt	r2,r3,d990 <__gedf2+0xc4>
    d984:	42bff736 	bltu	r8,r10,d964 <__gedf2+0x98>
    d988:	52000326 	beq	r10,r8,d998 <__gedf2+0xcc>
    d98c:	5200042e 	bgeu	r10,r8,d9a0 <__gedf2+0xd4>
    d990:	283fec1e 	bne	r5,zero,d944 <__gedf2+0x78>
    d994:	003ff406 	br	d968 <__gedf2+0x9c>
    d998:	313ff236 	bltu	r6,r4,d964 <__gedf2+0x98>
    d99c:	21bffc36 	bltu	r4,r6,d990 <__gedf2+0xc4>
    d9a0:	0005883a 	mov	r2,zero
    d9a4:	f800283a 	ret

0000d9a8 <__ledf2>:
    d9a8:	2804d53a 	srli	r2,r5,20
    d9ac:	3810d53a 	srli	r8,r7,20
    d9b0:	00c00434 	movhi	r3,16
    d9b4:	18ffffc4 	addi	r3,r3,-1
    d9b8:	1081ffcc 	andi	r2,r2,2047
    d9bc:	0241ffc4 	movi	r9,2047
    d9c0:	28d4703a 	and	r10,r5,r3
    d9c4:	4201ffcc 	andi	r8,r8,2047
    d9c8:	38c6703a 	and	r3,r7,r3
    d9cc:	280ad7fa 	srli	r5,r5,31
    d9d0:	380ed7fa 	srli	r7,r7,31
    d9d4:	12401f26 	beq	r2,r9,da54 <__ledf2+0xac>
    d9d8:	0241ffc4 	movi	r9,2047
    d9dc:	42401426 	beq	r8,r9,da30 <__ledf2+0x88>
    d9e0:	1000091e 	bne	r2,zero,da08 <__ledf2+0x60>
    d9e4:	2296b03a 	or	r11,r4,r10
    d9e8:	5813003a 	cmpeq	r9,r11,zero
    d9ec:	29403fcc 	andi	r5,r5,255
    d9f0:	40000a1e 	bne	r8,zero,da1c <__ledf2+0x74>
    d9f4:	30d8b03a 	or	r12,r6,r3
    d9f8:	6000081e 	bne	r12,zero,da1c <__ledf2+0x74>
    d9fc:	0005883a 	mov	r2,zero
    da00:	5800111e 	bne	r11,zero,da48 <__ledf2+0xa0>
    da04:	f800283a 	ret
    da08:	29403fcc 	andi	r5,r5,255
    da0c:	40000c1e 	bne	r8,zero,da40 <__ledf2+0x98>
    da10:	30d2b03a 	or	r9,r6,r3
    da14:	48000c26 	beq	r9,zero,da48 <__ledf2+0xa0>
    da18:	0013883a 	mov	r9,zero
    da1c:	39c03fcc 	andi	r7,r7,255
    da20:	48000826 	beq	r9,zero,da44 <__ledf2+0x9c>
    da24:	38001126 	beq	r7,zero,da6c <__ledf2+0xc4>
    da28:	00800044 	movi	r2,1
    da2c:	f800283a 	ret
    da30:	30d2b03a 	or	r9,r6,r3
    da34:	483fea26 	beq	r9,zero,d9e0 <__ledf2+0x38>
    da38:	00800084 	movi	r2,2
    da3c:	f800283a 	ret
    da40:	39c03fcc 	andi	r7,r7,255
    da44:	39400726 	beq	r7,r5,da64 <__ledf2+0xbc>
    da48:	2800081e 	bne	r5,zero,da6c <__ledf2+0xc4>
    da4c:	00800044 	movi	r2,1
    da50:	f800283a 	ret
    da54:	2292b03a 	or	r9,r4,r10
    da58:	483fdf26 	beq	r9,zero,d9d8 <__ledf2+0x30>
    da5c:	00800084 	movi	r2,2
    da60:	f800283a 	ret
    da64:	4080030e 	bge	r8,r2,da74 <__ledf2+0xcc>
    da68:	383fef26 	beq	r7,zero,da28 <__ledf2+0x80>
    da6c:	00bfffc4 	movi	r2,-1
    da70:	f800283a 	ret
    da74:	123feb16 	blt	r2,r8,da24 <__ledf2+0x7c>
    da78:	1abff336 	bltu	r3,r10,da48 <__ledf2+0xa0>
    da7c:	50c00326 	beq	r10,r3,da8c <__ledf2+0xe4>
    da80:	50c0042e 	bgeu	r10,r3,da94 <__ledf2+0xec>
    da84:	283fe81e 	bne	r5,zero,da28 <__ledf2+0x80>
    da88:	003ff806 	br	da6c <__ledf2+0xc4>
    da8c:	313fee36 	bltu	r6,r4,da48 <__ledf2+0xa0>
    da90:	21bffc36 	bltu	r4,r6,da84 <__ledf2+0xdc>
    da94:	0005883a 	mov	r2,zero
    da98:	f800283a 	ret

0000da9c <__muldf3>:
    da9c:	defff304 	addi	sp,sp,-52
    daa0:	2804d53a 	srli	r2,r5,20
    daa4:	dd800915 	stw	r22,36(sp)
    daa8:	282cd7fa 	srli	r22,r5,31
    daac:	dc000315 	stw	r16,12(sp)
    dab0:	04000434 	movhi	r16,16
    dab4:	dd400815 	stw	r21,32(sp)
    dab8:	dc800515 	stw	r18,20(sp)
    dabc:	843fffc4 	addi	r16,r16,-1
    dac0:	dfc00c15 	stw	ra,48(sp)
    dac4:	df000b15 	stw	fp,44(sp)
    dac8:	ddc00a15 	stw	r23,40(sp)
    dacc:	dd000715 	stw	r20,28(sp)
    dad0:	dcc00615 	stw	r19,24(sp)
    dad4:	dc400415 	stw	r17,16(sp)
    dad8:	1481ffcc 	andi	r18,r2,2047
    dadc:	2c20703a 	and	r16,r5,r16
    dae0:	b02b883a 	mov	r21,r22
    dae4:	b2403fcc 	andi	r9,r22,255
    dae8:	90006026 	beq	r18,zero,dc6c <__muldf3+0x1d0>
    daec:	0081ffc4 	movi	r2,2047
    daf0:	2029883a 	mov	r20,r4
    daf4:	90803626 	beq	r18,r2,dbd0 <__muldf3+0x134>
    daf8:	80800434 	orhi	r2,r16,16
    dafc:	100490fa 	slli	r2,r2,3
    db00:	2020d77a 	srli	r16,r4,29
    db04:	202890fa 	slli	r20,r4,3
    db08:	94bf0044 	addi	r18,r18,-1023
    db0c:	80a0b03a 	or	r16,r16,r2
    db10:	0027883a 	mov	r19,zero
    db14:	0039883a 	mov	fp,zero
    db18:	3804d53a 	srli	r2,r7,20
    db1c:	382ed7fa 	srli	r23,r7,31
    db20:	04400434 	movhi	r17,16
    db24:	8c7fffc4 	addi	r17,r17,-1
    db28:	1081ffcc 	andi	r2,r2,2047
    db2c:	3011883a 	mov	r8,r6
    db30:	3c62703a 	and	r17,r7,r17
    db34:	ba803fcc 	andi	r10,r23,255
    db38:	10006d26 	beq	r2,zero,dcf0 <__muldf3+0x254>
    db3c:	00c1ffc4 	movi	r3,2047
    db40:	10c06526 	beq	r2,r3,dcd8 <__muldf3+0x23c>
    db44:	88c00434 	orhi	r3,r17,16
    db48:	180690fa 	slli	r3,r3,3
    db4c:	3022d77a 	srli	r17,r6,29
    db50:	301090fa 	slli	r8,r6,3
    db54:	10bf0044 	addi	r2,r2,-1023
    db58:	88e2b03a 	or	r17,r17,r3
    db5c:	000b883a 	mov	r5,zero
    db60:	9085883a 	add	r2,r18,r2
    db64:	2cc8b03a 	or	r4,r5,r19
    db68:	00c003c4 	movi	r3,15
    db6c:	bdacf03a 	xor	r22,r23,r22
    db70:	12c00044 	addi	r11,r2,1
    db74:	19009936 	bltu	r3,r4,dddc <__muldf3+0x340>
    db78:	200890ba 	slli	r4,r4,2
    db7c:	00c00074 	movhi	r3,1
    db80:	18f6e404 	addi	r3,r3,-9328
    db84:	20c9883a 	add	r4,r4,r3
    db88:	20c00017 	ldw	r3,0(r4)
    db8c:	1800683a 	jmp	r3
    db90:	0000dddc 	xori	zero,zero,887
    db94:	0000dbf0 	cmpltui	zero,zero,879
    db98:	0000dbf0 	cmpltui	zero,zero,879
    db9c:	0000dbec 	andhi	zero,zero,879
    dba0:	0000ddb8 	rdprs	zero,zero,886
    dba4:	0000ddb8 	rdprs	zero,zero,886
    dba8:	0000dda0 	cmpeqi	zero,zero,886
    dbac:	0000dbec 	andhi	zero,zero,879
    dbb0:	0000ddb8 	rdprs	zero,zero,886
    dbb4:	0000dda0 	cmpeqi	zero,zero,886
    dbb8:	0000ddb8 	rdprs	zero,zero,886
    dbbc:	0000dbec 	andhi	zero,zero,879
    dbc0:	0000ddc8 	cmpgei	zero,zero,887
    dbc4:	0000ddc8 	cmpgei	zero,zero,887
    dbc8:	0000ddc8 	cmpgei	zero,zero,887
    dbcc:	0000dfe4 	muli	zero,zero,895
    dbd0:	2404b03a 	or	r2,r4,r16
    dbd4:	10006f1e 	bne	r2,zero,dd94 <__muldf3+0x2f8>
    dbd8:	04c00204 	movi	r19,8
    dbdc:	0021883a 	mov	r16,zero
    dbe0:	0029883a 	mov	r20,zero
    dbe4:	07000084 	movi	fp,2
    dbe8:	003fcb06 	br	db18 <__muldf3+0x7c>
    dbec:	502d883a 	mov	r22,r10
    dbf0:	00800084 	movi	r2,2
    dbf4:	28805726 	beq	r5,r2,dd54 <__muldf3+0x2b8>
    dbf8:	008000c4 	movi	r2,3
    dbfc:	28816626 	beq	r5,r2,e198 <__muldf3+0x6fc>
    dc00:	00800044 	movi	r2,1
    dc04:	2881411e 	bne	r5,r2,e10c <__muldf3+0x670>
    dc08:	b02b883a 	mov	r21,r22
    dc0c:	0005883a 	mov	r2,zero
    dc10:	000b883a 	mov	r5,zero
    dc14:	0029883a 	mov	r20,zero
    dc18:	1004953a 	slli	r2,r2,20
    dc1c:	a8c03fcc 	andi	r3,r21,255
    dc20:	04400434 	movhi	r17,16
    dc24:	8c7fffc4 	addi	r17,r17,-1
    dc28:	180697fa 	slli	r3,r3,31
    dc2c:	2c4a703a 	and	r5,r5,r17
    dc30:	288ab03a 	or	r5,r5,r2
    dc34:	28c6b03a 	or	r3,r5,r3
    dc38:	a005883a 	mov	r2,r20
    dc3c:	dfc00c17 	ldw	ra,48(sp)
    dc40:	df000b17 	ldw	fp,44(sp)
    dc44:	ddc00a17 	ldw	r23,40(sp)
    dc48:	dd800917 	ldw	r22,36(sp)
    dc4c:	dd400817 	ldw	r21,32(sp)
    dc50:	dd000717 	ldw	r20,28(sp)
    dc54:	dcc00617 	ldw	r19,24(sp)
    dc58:	dc800517 	ldw	r18,20(sp)
    dc5c:	dc400417 	ldw	r17,16(sp)
    dc60:	dc000317 	ldw	r16,12(sp)
    dc64:	dec00d04 	addi	sp,sp,52
    dc68:	f800283a 	ret
    dc6c:	2404b03a 	or	r2,r4,r16
    dc70:	2027883a 	mov	r19,r4
    dc74:	10004226 	beq	r2,zero,dd80 <__muldf3+0x2e4>
    dc78:	8000fc26 	beq	r16,zero,e06c <__muldf3+0x5d0>
    dc7c:	8009883a 	mov	r4,r16
    dc80:	d9800215 	stw	r6,8(sp)
    dc84:	d9c00015 	stw	r7,0(sp)
    dc88:	da400115 	stw	r9,4(sp)
    dc8c:	000ecb40 	call	ecb4 <__clzsi2>
    dc90:	d9800217 	ldw	r6,8(sp)
    dc94:	d9c00017 	ldw	r7,0(sp)
    dc98:	da400117 	ldw	r9,4(sp)
    dc9c:	113ffd44 	addi	r4,r2,-11
    dca0:	00c00704 	movi	r3,28
    dca4:	1900ed16 	blt	r3,r4,e05c <__muldf3+0x5c0>
    dca8:	00c00744 	movi	r3,29
    dcac:	147ffe04 	addi	r17,r2,-8
    dcb0:	1907c83a 	sub	r3,r3,r4
    dcb4:	8460983a 	sll	r16,r16,r17
    dcb8:	98c6d83a 	srl	r3,r19,r3
    dcbc:	9c68983a 	sll	r20,r19,r17
    dcc0:	1c20b03a 	or	r16,r3,r16
    dcc4:	1080fcc4 	addi	r2,r2,1011
    dcc8:	00a5c83a 	sub	r18,zero,r2
    dccc:	0027883a 	mov	r19,zero
    dcd0:	0039883a 	mov	fp,zero
    dcd4:	003f9006 	br	db18 <__muldf3+0x7c>
    dcd8:	3446b03a 	or	r3,r6,r17
    dcdc:	1800261e 	bne	r3,zero,dd78 <__muldf3+0x2dc>
    dce0:	0023883a 	mov	r17,zero
    dce4:	0011883a 	mov	r8,zero
    dce8:	01400084 	movi	r5,2
    dcec:	003f9c06 	br	db60 <__muldf3+0xc4>
    dcf0:	3446b03a 	or	r3,r6,r17
    dcf4:	18001c26 	beq	r3,zero,dd68 <__muldf3+0x2cc>
    dcf8:	8800ce26 	beq	r17,zero,e034 <__muldf3+0x598>
    dcfc:	8809883a 	mov	r4,r17
    dd00:	d9800215 	stw	r6,8(sp)
    dd04:	da400115 	stw	r9,4(sp)
    dd08:	da800015 	stw	r10,0(sp)
    dd0c:	000ecb40 	call	ecb4 <__clzsi2>
    dd10:	d9800217 	ldw	r6,8(sp)
    dd14:	da400117 	ldw	r9,4(sp)
    dd18:	da800017 	ldw	r10,0(sp)
    dd1c:	113ffd44 	addi	r4,r2,-11
    dd20:	00c00704 	movi	r3,28
    dd24:	1900bf16 	blt	r3,r4,e024 <__muldf3+0x588>
    dd28:	00c00744 	movi	r3,29
    dd2c:	123ffe04 	addi	r8,r2,-8
    dd30:	1907c83a 	sub	r3,r3,r4
    dd34:	8a22983a 	sll	r17,r17,r8
    dd38:	30c6d83a 	srl	r3,r6,r3
    dd3c:	3210983a 	sll	r8,r6,r8
    dd40:	1c62b03a 	or	r17,r3,r17
    dd44:	1080fcc4 	addi	r2,r2,1011
    dd48:	0085c83a 	sub	r2,zero,r2
    dd4c:	000b883a 	mov	r5,zero
    dd50:	003f8306 	br	db60 <__muldf3+0xc4>
    dd54:	b02b883a 	mov	r21,r22
    dd58:	0081ffc4 	movi	r2,2047
    dd5c:	000b883a 	mov	r5,zero
    dd60:	0029883a 	mov	r20,zero
    dd64:	003fac06 	br	dc18 <__muldf3+0x17c>
    dd68:	0023883a 	mov	r17,zero
    dd6c:	0011883a 	mov	r8,zero
    dd70:	01400044 	movi	r5,1
    dd74:	003f7a06 	br	db60 <__muldf3+0xc4>
    dd78:	014000c4 	movi	r5,3
    dd7c:	003f7806 	br	db60 <__muldf3+0xc4>
    dd80:	04c00104 	movi	r19,4
    dd84:	0021883a 	mov	r16,zero
    dd88:	0029883a 	mov	r20,zero
    dd8c:	07000044 	movi	fp,1
    dd90:	003f6106 	br	db18 <__muldf3+0x7c>
    dd94:	04c00304 	movi	r19,12
    dd98:	070000c4 	movi	fp,3
    dd9c:	003f5e06 	br	db18 <__muldf3+0x7c>
    dda0:	01400434 	movhi	r5,16
    dda4:	002b883a 	mov	r21,zero
    dda8:	297fffc4 	addi	r5,r5,-1
    ddac:	053fffc4 	movi	r20,-1
    ddb0:	0081ffc4 	movi	r2,2047
    ddb4:	003f9806 	br	dc18 <__muldf3+0x17c>
    ddb8:	8023883a 	mov	r17,r16
    ddbc:	a011883a 	mov	r8,r20
    ddc0:	e00b883a 	mov	r5,fp
    ddc4:	003f8a06 	br	dbf0 <__muldf3+0x154>
    ddc8:	8023883a 	mov	r17,r16
    ddcc:	a011883a 	mov	r8,r20
    ddd0:	482d883a 	mov	r22,r9
    ddd4:	e00b883a 	mov	r5,fp
    ddd8:	003f8506 	br	dbf0 <__muldf3+0x154>
    dddc:	a00ad43a 	srli	r5,r20,16
    dde0:	401ad43a 	srli	r13,r8,16
    dde4:	a53fffcc 	andi	r20,r20,65535
    dde8:	423fffcc 	andi	r8,r8,65535
    ddec:	4519383a 	mul	r12,r8,r20
    ddf0:	4147383a 	mul	r3,r8,r5
    ddf4:	6d09383a 	mul	r4,r13,r20
    ddf8:	600cd43a 	srli	r6,r12,16
    ddfc:	2b5d383a 	mul	r14,r5,r13
    de00:	20c9883a 	add	r4,r4,r3
    de04:	310d883a 	add	r6,r6,r4
    de08:	30c0022e 	bgeu	r6,r3,de14 <__muldf3+0x378>
    de0c:	00c00074 	movhi	r3,1
    de10:	70dd883a 	add	r14,r14,r3
    de14:	8826d43a 	srli	r19,r17,16
    de18:	8bffffcc 	andi	r15,r17,65535
    de1c:	7d23383a 	mul	r17,r15,r20
    de20:	7949383a 	mul	r4,r15,r5
    de24:	9d29383a 	mul	r20,r19,r20
    de28:	8814d43a 	srli	r10,r17,16
    de2c:	3012943a 	slli	r9,r6,16
    de30:	a129883a 	add	r20,r20,r4
    de34:	633fffcc 	andi	r12,r12,65535
    de38:	5515883a 	add	r10,r10,r20
    de3c:	3006d43a 	srli	r3,r6,16
    de40:	4b13883a 	add	r9,r9,r12
    de44:	2ccb383a 	mul	r5,r5,r19
    de48:	5100022e 	bgeu	r10,r4,de54 <__muldf3+0x3b8>
    de4c:	01000074 	movhi	r4,1
    de50:	290b883a 	add	r5,r5,r4
    de54:	802ad43a 	srli	r21,r16,16
    de58:	843fffcc 	andi	r16,r16,65535
    de5c:	440d383a 	mul	r6,r8,r16
    de60:	4565383a 	mul	r18,r8,r21
    de64:	8349383a 	mul	r4,r16,r13
    de68:	500e943a 	slli	r7,r10,16
    de6c:	3010d43a 	srli	r8,r6,16
    de70:	5028d43a 	srli	r20,r10,16
    de74:	2489883a 	add	r4,r4,r18
    de78:	8abfffcc 	andi	r10,r17,65535
    de7c:	3a95883a 	add	r10,r7,r10
    de80:	4119883a 	add	r12,r8,r4
    de84:	a169883a 	add	r20,r20,r5
    de88:	1a87883a 	add	r3,r3,r10
    de8c:	6d5b383a 	mul	r13,r13,r21
    de90:	6480022e 	bgeu	r12,r18,de9c <__muldf3+0x400>
    de94:	01000074 	movhi	r4,1
    de98:	691b883a 	add	r13,r13,r4
    de9c:	7c25383a 	mul	r18,r15,r16
    dea0:	7d4b383a 	mul	r5,r15,r21
    dea4:	84cf383a 	mul	r7,r16,r19
    dea8:	901ed43a 	srli	r15,r18,16
    deac:	6008d43a 	srli	r4,r12,16
    deb0:	6010943a 	slli	r8,r12,16
    deb4:	394f883a 	add	r7,r7,r5
    deb8:	333fffcc 	andi	r12,r6,65535
    debc:	79df883a 	add	r15,r15,r7
    dec0:	235b883a 	add	r13,r4,r13
    dec4:	9d63383a 	mul	r17,r19,r21
    dec8:	4309883a 	add	r4,r8,r12
    decc:	7940022e 	bgeu	r15,r5,ded8 <__muldf3+0x43c>
    ded0:	01400074 	movhi	r5,1
    ded4:	8963883a 	add	r17,r17,r5
    ded8:	780a943a 	slli	r5,r15,16
    dedc:	91bfffcc 	andi	r6,r18,65535
    dee0:	70c7883a 	add	r3,r14,r3
    dee4:	298d883a 	add	r6,r5,r6
    dee8:	1a8f803a 	cmpltu	r7,r3,r10
    deec:	350b883a 	add	r5,r6,r20
    def0:	20c7883a 	add	r3,r4,r3
    def4:	3955883a 	add	r10,r7,r5
    def8:	1909803a 	cmpltu	r4,r3,r4
    defc:	6a91883a 	add	r8,r13,r10
    df00:	780cd43a 	srli	r6,r15,16
    df04:	2219883a 	add	r12,r4,r8
    df08:	2d0b803a 	cmpltu	r5,r5,r20
    df0c:	51cf803a 	cmpltu	r7,r10,r7
    df10:	29ceb03a 	or	r7,r5,r7
    df14:	4351803a 	cmpltu	r8,r8,r13
    df18:	610b803a 	cmpltu	r5,r12,r4
    df1c:	4148b03a 	or	r4,r8,r5
    df20:	398f883a 	add	r7,r7,r6
    df24:	3909883a 	add	r4,r7,r4
    df28:	1810927a 	slli	r8,r3,9
    df2c:	2449883a 	add	r4,r4,r17
    df30:	2008927a 	slli	r4,r4,9
    df34:	6022d5fa 	srli	r17,r12,23
    df38:	1806d5fa 	srli	r3,r3,23
    df3c:	4252b03a 	or	r9,r8,r9
    df40:	600a927a 	slli	r5,r12,9
    df44:	4810c03a 	cmpne	r8,r9,zero
    df48:	2462b03a 	or	r17,r4,r17
    df4c:	40c6b03a 	or	r3,r8,r3
    df50:	8900402c 	andhi	r4,r17,256
    df54:	1950b03a 	or	r8,r3,r5
    df58:	20000726 	beq	r4,zero,df78 <__muldf3+0x4dc>
    df5c:	4006d07a 	srli	r3,r8,1
    df60:	880497fa 	slli	r2,r17,31
    df64:	4200004c 	andi	r8,r8,1
    df68:	8822d07a 	srli	r17,r17,1
    df6c:	1a10b03a 	or	r8,r3,r8
    df70:	1210b03a 	or	r8,r2,r8
    df74:	5805883a 	mov	r2,r11
    df78:	1140ffc4 	addi	r5,r2,1023
    df7c:	0140440e 	bge	zero,r5,e090 <__muldf3+0x5f4>
    df80:	40c001cc 	andi	r3,r8,7
    df84:	18000726 	beq	r3,zero,dfa4 <__muldf3+0x508>
    df88:	40c003cc 	andi	r3,r8,15
    df8c:	01000104 	movi	r4,4
    df90:	19000426 	beq	r3,r4,dfa4 <__muldf3+0x508>
    df94:	4107883a 	add	r3,r8,r4
    df98:	1a11803a 	cmpltu	r8,r3,r8
    df9c:	8a23883a 	add	r17,r17,r8
    dfa0:	1811883a 	mov	r8,r3
    dfa4:	88c0402c 	andhi	r3,r17,256
    dfa8:	18000426 	beq	r3,zero,dfbc <__muldf3+0x520>
    dfac:	11410004 	addi	r5,r2,1024
    dfb0:	00bfc034 	movhi	r2,65280
    dfb4:	10bfffc4 	addi	r2,r2,-1
    dfb8:	88a2703a 	and	r17,r17,r2
    dfbc:	0081ff84 	movi	r2,2046
    dfc0:	117f6416 	blt	r2,r5,dd54 <__muldf3+0x2b8>
    dfc4:	8828977a 	slli	r20,r17,29
    dfc8:	4010d0fa 	srli	r8,r8,3
    dfcc:	8822927a 	slli	r17,r17,9
    dfd0:	2881ffcc 	andi	r2,r5,2047
    dfd4:	a228b03a 	or	r20,r20,r8
    dfd8:	880ad33a 	srli	r5,r17,12
    dfdc:	b02b883a 	mov	r21,r22
    dfe0:	003f0d06 	br	dc18 <__muldf3+0x17c>
    dfe4:	8080022c 	andhi	r2,r16,8
    dfe8:	10000926 	beq	r2,zero,e010 <__muldf3+0x574>
    dfec:	8880022c 	andhi	r2,r17,8
    dff0:	1000071e 	bne	r2,zero,e010 <__muldf3+0x574>
    dff4:	00800434 	movhi	r2,16
    dff8:	89400234 	orhi	r5,r17,8
    dffc:	10bfffc4 	addi	r2,r2,-1
    e000:	b82b883a 	mov	r21,r23
    e004:	288a703a 	and	r5,r5,r2
    e008:	4029883a 	mov	r20,r8
    e00c:	003f6806 	br	ddb0 <__muldf3+0x314>
    e010:	00800434 	movhi	r2,16
    e014:	81400234 	orhi	r5,r16,8
    e018:	10bfffc4 	addi	r2,r2,-1
    e01c:	288a703a 	and	r5,r5,r2
    e020:	003f6306 	br	ddb0 <__muldf3+0x314>
    e024:	147ff604 	addi	r17,r2,-40
    e028:	3462983a 	sll	r17,r6,r17
    e02c:	0011883a 	mov	r8,zero
    e030:	003f4406 	br	dd44 <__muldf3+0x2a8>
    e034:	3009883a 	mov	r4,r6
    e038:	d9800215 	stw	r6,8(sp)
    e03c:	da400115 	stw	r9,4(sp)
    e040:	da800015 	stw	r10,0(sp)
    e044:	000ecb40 	call	ecb4 <__clzsi2>
    e048:	10800804 	addi	r2,r2,32
    e04c:	da800017 	ldw	r10,0(sp)
    e050:	da400117 	ldw	r9,4(sp)
    e054:	d9800217 	ldw	r6,8(sp)
    e058:	003f3006 	br	dd1c <__muldf3+0x280>
    e05c:	143ff604 	addi	r16,r2,-40
    e060:	9c20983a 	sll	r16,r19,r16
    e064:	0029883a 	mov	r20,zero
    e068:	003f1606 	br	dcc4 <__muldf3+0x228>
    e06c:	d9800215 	stw	r6,8(sp)
    e070:	d9c00015 	stw	r7,0(sp)
    e074:	da400115 	stw	r9,4(sp)
    e078:	000ecb40 	call	ecb4 <__clzsi2>
    e07c:	10800804 	addi	r2,r2,32
    e080:	da400117 	ldw	r9,4(sp)
    e084:	d9c00017 	ldw	r7,0(sp)
    e088:	d9800217 	ldw	r6,8(sp)
    e08c:	003f0306 	br	dc9c <__muldf3+0x200>
    e090:	00c00044 	movi	r3,1
    e094:	1947c83a 	sub	r3,r3,r5
    e098:	00800e04 	movi	r2,56
    e09c:	10feda16 	blt	r2,r3,dc08 <__muldf3+0x16c>
    e0a0:	008007c4 	movi	r2,31
    e0a4:	10c01b16 	blt	r2,r3,e114 <__muldf3+0x678>
    e0a8:	00800804 	movi	r2,32
    e0ac:	10c5c83a 	sub	r2,r2,r3
    e0b0:	888a983a 	sll	r5,r17,r2
    e0b4:	40c8d83a 	srl	r4,r8,r3
    e0b8:	4084983a 	sll	r2,r8,r2
    e0bc:	88e2d83a 	srl	r17,r17,r3
    e0c0:	2906b03a 	or	r3,r5,r4
    e0c4:	1004c03a 	cmpne	r2,r2,zero
    e0c8:	1886b03a 	or	r3,r3,r2
    e0cc:	188001cc 	andi	r2,r3,7
    e0d0:	10000726 	beq	r2,zero,e0f0 <__muldf3+0x654>
    e0d4:	188003cc 	andi	r2,r3,15
    e0d8:	01000104 	movi	r4,4
    e0dc:	11000426 	beq	r2,r4,e0f0 <__muldf3+0x654>
    e0e0:	1805883a 	mov	r2,r3
    e0e4:	10c00104 	addi	r3,r2,4
    e0e8:	1885803a 	cmpltu	r2,r3,r2
    e0ec:	88a3883a 	add	r17,r17,r2
    e0f0:	8880202c 	andhi	r2,r17,128
    e0f4:	10001c26 	beq	r2,zero,e168 <__muldf3+0x6cc>
    e0f8:	b02b883a 	mov	r21,r22
    e0fc:	00800044 	movi	r2,1
    e100:	000b883a 	mov	r5,zero
    e104:	0029883a 	mov	r20,zero
    e108:	003ec306 	br	dc18 <__muldf3+0x17c>
    e10c:	5805883a 	mov	r2,r11
    e110:	003f9906 	br	df78 <__muldf3+0x4dc>
    e114:	00bff844 	movi	r2,-31
    e118:	1145c83a 	sub	r2,r2,r5
    e11c:	8888d83a 	srl	r4,r17,r2
    e120:	00800804 	movi	r2,32
    e124:	18801a26 	beq	r3,r2,e190 <__muldf3+0x6f4>
    e128:	00801004 	movi	r2,64
    e12c:	10c5c83a 	sub	r2,r2,r3
    e130:	8884983a 	sll	r2,r17,r2
    e134:	1204b03a 	or	r2,r2,r8
    e138:	1004c03a 	cmpne	r2,r2,zero
    e13c:	2084b03a 	or	r2,r4,r2
    e140:	144001cc 	andi	r17,r2,7
    e144:	88000d1e 	bne	r17,zero,e17c <__muldf3+0x6e0>
    e148:	000b883a 	mov	r5,zero
    e14c:	1028d0fa 	srli	r20,r2,3
    e150:	b02b883a 	mov	r21,r22
    e154:	0005883a 	mov	r2,zero
    e158:	a468b03a 	or	r20,r20,r17
    e15c:	003eae06 	br	dc18 <__muldf3+0x17c>
    e160:	1007883a 	mov	r3,r2
    e164:	0023883a 	mov	r17,zero
    e168:	880a927a 	slli	r5,r17,9
    e16c:	1805883a 	mov	r2,r3
    e170:	8822977a 	slli	r17,r17,29
    e174:	280ad33a 	srli	r5,r5,12
    e178:	003ff406 	br	e14c <__muldf3+0x6b0>
    e17c:	10c003cc 	andi	r3,r2,15
    e180:	01000104 	movi	r4,4
    e184:	193ff626 	beq	r3,r4,e160 <__muldf3+0x6c4>
    e188:	0023883a 	mov	r17,zero
    e18c:	003fd506 	br	e0e4 <__muldf3+0x648>
    e190:	0005883a 	mov	r2,zero
    e194:	003fe706 	br	e134 <__muldf3+0x698>
    e198:	00800434 	movhi	r2,16
    e19c:	89400234 	orhi	r5,r17,8
    e1a0:	10bfffc4 	addi	r2,r2,-1
    e1a4:	b02b883a 	mov	r21,r22
    e1a8:	288a703a 	and	r5,r5,r2
    e1ac:	4029883a 	mov	r20,r8
    e1b0:	003eff06 	br	ddb0 <__muldf3+0x314>

0000e1b4 <__subdf3>:
    e1b4:	02000434 	movhi	r8,16
    e1b8:	423fffc4 	addi	r8,r8,-1
    e1bc:	defffb04 	addi	sp,sp,-20
    e1c0:	2a14703a 	and	r10,r5,r8
    e1c4:	3812d53a 	srli	r9,r7,20
    e1c8:	3a10703a 	and	r8,r7,r8
    e1cc:	2006d77a 	srli	r3,r4,29
    e1d0:	3004d77a 	srli	r2,r6,29
    e1d4:	dc000015 	stw	r16,0(sp)
    e1d8:	501490fa 	slli	r10,r10,3
    e1dc:	2820d53a 	srli	r16,r5,20
    e1e0:	401090fa 	slli	r8,r8,3
    e1e4:	dc800215 	stw	r18,8(sp)
    e1e8:	dc400115 	stw	r17,4(sp)
    e1ec:	dfc00415 	stw	ra,16(sp)
    e1f0:	202290fa 	slli	r17,r4,3
    e1f4:	dcc00315 	stw	r19,12(sp)
    e1f8:	4a41ffcc 	andi	r9,r9,2047
    e1fc:	0101ffc4 	movi	r4,2047
    e200:	2824d7fa 	srli	r18,r5,31
    e204:	8401ffcc 	andi	r16,r16,2047
    e208:	50c6b03a 	or	r3,r10,r3
    e20c:	380ed7fa 	srli	r7,r7,31
    e210:	408ab03a 	or	r5,r8,r2
    e214:	300c90fa 	slli	r6,r6,3
    e218:	49009626 	beq	r9,r4,e474 <__subdf3+0x2c0>
    e21c:	39c0005c 	xori	r7,r7,1
    e220:	8245c83a 	sub	r2,r16,r9
    e224:	3c807426 	beq	r7,r18,e3f8 <__subdf3+0x244>
    e228:	0080af0e 	bge	zero,r2,e4e8 <__subdf3+0x334>
    e22c:	48002a1e 	bne	r9,zero,e2d8 <__subdf3+0x124>
    e230:	2988b03a 	or	r4,r5,r6
    e234:	20009a1e 	bne	r4,zero,e4a0 <__subdf3+0x2ec>
    e238:	888001cc 	andi	r2,r17,7
    e23c:	10000726 	beq	r2,zero,e25c <__subdf3+0xa8>
    e240:	888003cc 	andi	r2,r17,15
    e244:	01000104 	movi	r4,4
    e248:	11000426 	beq	r2,r4,e25c <__subdf3+0xa8>
    e24c:	890b883a 	add	r5,r17,r4
    e250:	2c63803a 	cmpltu	r17,r5,r17
    e254:	1c47883a 	add	r3,r3,r17
    e258:	2823883a 	mov	r17,r5
    e25c:	1880202c 	andhi	r2,r3,128
    e260:	10005926 	beq	r2,zero,e3c8 <__subdf3+0x214>
    e264:	84000044 	addi	r16,r16,1
    e268:	0081ffc4 	movi	r2,2047
    e26c:	8080be26 	beq	r16,r2,e568 <__subdf3+0x3b4>
    e270:	017fe034 	movhi	r5,65408
    e274:	297fffc4 	addi	r5,r5,-1
    e278:	1946703a 	and	r3,r3,r5
    e27c:	1804977a 	slli	r2,r3,29
    e280:	1806927a 	slli	r3,r3,9
    e284:	8822d0fa 	srli	r17,r17,3
    e288:	8401ffcc 	andi	r16,r16,2047
    e28c:	180ad33a 	srli	r5,r3,12
    e290:	9100004c 	andi	r4,r18,1
    e294:	1444b03a 	or	r2,r2,r17
    e298:	80c1ffcc 	andi	r3,r16,2047
    e29c:	1820953a 	slli	r16,r3,20
    e2a0:	20c03fcc 	andi	r3,r4,255
    e2a4:	180897fa 	slli	r4,r3,31
    e2a8:	00c00434 	movhi	r3,16
    e2ac:	18ffffc4 	addi	r3,r3,-1
    e2b0:	28c6703a 	and	r3,r5,r3
    e2b4:	1c06b03a 	or	r3,r3,r16
    e2b8:	1906b03a 	or	r3,r3,r4
    e2bc:	dfc00417 	ldw	ra,16(sp)
    e2c0:	dcc00317 	ldw	r19,12(sp)
    e2c4:	dc800217 	ldw	r18,8(sp)
    e2c8:	dc400117 	ldw	r17,4(sp)
    e2cc:	dc000017 	ldw	r16,0(sp)
    e2d0:	dec00504 	addi	sp,sp,20
    e2d4:	f800283a 	ret
    e2d8:	0101ffc4 	movi	r4,2047
    e2dc:	813fd626 	beq	r16,r4,e238 <__subdf3+0x84>
    e2e0:	29402034 	orhi	r5,r5,128
    e2e4:	01000e04 	movi	r4,56
    e2e8:	2080a316 	blt	r4,r2,e578 <__subdf3+0x3c4>
    e2ec:	010007c4 	movi	r4,31
    e2f0:	2080c616 	blt	r4,r2,e60c <__subdf3+0x458>
    e2f4:	01000804 	movi	r4,32
    e2f8:	2089c83a 	sub	r4,r4,r2
    e2fc:	2910983a 	sll	r8,r5,r4
    e300:	308ed83a 	srl	r7,r6,r2
    e304:	3108983a 	sll	r4,r6,r4
    e308:	2884d83a 	srl	r2,r5,r2
    e30c:	41ccb03a 	or	r6,r8,r7
    e310:	2008c03a 	cmpne	r4,r4,zero
    e314:	310cb03a 	or	r6,r6,r4
    e318:	898dc83a 	sub	r6,r17,r6
    e31c:	89a3803a 	cmpltu	r17,r17,r6
    e320:	1887c83a 	sub	r3,r3,r2
    e324:	1c47c83a 	sub	r3,r3,r17
    e328:	3023883a 	mov	r17,r6
    e32c:	1880202c 	andhi	r2,r3,128
    e330:	10002326 	beq	r2,zero,e3c0 <__subdf3+0x20c>
    e334:	04c02034 	movhi	r19,128
    e338:	9cffffc4 	addi	r19,r19,-1
    e33c:	1ce6703a 	and	r19,r3,r19
    e340:	98007a26 	beq	r19,zero,e52c <__subdf3+0x378>
    e344:	9809883a 	mov	r4,r19
    e348:	000ecb40 	call	ecb4 <__clzsi2>
    e34c:	113ffe04 	addi	r4,r2,-8
    e350:	00c007c4 	movi	r3,31
    e354:	19007b16 	blt	r3,r4,e544 <__subdf3+0x390>
    e358:	00800804 	movi	r2,32
    e35c:	1105c83a 	sub	r2,r2,r4
    e360:	8884d83a 	srl	r2,r17,r2
    e364:	9906983a 	sll	r3,r19,r4
    e368:	8922983a 	sll	r17,r17,r4
    e36c:	10c4b03a 	or	r2,r2,r3
    e370:	24007816 	blt	r4,r16,e554 <__subdf3+0x3a0>
    e374:	2421c83a 	sub	r16,r4,r16
    e378:	80c00044 	addi	r3,r16,1
    e37c:	010007c4 	movi	r4,31
    e380:	20c09516 	blt	r4,r3,e5d8 <__subdf3+0x424>
    e384:	01400804 	movi	r5,32
    e388:	28cbc83a 	sub	r5,r5,r3
    e38c:	88c8d83a 	srl	r4,r17,r3
    e390:	8962983a 	sll	r17,r17,r5
    e394:	114a983a 	sll	r5,r2,r5
    e398:	10c6d83a 	srl	r3,r2,r3
    e39c:	8804c03a 	cmpne	r2,r17,zero
    e3a0:	290ab03a 	or	r5,r5,r4
    e3a4:	28a2b03a 	or	r17,r5,r2
    e3a8:	0021883a 	mov	r16,zero
    e3ac:	003fa206 	br	e238 <__subdf3+0x84>
    e3b0:	2090b03a 	or	r8,r4,r2
    e3b4:	40018e26 	beq	r8,zero,e9f0 <__subdf3+0x83c>
    e3b8:	1007883a 	mov	r3,r2
    e3bc:	2023883a 	mov	r17,r4
    e3c0:	888001cc 	andi	r2,r17,7
    e3c4:	103f9e1e 	bne	r2,zero,e240 <__subdf3+0x8c>
    e3c8:	1804977a 	slli	r2,r3,29
    e3cc:	8822d0fa 	srli	r17,r17,3
    e3d0:	1810d0fa 	srli	r8,r3,3
    e3d4:	9100004c 	andi	r4,r18,1
    e3d8:	1444b03a 	or	r2,r2,r17
    e3dc:	00c1ffc4 	movi	r3,2047
    e3e0:	80c02826 	beq	r16,r3,e484 <__subdf3+0x2d0>
    e3e4:	01400434 	movhi	r5,16
    e3e8:	297fffc4 	addi	r5,r5,-1
    e3ec:	80e0703a 	and	r16,r16,r3
    e3f0:	414a703a 	and	r5,r8,r5
    e3f4:	003fa806 	br	e298 <__subdf3+0xe4>
    e3f8:	0080630e 	bge	zero,r2,e588 <__subdf3+0x3d4>
    e3fc:	48003026 	beq	r9,zero,e4c0 <__subdf3+0x30c>
    e400:	0101ffc4 	movi	r4,2047
    e404:	813f8c26 	beq	r16,r4,e238 <__subdf3+0x84>
    e408:	29402034 	orhi	r5,r5,128
    e40c:	01000e04 	movi	r4,56
    e410:	2080a90e 	bge	r4,r2,e6b8 <__subdf3+0x504>
    e414:	298cb03a 	or	r6,r5,r6
    e418:	3012c03a 	cmpne	r9,r6,zero
    e41c:	0005883a 	mov	r2,zero
    e420:	4c53883a 	add	r9,r9,r17
    e424:	4c63803a 	cmpltu	r17,r9,r17
    e428:	10c7883a 	add	r3,r2,r3
    e42c:	88c7883a 	add	r3,r17,r3
    e430:	4823883a 	mov	r17,r9
    e434:	1880202c 	andhi	r2,r3,128
    e438:	1000d026 	beq	r2,zero,e77c <__subdf3+0x5c8>
    e43c:	84000044 	addi	r16,r16,1
    e440:	0081ffc4 	movi	r2,2047
    e444:	8080fe26 	beq	r16,r2,e840 <__subdf3+0x68c>
    e448:	00bfe034 	movhi	r2,65408
    e44c:	10bfffc4 	addi	r2,r2,-1
    e450:	1886703a 	and	r3,r3,r2
    e454:	880ad07a 	srli	r5,r17,1
    e458:	180497fa 	slli	r2,r3,31
    e45c:	8900004c 	andi	r4,r17,1
    e460:	2922b03a 	or	r17,r5,r4
    e464:	1806d07a 	srli	r3,r3,1
    e468:	1462b03a 	or	r17,r2,r17
    e46c:	3825883a 	mov	r18,r7
    e470:	003f7106 	br	e238 <__subdf3+0x84>
    e474:	2984b03a 	or	r2,r5,r6
    e478:	103f6826 	beq	r2,zero,e21c <__subdf3+0x68>
    e47c:	39c03fcc 	andi	r7,r7,255
    e480:	003f6706 	br	e220 <__subdf3+0x6c>
    e484:	4086b03a 	or	r3,r8,r2
    e488:	18015226 	beq	r3,zero,e9d4 <__subdf3+0x820>
    e48c:	00c00434 	movhi	r3,16
    e490:	41400234 	orhi	r5,r8,8
    e494:	18ffffc4 	addi	r3,r3,-1
    e498:	28ca703a 	and	r5,r5,r3
    e49c:	003f7e06 	br	e298 <__subdf3+0xe4>
    e4a0:	10bfffc4 	addi	r2,r2,-1
    e4a4:	1000491e 	bne	r2,zero,e5cc <__subdf3+0x418>
    e4a8:	898fc83a 	sub	r7,r17,r6
    e4ac:	89e3803a 	cmpltu	r17,r17,r7
    e4b0:	1947c83a 	sub	r3,r3,r5
    e4b4:	1c47c83a 	sub	r3,r3,r17
    e4b8:	3823883a 	mov	r17,r7
    e4bc:	003f9b06 	br	e32c <__subdf3+0x178>
    e4c0:	2988b03a 	or	r4,r5,r6
    e4c4:	203f5c26 	beq	r4,zero,e238 <__subdf3+0x84>
    e4c8:	10bfffc4 	addi	r2,r2,-1
    e4cc:	1000931e 	bne	r2,zero,e71c <__subdf3+0x568>
    e4d0:	898d883a 	add	r6,r17,r6
    e4d4:	3463803a 	cmpltu	r17,r6,r17
    e4d8:	1947883a 	add	r3,r3,r5
    e4dc:	88c7883a 	add	r3,r17,r3
    e4e0:	3023883a 	mov	r17,r6
    e4e4:	003fd306 	br	e434 <__subdf3+0x280>
    e4e8:	1000541e 	bne	r2,zero,e63c <__subdf3+0x488>
    e4ec:	80800044 	addi	r2,r16,1
    e4f0:	1081ffcc 	andi	r2,r2,2047
    e4f4:	01000044 	movi	r4,1
    e4f8:	2080a20e 	bge	r4,r2,e784 <__subdf3+0x5d0>
    e4fc:	8989c83a 	sub	r4,r17,r6
    e500:	8905803a 	cmpltu	r2,r17,r4
    e504:	1967c83a 	sub	r19,r3,r5
    e508:	98a7c83a 	sub	r19,r19,r2
    e50c:	9880202c 	andhi	r2,r19,128
    e510:	10006326 	beq	r2,zero,e6a0 <__subdf3+0x4ec>
    e514:	3463c83a 	sub	r17,r6,r17
    e518:	28c7c83a 	sub	r3,r5,r3
    e51c:	344d803a 	cmpltu	r6,r6,r17
    e520:	19a7c83a 	sub	r19,r3,r6
    e524:	3825883a 	mov	r18,r7
    e528:	983f861e 	bne	r19,zero,e344 <__subdf3+0x190>
    e52c:	8809883a 	mov	r4,r17
    e530:	000ecb40 	call	ecb4 <__clzsi2>
    e534:	10800804 	addi	r2,r2,32
    e538:	113ffe04 	addi	r4,r2,-8
    e53c:	00c007c4 	movi	r3,31
    e540:	193f850e 	bge	r3,r4,e358 <__subdf3+0x1a4>
    e544:	10bff604 	addi	r2,r2,-40
    e548:	8884983a 	sll	r2,r17,r2
    e54c:	0023883a 	mov	r17,zero
    e550:	243f880e 	bge	r4,r16,e374 <__subdf3+0x1c0>
    e554:	00ffe034 	movhi	r3,65408
    e558:	18ffffc4 	addi	r3,r3,-1
    e55c:	8121c83a 	sub	r16,r16,r4
    e560:	10c6703a 	and	r3,r2,r3
    e564:	003f3406 	br	e238 <__subdf3+0x84>
    e568:	9100004c 	andi	r4,r18,1
    e56c:	000b883a 	mov	r5,zero
    e570:	0005883a 	mov	r2,zero
    e574:	003f4806 	br	e298 <__subdf3+0xe4>
    e578:	298cb03a 	or	r6,r5,r6
    e57c:	300cc03a 	cmpne	r6,r6,zero
    e580:	0005883a 	mov	r2,zero
    e584:	003f6406 	br	e318 <__subdf3+0x164>
    e588:	10009a1e 	bne	r2,zero,e7f4 <__subdf3+0x640>
    e58c:	82400044 	addi	r9,r16,1
    e590:	4881ffcc 	andi	r2,r9,2047
    e594:	02800044 	movi	r10,1
    e598:	5080670e 	bge	r10,r2,e738 <__subdf3+0x584>
    e59c:	0081ffc4 	movi	r2,2047
    e5a0:	4880af26 	beq	r9,r2,e860 <__subdf3+0x6ac>
    e5a4:	898d883a 	add	r6,r17,r6
    e5a8:	1945883a 	add	r2,r3,r5
    e5ac:	3447803a 	cmpltu	r3,r6,r17
    e5b0:	1887883a 	add	r3,r3,r2
    e5b4:	182297fa 	slli	r17,r3,31
    e5b8:	300cd07a 	srli	r6,r6,1
    e5bc:	1806d07a 	srli	r3,r3,1
    e5c0:	4821883a 	mov	r16,r9
    e5c4:	89a2b03a 	or	r17,r17,r6
    e5c8:	003f1b06 	br	e238 <__subdf3+0x84>
    e5cc:	0101ffc4 	movi	r4,2047
    e5d0:	813f441e 	bne	r16,r4,e2e4 <__subdf3+0x130>
    e5d4:	003f1806 	br	e238 <__subdf3+0x84>
    e5d8:	843ff844 	addi	r16,r16,-31
    e5dc:	01400804 	movi	r5,32
    e5e0:	1408d83a 	srl	r4,r2,r16
    e5e4:	19405026 	beq	r3,r5,e728 <__subdf3+0x574>
    e5e8:	01401004 	movi	r5,64
    e5ec:	28c7c83a 	sub	r3,r5,r3
    e5f0:	10c4983a 	sll	r2,r2,r3
    e5f4:	88a2b03a 	or	r17,r17,r2
    e5f8:	8822c03a 	cmpne	r17,r17,zero
    e5fc:	2462b03a 	or	r17,r4,r17
    e600:	0007883a 	mov	r3,zero
    e604:	0021883a 	mov	r16,zero
    e608:	003f6d06 	br	e3c0 <__subdf3+0x20c>
    e60c:	11fff804 	addi	r7,r2,-32
    e610:	01000804 	movi	r4,32
    e614:	29ced83a 	srl	r7,r5,r7
    e618:	11004526 	beq	r2,r4,e730 <__subdf3+0x57c>
    e61c:	01001004 	movi	r4,64
    e620:	2089c83a 	sub	r4,r4,r2
    e624:	2904983a 	sll	r2,r5,r4
    e628:	118cb03a 	or	r6,r2,r6
    e62c:	300cc03a 	cmpne	r6,r6,zero
    e630:	398cb03a 	or	r6,r7,r6
    e634:	0005883a 	mov	r2,zero
    e638:	003f3706 	br	e318 <__subdf3+0x164>
    e63c:	80002a26 	beq	r16,zero,e6e8 <__subdf3+0x534>
    e640:	0101ffc4 	movi	r4,2047
    e644:	49006626 	beq	r9,r4,e7e0 <__subdf3+0x62c>
    e648:	0085c83a 	sub	r2,zero,r2
    e64c:	18c02034 	orhi	r3,r3,128
    e650:	01000e04 	movi	r4,56
    e654:	20807e16 	blt	r4,r2,e850 <__subdf3+0x69c>
    e658:	010007c4 	movi	r4,31
    e65c:	2080e716 	blt	r4,r2,e9fc <__subdf3+0x848>
    e660:	01000804 	movi	r4,32
    e664:	2089c83a 	sub	r4,r4,r2
    e668:	1914983a 	sll	r10,r3,r4
    e66c:	8890d83a 	srl	r8,r17,r2
    e670:	8908983a 	sll	r4,r17,r4
    e674:	1884d83a 	srl	r2,r3,r2
    e678:	5222b03a 	or	r17,r10,r8
    e67c:	2006c03a 	cmpne	r3,r4,zero
    e680:	88e2b03a 	or	r17,r17,r3
    e684:	3463c83a 	sub	r17,r6,r17
    e688:	2885c83a 	sub	r2,r5,r2
    e68c:	344d803a 	cmpltu	r6,r6,r17
    e690:	1187c83a 	sub	r3,r2,r6
    e694:	4821883a 	mov	r16,r9
    e698:	3825883a 	mov	r18,r7
    e69c:	003f2306 	br	e32c <__subdf3+0x178>
    e6a0:	24d0b03a 	or	r8,r4,r19
    e6a4:	40001b1e 	bne	r8,zero,e714 <__subdf3+0x560>
    e6a8:	0005883a 	mov	r2,zero
    e6ac:	0009883a 	mov	r4,zero
    e6b0:	0021883a 	mov	r16,zero
    e6b4:	003f4906 	br	e3dc <__subdf3+0x228>
    e6b8:	010007c4 	movi	r4,31
    e6bc:	20803a16 	blt	r4,r2,e7a8 <__subdf3+0x5f4>
    e6c0:	01000804 	movi	r4,32
    e6c4:	2089c83a 	sub	r4,r4,r2
    e6c8:	2912983a 	sll	r9,r5,r4
    e6cc:	3090d83a 	srl	r8,r6,r2
    e6d0:	3108983a 	sll	r4,r6,r4
    e6d4:	2884d83a 	srl	r2,r5,r2
    e6d8:	4a12b03a 	or	r9,r9,r8
    e6dc:	2008c03a 	cmpne	r4,r4,zero
    e6e0:	4912b03a 	or	r9,r9,r4
    e6e4:	003f4e06 	br	e420 <__subdf3+0x26c>
    e6e8:	1c48b03a 	or	r4,r3,r17
    e6ec:	20003c26 	beq	r4,zero,e7e0 <__subdf3+0x62c>
    e6f0:	0084303a 	nor	r2,zero,r2
    e6f4:	1000381e 	bne	r2,zero,e7d8 <__subdf3+0x624>
    e6f8:	3463c83a 	sub	r17,r6,r17
    e6fc:	28c5c83a 	sub	r2,r5,r3
    e700:	344d803a 	cmpltu	r6,r6,r17
    e704:	1187c83a 	sub	r3,r2,r6
    e708:	4821883a 	mov	r16,r9
    e70c:	3825883a 	mov	r18,r7
    e710:	003f0606 	br	e32c <__subdf3+0x178>
    e714:	2023883a 	mov	r17,r4
    e718:	003f0906 	br	e340 <__subdf3+0x18c>
    e71c:	0101ffc4 	movi	r4,2047
    e720:	813f3a1e 	bne	r16,r4,e40c <__subdf3+0x258>
    e724:	003ec406 	br	e238 <__subdf3+0x84>
    e728:	0005883a 	mov	r2,zero
    e72c:	003fb106 	br	e5f4 <__subdf3+0x440>
    e730:	0005883a 	mov	r2,zero
    e734:	003fbc06 	br	e628 <__subdf3+0x474>
    e738:	1c44b03a 	or	r2,r3,r17
    e73c:	80008e1e 	bne	r16,zero,e978 <__subdf3+0x7c4>
    e740:	1000c826 	beq	r2,zero,ea64 <__subdf3+0x8b0>
    e744:	2984b03a 	or	r2,r5,r6
    e748:	103ebb26 	beq	r2,zero,e238 <__subdf3+0x84>
    e74c:	8989883a 	add	r4,r17,r6
    e750:	1945883a 	add	r2,r3,r5
    e754:	2447803a 	cmpltu	r3,r4,r17
    e758:	1887883a 	add	r3,r3,r2
    e75c:	1880202c 	andhi	r2,r3,128
    e760:	2023883a 	mov	r17,r4
    e764:	103f1626 	beq	r2,zero,e3c0 <__subdf3+0x20c>
    e768:	00bfe034 	movhi	r2,65408
    e76c:	10bfffc4 	addi	r2,r2,-1
    e770:	5021883a 	mov	r16,r10
    e774:	1886703a 	and	r3,r3,r2
    e778:	003eaf06 	br	e238 <__subdf3+0x84>
    e77c:	3825883a 	mov	r18,r7
    e780:	003f0f06 	br	e3c0 <__subdf3+0x20c>
    e784:	1c44b03a 	or	r2,r3,r17
    e788:	8000251e 	bne	r16,zero,e820 <__subdf3+0x66c>
    e78c:	1000661e 	bne	r2,zero,e928 <__subdf3+0x774>
    e790:	2990b03a 	or	r8,r5,r6
    e794:	40009626 	beq	r8,zero,e9f0 <__subdf3+0x83c>
    e798:	2807883a 	mov	r3,r5
    e79c:	3023883a 	mov	r17,r6
    e7a0:	3825883a 	mov	r18,r7
    e7a4:	003ea406 	br	e238 <__subdf3+0x84>
    e7a8:	127ff804 	addi	r9,r2,-32
    e7ac:	01000804 	movi	r4,32
    e7b0:	2a52d83a 	srl	r9,r5,r9
    e7b4:	11008c26 	beq	r2,r4,e9e8 <__subdf3+0x834>
    e7b8:	01001004 	movi	r4,64
    e7bc:	2085c83a 	sub	r2,r4,r2
    e7c0:	2884983a 	sll	r2,r5,r2
    e7c4:	118cb03a 	or	r6,r2,r6
    e7c8:	300cc03a 	cmpne	r6,r6,zero
    e7cc:	4992b03a 	or	r9,r9,r6
    e7d0:	0005883a 	mov	r2,zero
    e7d4:	003f1206 	br	e420 <__subdf3+0x26c>
    e7d8:	0101ffc4 	movi	r4,2047
    e7dc:	493f9c1e 	bne	r9,r4,e650 <__subdf3+0x49c>
    e7e0:	2807883a 	mov	r3,r5
    e7e4:	3023883a 	mov	r17,r6
    e7e8:	4821883a 	mov	r16,r9
    e7ec:	3825883a 	mov	r18,r7
    e7f0:	003e9106 	br	e238 <__subdf3+0x84>
    e7f4:	80001f1e 	bne	r16,zero,e874 <__subdf3+0x6c0>
    e7f8:	1c48b03a 	or	r4,r3,r17
    e7fc:	20005a26 	beq	r4,zero,e968 <__subdf3+0x7b4>
    e800:	0084303a 	nor	r2,zero,r2
    e804:	1000561e 	bne	r2,zero,e960 <__subdf3+0x7ac>
    e808:	89a3883a 	add	r17,r17,r6
    e80c:	1945883a 	add	r2,r3,r5
    e810:	898d803a 	cmpltu	r6,r17,r6
    e814:	3087883a 	add	r3,r6,r2
    e818:	4821883a 	mov	r16,r9
    e81c:	003f0506 	br	e434 <__subdf3+0x280>
    e820:	10002b1e 	bne	r2,zero,e8d0 <__subdf3+0x71c>
    e824:	2984b03a 	or	r2,r5,r6
    e828:	10008026 	beq	r2,zero,ea2c <__subdf3+0x878>
    e82c:	2807883a 	mov	r3,r5
    e830:	3023883a 	mov	r17,r6
    e834:	3825883a 	mov	r18,r7
    e838:	0401ffc4 	movi	r16,2047
    e83c:	003e7e06 	br	e238 <__subdf3+0x84>
    e840:	3809883a 	mov	r4,r7
    e844:	0011883a 	mov	r8,zero
    e848:	0005883a 	mov	r2,zero
    e84c:	003ee306 	br	e3dc <__subdf3+0x228>
    e850:	1c62b03a 	or	r17,r3,r17
    e854:	8822c03a 	cmpne	r17,r17,zero
    e858:	0005883a 	mov	r2,zero
    e85c:	003f8906 	br	e684 <__subdf3+0x4d0>
    e860:	3809883a 	mov	r4,r7
    e864:	4821883a 	mov	r16,r9
    e868:	0011883a 	mov	r8,zero
    e86c:	0005883a 	mov	r2,zero
    e870:	003eda06 	br	e3dc <__subdf3+0x228>
    e874:	0101ffc4 	movi	r4,2047
    e878:	49003b26 	beq	r9,r4,e968 <__subdf3+0x7b4>
    e87c:	0085c83a 	sub	r2,zero,r2
    e880:	18c02034 	orhi	r3,r3,128
    e884:	01000e04 	movi	r4,56
    e888:	20806e16 	blt	r4,r2,ea44 <__subdf3+0x890>
    e88c:	010007c4 	movi	r4,31
    e890:	20807716 	blt	r4,r2,ea70 <__subdf3+0x8bc>
    e894:	01000804 	movi	r4,32
    e898:	2089c83a 	sub	r4,r4,r2
    e89c:	1914983a 	sll	r10,r3,r4
    e8a0:	8890d83a 	srl	r8,r17,r2
    e8a4:	8908983a 	sll	r4,r17,r4
    e8a8:	1884d83a 	srl	r2,r3,r2
    e8ac:	5222b03a 	or	r17,r10,r8
    e8b0:	2006c03a 	cmpne	r3,r4,zero
    e8b4:	88e2b03a 	or	r17,r17,r3
    e8b8:	89a3883a 	add	r17,r17,r6
    e8bc:	1145883a 	add	r2,r2,r5
    e8c0:	898d803a 	cmpltu	r6,r17,r6
    e8c4:	3087883a 	add	r3,r6,r2
    e8c8:	4821883a 	mov	r16,r9
    e8cc:	003ed906 	br	e434 <__subdf3+0x280>
    e8d0:	2984b03a 	or	r2,r5,r6
    e8d4:	10004226 	beq	r2,zero,e9e0 <__subdf3+0x82c>
    e8d8:	1808d0fa 	srli	r4,r3,3
    e8dc:	8822d0fa 	srli	r17,r17,3
    e8e0:	1806977a 	slli	r3,r3,29
    e8e4:	2080022c 	andhi	r2,r4,8
    e8e8:	1c62b03a 	or	r17,r3,r17
    e8ec:	10000826 	beq	r2,zero,e910 <__subdf3+0x75c>
    e8f0:	2812d0fa 	srli	r9,r5,3
    e8f4:	4880022c 	andhi	r2,r9,8
    e8f8:	1000051e 	bne	r2,zero,e910 <__subdf3+0x75c>
    e8fc:	300cd0fa 	srli	r6,r6,3
    e900:	2804977a 	slli	r2,r5,29
    e904:	4809883a 	mov	r4,r9
    e908:	3825883a 	mov	r18,r7
    e90c:	11a2b03a 	or	r17,r2,r6
    e910:	8806d77a 	srli	r3,r17,29
    e914:	200890fa 	slli	r4,r4,3
    e918:	882290fa 	slli	r17,r17,3
    e91c:	0401ffc4 	movi	r16,2047
    e920:	1906b03a 	or	r3,r3,r4
    e924:	003e4406 	br	e238 <__subdf3+0x84>
    e928:	2984b03a 	or	r2,r5,r6
    e92c:	103e4226 	beq	r2,zero,e238 <__subdf3+0x84>
    e930:	8989c83a 	sub	r4,r17,r6
    e934:	8911803a 	cmpltu	r8,r17,r4
    e938:	1945c83a 	sub	r2,r3,r5
    e93c:	1205c83a 	sub	r2,r2,r8
    e940:	1200202c 	andhi	r8,r2,128
    e944:	403e9a26 	beq	r8,zero,e3b0 <__subdf3+0x1fc>
    e948:	3463c83a 	sub	r17,r6,r17
    e94c:	28c5c83a 	sub	r2,r5,r3
    e950:	344d803a 	cmpltu	r6,r6,r17
    e954:	1187c83a 	sub	r3,r2,r6
    e958:	3825883a 	mov	r18,r7
    e95c:	003e3606 	br	e238 <__subdf3+0x84>
    e960:	0101ffc4 	movi	r4,2047
    e964:	493fc71e 	bne	r9,r4,e884 <__subdf3+0x6d0>
    e968:	2807883a 	mov	r3,r5
    e96c:	3023883a 	mov	r17,r6
    e970:	4821883a 	mov	r16,r9
    e974:	003e3006 	br	e238 <__subdf3+0x84>
    e978:	10003626 	beq	r2,zero,ea54 <__subdf3+0x8a0>
    e97c:	2984b03a 	or	r2,r5,r6
    e980:	10001726 	beq	r2,zero,e9e0 <__subdf3+0x82c>
    e984:	1808d0fa 	srli	r4,r3,3
    e988:	8822d0fa 	srli	r17,r17,3
    e98c:	1806977a 	slli	r3,r3,29
    e990:	2080022c 	andhi	r2,r4,8
    e994:	1c62b03a 	or	r17,r3,r17
    e998:	10000726 	beq	r2,zero,e9b8 <__subdf3+0x804>
    e99c:	2812d0fa 	srli	r9,r5,3
    e9a0:	4880022c 	andhi	r2,r9,8
    e9a4:	1000041e 	bne	r2,zero,e9b8 <__subdf3+0x804>
    e9a8:	300cd0fa 	srli	r6,r6,3
    e9ac:	2804977a 	slli	r2,r5,29
    e9b0:	4809883a 	mov	r4,r9
    e9b4:	11a2b03a 	or	r17,r2,r6
    e9b8:	8806d77a 	srli	r3,r17,29
    e9bc:	200890fa 	slli	r4,r4,3
    e9c0:	882290fa 	slli	r17,r17,3
    e9c4:	3825883a 	mov	r18,r7
    e9c8:	1906b03a 	or	r3,r3,r4
    e9cc:	0401ffc4 	movi	r16,2047
    e9d0:	003e1906 	br	e238 <__subdf3+0x84>
    e9d4:	000b883a 	mov	r5,zero
    e9d8:	0005883a 	mov	r2,zero
    e9dc:	003e2e06 	br	e298 <__subdf3+0xe4>
    e9e0:	0401ffc4 	movi	r16,2047
    e9e4:	003e1406 	br	e238 <__subdf3+0x84>
    e9e8:	0005883a 	mov	r2,zero
    e9ec:	003f7506 	br	e7c4 <__subdf3+0x610>
    e9f0:	0005883a 	mov	r2,zero
    e9f4:	0009883a 	mov	r4,zero
    e9f8:	003e7806 	br	e3dc <__subdf3+0x228>
    e9fc:	123ff804 	addi	r8,r2,-32
    ea00:	01000804 	movi	r4,32
    ea04:	1a10d83a 	srl	r8,r3,r8
    ea08:	11002526 	beq	r2,r4,eaa0 <__subdf3+0x8ec>
    ea0c:	01001004 	movi	r4,64
    ea10:	2085c83a 	sub	r2,r4,r2
    ea14:	1884983a 	sll	r2,r3,r2
    ea18:	1444b03a 	or	r2,r2,r17
    ea1c:	1004c03a 	cmpne	r2,r2,zero
    ea20:	40a2b03a 	or	r17,r8,r2
    ea24:	0005883a 	mov	r2,zero
    ea28:	003f1606 	br	e684 <__subdf3+0x4d0>
    ea2c:	02000434 	movhi	r8,16
    ea30:	0009883a 	mov	r4,zero
    ea34:	423fffc4 	addi	r8,r8,-1
    ea38:	00bfffc4 	movi	r2,-1
    ea3c:	0401ffc4 	movi	r16,2047
    ea40:	003e6606 	br	e3dc <__subdf3+0x228>
    ea44:	1c62b03a 	or	r17,r3,r17
    ea48:	8822c03a 	cmpne	r17,r17,zero
    ea4c:	0005883a 	mov	r2,zero
    ea50:	003f9906 	br	e8b8 <__subdf3+0x704>
    ea54:	2807883a 	mov	r3,r5
    ea58:	3023883a 	mov	r17,r6
    ea5c:	0401ffc4 	movi	r16,2047
    ea60:	003df506 	br	e238 <__subdf3+0x84>
    ea64:	2807883a 	mov	r3,r5
    ea68:	3023883a 	mov	r17,r6
    ea6c:	003df206 	br	e238 <__subdf3+0x84>
    ea70:	123ff804 	addi	r8,r2,-32
    ea74:	01000804 	movi	r4,32
    ea78:	1a10d83a 	srl	r8,r3,r8
    ea7c:	11000a26 	beq	r2,r4,eaa8 <__subdf3+0x8f4>
    ea80:	01001004 	movi	r4,64
    ea84:	2085c83a 	sub	r2,r4,r2
    ea88:	1884983a 	sll	r2,r3,r2
    ea8c:	1444b03a 	or	r2,r2,r17
    ea90:	1004c03a 	cmpne	r2,r2,zero
    ea94:	40a2b03a 	or	r17,r8,r2
    ea98:	0005883a 	mov	r2,zero
    ea9c:	003f8606 	br	e8b8 <__subdf3+0x704>
    eaa0:	0005883a 	mov	r2,zero
    eaa4:	003fdc06 	br	ea18 <__subdf3+0x864>
    eaa8:	0005883a 	mov	r2,zero
    eaac:	003ff706 	br	ea8c <__subdf3+0x8d8>

0000eab0 <__fixdfsi>:
    eab0:	280cd53a 	srli	r6,r5,20
    eab4:	00c00434 	movhi	r3,16
    eab8:	18ffffc4 	addi	r3,r3,-1
    eabc:	3181ffcc 	andi	r6,r6,2047
    eac0:	01c0ff84 	movi	r7,1022
    eac4:	28c6703a 	and	r3,r5,r3
    eac8:	280ad7fa 	srli	r5,r5,31
    eacc:	3980120e 	bge	r7,r6,eb18 <__fixdfsi+0x68>
    ead0:	00810744 	movi	r2,1053
    ead4:	11800c16 	blt	r2,r6,eb08 <__fixdfsi+0x58>
    ead8:	00810cc4 	movi	r2,1075
    eadc:	1185c83a 	sub	r2,r2,r6
    eae0:	01c007c4 	movi	r7,31
    eae4:	18c00434 	orhi	r3,r3,16
    eae8:	38800d16 	blt	r7,r2,eb20 <__fixdfsi+0x70>
    eaec:	31befb44 	addi	r6,r6,-1043
    eaf0:	2084d83a 	srl	r2,r4,r2
    eaf4:	1986983a 	sll	r3,r3,r6
    eaf8:	1884b03a 	or	r2,r3,r2
    eafc:	28000726 	beq	r5,zero,eb1c <__fixdfsi+0x6c>
    eb00:	0085c83a 	sub	r2,zero,r2
    eb04:	f800283a 	ret
    eb08:	00a00034 	movhi	r2,32768
    eb0c:	10bfffc4 	addi	r2,r2,-1
    eb10:	2885883a 	add	r2,r5,r2
    eb14:	f800283a 	ret
    eb18:	0005883a 	mov	r2,zero
    eb1c:	f800283a 	ret
    eb20:	008104c4 	movi	r2,1043
    eb24:	1185c83a 	sub	r2,r2,r6
    eb28:	1884d83a 	srl	r2,r3,r2
    eb2c:	003ff306 	br	eafc <__fixdfsi+0x4c>

0000eb30 <__floatsidf>:
    eb30:	defffd04 	addi	sp,sp,-12
    eb34:	dfc00215 	stw	ra,8(sp)
    eb38:	dc400115 	stw	r17,4(sp)
    eb3c:	dc000015 	stw	r16,0(sp)
    eb40:	20002b26 	beq	r4,zero,ebf0 <__floatsidf+0xc0>
    eb44:	2023883a 	mov	r17,r4
    eb48:	2020d7fa 	srli	r16,r4,31
    eb4c:	20002d16 	blt	r4,zero,ec04 <__floatsidf+0xd4>
    eb50:	8809883a 	mov	r4,r17
    eb54:	000ecb40 	call	ecb4 <__clzsi2>
    eb58:	01410784 	movi	r5,1054
    eb5c:	288bc83a 	sub	r5,r5,r2
    eb60:	01010cc4 	movi	r4,1075
    eb64:	2149c83a 	sub	r4,r4,r5
    eb68:	00c007c4 	movi	r3,31
    eb6c:	1900160e 	bge	r3,r4,ebc8 <__floatsidf+0x98>
    eb70:	00c104c4 	movi	r3,1043
    eb74:	1947c83a 	sub	r3,r3,r5
    eb78:	88c6983a 	sll	r3,r17,r3
    eb7c:	00800434 	movhi	r2,16
    eb80:	10bfffc4 	addi	r2,r2,-1
    eb84:	1886703a 	and	r3,r3,r2
    eb88:	2941ffcc 	andi	r5,r5,2047
    eb8c:	800d883a 	mov	r6,r16
    eb90:	0005883a 	mov	r2,zero
    eb94:	280a953a 	slli	r5,r5,20
    eb98:	31803fcc 	andi	r6,r6,255
    eb9c:	01000434 	movhi	r4,16
    eba0:	300c97fa 	slli	r6,r6,31
    eba4:	213fffc4 	addi	r4,r4,-1
    eba8:	1906703a 	and	r3,r3,r4
    ebac:	1946b03a 	or	r3,r3,r5
    ebb0:	1986b03a 	or	r3,r3,r6
    ebb4:	dfc00217 	ldw	ra,8(sp)
    ebb8:	dc400117 	ldw	r17,4(sp)
    ebbc:	dc000017 	ldw	r16,0(sp)
    ebc0:	dec00304 	addi	sp,sp,12
    ebc4:	f800283a 	ret
    ebc8:	00c002c4 	movi	r3,11
    ebcc:	1887c83a 	sub	r3,r3,r2
    ebd0:	88c6d83a 	srl	r3,r17,r3
    ebd4:	8904983a 	sll	r2,r17,r4
    ebd8:	01000434 	movhi	r4,16
    ebdc:	213fffc4 	addi	r4,r4,-1
    ebe0:	2941ffcc 	andi	r5,r5,2047
    ebe4:	1906703a 	and	r3,r3,r4
    ebe8:	800d883a 	mov	r6,r16
    ebec:	003fe906 	br	eb94 <__floatsidf+0x64>
    ebf0:	000d883a 	mov	r6,zero
    ebf4:	000b883a 	mov	r5,zero
    ebf8:	0007883a 	mov	r3,zero
    ebfc:	0005883a 	mov	r2,zero
    ec00:	003fe406 	br	eb94 <__floatsidf+0x64>
    ec04:	0123c83a 	sub	r17,zero,r4
    ec08:	003fd106 	br	eb50 <__floatsidf+0x20>

0000ec0c <__floatunsidf>:
    ec0c:	defffe04 	addi	sp,sp,-8
    ec10:	dc000015 	stw	r16,0(sp)
    ec14:	dfc00115 	stw	ra,4(sp)
    ec18:	2021883a 	mov	r16,r4
    ec1c:	20002226 	beq	r4,zero,eca8 <__floatunsidf+0x9c>
    ec20:	000ecb40 	call	ecb4 <__clzsi2>
    ec24:	01010784 	movi	r4,1054
    ec28:	2089c83a 	sub	r4,r4,r2
    ec2c:	01810cc4 	movi	r6,1075
    ec30:	310dc83a 	sub	r6,r6,r4
    ec34:	00c007c4 	movi	r3,31
    ec38:	1980120e 	bge	r3,r6,ec84 <__floatunsidf+0x78>
    ec3c:	00c104c4 	movi	r3,1043
    ec40:	1907c83a 	sub	r3,r3,r4
    ec44:	80ca983a 	sll	r5,r16,r3
    ec48:	00800434 	movhi	r2,16
    ec4c:	10bfffc4 	addi	r2,r2,-1
    ec50:	2101ffcc 	andi	r4,r4,2047
    ec54:	0021883a 	mov	r16,zero
    ec58:	288a703a 	and	r5,r5,r2
    ec5c:	2008953a 	slli	r4,r4,20
    ec60:	00c00434 	movhi	r3,16
    ec64:	18ffffc4 	addi	r3,r3,-1
    ec68:	28c6703a 	and	r3,r5,r3
    ec6c:	8005883a 	mov	r2,r16
    ec70:	1906b03a 	or	r3,r3,r4
    ec74:	dfc00117 	ldw	ra,4(sp)
    ec78:	dc000017 	ldw	r16,0(sp)
    ec7c:	dec00204 	addi	sp,sp,8
    ec80:	f800283a 	ret
    ec84:	00c002c4 	movi	r3,11
    ec88:	188bc83a 	sub	r5,r3,r2
    ec8c:	814ad83a 	srl	r5,r16,r5
    ec90:	00c00434 	movhi	r3,16
    ec94:	18ffffc4 	addi	r3,r3,-1
    ec98:	81a0983a 	sll	r16,r16,r6
    ec9c:	2101ffcc 	andi	r4,r4,2047
    eca0:	28ca703a 	and	r5,r5,r3
    eca4:	003fed06 	br	ec5c <__floatunsidf+0x50>
    eca8:	0009883a 	mov	r4,zero
    ecac:	000b883a 	mov	r5,zero
    ecb0:	003fea06 	br	ec5c <__floatunsidf+0x50>

0000ecb4 <__clzsi2>:
    ecb4:	00bfffd4 	movui	r2,65535
    ecb8:	11000536 	bltu	r2,r4,ecd0 <__clzsi2+0x1c>
    ecbc:	00803fc4 	movi	r2,255
    ecc0:	11000f36 	bltu	r2,r4,ed00 <__clzsi2+0x4c>
    ecc4:	00800804 	movi	r2,32
    ecc8:	0007883a 	mov	r3,zero
    eccc:	00000506 	br	ece4 <__clzsi2+0x30>
    ecd0:	00804034 	movhi	r2,256
    ecd4:	10bfffc4 	addi	r2,r2,-1
    ecd8:	11000c2e 	bgeu	r2,r4,ed0c <__clzsi2+0x58>
    ecdc:	00800204 	movi	r2,8
    ece0:	00c00604 	movi	r3,24
    ece4:	20c8d83a 	srl	r4,r4,r3
    ece8:	00c00074 	movhi	r3,1
    ecec:	18c77504 	addi	r3,r3,7636
    ecf0:	1909883a 	add	r4,r3,r4
    ecf4:	20c00003 	ldbu	r3,0(r4)
    ecf8:	10c5c83a 	sub	r2,r2,r3
    ecfc:	f800283a 	ret
    ed00:	00800604 	movi	r2,24
    ed04:	00c00204 	movi	r3,8
    ed08:	003ff606 	br	ece4 <__clzsi2+0x30>
    ed0c:	00800404 	movi	r2,16
    ed10:	1007883a 	mov	r3,r2
    ed14:	003ff306 	br	ece4 <__clzsi2+0x30>

0000ed18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed18:	defffe04 	addi	sp,sp,-8
    ed1c:	dfc00115 	stw	ra,4(sp)
    ed20:	df000015 	stw	fp,0(sp)
    ed24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed28:	d0a00b17 	ldw	r2,-32724(gp)
    ed2c:	10000326 	beq	r2,zero,ed3c <alt_get_errno+0x24>
    ed30:	d0a00b17 	ldw	r2,-32724(gp)
    ed34:	103ee83a 	callr	r2
    ed38:	00000106 	br	ed40 <alt_get_errno+0x28>
    ed3c:	d0a6d804 	addi	r2,gp,-25760
}
    ed40:	e037883a 	mov	sp,fp
    ed44:	dfc00117 	ldw	ra,4(sp)
    ed48:	df000017 	ldw	fp,0(sp)
    ed4c:	dec00204 	addi	sp,sp,8
    ed50:	f800283a 	ret

0000ed54 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ed54:	defffb04 	addi	sp,sp,-20
    ed58:	dfc00415 	stw	ra,16(sp)
    ed5c:	df000315 	stw	fp,12(sp)
    ed60:	df000304 	addi	fp,sp,12
    ed64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ed68:	e0bfff17 	ldw	r2,-4(fp)
    ed6c:	10000616 	blt	r2,zero,ed88 <close+0x34>
    ed70:	e0bfff17 	ldw	r2,-4(fp)
    ed74:	10c00324 	muli	r3,r2,12
    ed78:	00800074 	movhi	r2,1
    ed7c:	1089f304 	addi	r2,r2,10188
    ed80:	1885883a 	add	r2,r3,r2
    ed84:	00000106 	br	ed8c <close+0x38>
    ed88:	0005883a 	mov	r2,zero
    ed8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ed90:	e0bffd17 	ldw	r2,-12(fp)
    ed94:	10001926 	beq	r2,zero,edfc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ed98:	e0bffd17 	ldw	r2,-12(fp)
    ed9c:	10800017 	ldw	r2,0(r2)
    eda0:	10800417 	ldw	r2,16(r2)
    eda4:	10000626 	beq	r2,zero,edc0 <close+0x6c>
    eda8:	e0bffd17 	ldw	r2,-12(fp)
    edac:	10800017 	ldw	r2,0(r2)
    edb0:	10800417 	ldw	r2,16(r2)
    edb4:	e13ffd17 	ldw	r4,-12(fp)
    edb8:	103ee83a 	callr	r2
    edbc:	00000106 	br	edc4 <close+0x70>
    edc0:	0005883a 	mov	r2,zero
    edc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    edc8:	e13fff17 	ldw	r4,-4(fp)
    edcc:	000f4140 	call	f414 <alt_release_fd>
    if (rval < 0)
    edd0:	e0bffe17 	ldw	r2,-8(fp)
    edd4:	1000070e 	bge	r2,zero,edf4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    edd8:	000ed180 	call	ed18 <alt_get_errno>
    eddc:	1007883a 	mov	r3,r2
    ede0:	e0bffe17 	ldw	r2,-8(fp)
    ede4:	0085c83a 	sub	r2,zero,r2
    ede8:	18800015 	stw	r2,0(r3)
      return -1;
    edec:	00bfffc4 	movi	r2,-1
    edf0:	00000706 	br	ee10 <close+0xbc>
    }
    return 0;
    edf4:	0005883a 	mov	r2,zero
    edf8:	00000506 	br	ee10 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    edfc:	000ed180 	call	ed18 <alt_get_errno>
    ee00:	1007883a 	mov	r3,r2
    ee04:	00801444 	movi	r2,81
    ee08:	18800015 	stw	r2,0(r3)
    return -1;
    ee0c:	00bfffc4 	movi	r2,-1
  }
}
    ee10:	e037883a 	mov	sp,fp
    ee14:	dfc00117 	ldw	ra,4(sp)
    ee18:	df000017 	ldw	fp,0(sp)
    ee1c:	dec00204 	addi	sp,sp,8
    ee20:	f800283a 	ret

0000ee24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ee24:	defffc04 	addi	sp,sp,-16
    ee28:	df000315 	stw	fp,12(sp)
    ee2c:	df000304 	addi	fp,sp,12
    ee30:	e13ffd15 	stw	r4,-12(fp)
    ee34:	e17ffe15 	stw	r5,-8(fp)
    ee38:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ee3c:	e0bfff17 	ldw	r2,-4(fp)
}
    ee40:	e037883a 	mov	sp,fp
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00104 	addi	sp,sp,4
    ee4c:	f800283a 	ret

0000ee50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee50:	defffe04 	addi	sp,sp,-8
    ee54:	dfc00115 	stw	ra,4(sp)
    ee58:	df000015 	stw	fp,0(sp)
    ee5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee60:	d0a00b17 	ldw	r2,-32724(gp)
    ee64:	10000326 	beq	r2,zero,ee74 <alt_get_errno+0x24>
    ee68:	d0a00b17 	ldw	r2,-32724(gp)
    ee6c:	103ee83a 	callr	r2
    ee70:	00000106 	br	ee78 <alt_get_errno+0x28>
    ee74:	d0a6d804 	addi	r2,gp,-25760
}
    ee78:	e037883a 	mov	sp,fp
    ee7c:	dfc00117 	ldw	ra,4(sp)
    ee80:	df000017 	ldw	fp,0(sp)
    ee84:	dec00204 	addi	sp,sp,8
    ee88:	f800283a 	ret

0000ee8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ee8c:	defffb04 	addi	sp,sp,-20
    ee90:	dfc00415 	stw	ra,16(sp)
    ee94:	df000315 	stw	fp,12(sp)
    ee98:	df000304 	addi	fp,sp,12
    ee9c:	e13ffe15 	stw	r4,-8(fp)
    eea0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eea4:	e0bffe17 	ldw	r2,-8(fp)
    eea8:	10000616 	blt	r2,zero,eec4 <fstat+0x38>
    eeac:	e0bffe17 	ldw	r2,-8(fp)
    eeb0:	10c00324 	muli	r3,r2,12
    eeb4:	00800074 	movhi	r2,1
    eeb8:	1089f304 	addi	r2,r2,10188
    eebc:	1885883a 	add	r2,r3,r2
    eec0:	00000106 	br	eec8 <fstat+0x3c>
    eec4:	0005883a 	mov	r2,zero
    eec8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    eecc:	e0bffd17 	ldw	r2,-12(fp)
    eed0:	10001026 	beq	r2,zero,ef14 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    eed4:	e0bffd17 	ldw	r2,-12(fp)
    eed8:	10800017 	ldw	r2,0(r2)
    eedc:	10800817 	ldw	r2,32(r2)
    eee0:	10000726 	beq	r2,zero,ef00 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    eee4:	e0bffd17 	ldw	r2,-12(fp)
    eee8:	10800017 	ldw	r2,0(r2)
    eeec:	10800817 	ldw	r2,32(r2)
    eef0:	e17fff17 	ldw	r5,-4(fp)
    eef4:	e13ffd17 	ldw	r4,-12(fp)
    eef8:	103ee83a 	callr	r2
    eefc:	00000a06 	br	ef28 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ef00:	e0bfff17 	ldw	r2,-4(fp)
    ef04:	00c80004 	movi	r3,8192
    ef08:	10c00115 	stw	r3,4(r2)
      return 0;
    ef0c:	0005883a 	mov	r2,zero
    ef10:	00000506 	br	ef28 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ef14:	000ee500 	call	ee50 <alt_get_errno>
    ef18:	1007883a 	mov	r3,r2
    ef1c:	00801444 	movi	r2,81
    ef20:	18800015 	stw	r2,0(r3)
    return -1;
    ef24:	00bfffc4 	movi	r2,-1
  }
}
    ef28:	e037883a 	mov	sp,fp
    ef2c:	dfc00117 	ldw	ra,4(sp)
    ef30:	df000017 	ldw	fp,0(sp)
    ef34:	dec00204 	addi	sp,sp,8
    ef38:	f800283a 	ret

0000ef3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef3c:	defffe04 	addi	sp,sp,-8
    ef40:	dfc00115 	stw	ra,4(sp)
    ef44:	df000015 	stw	fp,0(sp)
    ef48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef4c:	d0a00b17 	ldw	r2,-32724(gp)
    ef50:	10000326 	beq	r2,zero,ef60 <alt_get_errno+0x24>
    ef54:	d0a00b17 	ldw	r2,-32724(gp)
    ef58:	103ee83a 	callr	r2
    ef5c:	00000106 	br	ef64 <alt_get_errno+0x28>
    ef60:	d0a6d804 	addi	r2,gp,-25760
}
    ef64:	e037883a 	mov	sp,fp
    ef68:	dfc00117 	ldw	ra,4(sp)
    ef6c:	df000017 	ldw	fp,0(sp)
    ef70:	dec00204 	addi	sp,sp,8
    ef74:	f800283a 	ret

0000ef78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ef78:	deffed04 	addi	sp,sp,-76
    ef7c:	dfc01215 	stw	ra,72(sp)
    ef80:	df001115 	stw	fp,68(sp)
    ef84:	df001104 	addi	fp,sp,68
    ef88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ef8c:	e0bfff17 	ldw	r2,-4(fp)
    ef90:	10000616 	blt	r2,zero,efac <isatty+0x34>
    ef94:	e0bfff17 	ldw	r2,-4(fp)
    ef98:	10c00324 	muli	r3,r2,12
    ef9c:	00800074 	movhi	r2,1
    efa0:	1089f304 	addi	r2,r2,10188
    efa4:	1885883a 	add	r2,r3,r2
    efa8:	00000106 	br	efb0 <isatty+0x38>
    efac:	0005883a 	mov	r2,zero
    efb0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    efb4:	e0bfef17 	ldw	r2,-68(fp)
    efb8:	10000e26 	beq	r2,zero,eff4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    efbc:	e0bfef17 	ldw	r2,-68(fp)
    efc0:	10800017 	ldw	r2,0(r2)
    efc4:	10800817 	ldw	r2,32(r2)
    efc8:	1000021e 	bne	r2,zero,efd4 <isatty+0x5c>
    {
      return 1;
    efcc:	00800044 	movi	r2,1
    efd0:	00000d06 	br	f008 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    efd4:	e0bff004 	addi	r2,fp,-64
    efd8:	100b883a 	mov	r5,r2
    efdc:	e13fff17 	ldw	r4,-4(fp)
    efe0:	000ee8c0 	call	ee8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    efe4:	e0bff117 	ldw	r2,-60(fp)
    efe8:	10880020 	cmpeqi	r2,r2,8192
    efec:	10803fcc 	andi	r2,r2,255
    eff0:	00000506 	br	f008 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eff4:	000ef3c0 	call	ef3c <alt_get_errno>
    eff8:	1007883a 	mov	r3,r2
    effc:	00801444 	movi	r2,81
    f000:	18800015 	stw	r2,0(r3)
    return 0;
    f004:	0005883a 	mov	r2,zero
  }
}
    f008:	e037883a 	mov	sp,fp
    f00c:	dfc00117 	ldw	ra,4(sp)
    f010:	df000017 	ldw	fp,0(sp)
    f014:	dec00204 	addi	sp,sp,8
    f018:	f800283a 	ret

0000f01c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f01c:	defffc04 	addi	sp,sp,-16
    f020:	df000315 	stw	fp,12(sp)
    f024:	df000304 	addi	fp,sp,12
    f028:	e13ffd15 	stw	r4,-12(fp)
    f02c:	e17ffe15 	stw	r5,-8(fp)
    f030:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f034:	e0fffe17 	ldw	r3,-8(fp)
    f038:	e0bffd17 	ldw	r2,-12(fp)
    f03c:	18800c26 	beq	r3,r2,f070 <alt_load_section+0x54>
  {
    while( to != end )
    f040:	00000806 	br	f064 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f044:	e0bffe17 	ldw	r2,-8(fp)
    f048:	10c00104 	addi	r3,r2,4
    f04c:	e0fffe15 	stw	r3,-8(fp)
    f050:	e0fffd17 	ldw	r3,-12(fp)
    f054:	19000104 	addi	r4,r3,4
    f058:	e13ffd15 	stw	r4,-12(fp)
    f05c:	18c00017 	ldw	r3,0(r3)
    f060:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f064:	e0fffe17 	ldw	r3,-8(fp)
    f068:	e0bfff17 	ldw	r2,-4(fp)
    f06c:	18bff51e 	bne	r3,r2,f044 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    f070:	0001883a 	nop
    f074:	e037883a 	mov	sp,fp
    f078:	df000017 	ldw	fp,0(sp)
    f07c:	dec00104 	addi	sp,sp,4
    f080:	f800283a 	ret

0000f084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f084:	defffe04 	addi	sp,sp,-8
    f088:	dfc00115 	stw	ra,4(sp)
    f08c:	df000015 	stw	fp,0(sp)
    f090:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f094:	01800074 	movhi	r6,1
    f098:	318e7b04 	addi	r6,r6,14828
    f09c:	01400074 	movhi	r5,1
    f0a0:	2947c004 	addi	r5,r5,7936
    f0a4:	01000074 	movhi	r4,1
    f0a8:	210e7b04 	addi	r4,r4,14828
    f0ac:	000f01c0 	call	f01c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f0b0:	01800034 	movhi	r6,0
    f0b4:	31809104 	addi	r6,r6,580
    f0b8:	01400034 	movhi	r5,0
    f0bc:	29400804 	addi	r5,r5,32
    f0c0:	01000034 	movhi	r4,0
    f0c4:	21000804 	addi	r4,r4,32
    f0c8:	000f01c0 	call	f01c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f0cc:	01800074 	movhi	r6,1
    f0d0:	3187c004 	addi	r6,r6,7936
    f0d4:	01400074 	movhi	r5,1
    f0d8:	2945e004 	addi	r5,r5,6016
    f0dc:	01000074 	movhi	r4,1
    f0e0:	2105e004 	addi	r4,r4,6016
    f0e4:	000f01c0 	call	f01c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f0e8:	001066c0 	call	1066c <alt_dcache_flush_all>
  alt_icache_flush_all();
    f0ec:	00108540 	call	10854 <alt_icache_flush_all>
}
    f0f0:	0001883a 	nop
    f0f4:	e037883a 	mov	sp,fp
    f0f8:	dfc00117 	ldw	ra,4(sp)
    f0fc:	df000017 	ldw	fp,0(sp)
    f100:	dec00204 	addi	sp,sp,8
    f104:	f800283a 	ret

0000f108 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f108:	defffe04 	addi	sp,sp,-8
    f10c:	dfc00115 	stw	ra,4(sp)
    f110:	df000015 	stw	fp,0(sp)
    f114:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f118:	d0a00b17 	ldw	r2,-32724(gp)
    f11c:	10000326 	beq	r2,zero,f12c <alt_get_errno+0x24>
    f120:	d0a00b17 	ldw	r2,-32724(gp)
    f124:	103ee83a 	callr	r2
    f128:	00000106 	br	f130 <alt_get_errno+0x28>
    f12c:	d0a6d804 	addi	r2,gp,-25760
}
    f130:	e037883a 	mov	sp,fp
    f134:	dfc00117 	ldw	ra,4(sp)
    f138:	df000017 	ldw	fp,0(sp)
    f13c:	dec00204 	addi	sp,sp,8
    f140:	f800283a 	ret

0000f144 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f144:	defff904 	addi	sp,sp,-28
    f148:	dfc00615 	stw	ra,24(sp)
    f14c:	df000515 	stw	fp,20(sp)
    f150:	df000504 	addi	fp,sp,20
    f154:	e13ffd15 	stw	r4,-12(fp)
    f158:	e17ffe15 	stw	r5,-8(fp)
    f15c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f160:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f164:	e0bffd17 	ldw	r2,-12(fp)
    f168:	10000616 	blt	r2,zero,f184 <lseek+0x40>
    f16c:	e0bffd17 	ldw	r2,-12(fp)
    f170:	10c00324 	muli	r3,r2,12
    f174:	00800074 	movhi	r2,1
    f178:	1089f304 	addi	r2,r2,10188
    f17c:	1885883a 	add	r2,r3,r2
    f180:	00000106 	br	f188 <lseek+0x44>
    f184:	0005883a 	mov	r2,zero
    f188:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f18c:	e0bffc17 	ldw	r2,-16(fp)
    f190:	10001026 	beq	r2,zero,f1d4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f194:	e0bffc17 	ldw	r2,-16(fp)
    f198:	10800017 	ldw	r2,0(r2)
    f19c:	10800717 	ldw	r2,28(r2)
    f1a0:	10000926 	beq	r2,zero,f1c8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f1a4:	e0bffc17 	ldw	r2,-16(fp)
    f1a8:	10800017 	ldw	r2,0(r2)
    f1ac:	10800717 	ldw	r2,28(r2)
    f1b0:	e1bfff17 	ldw	r6,-4(fp)
    f1b4:	e17ffe17 	ldw	r5,-8(fp)
    f1b8:	e13ffc17 	ldw	r4,-16(fp)
    f1bc:	103ee83a 	callr	r2
    f1c0:	e0bffb15 	stw	r2,-20(fp)
    f1c4:	00000506 	br	f1dc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f1c8:	00bfde84 	movi	r2,-134
    f1cc:	e0bffb15 	stw	r2,-20(fp)
    f1d0:	00000206 	br	f1dc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f1d4:	00bfebc4 	movi	r2,-81
    f1d8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f1dc:	e0bffb17 	ldw	r2,-20(fp)
    f1e0:	1000070e 	bge	r2,zero,f200 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f1e4:	000f1080 	call	f108 <alt_get_errno>
    f1e8:	1007883a 	mov	r3,r2
    f1ec:	e0bffb17 	ldw	r2,-20(fp)
    f1f0:	0085c83a 	sub	r2,zero,r2
    f1f4:	18800015 	stw	r2,0(r3)
    rc = -1;
    f1f8:	00bfffc4 	movi	r2,-1
    f1fc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f200:	e0bffb17 	ldw	r2,-20(fp)
}
    f204:	e037883a 	mov	sp,fp
    f208:	dfc00117 	ldw	ra,4(sp)
    f20c:	df000017 	ldw	fp,0(sp)
    f210:	dec00204 	addi	sp,sp,8
    f214:	f800283a 	ret

0000f218 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f218:	defffd04 	addi	sp,sp,-12
    f21c:	dfc00215 	stw	ra,8(sp)
    f220:	df000115 	stw	fp,4(sp)
    f224:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f228:	0009883a 	mov	r4,zero
    f22c:	000f6c00 	call	f6c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f230:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f234:	000f6f80 	call	f6f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f238:	01800074 	movhi	r6,1
    f23c:	3187b804 	addi	r6,r6,7904
    f240:	01400074 	movhi	r5,1
    f244:	2947b804 	addi	r5,r5,7904
    f248:	01000074 	movhi	r4,1
    f24c:	2107b804 	addi	r4,r4,7904
    f250:	0010bec0 	call	10bec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f254:	00107940 	call	10794 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f258:	01000074 	movhi	r4,1
    f25c:	2101fd04 	addi	r4,r4,2036
    f260:	00113ec0 	call	113ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f264:	d0a6dc17 	ldw	r2,-25744(gp)
    f268:	d0e6dd17 	ldw	r3,-25740(gp)
    f26c:	d126de17 	ldw	r4,-25736(gp)
    f270:	200d883a 	mov	r6,r4
    f274:	180b883a 	mov	r5,r3
    f278:	1009883a 	mov	r4,r2
    f27c:	0000f1c0 	call	f1c <main>
    f280:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f284:	01000044 	movi	r4,1
    f288:	000ed540 	call	ed54 <close>
  exit (result);
    f28c:	e13fff17 	ldw	r4,-4(fp)
    f290:	00114000 	call	11400 <exit>

0000f294 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f294:	defffe04 	addi	sp,sp,-8
    f298:	df000115 	stw	fp,4(sp)
    f29c:	df000104 	addi	fp,sp,4
    f2a0:	e13fff15 	stw	r4,-4(fp)
}
    f2a4:	0001883a 	nop
    f2a8:	e037883a 	mov	sp,fp
    f2ac:	df000017 	ldw	fp,0(sp)
    f2b0:	dec00104 	addi	sp,sp,4
    f2b4:	f800283a 	ret

0000f2b8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f2b8:	defffe04 	addi	sp,sp,-8
    f2bc:	df000115 	stw	fp,4(sp)
    f2c0:	df000104 	addi	fp,sp,4
    f2c4:	e13fff15 	stw	r4,-4(fp)
}
    f2c8:	0001883a 	nop
    f2cc:	e037883a 	mov	sp,fp
    f2d0:	df000017 	ldw	fp,0(sp)
    f2d4:	dec00104 	addi	sp,sp,4
    f2d8:	f800283a 	ret

0000f2dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2dc:	defffe04 	addi	sp,sp,-8
    f2e0:	dfc00115 	stw	ra,4(sp)
    f2e4:	df000015 	stw	fp,0(sp)
    f2e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2ec:	d0a00b17 	ldw	r2,-32724(gp)
    f2f0:	10000326 	beq	r2,zero,f300 <alt_get_errno+0x24>
    f2f4:	d0a00b17 	ldw	r2,-32724(gp)
    f2f8:	103ee83a 	callr	r2
    f2fc:	00000106 	br	f304 <alt_get_errno+0x28>
    f300:	d0a6d804 	addi	r2,gp,-25760
}
    f304:	e037883a 	mov	sp,fp
    f308:	dfc00117 	ldw	ra,4(sp)
    f30c:	df000017 	ldw	fp,0(sp)
    f310:	dec00204 	addi	sp,sp,8
    f314:	f800283a 	ret

0000f318 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f318:	defff904 	addi	sp,sp,-28
    f31c:	dfc00615 	stw	ra,24(sp)
    f320:	df000515 	stw	fp,20(sp)
    f324:	df000504 	addi	fp,sp,20
    f328:	e13ffd15 	stw	r4,-12(fp)
    f32c:	e17ffe15 	stw	r5,-8(fp)
    f330:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f334:	e0bffd17 	ldw	r2,-12(fp)
    f338:	10000616 	blt	r2,zero,f354 <read+0x3c>
    f33c:	e0bffd17 	ldw	r2,-12(fp)
    f340:	10c00324 	muli	r3,r2,12
    f344:	00800074 	movhi	r2,1
    f348:	1089f304 	addi	r2,r2,10188
    f34c:	1885883a 	add	r2,r3,r2
    f350:	00000106 	br	f358 <read+0x40>
    f354:	0005883a 	mov	r2,zero
    f358:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f35c:	e0bffb17 	ldw	r2,-20(fp)
    f360:	10002226 	beq	r2,zero,f3ec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f364:	e0bffb17 	ldw	r2,-20(fp)
    f368:	10800217 	ldw	r2,8(r2)
    f36c:	108000cc 	andi	r2,r2,3
    f370:	10800060 	cmpeqi	r2,r2,1
    f374:	1000181e 	bne	r2,zero,f3d8 <read+0xc0>
        (fd->dev->read))
    f378:	e0bffb17 	ldw	r2,-20(fp)
    f37c:	10800017 	ldw	r2,0(r2)
    f380:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f384:	10001426 	beq	r2,zero,f3d8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f388:	e0bffb17 	ldw	r2,-20(fp)
    f38c:	10800017 	ldw	r2,0(r2)
    f390:	10800517 	ldw	r2,20(r2)
    f394:	e0ffff17 	ldw	r3,-4(fp)
    f398:	180d883a 	mov	r6,r3
    f39c:	e17ffe17 	ldw	r5,-8(fp)
    f3a0:	e13ffb17 	ldw	r4,-20(fp)
    f3a4:	103ee83a 	callr	r2
    f3a8:	e0bffc15 	stw	r2,-16(fp)
    f3ac:	e0bffc17 	ldw	r2,-16(fp)
    f3b0:	1000070e 	bge	r2,zero,f3d0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    f3b4:	000f2dc0 	call	f2dc <alt_get_errno>
    f3b8:	1007883a 	mov	r3,r2
    f3bc:	e0bffc17 	ldw	r2,-16(fp)
    f3c0:	0085c83a 	sub	r2,zero,r2
    f3c4:	18800015 	stw	r2,0(r3)
          return -1;
    f3c8:	00bfffc4 	movi	r2,-1
    f3cc:	00000c06 	br	f400 <read+0xe8>
        }
        return rval;
    f3d0:	e0bffc17 	ldw	r2,-16(fp)
    f3d4:	00000a06 	br	f400 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f3d8:	000f2dc0 	call	f2dc <alt_get_errno>
    f3dc:	1007883a 	mov	r3,r2
    f3e0:	00800344 	movi	r2,13
    f3e4:	18800015 	stw	r2,0(r3)
    f3e8:	00000406 	br	f3fc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f3ec:	000f2dc0 	call	f2dc <alt_get_errno>
    f3f0:	1007883a 	mov	r3,r2
    f3f4:	00801444 	movi	r2,81
    f3f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f3fc:	00bfffc4 	movi	r2,-1
}
    f400:	e037883a 	mov	sp,fp
    f404:	dfc00117 	ldw	ra,4(sp)
    f408:	df000017 	ldw	fp,0(sp)
    f40c:	dec00204 	addi	sp,sp,8
    f410:	f800283a 	ret

0000f414 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f414:	defffe04 	addi	sp,sp,-8
    f418:	df000115 	stw	fp,4(sp)
    f41c:	df000104 	addi	fp,sp,4
    f420:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    f424:	e0bfff17 	ldw	r2,-4(fp)
    f428:	108000d0 	cmplti	r2,r2,3
    f42c:	10000d1e 	bne	r2,zero,f464 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    f430:	00800074 	movhi	r2,1
    f434:	1089f304 	addi	r2,r2,10188
    f438:	e0ffff17 	ldw	r3,-4(fp)
    f43c:	18c00324 	muli	r3,r3,12
    f440:	10c5883a 	add	r2,r2,r3
    f444:	10800204 	addi	r2,r2,8
    f448:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f44c:	00800074 	movhi	r2,1
    f450:	1089f304 	addi	r2,r2,10188
    f454:	e0ffff17 	ldw	r3,-4(fp)
    f458:	18c00324 	muli	r3,r3,12
    f45c:	10c5883a 	add	r2,r2,r3
    f460:	10000015 	stw	zero,0(r2)
  }
}
    f464:	0001883a 	nop
    f468:	e037883a 	mov	sp,fp
    f46c:	df000017 	ldw	fp,0(sp)
    f470:	dec00104 	addi	sp,sp,4
    f474:	f800283a 	ret

0000f478 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f478:	defff904 	addi	sp,sp,-28
    f47c:	df000615 	stw	fp,24(sp)
    f480:	df000604 	addi	fp,sp,24
    f484:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f488:	0005303a 	rdctl	r2,status
    f48c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f490:	e0fffe17 	ldw	r3,-8(fp)
    f494:	00bfff84 	movi	r2,-2
    f498:	1884703a 	and	r2,r3,r2
    f49c:	1001703a 	wrctl	status,r2
  
  return context;
    f4a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f4a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f4a8:	d0a00c17 	ldw	r2,-32720(gp)
    f4ac:	10c000c4 	addi	r3,r2,3
    f4b0:	00bfff04 	movi	r2,-4
    f4b4:	1884703a 	and	r2,r3,r2
    f4b8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f4bc:	d0e00c17 	ldw	r3,-32720(gp)
    f4c0:	e0bfff17 	ldw	r2,-4(fp)
    f4c4:	1887883a 	add	r3,r3,r2
    f4c8:	00804034 	movhi	r2,256
    f4cc:	10800004 	addi	r2,r2,0
    f4d0:	10c0062e 	bgeu	r2,r3,f4ec <sbrk+0x74>
    f4d4:	e0bffb17 	ldw	r2,-20(fp)
    f4d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4dc:	e0bffa17 	ldw	r2,-24(fp)
    f4e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f4e4:	00bfffc4 	movi	r2,-1
    f4e8:	00000b06 	br	f518 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f4ec:	d0a00c17 	ldw	r2,-32720(gp)
    f4f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f4f4:	d0e00c17 	ldw	r3,-32720(gp)
    f4f8:	e0bfff17 	ldw	r2,-4(fp)
    f4fc:	1885883a 	add	r2,r3,r2
    f500:	d0a00c15 	stw	r2,-32720(gp)
    f504:	e0bffb17 	ldw	r2,-20(fp)
    f508:	e0bffc15 	stw	r2,-16(fp)
    f50c:	e0bffc17 	ldw	r2,-16(fp)
    f510:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f514:	e0bffd17 	ldw	r2,-12(fp)
} 
    f518:	e037883a 	mov	sp,fp
    f51c:	df000017 	ldw	fp,0(sp)
    f520:	dec00104 	addi	sp,sp,4
    f524:	f800283a 	ret

0000f528 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    f528:	defffd04 	addi	sp,sp,-12
    f52c:	dfc00215 	stw	ra,8(sp)
    f530:	df000115 	stw	fp,4(sp)
    f534:	df000104 	addi	fp,sp,4
    f538:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    f53c:	e13fff17 	ldw	r4,-4(fp)
    f540:	00105140 	call	10514 <alt_busy_sleep>
}
    f544:	e037883a 	mov	sp,fp
    f548:	dfc00117 	ldw	ra,4(sp)
    f54c:	df000017 	ldw	fp,0(sp)
    f550:	dec00204 	addi	sp,sp,8
    f554:	f800283a 	ret

0000f558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f558:	defffe04 	addi	sp,sp,-8
    f55c:	dfc00115 	stw	ra,4(sp)
    f560:	df000015 	stw	fp,0(sp)
    f564:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f568:	d0a00b17 	ldw	r2,-32724(gp)
    f56c:	10000326 	beq	r2,zero,f57c <alt_get_errno+0x24>
    f570:	d0a00b17 	ldw	r2,-32724(gp)
    f574:	103ee83a 	callr	r2
    f578:	00000106 	br	f580 <alt_get_errno+0x28>
    f57c:	d0a6d804 	addi	r2,gp,-25760
}
    f580:	e037883a 	mov	sp,fp
    f584:	dfc00117 	ldw	ra,4(sp)
    f588:	df000017 	ldw	fp,0(sp)
    f58c:	dec00204 	addi	sp,sp,8
    f590:	f800283a 	ret

0000f594 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f594:	defff904 	addi	sp,sp,-28
    f598:	dfc00615 	stw	ra,24(sp)
    f59c:	df000515 	stw	fp,20(sp)
    f5a0:	df000504 	addi	fp,sp,20
    f5a4:	e13ffd15 	stw	r4,-12(fp)
    f5a8:	e17ffe15 	stw	r5,-8(fp)
    f5ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f5b0:	e0bffd17 	ldw	r2,-12(fp)
    f5b4:	10000616 	blt	r2,zero,f5d0 <write+0x3c>
    f5b8:	e0bffd17 	ldw	r2,-12(fp)
    f5bc:	10c00324 	muli	r3,r2,12
    f5c0:	00800074 	movhi	r2,1
    f5c4:	1089f304 	addi	r2,r2,10188
    f5c8:	1885883a 	add	r2,r3,r2
    f5cc:	00000106 	br	f5d4 <write+0x40>
    f5d0:	0005883a 	mov	r2,zero
    f5d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f5d8:	e0bffb17 	ldw	r2,-20(fp)
    f5dc:	10002126 	beq	r2,zero,f664 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f5e0:	e0bffb17 	ldw	r2,-20(fp)
    f5e4:	10800217 	ldw	r2,8(r2)
    f5e8:	108000cc 	andi	r2,r2,3
    f5ec:	10001826 	beq	r2,zero,f650 <write+0xbc>
    f5f0:	e0bffb17 	ldw	r2,-20(fp)
    f5f4:	10800017 	ldw	r2,0(r2)
    f5f8:	10800617 	ldw	r2,24(r2)
    f5fc:	10001426 	beq	r2,zero,f650 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f600:	e0bffb17 	ldw	r2,-20(fp)
    f604:	10800017 	ldw	r2,0(r2)
    f608:	10800617 	ldw	r2,24(r2)
    f60c:	e0ffff17 	ldw	r3,-4(fp)
    f610:	180d883a 	mov	r6,r3
    f614:	e17ffe17 	ldw	r5,-8(fp)
    f618:	e13ffb17 	ldw	r4,-20(fp)
    f61c:	103ee83a 	callr	r2
    f620:	e0bffc15 	stw	r2,-16(fp)
    f624:	e0bffc17 	ldw	r2,-16(fp)
    f628:	1000070e 	bge	r2,zero,f648 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f62c:	000f5580 	call	f558 <alt_get_errno>
    f630:	1007883a 	mov	r3,r2
    f634:	e0bffc17 	ldw	r2,-16(fp)
    f638:	0085c83a 	sub	r2,zero,r2
    f63c:	18800015 	stw	r2,0(r3)
        return -1;
    f640:	00bfffc4 	movi	r2,-1
    f644:	00000c06 	br	f678 <write+0xe4>
      }
      return rval;
    f648:	e0bffc17 	ldw	r2,-16(fp)
    f64c:	00000a06 	br	f678 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f650:	000f5580 	call	f558 <alt_get_errno>
    f654:	1007883a 	mov	r3,r2
    f658:	00800344 	movi	r2,13
    f65c:	18800015 	stw	r2,0(r3)
    f660:	00000406 	br	f674 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f664:	000f5580 	call	f558 <alt_get_errno>
    f668:	1007883a 	mov	r3,r2
    f66c:	00801444 	movi	r2,81
    f670:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f674:	00bfffc4 	movi	r2,-1
}
    f678:	e037883a 	mov	sp,fp
    f67c:	dfc00117 	ldw	ra,4(sp)
    f680:	df000017 	ldw	fp,0(sp)
    f684:	dec00204 	addi	sp,sp,8
    f688:	f800283a 	ret

0000f68c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f68c:	defffd04 	addi	sp,sp,-12
    f690:	dfc00215 	stw	ra,8(sp)
    f694:	df000115 	stw	fp,4(sp)
    f698:	df000104 	addi	fp,sp,4
    f69c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f6a0:	d1600804 	addi	r5,gp,-32736
    f6a4:	e13fff17 	ldw	r4,-4(fp)
    f6a8:	00106f00 	call	106f0 <alt_dev_llist_insert>
}
    f6ac:	e037883a 	mov	sp,fp
    f6b0:	dfc00117 	ldw	ra,4(sp)
    f6b4:	df000017 	ldw	fp,0(sp)
    f6b8:	dec00204 	addi	sp,sp,8
    f6bc:	f800283a 	ret

0000f6c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f6c0:	defffd04 	addi	sp,sp,-12
    f6c4:	dfc00215 	stw	ra,8(sp)
    f6c8:	df000115 	stw	fp,4(sp)
    f6cc:	df000104 	addi	fp,sp,4
    f6d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f6d4:	00110600 	call	11060 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f6d8:	00800044 	movi	r2,1
    f6dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f6e0:	0001883a 	nop
    f6e4:	e037883a 	mov	sp,fp
    f6e8:	dfc00117 	ldw	ra,4(sp)
    f6ec:	df000017 	ldw	fp,0(sp)
    f6f0:	dec00204 	addi	sp,sp,8
    f6f4:	f800283a 	ret

0000f6f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f6f8:	defffe04 	addi	sp,sp,-8
    f6fc:	dfc00115 	stw	ra,4(sp)
    f700:	df000015 	stw	fp,0(sp)
    f704:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f708:	00804034 	movhi	r2,256
    f70c:	10881004 	addi	r2,r2,8256
    f710:	d0a6df15 	stw	r2,-25732(gp)
    f714:	0080bef4 	movhi	r2,763
    f718:	10bc2004 	addi	r2,r2,-3968
    f71c:	d0a6e015 	stw	r2,-25728(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f720:	01c0fa04 	movi	r7,1000
    f724:	01800104 	movi	r6,4
    f728:	000b883a 	mov	r5,zero
    f72c:	01004034 	movhi	r4,256
    f730:	21081804 	addi	r4,r4,8288
    f734:	00102540 	call	10254 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f738:	000d883a 	mov	r6,zero
    f73c:	000b883a 	mov	r5,zero
    f740:	01000074 	movhi	r4,1
    f744:	210a5d04 	addi	r4,r4,10612
    f748:	000f8d80 	call	f8d8 <altera_avalon_jtag_uart_init>
    f74c:	01000074 	movhi	r4,1
    f750:	210a5304 	addi	r4,r4,10572
    f754:	000f68c0 	call	f68c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f758:	0001883a 	nop
}
    f75c:	0001883a 	nop
    f760:	e037883a 	mov	sp,fp
    f764:	dfc00117 	ldw	ra,4(sp)
    f768:	df000017 	ldw	fp,0(sp)
    f76c:	dec00204 	addi	sp,sp,8
    f770:	f800283a 	ret

0000f774 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f774:	defffa04 	addi	sp,sp,-24
    f778:	dfc00515 	stw	ra,20(sp)
    f77c:	df000415 	stw	fp,16(sp)
    f780:	df000404 	addi	fp,sp,16
    f784:	e13ffd15 	stw	r4,-12(fp)
    f788:	e17ffe15 	stw	r5,-8(fp)
    f78c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f790:	e0bffd17 	ldw	r2,-12(fp)
    f794:	10800017 	ldw	r2,0(r2)
    f798:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f79c:	e0bffc17 	ldw	r2,-16(fp)
    f7a0:	10c00a04 	addi	r3,r2,40
    f7a4:	e0bffd17 	ldw	r2,-12(fp)
    f7a8:	10800217 	ldw	r2,8(r2)
    f7ac:	100f883a 	mov	r7,r2
    f7b0:	e1bfff17 	ldw	r6,-4(fp)
    f7b4:	e17ffe17 	ldw	r5,-8(fp)
    f7b8:	1809883a 	mov	r4,r3
    f7bc:	000fd9c0 	call	fd9c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f7c0:	e037883a 	mov	sp,fp
    f7c4:	dfc00117 	ldw	ra,4(sp)
    f7c8:	df000017 	ldw	fp,0(sp)
    f7cc:	dec00204 	addi	sp,sp,8
    f7d0:	f800283a 	ret

0000f7d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f7d4:	defffa04 	addi	sp,sp,-24
    f7d8:	dfc00515 	stw	ra,20(sp)
    f7dc:	df000415 	stw	fp,16(sp)
    f7e0:	df000404 	addi	fp,sp,16
    f7e4:	e13ffd15 	stw	r4,-12(fp)
    f7e8:	e17ffe15 	stw	r5,-8(fp)
    f7ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f7f0:	e0bffd17 	ldw	r2,-12(fp)
    f7f4:	10800017 	ldw	r2,0(r2)
    f7f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f7fc:	e0bffc17 	ldw	r2,-16(fp)
    f800:	10c00a04 	addi	r3,r2,40
    f804:	e0bffd17 	ldw	r2,-12(fp)
    f808:	10800217 	ldw	r2,8(r2)
    f80c:	100f883a 	mov	r7,r2
    f810:	e1bfff17 	ldw	r6,-4(fp)
    f814:	e17ffe17 	ldw	r5,-8(fp)
    f818:	1809883a 	mov	r4,r3
    f81c:	000ffb80 	call	ffb8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f820:	e037883a 	mov	sp,fp
    f824:	dfc00117 	ldw	ra,4(sp)
    f828:	df000017 	ldw	fp,0(sp)
    f82c:	dec00204 	addi	sp,sp,8
    f830:	f800283a 	ret

0000f834 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f834:	defffc04 	addi	sp,sp,-16
    f838:	dfc00315 	stw	ra,12(sp)
    f83c:	df000215 	stw	fp,8(sp)
    f840:	df000204 	addi	fp,sp,8
    f844:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f848:	e0bfff17 	ldw	r2,-4(fp)
    f84c:	10800017 	ldw	r2,0(r2)
    f850:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f854:	e0bffe17 	ldw	r2,-8(fp)
    f858:	10c00a04 	addi	r3,r2,40
    f85c:	e0bfff17 	ldw	r2,-4(fp)
    f860:	10800217 	ldw	r2,8(r2)
    f864:	100b883a 	mov	r5,r2
    f868:	1809883a 	mov	r4,r3
    f86c:	000fc440 	call	fc44 <altera_avalon_jtag_uart_close>
}
    f870:	e037883a 	mov	sp,fp
    f874:	dfc00117 	ldw	ra,4(sp)
    f878:	df000017 	ldw	fp,0(sp)
    f87c:	dec00204 	addi	sp,sp,8
    f880:	f800283a 	ret

0000f884 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f884:	defffa04 	addi	sp,sp,-24
    f888:	dfc00515 	stw	ra,20(sp)
    f88c:	df000415 	stw	fp,16(sp)
    f890:	df000404 	addi	fp,sp,16
    f894:	e13ffd15 	stw	r4,-12(fp)
    f898:	e17ffe15 	stw	r5,-8(fp)
    f89c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f8a0:	e0bffd17 	ldw	r2,-12(fp)
    f8a4:	10800017 	ldw	r2,0(r2)
    f8a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f8ac:	e0bffc17 	ldw	r2,-16(fp)
    f8b0:	10800a04 	addi	r2,r2,40
    f8b4:	e1bfff17 	ldw	r6,-4(fp)
    f8b8:	e17ffe17 	ldw	r5,-8(fp)
    f8bc:	1009883a 	mov	r4,r2
    f8c0:	000fcac0 	call	fcac <altera_avalon_jtag_uart_ioctl>
}
    f8c4:	e037883a 	mov	sp,fp
    f8c8:	dfc00117 	ldw	ra,4(sp)
    f8cc:	df000017 	ldw	fp,0(sp)
    f8d0:	dec00204 	addi	sp,sp,8
    f8d4:	f800283a 	ret

0000f8d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f8d8:	defffa04 	addi	sp,sp,-24
    f8dc:	dfc00515 	stw	ra,20(sp)
    f8e0:	df000415 	stw	fp,16(sp)
    f8e4:	df000404 	addi	fp,sp,16
    f8e8:	e13ffd15 	stw	r4,-12(fp)
    f8ec:	e17ffe15 	stw	r5,-8(fp)
    f8f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f8f4:	e0bffd17 	ldw	r2,-12(fp)
    f8f8:	00c00044 	movi	r3,1
    f8fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f900:	e0bffd17 	ldw	r2,-12(fp)
    f904:	10800017 	ldw	r2,0(r2)
    f908:	10800104 	addi	r2,r2,4
    f90c:	1007883a 	mov	r3,r2
    f910:	e0bffd17 	ldw	r2,-12(fp)
    f914:	10800817 	ldw	r2,32(r2)
    f918:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f91c:	e0bffe17 	ldw	r2,-8(fp)
    f920:	e0ffff17 	ldw	r3,-4(fp)
    f924:	d8000015 	stw	zero,0(sp)
    f928:	e1fffd17 	ldw	r7,-12(fp)
    f92c:	01800074 	movhi	r6,1
    f930:	31be6604 	addi	r6,r6,-1640
    f934:	180b883a 	mov	r5,r3
    f938:	1009883a 	mov	r4,r2
    f93c:	00108880 	call	10888 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f940:	e0bffd17 	ldw	r2,-12(fp)
    f944:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f950:	d0e6e217 	ldw	r3,-25720(gp)
    f954:	e1fffd17 	ldw	r7,-12(fp)
    f958:	01800074 	movhi	r6,1
    f95c:	31bee904 	addi	r6,r6,-1116
    f960:	180b883a 	mov	r5,r3
    f964:	1009883a 	mov	r4,r2
    f968:	00103e80 	call	103e8 <alt_alarm_start>
    f96c:	1000040e 	bge	r2,zero,f980 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f970:	e0fffd17 	ldw	r3,-12(fp)
    f974:	00a00034 	movhi	r2,32768
    f978:	10bfffc4 	addi	r2,r2,-1
    f97c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f980:	0001883a 	nop
    f984:	e037883a 	mov	sp,fp
    f988:	dfc00117 	ldw	ra,4(sp)
    f98c:	df000017 	ldw	fp,0(sp)
    f990:	dec00204 	addi	sp,sp,8
    f994:	f800283a 	ret

0000f998 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f998:	defff804 	addi	sp,sp,-32
    f99c:	df000715 	stw	fp,28(sp)
    f9a0:	df000704 	addi	fp,sp,28
    f9a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f9a8:	e0bfff17 	ldw	r2,-4(fp)
    f9ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f9b0:	e0bffb17 	ldw	r2,-20(fp)
    f9b4:	10800017 	ldw	r2,0(r2)
    f9b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f9bc:	e0bffc17 	ldw	r2,-16(fp)
    f9c0:	10800104 	addi	r2,r2,4
    f9c4:	10800037 	ldwio	r2,0(r2)
    f9c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f9cc:	e0bffd17 	ldw	r2,-12(fp)
    f9d0:	1080c00c 	andi	r2,r2,768
    f9d4:	10006d26 	beq	r2,zero,fb8c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f9d8:	e0bffd17 	ldw	r2,-12(fp)
    f9dc:	1080400c 	andi	r2,r2,256
    f9e0:	10003526 	beq	r2,zero,fab8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f9e4:	00800074 	movhi	r2,1
    f9e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f9ec:	e0bffb17 	ldw	r2,-20(fp)
    f9f0:	10800a17 	ldw	r2,40(r2)
    f9f4:	10800044 	addi	r2,r2,1
    f9f8:	1081ffcc 	andi	r2,r2,2047
    f9fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    fa00:	e0bffb17 	ldw	r2,-20(fp)
    fa04:	10c00b17 	ldw	r3,44(r2)
    fa08:	e0bffe17 	ldw	r2,-8(fp)
    fa0c:	18801526 	beq	r3,r2,fa64 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    fa10:	e0bffc17 	ldw	r2,-16(fp)
    fa14:	10800037 	ldwio	r2,0(r2)
    fa18:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    fa1c:	e0bff917 	ldw	r2,-28(fp)
    fa20:	10a0000c 	andi	r2,r2,32768
    fa24:	10001126 	beq	r2,zero,fa6c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    fa28:	e0bffb17 	ldw	r2,-20(fp)
    fa2c:	10800a17 	ldw	r2,40(r2)
    fa30:	e0fff917 	ldw	r3,-28(fp)
    fa34:	1809883a 	mov	r4,r3
    fa38:	e0fffb17 	ldw	r3,-20(fp)
    fa3c:	1885883a 	add	r2,r3,r2
    fa40:	10800e04 	addi	r2,r2,56
    fa44:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fa48:	e0bffb17 	ldw	r2,-20(fp)
    fa4c:	10800a17 	ldw	r2,40(r2)
    fa50:	10800044 	addi	r2,r2,1
    fa54:	10c1ffcc 	andi	r3,r2,2047
    fa58:	e0bffb17 	ldw	r2,-20(fp)
    fa5c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    fa60:	003fe206 	br	f9ec <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    fa64:	0001883a 	nop
    fa68:	00000106 	br	fa70 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    fa6c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    fa70:	e0bff917 	ldw	r2,-28(fp)
    fa74:	10bfffec 	andhi	r2,r2,65535
    fa78:	10000f26 	beq	r2,zero,fab8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    fa7c:	e0bffb17 	ldw	r2,-20(fp)
    fa80:	10c00817 	ldw	r3,32(r2)
    fa84:	00bfff84 	movi	r2,-2
    fa88:	1886703a 	and	r3,r3,r2
    fa8c:	e0bffb17 	ldw	r2,-20(fp)
    fa90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    fa94:	e0bffc17 	ldw	r2,-16(fp)
    fa98:	10800104 	addi	r2,r2,4
    fa9c:	1007883a 	mov	r3,r2
    faa0:	e0bffb17 	ldw	r2,-20(fp)
    faa4:	10800817 	ldw	r2,32(r2)
    faa8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    faac:	e0bffc17 	ldw	r2,-16(fp)
    fab0:	10800104 	addi	r2,r2,4
    fab4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    fab8:	e0bffd17 	ldw	r2,-12(fp)
    fabc:	1080800c 	andi	r2,r2,512
    fac0:	103fbe26 	beq	r2,zero,f9bc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    fac4:	e0bffd17 	ldw	r2,-12(fp)
    fac8:	1004d43a 	srli	r2,r2,16
    facc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    fad0:	00001406 	br	fb24 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    fad4:	e0bffc17 	ldw	r2,-16(fp)
    fad8:	e0fffb17 	ldw	r3,-20(fp)
    fadc:	18c00d17 	ldw	r3,52(r3)
    fae0:	e13ffb17 	ldw	r4,-20(fp)
    fae4:	20c7883a 	add	r3,r4,r3
    fae8:	18c20e04 	addi	r3,r3,2104
    faec:	18c00003 	ldbu	r3,0(r3)
    faf0:	18c03fcc 	andi	r3,r3,255
    faf4:	18c0201c 	xori	r3,r3,128
    faf8:	18ffe004 	addi	r3,r3,-128
    fafc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fb00:	e0bffb17 	ldw	r2,-20(fp)
    fb04:	10800d17 	ldw	r2,52(r2)
    fb08:	10800044 	addi	r2,r2,1
    fb0c:	10c1ffcc 	andi	r3,r2,2047
    fb10:	e0bffb17 	ldw	r2,-20(fp)
    fb14:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    fb18:	e0bffa17 	ldw	r2,-24(fp)
    fb1c:	10bfffc4 	addi	r2,r2,-1
    fb20:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    fb24:	e0bffa17 	ldw	r2,-24(fp)
    fb28:	10000526 	beq	r2,zero,fb40 <altera_avalon_jtag_uart_irq+0x1a8>
    fb2c:	e0bffb17 	ldw	r2,-20(fp)
    fb30:	10c00d17 	ldw	r3,52(r2)
    fb34:	e0bffb17 	ldw	r2,-20(fp)
    fb38:	10800c17 	ldw	r2,48(r2)
    fb3c:	18bfe51e 	bne	r3,r2,fad4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    fb40:	e0bffa17 	ldw	r2,-24(fp)
    fb44:	103f9d26 	beq	r2,zero,f9bc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fb48:	e0bffb17 	ldw	r2,-20(fp)
    fb4c:	10c00817 	ldw	r3,32(r2)
    fb50:	00bfff44 	movi	r2,-3
    fb54:	1886703a 	and	r3,r3,r2
    fb58:	e0bffb17 	ldw	r2,-20(fp)
    fb5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb60:	e0bffb17 	ldw	r2,-20(fp)
    fb64:	10800017 	ldw	r2,0(r2)
    fb68:	10800104 	addi	r2,r2,4
    fb6c:	1007883a 	mov	r3,r2
    fb70:	e0bffb17 	ldw	r2,-20(fp)
    fb74:	10800817 	ldw	r2,32(r2)
    fb78:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    fb7c:	e0bffc17 	ldw	r2,-16(fp)
    fb80:	10800104 	addi	r2,r2,4
    fb84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    fb88:	003f8c06 	br	f9bc <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    fb8c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    fb90:	0001883a 	nop
    fb94:	e037883a 	mov	sp,fp
    fb98:	df000017 	ldw	fp,0(sp)
    fb9c:	dec00104 	addi	sp,sp,4
    fba0:	f800283a 	ret

0000fba4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    fba4:	defff804 	addi	sp,sp,-32
    fba8:	df000715 	stw	fp,28(sp)
    fbac:	df000704 	addi	fp,sp,28
    fbb0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    fbb4:	e0bffb17 	ldw	r2,-20(fp)
    fbb8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    fbbc:	e0bff917 	ldw	r2,-28(fp)
    fbc0:	10800017 	ldw	r2,0(r2)
    fbc4:	10800104 	addi	r2,r2,4
    fbc8:	10800037 	ldwio	r2,0(r2)
    fbcc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    fbd0:	e0bffa17 	ldw	r2,-24(fp)
    fbd4:	1081000c 	andi	r2,r2,1024
    fbd8:	10000b26 	beq	r2,zero,fc08 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    fbdc:	e0bff917 	ldw	r2,-28(fp)
    fbe0:	10800017 	ldw	r2,0(r2)
    fbe4:	10800104 	addi	r2,r2,4
    fbe8:	1007883a 	mov	r3,r2
    fbec:	e0bff917 	ldw	r2,-28(fp)
    fbf0:	10800817 	ldw	r2,32(r2)
    fbf4:	10810014 	ori	r2,r2,1024
    fbf8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    fbfc:	e0bff917 	ldw	r2,-28(fp)
    fc00:	10000915 	stw	zero,36(r2)
    fc04:	00000a06 	br	fc30 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    fc08:	e0bff917 	ldw	r2,-28(fp)
    fc0c:	10c00917 	ldw	r3,36(r2)
    fc10:	00a00034 	movhi	r2,32768
    fc14:	10bfff04 	addi	r2,r2,-4
    fc18:	10c00536 	bltu	r2,r3,fc30 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    fc1c:	e0bff917 	ldw	r2,-28(fp)
    fc20:	10800917 	ldw	r2,36(r2)
    fc24:	10c00044 	addi	r3,r2,1
    fc28:	e0bff917 	ldw	r2,-28(fp)
    fc2c:	10c00915 	stw	r3,36(r2)
    fc30:	d0a6e217 	ldw	r2,-25720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    fc34:	e037883a 	mov	sp,fp
    fc38:	df000017 	ldw	fp,0(sp)
    fc3c:	dec00104 	addi	sp,sp,4
    fc40:	f800283a 	ret

0000fc44 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    fc44:	defffd04 	addi	sp,sp,-12
    fc48:	df000215 	stw	fp,8(sp)
    fc4c:	df000204 	addi	fp,sp,8
    fc50:	e13ffe15 	stw	r4,-8(fp)
    fc54:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fc58:	00000506 	br	fc70 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    fc5c:	e0bfff17 	ldw	r2,-4(fp)
    fc60:	1090000c 	andi	r2,r2,16384
    fc64:	10000226 	beq	r2,zero,fc70 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    fc68:	00bffd44 	movi	r2,-11
    fc6c:	00000b06 	br	fc9c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    fc70:	e0bffe17 	ldw	r2,-8(fp)
    fc74:	10c00d17 	ldw	r3,52(r2)
    fc78:	e0bffe17 	ldw	r2,-8(fp)
    fc7c:	10800c17 	ldw	r2,48(r2)
    fc80:	18800526 	beq	r3,r2,fc98 <altera_avalon_jtag_uart_close+0x54>
    fc84:	e0bffe17 	ldw	r2,-8(fp)
    fc88:	10c00917 	ldw	r3,36(r2)
    fc8c:	e0bffe17 	ldw	r2,-8(fp)
    fc90:	10800117 	ldw	r2,4(r2)
    fc94:	18bff136 	bltu	r3,r2,fc5c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    fc98:	0005883a 	mov	r2,zero
}
    fc9c:	e037883a 	mov	sp,fp
    fca0:	df000017 	ldw	fp,0(sp)
    fca4:	dec00104 	addi	sp,sp,4
    fca8:	f800283a 	ret

0000fcac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    fcac:	defffa04 	addi	sp,sp,-24
    fcb0:	df000515 	stw	fp,20(sp)
    fcb4:	df000504 	addi	fp,sp,20
    fcb8:	e13ffd15 	stw	r4,-12(fp)
    fcbc:	e17ffe15 	stw	r5,-8(fp)
    fcc0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    fcc4:	00bff9c4 	movi	r2,-25
    fcc8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    fccc:	e0bffe17 	ldw	r2,-8(fp)
    fcd0:	10da8060 	cmpeqi	r3,r2,27137
    fcd4:	1800031e 	bne	r3,zero,fce4 <altera_avalon_jtag_uart_ioctl+0x38>
    fcd8:	109a80a0 	cmpeqi	r2,r2,27138
    fcdc:	1000181e 	bne	r2,zero,fd40 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    fce0:	00002906 	br	fd88 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    fce4:	e0bffd17 	ldw	r2,-12(fp)
    fce8:	10c00117 	ldw	r3,4(r2)
    fcec:	00a00034 	movhi	r2,32768
    fcf0:	10bfffc4 	addi	r2,r2,-1
    fcf4:	18802126 	beq	r3,r2,fd7c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    fcf8:	e0bfff17 	ldw	r2,-4(fp)
    fcfc:	10800017 	ldw	r2,0(r2)
    fd00:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    fd04:	e0bffc17 	ldw	r2,-16(fp)
    fd08:	10800090 	cmplti	r2,r2,2
    fd0c:	1000061e 	bne	r2,zero,fd28 <altera_avalon_jtag_uart_ioctl+0x7c>
    fd10:	e0fffc17 	ldw	r3,-16(fp)
    fd14:	00a00034 	movhi	r2,32768
    fd18:	10bfffc4 	addi	r2,r2,-1
    fd1c:	18800226 	beq	r3,r2,fd28 <altera_avalon_jtag_uart_ioctl+0x7c>
    fd20:	e0bffc17 	ldw	r2,-16(fp)
    fd24:	00000206 	br	fd30 <altera_avalon_jtag_uart_ioctl+0x84>
    fd28:	00a00034 	movhi	r2,32768
    fd2c:	10bfff84 	addi	r2,r2,-2
    fd30:	e0fffd17 	ldw	r3,-12(fp)
    fd34:	18800115 	stw	r2,4(r3)
      rc = 0;
    fd38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fd3c:	00000f06 	br	fd7c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    fd40:	e0bffd17 	ldw	r2,-12(fp)
    fd44:	10c00117 	ldw	r3,4(r2)
    fd48:	00a00034 	movhi	r2,32768
    fd4c:	10bfffc4 	addi	r2,r2,-1
    fd50:	18800c26 	beq	r3,r2,fd84 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    fd54:	e0bffd17 	ldw	r2,-12(fp)
    fd58:	10c00917 	ldw	r3,36(r2)
    fd5c:	e0bffd17 	ldw	r2,-12(fp)
    fd60:	10800117 	ldw	r2,4(r2)
    fd64:	1885803a 	cmpltu	r2,r3,r2
    fd68:	10c03fcc 	andi	r3,r2,255
    fd6c:	e0bfff17 	ldw	r2,-4(fp)
    fd70:	10c00015 	stw	r3,0(r2)
      rc = 0;
    fd74:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    fd78:	00000206 	br	fd84 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    fd7c:	0001883a 	nop
    fd80:	00000106 	br	fd88 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    fd84:	0001883a 	nop

  default:
    break;
  }

  return rc;
    fd88:	e0bffb17 	ldw	r2,-20(fp)
}
    fd8c:	e037883a 	mov	sp,fp
    fd90:	df000017 	ldw	fp,0(sp)
    fd94:	dec00104 	addi	sp,sp,4
    fd98:	f800283a 	ret

0000fd9c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    fd9c:	defff304 	addi	sp,sp,-52
    fda0:	dfc00c15 	stw	ra,48(sp)
    fda4:	df000b15 	stw	fp,44(sp)
    fda8:	df000b04 	addi	fp,sp,44
    fdac:	e13ffc15 	stw	r4,-16(fp)
    fdb0:	e17ffd15 	stw	r5,-12(fp)
    fdb4:	e1bffe15 	stw	r6,-8(fp)
    fdb8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    fdbc:	e0bffd17 	ldw	r2,-12(fp)
    fdc0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fdc4:	00004706 	br	fee4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    fdc8:	e0bffc17 	ldw	r2,-16(fp)
    fdcc:	10800a17 	ldw	r2,40(r2)
    fdd0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    fdd4:	e0bffc17 	ldw	r2,-16(fp)
    fdd8:	10800b17 	ldw	r2,44(r2)
    fddc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    fde0:	e0fff717 	ldw	r3,-36(fp)
    fde4:	e0bff817 	ldw	r2,-32(fp)
    fde8:	18800536 	bltu	r3,r2,fe00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    fdec:	e0fff717 	ldw	r3,-36(fp)
    fdf0:	e0bff817 	ldw	r2,-32(fp)
    fdf4:	1885c83a 	sub	r2,r3,r2
    fdf8:	e0bff615 	stw	r2,-40(fp)
    fdfc:	00000406 	br	fe10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    fe00:	00c20004 	movi	r3,2048
    fe04:	e0bff817 	ldw	r2,-32(fp)
    fe08:	1885c83a 	sub	r2,r3,r2
    fe0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fe10:	e0bff617 	ldw	r2,-40(fp)
    fe14:	10001e26 	beq	r2,zero,fe90 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    fe18:	e0fffe17 	ldw	r3,-8(fp)
    fe1c:	e0bff617 	ldw	r2,-40(fp)
    fe20:	1880022e 	bgeu	r3,r2,fe2c <altera_avalon_jtag_uart_read+0x90>
        n = space;
    fe24:	e0bffe17 	ldw	r2,-8(fp)
    fe28:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    fe2c:	e0bffc17 	ldw	r2,-16(fp)
    fe30:	10c00e04 	addi	r3,r2,56
    fe34:	e0bff817 	ldw	r2,-32(fp)
    fe38:	1885883a 	add	r2,r3,r2
    fe3c:	e1bff617 	ldw	r6,-40(fp)
    fe40:	100b883a 	mov	r5,r2
    fe44:	e13ff517 	ldw	r4,-44(fp)
    fe48:	0007f180 	call	7f18 <memcpy>
      ptr   += n;
    fe4c:	e0fff517 	ldw	r3,-44(fp)
    fe50:	e0bff617 	ldw	r2,-40(fp)
    fe54:	1885883a 	add	r2,r3,r2
    fe58:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    fe5c:	e0fffe17 	ldw	r3,-8(fp)
    fe60:	e0bff617 	ldw	r2,-40(fp)
    fe64:	1885c83a 	sub	r2,r3,r2
    fe68:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fe6c:	e0fff817 	ldw	r3,-32(fp)
    fe70:	e0bff617 	ldw	r2,-40(fp)
    fe74:	1885883a 	add	r2,r3,r2
    fe78:	10c1ffcc 	andi	r3,r2,2047
    fe7c:	e0bffc17 	ldw	r2,-16(fp)
    fe80:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    fe84:	e0bffe17 	ldw	r2,-8(fp)
    fe88:	00bfcf16 	blt	zero,r2,fdc8 <altera_avalon_jtag_uart_read+0x2c>
    fe8c:	00000106 	br	fe94 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    fe90:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    fe94:	e0fff517 	ldw	r3,-44(fp)
    fe98:	e0bffd17 	ldw	r2,-12(fp)
    fe9c:	1880141e 	bne	r3,r2,fef0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    fea0:	e0bfff17 	ldw	r2,-4(fp)
    fea4:	1090000c 	andi	r2,r2,16384
    fea8:	1000131e 	bne	r2,zero,fef8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    feac:	0001883a 	nop
    feb0:	e0bffc17 	ldw	r2,-16(fp)
    feb4:	10c00a17 	ldw	r3,40(r2)
    feb8:	e0bff717 	ldw	r2,-36(fp)
    febc:	1880051e 	bne	r3,r2,fed4 <altera_avalon_jtag_uart_read+0x138>
    fec0:	e0bffc17 	ldw	r2,-16(fp)
    fec4:	10c00917 	ldw	r3,36(r2)
    fec8:	e0bffc17 	ldw	r2,-16(fp)
    fecc:	10800117 	ldw	r2,4(r2)
    fed0:	18bff736 	bltu	r3,r2,feb0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    fed4:	e0bffc17 	ldw	r2,-16(fp)
    fed8:	10c00a17 	ldw	r3,40(r2)
    fedc:	e0bff717 	ldw	r2,-36(fp)
    fee0:	18800726 	beq	r3,r2,ff00 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    fee4:	e0bffe17 	ldw	r2,-8(fp)
    fee8:	00bfb716 	blt	zero,r2,fdc8 <altera_avalon_jtag_uart_read+0x2c>
    feec:	00000506 	br	ff04 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    fef0:	0001883a 	nop
    fef4:	00000306 	br	ff04 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    fef8:	0001883a 	nop
    fefc:	00000106 	br	ff04 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ff00:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ff04:	e0fff517 	ldw	r3,-44(fp)
    ff08:	e0bffd17 	ldw	r2,-12(fp)
    ff0c:	18801826 	beq	r3,r2,ff70 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff10:	0005303a 	rdctl	r2,status
    ff14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff18:	e0fffb17 	ldw	r3,-20(fp)
    ff1c:	00bfff84 	movi	r2,-2
    ff20:	1884703a 	and	r2,r3,r2
    ff24:	1001703a 	wrctl	status,r2
  
  return context;
    ff28:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ff2c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ff30:	e0bffc17 	ldw	r2,-16(fp)
    ff34:	10800817 	ldw	r2,32(r2)
    ff38:	10c00054 	ori	r3,r2,1
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ff44:	e0bffc17 	ldw	r2,-16(fp)
    ff48:	10800017 	ldw	r2,0(r2)
    ff4c:	10800104 	addi	r2,r2,4
    ff50:	1007883a 	mov	r3,r2
    ff54:	e0bffc17 	ldw	r2,-16(fp)
    ff58:	10800817 	ldw	r2,32(r2)
    ff5c:	18800035 	stwio	r2,0(r3)
    ff60:	e0bffa17 	ldw	r2,-24(fp)
    ff64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff68:	e0bff917 	ldw	r2,-28(fp)
    ff6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ff70:	e0fff517 	ldw	r3,-44(fp)
    ff74:	e0bffd17 	ldw	r2,-12(fp)
    ff78:	18800426 	beq	r3,r2,ff8c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ff7c:	e0fff517 	ldw	r3,-44(fp)
    ff80:	e0bffd17 	ldw	r2,-12(fp)
    ff84:	1885c83a 	sub	r2,r3,r2
    ff88:	00000606 	br	ffa4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ff8c:	e0bfff17 	ldw	r2,-4(fp)
    ff90:	1090000c 	andi	r2,r2,16384
    ff94:	10000226 	beq	r2,zero,ffa0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ff98:	00bffd44 	movi	r2,-11
    ff9c:	00000106 	br	ffa4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ffa0:	00bffec4 	movi	r2,-5
}
    ffa4:	e037883a 	mov	sp,fp
    ffa8:	dfc00117 	ldw	ra,4(sp)
    ffac:	df000017 	ldw	fp,0(sp)
    ffb0:	dec00204 	addi	sp,sp,8
    ffb4:	f800283a 	ret

0000ffb8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ffb8:	defff304 	addi	sp,sp,-52
    ffbc:	dfc00c15 	stw	ra,48(sp)
    ffc0:	df000b15 	stw	fp,44(sp)
    ffc4:	df000b04 	addi	fp,sp,44
    ffc8:	e13ffc15 	stw	r4,-16(fp)
    ffcc:	e17ffd15 	stw	r5,-12(fp)
    ffd0:	e1bffe15 	stw	r6,-8(fp)
    ffd4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ffd8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ffdc:	e0bffd17 	ldw	r2,-12(fp)
    ffe0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ffe4:	00003706 	br	100c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    ffe8:	e0bffc17 	ldw	r2,-16(fp)
    ffec:	10800c17 	ldw	r2,48(r2)
    fff0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fff4:	e0bffc17 	ldw	r2,-16(fp)
    fff8:	10800d17 	ldw	r2,52(r2)
    fffc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   10000:	e0fff917 	ldw	r3,-28(fp)
   10004:	e0bff517 	ldw	r2,-44(fp)
   10008:	1880062e 	bgeu	r3,r2,10024 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1000c:	e0fff517 	ldw	r3,-44(fp)
   10010:	e0bff917 	ldw	r2,-28(fp)
   10014:	1885c83a 	sub	r2,r3,r2
   10018:	10bfffc4 	addi	r2,r2,-1
   1001c:	e0bff615 	stw	r2,-40(fp)
   10020:	00000b06 	br	10050 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10024:	e0bff517 	ldw	r2,-44(fp)
   10028:	10000526 	beq	r2,zero,10040 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1002c:	00c20004 	movi	r3,2048
   10030:	e0bff917 	ldw	r2,-28(fp)
   10034:	1885c83a 	sub	r2,r3,r2
   10038:	e0bff615 	stw	r2,-40(fp)
   1003c:	00000406 	br	10050 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10040:	00c1ffc4 	movi	r3,2047
   10044:	e0bff917 	ldw	r2,-28(fp)
   10048:	1885c83a 	sub	r2,r3,r2
   1004c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10050:	e0bff617 	ldw	r2,-40(fp)
   10054:	10001e26 	beq	r2,zero,100d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10058:	e0fffe17 	ldw	r3,-8(fp)
   1005c:	e0bff617 	ldw	r2,-40(fp)
   10060:	1880022e 	bgeu	r3,r2,1006c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10064:	e0bffe17 	ldw	r2,-8(fp)
   10068:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1006c:	e0bffc17 	ldw	r2,-16(fp)
   10070:	10c20e04 	addi	r3,r2,2104
   10074:	e0bff917 	ldw	r2,-28(fp)
   10078:	1885883a 	add	r2,r3,r2
   1007c:	e1bff617 	ldw	r6,-40(fp)
   10080:	e17ffd17 	ldw	r5,-12(fp)
   10084:	1009883a 	mov	r4,r2
   10088:	0007f180 	call	7f18 <memcpy>
      ptr   += n;
   1008c:	e0fffd17 	ldw	r3,-12(fp)
   10090:	e0bff617 	ldw	r2,-40(fp)
   10094:	1885883a 	add	r2,r3,r2
   10098:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1009c:	e0fffe17 	ldw	r3,-8(fp)
   100a0:	e0bff617 	ldw	r2,-40(fp)
   100a4:	1885c83a 	sub	r2,r3,r2
   100a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100ac:	e0fff917 	ldw	r3,-28(fp)
   100b0:	e0bff617 	ldw	r2,-40(fp)
   100b4:	1885883a 	add	r2,r3,r2
   100b8:	10c1ffcc 	andi	r3,r2,2047
   100bc:	e0bffc17 	ldw	r2,-16(fp)
   100c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   100c4:	e0bffe17 	ldw	r2,-8(fp)
   100c8:	00bfc716 	blt	zero,r2,ffe8 <altera_avalon_jtag_uart_write+0x30>
   100cc:	00000106 	br	100d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   100d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100d4:	0005303a 	rdctl	r2,status
   100d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100dc:	e0fffb17 	ldw	r3,-20(fp)
   100e0:	00bfff84 	movi	r2,-2
   100e4:	1884703a 	and	r2,r3,r2
   100e8:	1001703a 	wrctl	status,r2
  
  return context;
   100ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   100f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   100f4:	e0bffc17 	ldw	r2,-16(fp)
   100f8:	10800817 	ldw	r2,32(r2)
   100fc:	10c00094 	ori	r3,r2,2
   10100:	e0bffc17 	ldw	r2,-16(fp)
   10104:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10108:	e0bffc17 	ldw	r2,-16(fp)
   1010c:	10800017 	ldw	r2,0(r2)
   10110:	10800104 	addi	r2,r2,4
   10114:	1007883a 	mov	r3,r2
   10118:	e0bffc17 	ldw	r2,-16(fp)
   1011c:	10800817 	ldw	r2,32(r2)
   10120:	18800035 	stwio	r2,0(r3)
   10124:	e0bffa17 	ldw	r2,-24(fp)
   10128:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1012c:	e0bff817 	ldw	r2,-32(fp)
   10130:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10134:	e0bffe17 	ldw	r2,-8(fp)
   10138:	0080100e 	bge	zero,r2,1017c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1013c:	e0bfff17 	ldw	r2,-4(fp)
   10140:	1090000c 	andi	r2,r2,16384
   10144:	1000101e 	bne	r2,zero,10188 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10148:	0001883a 	nop
   1014c:	e0bffc17 	ldw	r2,-16(fp)
   10150:	10c00d17 	ldw	r3,52(r2)
   10154:	e0bff517 	ldw	r2,-44(fp)
   10158:	1880051e 	bne	r3,r2,10170 <altera_avalon_jtag_uart_write+0x1b8>
   1015c:	e0bffc17 	ldw	r2,-16(fp)
   10160:	10c00917 	ldw	r3,36(r2)
   10164:	e0bffc17 	ldw	r2,-16(fp)
   10168:	10800117 	ldw	r2,4(r2)
   1016c:	18bff736 	bltu	r3,r2,1014c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10170:	e0bffc17 	ldw	r2,-16(fp)
   10174:	10800917 	ldw	r2,36(r2)
   10178:	1000051e 	bne	r2,zero,10190 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1017c:	e0bffe17 	ldw	r2,-8(fp)
   10180:	00bfd016 	blt	zero,r2,100c4 <altera_avalon_jtag_uart_write+0x10c>
   10184:	00000306 	br	10194 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10188:	0001883a 	nop
   1018c:	00000106 	br	10194 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10190:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10194:	e0fffd17 	ldw	r3,-12(fp)
   10198:	e0bff717 	ldw	r2,-36(fp)
   1019c:	18800426 	beq	r3,r2,101b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   101a0:	e0fffd17 	ldw	r3,-12(fp)
   101a4:	e0bff717 	ldw	r2,-36(fp)
   101a8:	1885c83a 	sub	r2,r3,r2
   101ac:	00000606 	br	101c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   101b0:	e0bfff17 	ldw	r2,-4(fp)
   101b4:	1090000c 	andi	r2,r2,16384
   101b8:	10000226 	beq	r2,zero,101c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   101bc:	00bffd44 	movi	r2,-11
   101c0:	00000106 	br	101c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   101c4:	00bffec4 	movi	r2,-5
}
   101c8:	e037883a 	mov	sp,fp
   101cc:	dfc00117 	ldw	ra,4(sp)
   101d0:	df000017 	ldw	fp,0(sp)
   101d4:	dec00204 	addi	sp,sp,8
   101d8:	f800283a 	ret

000101dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   101dc:	defffa04 	addi	sp,sp,-24
   101e0:	dfc00515 	stw	ra,20(sp)
   101e4:	df000415 	stw	fp,16(sp)
   101e8:	df000404 	addi	fp,sp,16
   101ec:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   101f0:	0007883a 	mov	r3,zero
   101f4:	e0bfff17 	ldw	r2,-4(fp)
   101f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   101fc:	e0bfff17 	ldw	r2,-4(fp)
   10200:	10800104 	addi	r2,r2,4
   10204:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10208:	0005303a 	rdctl	r2,status
   1020c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10210:	e0fffd17 	ldw	r3,-12(fp)
   10214:	00bfff84 	movi	r2,-2
   10218:	1884703a 	and	r2,r3,r2
   1021c:	1001703a 	wrctl	status,r2
  
  return context;
   10220:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10224:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   10228:	0010f580 	call	10f58 <alt_tick>
   1022c:	e0bffc17 	ldw	r2,-16(fp)
   10230:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10234:	e0bffe17 	ldw	r2,-8(fp)
   10238:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1023c:	0001883a 	nop
   10240:	e037883a 	mov	sp,fp
   10244:	dfc00117 	ldw	ra,4(sp)
   10248:	df000017 	ldw	fp,0(sp)
   1024c:	dec00204 	addi	sp,sp,8
   10250:	f800283a 	ret

00010254 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10254:	defff804 	addi	sp,sp,-32
   10258:	dfc00715 	stw	ra,28(sp)
   1025c:	df000615 	stw	fp,24(sp)
   10260:	df000604 	addi	fp,sp,24
   10264:	e13ffc15 	stw	r4,-16(fp)
   10268:	e17ffd15 	stw	r5,-12(fp)
   1026c:	e1bffe15 	stw	r6,-8(fp)
   10270:	e1ffff15 	stw	r7,-4(fp)
   10274:	e0bfff17 	ldw	r2,-4(fp)
   10278:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1027c:	d0a6e217 	ldw	r2,-25720(gp)
   10280:	1000021e 	bne	r2,zero,1028c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10284:	e0bffb17 	ldw	r2,-20(fp)
   10288:	d0a6e215 	stw	r2,-25720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1028c:	e0bffc17 	ldw	r2,-16(fp)
   10290:	10800104 	addi	r2,r2,4
   10294:	00c001c4 	movi	r3,7
   10298:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1029c:	d8000015 	stw	zero,0(sp)
   102a0:	e1fffc17 	ldw	r7,-16(fp)
   102a4:	01800074 	movhi	r6,1
   102a8:	31807704 	addi	r6,r6,476
   102ac:	e17ffe17 	ldw	r5,-8(fp)
   102b0:	e13ffd17 	ldw	r4,-12(fp)
   102b4:	00108880 	call	10888 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   102b8:	0001883a 	nop
   102bc:	e037883a 	mov	sp,fp
   102c0:	dfc00117 	ldw	ra,4(sp)
   102c4:	df000017 	ldw	fp,0(sp)
   102c8:	dec00204 	addi	sp,sp,8
   102cc:	f800283a 	ret

000102d0 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   102d0:	defffe04 	addi	sp,sp,-8
   102d4:	df000115 	stw	fp,4(sp)
   102d8:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   102dc:	d0a6df17 	ldw	r2,-25732(gp)
   102e0:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   102e4:	d0a6e017 	ldw	r2,-25728(gp)
   102e8:	1000021e 	bne	r2,zero,102f4 <alt_timestamp_start+0x24>
  {
    return -1;
   102ec:	00bfffc4 	movi	r2,-1
   102f0:	00001106 	br	10338 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   102f4:	e0bfff17 	ldw	r2,-4(fp)
   102f8:	10800104 	addi	r2,r2,4
   102fc:	00c00204 	movi	r3,8
   10300:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   10304:	e0bfff17 	ldw	r2,-4(fp)
   10308:	10800204 	addi	r2,r2,8
   1030c:	00ffffd4 	movui	r3,65535
   10310:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   10314:	e0bfff17 	ldw	r2,-4(fp)
   10318:	10800304 	addi	r2,r2,12
   1031c:	00ffffd4 	movui	r3,65535
   10320:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   10324:	e0bfff17 	ldw	r2,-4(fp)
   10328:	10800104 	addi	r2,r2,4
   1032c:	00c00104 	movi	r3,4
   10330:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   10334:	0005883a 	mov	r2,zero
}
   10338:	e037883a 	mov	sp,fp
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00104 	addi	sp,sp,4
   10344:	f800283a 	ret

00010348 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   10348:	defffc04 	addi	sp,sp,-16
   1034c:	df000315 	stw	fp,12(sp)
   10350:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10354:	d0a6df17 	ldw	r2,-25732(gp)
   10358:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   1035c:	d0a6e017 	ldw	r2,-25728(gp)
   10360:	1000021e 	bne	r2,zero,1036c <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10364:	00bfffc4 	movi	r2,-1
   10368:	00001306 	br	103b8 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   1036c:	e0bffd17 	ldw	r2,-12(fp)
   10370:	10800404 	addi	r2,r2,16
   10374:	0007883a 	mov	r3,zero
   10378:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   1037c:	e0bffd17 	ldw	r2,-12(fp)
   10380:	10800404 	addi	r2,r2,16
   10384:	10800037 	ldwio	r2,0(r2)
   10388:	10bfffcc 	andi	r2,r2,65535
   1038c:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10390:	e0bffd17 	ldw	r2,-12(fp)
   10394:	10800504 	addi	r2,r2,20
   10398:	10800037 	ldwio	r2,0(r2)
   1039c:	10bfffcc 	andi	r2,r2,65535
   103a0:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   103a4:	e0bfff17 	ldw	r2,-4(fp)
   103a8:	1006943a 	slli	r3,r2,16
   103ac:	e0bffe17 	ldw	r2,-8(fp)
   103b0:	1884b03a 	or	r2,r3,r2
   103b4:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   103b8:	e037883a 	mov	sp,fp
   103bc:	df000017 	ldw	fp,0(sp)
   103c0:	dec00104 	addi	sp,sp,4
   103c4:	f800283a 	ret

000103c8 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   103c8:	deffff04 	addi	sp,sp,-4
   103cc:	df000015 	stw	fp,0(sp)
   103d0:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   103d4:	d0a6e017 	ldw	r2,-25728(gp)
}
   103d8:	e037883a 	mov	sp,fp
   103dc:	df000017 	ldw	fp,0(sp)
   103e0:	dec00104 	addi	sp,sp,4
   103e4:	f800283a 	ret

000103e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   103e8:	defff504 	addi	sp,sp,-44
   103ec:	df000a15 	stw	fp,40(sp)
   103f0:	df000a04 	addi	fp,sp,40
   103f4:	e13ffc15 	stw	r4,-16(fp)
   103f8:	e17ffd15 	stw	r5,-12(fp)
   103fc:	e1bffe15 	stw	r6,-8(fp)
   10400:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10404:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10408:	d0a6e217 	ldw	r2,-25720(gp)
  
  if (alt_ticks_per_second ())
   1040c:	10003c26 	beq	r2,zero,10500 <alt_alarm_start+0x118>
  {
    if (alarm)
   10410:	e0bffc17 	ldw	r2,-16(fp)
   10414:	10003826 	beq	r2,zero,104f8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10418:	e0bffc17 	ldw	r2,-16(fp)
   1041c:	e0fffe17 	ldw	r3,-8(fp)
   10420:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10424:	e0bffc17 	ldw	r2,-16(fp)
   10428:	e0ffff17 	ldw	r3,-4(fp)
   1042c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10430:	0005303a 	rdctl	r2,status
   10434:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10438:	e0fff917 	ldw	r3,-28(fp)
   1043c:	00bfff84 	movi	r2,-2
   10440:	1884703a 	and	r2,r3,r2
   10444:	1001703a 	wrctl	status,r2
  
  return context;
   10448:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1044c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10450:	d0a6e317 	ldw	r2,-25716(gp)
      
      current_nticks = alt_nticks();
   10454:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10458:	e0fffd17 	ldw	r3,-12(fp)
   1045c:	e0bff617 	ldw	r2,-40(fp)
   10460:	1885883a 	add	r2,r3,r2
   10464:	10c00044 	addi	r3,r2,1
   10468:	e0bffc17 	ldw	r2,-16(fp)
   1046c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10470:	e0bffc17 	ldw	r2,-16(fp)
   10474:	10c00217 	ldw	r3,8(r2)
   10478:	e0bff617 	ldw	r2,-40(fp)
   1047c:	1880042e 	bgeu	r3,r2,10490 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10480:	e0bffc17 	ldw	r2,-16(fp)
   10484:	00c00044 	movi	r3,1
   10488:	10c00405 	stb	r3,16(r2)
   1048c:	00000206 	br	10498 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10490:	e0bffc17 	ldw	r2,-16(fp)
   10494:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10498:	e0bffc17 	ldw	r2,-16(fp)
   1049c:	d0e00e04 	addi	r3,gp,-32712
   104a0:	e0fffa15 	stw	r3,-24(fp)
   104a4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   104a8:	e0bffb17 	ldw	r2,-20(fp)
   104ac:	e0fffa17 	ldw	r3,-24(fp)
   104b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   104b4:	e0bffa17 	ldw	r2,-24(fp)
   104b8:	10c00017 	ldw	r3,0(r2)
   104bc:	e0bffb17 	ldw	r2,-20(fp)
   104c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   104c4:	e0bffa17 	ldw	r2,-24(fp)
   104c8:	10800017 	ldw	r2,0(r2)
   104cc:	e0fffb17 	ldw	r3,-20(fp)
   104d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   104d4:	e0bffa17 	ldw	r2,-24(fp)
   104d8:	e0fffb17 	ldw	r3,-20(fp)
   104dc:	10c00015 	stw	r3,0(r2)
   104e0:	e0bff817 	ldw	r2,-32(fp)
   104e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104e8:	e0bff717 	ldw	r2,-36(fp)
   104ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   104f0:	0005883a 	mov	r2,zero
   104f4:	00000306 	br	10504 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   104f8:	00bffa84 	movi	r2,-22
   104fc:	00000106 	br	10504 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10500:	00bfde84 	movi	r2,-134
  }
}
   10504:	e037883a 	mov	sp,fp
   10508:	df000017 	ldw	fp,0(sp)
   1050c:	dec00104 	addi	sp,sp,4
   10510:	f800283a 	ret

00010514 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10514:	defffa04 	addi	sp,sp,-24
   10518:	dfc00515 	stw	ra,20(sp)
   1051c:	df000415 	stw	fp,16(sp)
   10520:	df000404 	addi	fp,sp,16
   10524:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10528:	008000c4 	movi	r2,3
   1052c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10530:	e0fffd17 	ldw	r3,-12(fp)
   10534:	008003f4 	movhi	r2,15
   10538:	10909004 	addi	r2,r2,16960
   1053c:	1885383a 	mul	r2,r3,r2
   10540:	100b883a 	mov	r5,r2
   10544:	0100bef4 	movhi	r4,763
   10548:	213c2004 	addi	r4,r4,-3968
   1054c:	000c5f40 	call	c5f4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10550:	100b883a 	mov	r5,r2
   10554:	01200034 	movhi	r4,32768
   10558:	213fffc4 	addi	r4,r4,-1
   1055c:	000c5f40 	call	c5f4 <__udivsi3>
   10560:	100b883a 	mov	r5,r2
   10564:	e13fff17 	ldw	r4,-4(fp)
   10568:	000c5f40 	call	c5f4 <__udivsi3>
   1056c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10570:	e0bffe17 	ldw	r2,-8(fp)
   10574:	10002a26 	beq	r2,zero,10620 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10578:	e03ffc15 	stw	zero,-16(fp)
   1057c:	00001706 	br	105dc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10580:	00a00034 	movhi	r2,32768
   10584:	10bfffc4 	addi	r2,r2,-1
   10588:	10bfffc4 	addi	r2,r2,-1
   1058c:	103ffe1e 	bne	r2,zero,10588 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10590:	e0fffd17 	ldw	r3,-12(fp)
   10594:	008003f4 	movhi	r2,15
   10598:	10909004 	addi	r2,r2,16960
   1059c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   105a0:	100b883a 	mov	r5,r2
   105a4:	0100bef4 	movhi	r4,763
   105a8:	213c2004 	addi	r4,r4,-3968
   105ac:	000c5f40 	call	c5f4 <__udivsi3>
   105b0:	100b883a 	mov	r5,r2
   105b4:	01200034 	movhi	r4,32768
   105b8:	213fffc4 	addi	r4,r4,-1
   105bc:	000c5f40 	call	c5f4 <__udivsi3>
   105c0:	1007883a 	mov	r3,r2
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10c5c83a 	sub	r2,r2,r3
   105cc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   105d0:	e0bffc17 	ldw	r2,-16(fp)
   105d4:	10800044 	addi	r2,r2,1
   105d8:	e0bffc15 	stw	r2,-16(fp)
   105dc:	e0fffc17 	ldw	r3,-16(fp)
   105e0:	e0bffe17 	ldw	r2,-8(fp)
   105e4:	18bfe616 	blt	r3,r2,10580 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   105e8:	e0fffd17 	ldw	r3,-12(fp)
   105ec:	008003f4 	movhi	r2,15
   105f0:	10909004 	addi	r2,r2,16960
   105f4:	1885383a 	mul	r2,r3,r2
   105f8:	100b883a 	mov	r5,r2
   105fc:	0100bef4 	movhi	r4,763
   10600:	213c2004 	addi	r4,r4,-3968
   10604:	000c5f40 	call	c5f4 <__udivsi3>
   10608:	1007883a 	mov	r3,r2
   1060c:	e0bfff17 	ldw	r2,-4(fp)
   10610:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10614:	10bfffc4 	addi	r2,r2,-1
   10618:	103ffe1e 	bne	r2,zero,10614 <alt_busy_sleep+0x100>
   1061c:	00000d06 	br	10654 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10620:	e0fffd17 	ldw	r3,-12(fp)
   10624:	008003f4 	movhi	r2,15
   10628:	10909004 	addi	r2,r2,16960
   1062c:	1885383a 	mul	r2,r3,r2
   10630:	100b883a 	mov	r5,r2
   10634:	0100bef4 	movhi	r4,763
   10638:	213c2004 	addi	r4,r4,-3968
   1063c:	000c5f40 	call	c5f4 <__udivsi3>
   10640:	1007883a 	mov	r3,r2
   10644:	e0bfff17 	ldw	r2,-4(fp)
   10648:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1064c:	10bfffc4 	addi	r2,r2,-1
   10650:	00bffe16 	blt	zero,r2,1064c <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10654:	0005883a 	mov	r2,zero
}
   10658:	e037883a 	mov	sp,fp
   1065c:	dfc00117 	ldw	ra,4(sp)
   10660:	df000017 	ldw	fp,0(sp)
   10664:	dec00204 	addi	sp,sp,8
   10668:	f800283a 	ret

0001066c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1066c:	defffe04 	addi	sp,sp,-8
   10670:	df000115 	stw	fp,4(sp)
   10674:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10678:	e03fff15 	stw	zero,-4(fp)
   1067c:	00000506 	br	10694 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10680:	e0bfff17 	ldw	r2,-4(fp)
   10684:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10688:	e0bfff17 	ldw	r2,-4(fp)
   1068c:	10800804 	addi	r2,r2,32
   10690:	e0bfff15 	stw	r2,-4(fp)
   10694:	e0bfff17 	ldw	r2,-4(fp)
   10698:	10a00030 	cmpltui	r2,r2,32768
   1069c:	103ff81e 	bne	r2,zero,10680 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   106a0:	0001883a 	nop
   106a4:	e037883a 	mov	sp,fp
   106a8:	df000017 	ldw	fp,0(sp)
   106ac:	dec00104 	addi	sp,sp,4
   106b0:	f800283a 	ret

000106b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   106b4:	defffe04 	addi	sp,sp,-8
   106b8:	dfc00115 	stw	ra,4(sp)
   106bc:	df000015 	stw	fp,0(sp)
   106c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   106c4:	d0a00b17 	ldw	r2,-32724(gp)
   106c8:	10000326 	beq	r2,zero,106d8 <alt_get_errno+0x24>
   106cc:	d0a00b17 	ldw	r2,-32724(gp)
   106d0:	103ee83a 	callr	r2
   106d4:	00000106 	br	106dc <alt_get_errno+0x28>
   106d8:	d0a6d804 	addi	r2,gp,-25760
}
   106dc:	e037883a 	mov	sp,fp
   106e0:	dfc00117 	ldw	ra,4(sp)
   106e4:	df000017 	ldw	fp,0(sp)
   106e8:	dec00204 	addi	sp,sp,8
   106ec:	f800283a 	ret

000106f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   106f0:	defffa04 	addi	sp,sp,-24
   106f4:	dfc00515 	stw	ra,20(sp)
   106f8:	df000415 	stw	fp,16(sp)
   106fc:	df000404 	addi	fp,sp,16
   10700:	e13ffe15 	stw	r4,-8(fp)
   10704:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10708:	e0bffe17 	ldw	r2,-8(fp)
   1070c:	10000326 	beq	r2,zero,1071c <alt_dev_llist_insert+0x2c>
   10710:	e0bffe17 	ldw	r2,-8(fp)
   10714:	10800217 	ldw	r2,8(r2)
   10718:	1000061e 	bne	r2,zero,10734 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1071c:	00106b40 	call	106b4 <alt_get_errno>
   10720:	1007883a 	mov	r3,r2
   10724:	00800584 	movi	r2,22
   10728:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1072c:	00bffa84 	movi	r2,-22
   10730:	00001306 	br	10780 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10734:	e0bffe17 	ldw	r2,-8(fp)
   10738:	e0ffff17 	ldw	r3,-4(fp)
   1073c:	e0fffc15 	stw	r3,-16(fp)
   10740:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10744:	e0bffd17 	ldw	r2,-12(fp)
   10748:	e0fffc17 	ldw	r3,-16(fp)
   1074c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10750:	e0bffc17 	ldw	r2,-16(fp)
   10754:	10c00017 	ldw	r3,0(r2)
   10758:	e0bffd17 	ldw	r2,-12(fp)
   1075c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10760:	e0bffc17 	ldw	r2,-16(fp)
   10764:	10800017 	ldw	r2,0(r2)
   10768:	e0fffd17 	ldw	r3,-12(fp)
   1076c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10770:	e0bffc17 	ldw	r2,-16(fp)
   10774:	e0fffd17 	ldw	r3,-12(fp)
   10778:	10c00015 	stw	r3,0(r2)

  return 0;  
   1077c:	0005883a 	mov	r2,zero
}
   10780:	e037883a 	mov	sp,fp
   10784:	dfc00117 	ldw	ra,4(sp)
   10788:	df000017 	ldw	fp,0(sp)
   1078c:	dec00204 	addi	sp,sp,8
   10790:	f800283a 	ret

00010794 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10794:	defffd04 	addi	sp,sp,-12
   10798:	dfc00215 	stw	ra,8(sp)
   1079c:	df000115 	stw	fp,4(sp)
   107a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   107a4:	00800074 	movhi	r2,1
   107a8:	1085df04 	addi	r2,r2,6012
   107ac:	e0bfff15 	stw	r2,-4(fp)
   107b0:	00000606 	br	107cc <_do_ctors+0x38>
        (*ctor) (); 
   107b4:	e0bfff17 	ldw	r2,-4(fp)
   107b8:	10800017 	ldw	r2,0(r2)
   107bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   107c0:	e0bfff17 	ldw	r2,-4(fp)
   107c4:	10bfff04 	addi	r2,r2,-4
   107c8:	e0bfff15 	stw	r2,-4(fp)
   107cc:	e0ffff17 	ldw	r3,-4(fp)
   107d0:	00800074 	movhi	r2,1
   107d4:	1085e004 	addi	r2,r2,6016
   107d8:	18bff62e 	bgeu	r3,r2,107b4 <_do_ctors+0x20>
        (*ctor) (); 
}
   107dc:	0001883a 	nop
   107e0:	e037883a 	mov	sp,fp
   107e4:	dfc00117 	ldw	ra,4(sp)
   107e8:	df000017 	ldw	fp,0(sp)
   107ec:	dec00204 	addi	sp,sp,8
   107f0:	f800283a 	ret

000107f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   107f4:	defffd04 	addi	sp,sp,-12
   107f8:	dfc00215 	stw	ra,8(sp)
   107fc:	df000115 	stw	fp,4(sp)
   10800:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10804:	00800074 	movhi	r2,1
   10808:	1085df04 	addi	r2,r2,6012
   1080c:	e0bfff15 	stw	r2,-4(fp)
   10810:	00000606 	br	1082c <_do_dtors+0x38>
        (*dtor) (); 
   10814:	e0bfff17 	ldw	r2,-4(fp)
   10818:	10800017 	ldw	r2,0(r2)
   1081c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10820:	e0bfff17 	ldw	r2,-4(fp)
   10824:	10bfff04 	addi	r2,r2,-4
   10828:	e0bfff15 	stw	r2,-4(fp)
   1082c:	e0ffff17 	ldw	r3,-4(fp)
   10830:	00800074 	movhi	r2,1
   10834:	1085e004 	addi	r2,r2,6016
   10838:	18bff62e 	bgeu	r3,r2,10814 <_do_dtors+0x20>
        (*dtor) (); 
}
   1083c:	0001883a 	nop
   10840:	e037883a 	mov	sp,fp
   10844:	dfc00117 	ldw	ra,4(sp)
   10848:	df000017 	ldw	fp,0(sp)
   1084c:	dec00204 	addi	sp,sp,8
   10850:	f800283a 	ret

00010854 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10854:	defffe04 	addi	sp,sp,-8
   10858:	dfc00115 	stw	ra,4(sp)
   1085c:	df000015 	stw	fp,0(sp)
   10860:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10864:	01440004 	movi	r5,4096
   10868:	0009883a 	mov	r4,zero
   1086c:	00112c00 	call	112c0 <alt_icache_flush>
#endif
}
   10870:	0001883a 	nop
   10874:	e037883a 	mov	sp,fp
   10878:	dfc00117 	ldw	ra,4(sp)
   1087c:	df000017 	ldw	fp,0(sp)
   10880:	dec00204 	addi	sp,sp,8
   10884:	f800283a 	ret

00010888 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10888:	defff904 	addi	sp,sp,-28
   1088c:	dfc00615 	stw	ra,24(sp)
   10890:	df000515 	stw	fp,20(sp)
   10894:	df000504 	addi	fp,sp,20
   10898:	e13ffc15 	stw	r4,-16(fp)
   1089c:	e17ffd15 	stw	r5,-12(fp)
   108a0:	e1bffe15 	stw	r6,-8(fp)
   108a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   108a8:	e0800217 	ldw	r2,8(fp)
   108ac:	d8800015 	stw	r2,0(sp)
   108b0:	e1ffff17 	ldw	r7,-4(fp)
   108b4:	e1bffe17 	ldw	r6,-8(fp)
   108b8:	e17ffd17 	ldw	r5,-12(fp)
   108bc:	e13ffc17 	ldw	r4,-16(fp)
   108c0:	0010a380 	call	10a38 <alt_iic_isr_register>
}  
   108c4:	e037883a 	mov	sp,fp
   108c8:	dfc00117 	ldw	ra,4(sp)
   108cc:	df000017 	ldw	fp,0(sp)
   108d0:	dec00204 	addi	sp,sp,8
   108d4:	f800283a 	ret

000108d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   108d8:	defff904 	addi	sp,sp,-28
   108dc:	df000615 	stw	fp,24(sp)
   108e0:	df000604 	addi	fp,sp,24
   108e4:	e13ffe15 	stw	r4,-8(fp)
   108e8:	e17fff15 	stw	r5,-4(fp)
   108ec:	e0bfff17 	ldw	r2,-4(fp)
   108f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108f4:	0005303a 	rdctl	r2,status
   108f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108fc:	e0fffb17 	ldw	r3,-20(fp)
   10900:	00bfff84 	movi	r2,-2
   10904:	1884703a 	and	r2,r3,r2
   10908:	1001703a 	wrctl	status,r2
  
  return context;
   1090c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10910:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10914:	00c00044 	movi	r3,1
   10918:	e0bffa17 	ldw	r2,-24(fp)
   1091c:	1884983a 	sll	r2,r3,r2
   10920:	1007883a 	mov	r3,r2
   10924:	d0a6e117 	ldw	r2,-25724(gp)
   10928:	1884b03a 	or	r2,r3,r2
   1092c:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10930:	d0a6e117 	ldw	r2,-25724(gp)
   10934:	100170fa 	wrctl	ienable,r2
   10938:	e0bffc17 	ldw	r2,-16(fp)
   1093c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10940:	e0bffd17 	ldw	r2,-12(fp)
   10944:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10948:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1094c:	0001883a 	nop
}
   10950:	e037883a 	mov	sp,fp
   10954:	df000017 	ldw	fp,0(sp)
   10958:	dec00104 	addi	sp,sp,4
   1095c:	f800283a 	ret

00010960 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10960:	defff904 	addi	sp,sp,-28
   10964:	df000615 	stw	fp,24(sp)
   10968:	df000604 	addi	fp,sp,24
   1096c:	e13ffe15 	stw	r4,-8(fp)
   10970:	e17fff15 	stw	r5,-4(fp)
   10974:	e0bfff17 	ldw	r2,-4(fp)
   10978:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1097c:	0005303a 	rdctl	r2,status
   10980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10984:	e0fffb17 	ldw	r3,-20(fp)
   10988:	00bfff84 	movi	r2,-2
   1098c:	1884703a 	and	r2,r3,r2
   10990:	1001703a 	wrctl	status,r2
  
  return context;
   10994:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10998:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1099c:	00c00044 	movi	r3,1
   109a0:	e0bffa17 	ldw	r2,-24(fp)
   109a4:	1884983a 	sll	r2,r3,r2
   109a8:	0084303a 	nor	r2,zero,r2
   109ac:	1007883a 	mov	r3,r2
   109b0:	d0a6e117 	ldw	r2,-25724(gp)
   109b4:	1884703a 	and	r2,r3,r2
   109b8:	d0a6e115 	stw	r2,-25724(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   109bc:	d0a6e117 	ldw	r2,-25724(gp)
   109c0:	100170fa 	wrctl	ienable,r2
   109c4:	e0bffc17 	ldw	r2,-16(fp)
   109c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   109cc:	e0bffd17 	ldw	r2,-12(fp)
   109d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   109d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   109d8:	0001883a 	nop
}
   109dc:	e037883a 	mov	sp,fp
   109e0:	df000017 	ldw	fp,0(sp)
   109e4:	dec00104 	addi	sp,sp,4
   109e8:	f800283a 	ret

000109ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   109ec:	defffc04 	addi	sp,sp,-16
   109f0:	df000315 	stw	fp,12(sp)
   109f4:	df000304 	addi	fp,sp,12
   109f8:	e13ffe15 	stw	r4,-8(fp)
   109fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10a00:	000530fa 	rdctl	r2,ienable
   10a04:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10a08:	00c00044 	movi	r3,1
   10a0c:	e0bfff17 	ldw	r2,-4(fp)
   10a10:	1884983a 	sll	r2,r3,r2
   10a14:	1007883a 	mov	r3,r2
   10a18:	e0bffd17 	ldw	r2,-12(fp)
   10a1c:	1884703a 	and	r2,r3,r2
   10a20:	1004c03a 	cmpne	r2,r2,zero
   10a24:	10803fcc 	andi	r2,r2,255
}
   10a28:	e037883a 	mov	sp,fp
   10a2c:	df000017 	ldw	fp,0(sp)
   10a30:	dec00104 	addi	sp,sp,4
   10a34:	f800283a 	ret

00010a38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10a38:	defff504 	addi	sp,sp,-44
   10a3c:	dfc00a15 	stw	ra,40(sp)
   10a40:	df000915 	stw	fp,36(sp)
   10a44:	df000904 	addi	fp,sp,36
   10a48:	e13ffc15 	stw	r4,-16(fp)
   10a4c:	e17ffd15 	stw	r5,-12(fp)
   10a50:	e1bffe15 	stw	r6,-8(fp)
   10a54:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   10a58:	00bffa84 	movi	r2,-22
   10a5c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10a60:	e0bffd17 	ldw	r2,-12(fp)
   10a64:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10a68:	e0bff817 	ldw	r2,-32(fp)
   10a6c:	10800808 	cmpgei	r2,r2,32
   10a70:	1000271e 	bne	r2,zero,10b10 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a74:	0005303a 	rdctl	r2,status
   10a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a7c:	e0fffb17 	ldw	r3,-20(fp)
   10a80:	00bfff84 	movi	r2,-2
   10a84:	1884703a 	and	r2,r3,r2
   10a88:	1001703a 	wrctl	status,r2
  
  return context;
   10a8c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   10a90:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   10a94:	00800074 	movhi	r2,1
   10a98:	10955a04 	addi	r2,r2,21864
   10a9c:	e0fff817 	ldw	r3,-32(fp)
   10aa0:	180690fa 	slli	r3,r3,3
   10aa4:	10c5883a 	add	r2,r2,r3
   10aa8:	e0fffe17 	ldw	r3,-8(fp)
   10aac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   10ab0:	00800074 	movhi	r2,1
   10ab4:	10955a04 	addi	r2,r2,21864
   10ab8:	e0fff817 	ldw	r3,-32(fp)
   10abc:	180690fa 	slli	r3,r3,3
   10ac0:	10c5883a 	add	r2,r2,r3
   10ac4:	10800104 	addi	r2,r2,4
   10ac8:	e0ffff17 	ldw	r3,-4(fp)
   10acc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10ad0:	e0bffe17 	ldw	r2,-8(fp)
   10ad4:	10000526 	beq	r2,zero,10aec <alt_iic_isr_register+0xb4>
   10ad8:	e0bff817 	ldw	r2,-32(fp)
   10adc:	100b883a 	mov	r5,r2
   10ae0:	e13ffc17 	ldw	r4,-16(fp)
   10ae4:	00108d80 	call	108d8 <alt_ic_irq_enable>
   10ae8:	00000406 	br	10afc <alt_iic_isr_register+0xc4>
   10aec:	e0bff817 	ldw	r2,-32(fp)
   10af0:	100b883a 	mov	r5,r2
   10af4:	e13ffc17 	ldw	r4,-16(fp)
   10af8:	00109600 	call	10960 <alt_ic_irq_disable>
   10afc:	e0bff715 	stw	r2,-36(fp)
   10b00:	e0bffa17 	ldw	r2,-24(fp)
   10b04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b08:	e0bff917 	ldw	r2,-28(fp)
   10b0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10b10:	e0bff717 	ldw	r2,-36(fp)
}
   10b14:	e037883a 	mov	sp,fp
   10b18:	dfc00117 	ldw	ra,4(sp)
   10b1c:	df000017 	ldw	fp,0(sp)
   10b20:	dec00204 	addi	sp,sp,8
   10b24:	f800283a 	ret

00010b28 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   10b28:	defff904 	addi	sp,sp,-28
   10b2c:	dfc00615 	stw	ra,24(sp)
   10b30:	df000515 	stw	fp,20(sp)
   10b34:	df000504 	addi	fp,sp,20
   10b38:	e13ffc15 	stw	r4,-16(fp)
   10b3c:	e17ffd15 	stw	r5,-12(fp)
   10b40:	e1bffe15 	stw	r6,-8(fp)
   10b44:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   10b48:	e1bfff17 	ldw	r6,-4(fp)
   10b4c:	e17ffe17 	ldw	r5,-8(fp)
   10b50:	e13ffd17 	ldw	r4,-12(fp)
   10b54:	0010d680 	call	10d68 <open>
   10b58:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10b5c:	e0bffb17 	ldw	r2,-20(fp)
   10b60:	10001c16 	blt	r2,zero,10bd4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10b64:	00800074 	movhi	r2,1
   10b68:	1089f304 	addi	r2,r2,10188
   10b6c:	e0fffb17 	ldw	r3,-20(fp)
   10b70:	18c00324 	muli	r3,r3,12
   10b74:	10c5883a 	add	r2,r2,r3
   10b78:	10c00017 	ldw	r3,0(r2)
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   10b84:	00800074 	movhi	r2,1
   10b88:	1089f304 	addi	r2,r2,10188
   10b8c:	e0fffb17 	ldw	r3,-20(fp)
   10b90:	18c00324 	muli	r3,r3,12
   10b94:	10c5883a 	add	r2,r2,r3
   10b98:	10800104 	addi	r2,r2,4
   10b9c:	10c00017 	ldw	r3,0(r2)
   10ba0:	e0bffc17 	ldw	r2,-16(fp)
   10ba4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   10ba8:	00800074 	movhi	r2,1
   10bac:	1089f304 	addi	r2,r2,10188
   10bb0:	e0fffb17 	ldw	r3,-20(fp)
   10bb4:	18c00324 	muli	r3,r3,12
   10bb8:	10c5883a 	add	r2,r2,r3
   10bbc:	10800204 	addi	r2,r2,8
   10bc0:	10c00017 	ldw	r3,0(r2)
   10bc4:	e0bffc17 	ldw	r2,-16(fp)
   10bc8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   10bcc:	e13ffb17 	ldw	r4,-20(fp)
   10bd0:	000f4140 	call	f414 <alt_release_fd>
  }
} 
   10bd4:	0001883a 	nop
   10bd8:	e037883a 	mov	sp,fp
   10bdc:	dfc00117 	ldw	ra,4(sp)
   10be0:	df000017 	ldw	fp,0(sp)
   10be4:	dec00204 	addi	sp,sp,8
   10be8:	f800283a 	ret

00010bec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10bec:	defffb04 	addi	sp,sp,-20
   10bf0:	dfc00415 	stw	ra,16(sp)
   10bf4:	df000315 	stw	fp,12(sp)
   10bf8:	df000304 	addi	fp,sp,12
   10bfc:	e13ffd15 	stw	r4,-12(fp)
   10c00:	e17ffe15 	stw	r5,-8(fp)
   10c04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   10c08:	01c07fc4 	movi	r7,511
   10c0c:	01800044 	movi	r6,1
   10c10:	e17ffd17 	ldw	r5,-12(fp)
   10c14:	01000074 	movhi	r4,1
   10c18:	2109f604 	addi	r4,r4,10200
   10c1c:	0010b280 	call	10b28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10c20:	01c07fc4 	movi	r7,511
   10c24:	000d883a 	mov	r6,zero
   10c28:	e17ffe17 	ldw	r5,-8(fp)
   10c2c:	01000074 	movhi	r4,1
   10c30:	2109f304 	addi	r4,r4,10188
   10c34:	0010b280 	call	10b28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   10c38:	01c07fc4 	movi	r7,511
   10c3c:	01800044 	movi	r6,1
   10c40:	e17fff17 	ldw	r5,-4(fp)
   10c44:	01000074 	movhi	r4,1
   10c48:	2109f904 	addi	r4,r4,10212
   10c4c:	0010b280 	call	10b28 <alt_open_fd>
}  
   10c50:	0001883a 	nop
   10c54:	e037883a 	mov	sp,fp
   10c58:	dfc00117 	ldw	ra,4(sp)
   10c5c:	df000017 	ldw	fp,0(sp)
   10c60:	dec00204 	addi	sp,sp,8
   10c64:	f800283a 	ret

00010c68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c68:	defffe04 	addi	sp,sp,-8
   10c6c:	dfc00115 	stw	ra,4(sp)
   10c70:	df000015 	stw	fp,0(sp)
   10c74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10c78:	d0a00b17 	ldw	r2,-32724(gp)
   10c7c:	10000326 	beq	r2,zero,10c8c <alt_get_errno+0x24>
   10c80:	d0a00b17 	ldw	r2,-32724(gp)
   10c84:	103ee83a 	callr	r2
   10c88:	00000106 	br	10c90 <alt_get_errno+0x28>
   10c8c:	d0a6d804 	addi	r2,gp,-25760
}
   10c90:	e037883a 	mov	sp,fp
   10c94:	dfc00117 	ldw	ra,4(sp)
   10c98:	df000017 	ldw	fp,0(sp)
   10c9c:	dec00204 	addi	sp,sp,8
   10ca0:	f800283a 	ret

00010ca4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   10ca4:	defffd04 	addi	sp,sp,-12
   10ca8:	df000215 	stw	fp,8(sp)
   10cac:	df000204 	addi	fp,sp,8
   10cb0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   10cb4:	e0bfff17 	ldw	r2,-4(fp)
   10cb8:	10800217 	ldw	r2,8(r2)
   10cbc:	10d00034 	orhi	r3,r2,16384
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10cc8:	e03ffe15 	stw	zero,-8(fp)
   10ccc:	00001d06 	br	10d44 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10cd0:	00800074 	movhi	r2,1
   10cd4:	1089f304 	addi	r2,r2,10188
   10cd8:	e0fffe17 	ldw	r3,-8(fp)
   10cdc:	18c00324 	muli	r3,r3,12
   10ce0:	10c5883a 	add	r2,r2,r3
   10ce4:	10c00017 	ldw	r3,0(r2)
   10ce8:	e0bfff17 	ldw	r2,-4(fp)
   10cec:	10800017 	ldw	r2,0(r2)
   10cf0:	1880111e 	bne	r3,r2,10d38 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10cf4:	00800074 	movhi	r2,1
   10cf8:	1089f304 	addi	r2,r2,10188
   10cfc:	e0fffe17 	ldw	r3,-8(fp)
   10d00:	18c00324 	muli	r3,r3,12
   10d04:	10c5883a 	add	r2,r2,r3
   10d08:	10800204 	addi	r2,r2,8
   10d0c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10d10:	1000090e 	bge	r2,zero,10d38 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10d14:	e0bffe17 	ldw	r2,-8(fp)
   10d18:	10c00324 	muli	r3,r2,12
   10d1c:	00800074 	movhi	r2,1
   10d20:	1089f304 	addi	r2,r2,10188
   10d24:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	18800226 	beq	r3,r2,10d38 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10d30:	00bffcc4 	movi	r2,-13
   10d34:	00000806 	br	10d58 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   10d38:	e0bffe17 	ldw	r2,-8(fp)
   10d3c:	10800044 	addi	r2,r2,1
   10d40:	e0bffe15 	stw	r2,-8(fp)
   10d44:	d0a00a17 	ldw	r2,-32728(gp)
   10d48:	1007883a 	mov	r3,r2
   10d4c:	e0bffe17 	ldw	r2,-8(fp)
   10d50:	18bfdf2e 	bgeu	r3,r2,10cd0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10d54:	0005883a 	mov	r2,zero
}
   10d58:	e037883a 	mov	sp,fp
   10d5c:	df000017 	ldw	fp,0(sp)
   10d60:	dec00104 	addi	sp,sp,4
   10d64:	f800283a 	ret

00010d68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   10d68:	defff604 	addi	sp,sp,-40
   10d6c:	dfc00915 	stw	ra,36(sp)
   10d70:	df000815 	stw	fp,32(sp)
   10d74:	df000804 	addi	fp,sp,32
   10d78:	e13ffd15 	stw	r4,-12(fp)
   10d7c:	e17ffe15 	stw	r5,-8(fp)
   10d80:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   10d84:	00bfffc4 	movi	r2,-1
   10d88:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   10d8c:	00bffb44 	movi	r2,-19
   10d90:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   10d94:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   10d98:	d1600804 	addi	r5,gp,-32736
   10d9c:	e13ffd17 	ldw	r4,-12(fp)
   10da0:	00110840 	call	11084 <alt_find_dev>
   10da4:	e0bff815 	stw	r2,-32(fp)
   10da8:	e0bff817 	ldw	r2,-32(fp)
   10dac:	1000051e 	bne	r2,zero,10dc4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   10db0:	e13ffd17 	ldw	r4,-12(fp)
   10db4:	00111140 	call	11114 <alt_find_file>
   10db8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   10dbc:	00800044 	movi	r2,1
   10dc0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   10dc4:	e0bff817 	ldw	r2,-32(fp)
   10dc8:	10002926 	beq	r2,zero,10e70 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   10dcc:	e13ff817 	ldw	r4,-32(fp)
   10dd0:	001121c0 	call	1121c <alt_get_fd>
   10dd4:	e0bff915 	stw	r2,-28(fp)
   10dd8:	e0bff917 	ldw	r2,-28(fp)
   10ddc:	1000030e 	bge	r2,zero,10dec <open+0x84>
    {
      status = index;
   10de0:	e0bff917 	ldw	r2,-28(fp)
   10de4:	e0bffa15 	stw	r2,-24(fp)
   10de8:	00002306 	br	10e78 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10dec:	e0bff917 	ldw	r2,-28(fp)
   10df0:	10c00324 	muli	r3,r2,12
   10df4:	00800074 	movhi	r2,1
   10df8:	1089f304 	addi	r2,r2,10188
   10dfc:	1885883a 	add	r2,r3,r2
   10e00:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10e04:	e0fffe17 	ldw	r3,-8(fp)
   10e08:	00900034 	movhi	r2,16384
   10e0c:	10bfffc4 	addi	r2,r2,-1
   10e10:	1886703a 	and	r3,r3,r2
   10e14:	e0bffc17 	ldw	r2,-16(fp)
   10e18:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10e1c:	e0bffb17 	ldw	r2,-20(fp)
   10e20:	1000051e 	bne	r2,zero,10e38 <open+0xd0>
   10e24:	e13ffc17 	ldw	r4,-16(fp)
   10e28:	0010ca40 	call	10ca4 <alt_file_locked>
   10e2c:	e0bffa15 	stw	r2,-24(fp)
   10e30:	e0bffa17 	ldw	r2,-24(fp)
   10e34:	10001016 	blt	r2,zero,10e78 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   10e38:	e0bff817 	ldw	r2,-32(fp)
   10e3c:	10800317 	ldw	r2,12(r2)
   10e40:	10000826 	beq	r2,zero,10e64 <open+0xfc>
   10e44:	e0bff817 	ldw	r2,-32(fp)
   10e48:	10800317 	ldw	r2,12(r2)
   10e4c:	e1ffff17 	ldw	r7,-4(fp)
   10e50:	e1bffe17 	ldw	r6,-8(fp)
   10e54:	e17ffd17 	ldw	r5,-12(fp)
   10e58:	e13ffc17 	ldw	r4,-16(fp)
   10e5c:	103ee83a 	callr	r2
   10e60:	00000106 	br	10e68 <open+0x100>
   10e64:	0005883a 	mov	r2,zero
   10e68:	e0bffa15 	stw	r2,-24(fp)
   10e6c:	00000206 	br	10e78 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10e70:	00bffb44 	movi	r2,-19
   10e74:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   10e78:	e0bffa17 	ldw	r2,-24(fp)
   10e7c:	1000090e 	bge	r2,zero,10ea4 <open+0x13c>
  {
    alt_release_fd (index);  
   10e80:	e13ff917 	ldw	r4,-28(fp)
   10e84:	000f4140 	call	f414 <alt_release_fd>
    ALT_ERRNO = -status;
   10e88:	0010c680 	call	10c68 <alt_get_errno>
   10e8c:	1007883a 	mov	r3,r2
   10e90:	e0bffa17 	ldw	r2,-24(fp)
   10e94:	0085c83a 	sub	r2,zero,r2
   10e98:	18800015 	stw	r2,0(r3)
    return -1;
   10e9c:	00bfffc4 	movi	r2,-1
   10ea0:	00000106 	br	10ea8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   10ea4:	e0bff917 	ldw	r2,-28(fp)
}
   10ea8:	e037883a 	mov	sp,fp
   10eac:	dfc00117 	ldw	ra,4(sp)
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00204 	addi	sp,sp,8
   10eb8:	f800283a 	ret

00010ebc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   10ebc:	defffa04 	addi	sp,sp,-24
   10ec0:	df000515 	stw	fp,20(sp)
   10ec4:	df000504 	addi	fp,sp,20
   10ec8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ecc:	0005303a 	rdctl	r2,status
   10ed0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ed4:	e0fffc17 	ldw	r3,-16(fp)
   10ed8:	00bfff84 	movi	r2,-2
   10edc:	1884703a 	and	r2,r3,r2
   10ee0:	1001703a 	wrctl	status,r2
  
  return context;
   10ee4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   10ee8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10eec:	e0bfff17 	ldw	r2,-4(fp)
   10ef0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10ef4:	e0bffd17 	ldw	r2,-12(fp)
   10ef8:	10800017 	ldw	r2,0(r2)
   10efc:	e0fffd17 	ldw	r3,-12(fp)
   10f00:	18c00117 	ldw	r3,4(r3)
   10f04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   10f08:	e0bffd17 	ldw	r2,-12(fp)
   10f0c:	10800117 	ldw	r2,4(r2)
   10f10:	e0fffd17 	ldw	r3,-12(fp)
   10f14:	18c00017 	ldw	r3,0(r3)
   10f18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10f1c:	e0bffd17 	ldw	r2,-12(fp)
   10f20:	e0fffd17 	ldw	r3,-12(fp)
   10f24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   10f28:	e0bffd17 	ldw	r2,-12(fp)
   10f2c:	e0fffd17 	ldw	r3,-12(fp)
   10f30:	10c00015 	stw	r3,0(r2)
   10f34:	e0bffb17 	ldw	r2,-20(fp)
   10f38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f3c:	e0bffe17 	ldw	r2,-8(fp)
   10f40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10f44:	0001883a 	nop
   10f48:	e037883a 	mov	sp,fp
   10f4c:	df000017 	ldw	fp,0(sp)
   10f50:	dec00104 	addi	sp,sp,4
   10f54:	f800283a 	ret

00010f58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10f58:	defffb04 	addi	sp,sp,-20
   10f5c:	dfc00415 	stw	ra,16(sp)
   10f60:	df000315 	stw	fp,12(sp)
   10f64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10f68:	d0a00e17 	ldw	r2,-32712(gp)
   10f6c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10f70:	d0a6e317 	ldw	r2,-25716(gp)
   10f74:	10800044 	addi	r2,r2,1
   10f78:	d0a6e315 	stw	r2,-25716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10f7c:	00002e06 	br	11038 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   10f80:	e0bffd17 	ldw	r2,-12(fp)
   10f84:	10800017 	ldw	r2,0(r2)
   10f88:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10f8c:	e0bffd17 	ldw	r2,-12(fp)
   10f90:	10800403 	ldbu	r2,16(r2)
   10f94:	10803fcc 	andi	r2,r2,255
   10f98:	10000426 	beq	r2,zero,10fac <alt_tick+0x54>
   10f9c:	d0a6e317 	ldw	r2,-25716(gp)
   10fa0:	1000021e 	bne	r2,zero,10fac <alt_tick+0x54>
    {
      alarm->rollover = 0;
   10fa4:	e0bffd17 	ldw	r2,-12(fp)
   10fa8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10fac:	e0bffd17 	ldw	r2,-12(fp)
   10fb0:	10800217 	ldw	r2,8(r2)
   10fb4:	d0e6e317 	ldw	r3,-25716(gp)
   10fb8:	18801d36 	bltu	r3,r2,11030 <alt_tick+0xd8>
   10fbc:	e0bffd17 	ldw	r2,-12(fp)
   10fc0:	10800403 	ldbu	r2,16(r2)
   10fc4:	10803fcc 	andi	r2,r2,255
   10fc8:	1000191e 	bne	r2,zero,11030 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   10fcc:	e0bffd17 	ldw	r2,-12(fp)
   10fd0:	10800317 	ldw	r2,12(r2)
   10fd4:	e0fffd17 	ldw	r3,-12(fp)
   10fd8:	18c00517 	ldw	r3,20(r3)
   10fdc:	1809883a 	mov	r4,r3
   10fe0:	103ee83a 	callr	r2
   10fe4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10fe8:	e0bfff17 	ldw	r2,-4(fp)
   10fec:	1000031e 	bne	r2,zero,10ffc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10ff0:	e13ffd17 	ldw	r4,-12(fp)
   10ff4:	0010ebc0 	call	10ebc <alt_alarm_stop>
   10ff8:	00000d06 	br	11030 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10ffc:	e0bffd17 	ldw	r2,-12(fp)
   11000:	10c00217 	ldw	r3,8(r2)
   11004:	e0bfff17 	ldw	r2,-4(fp)
   11008:	1887883a 	add	r3,r3,r2
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11014:	e0bffd17 	ldw	r2,-12(fp)
   11018:	10c00217 	ldw	r3,8(r2)
   1101c:	d0a6e317 	ldw	r2,-25716(gp)
   11020:	1880032e 	bgeu	r3,r2,11030 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11024:	e0bffd17 	ldw	r2,-12(fp)
   11028:	00c00044 	movi	r3,1
   1102c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11030:	e0bffe17 	ldw	r2,-8(fp)
   11034:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11038:	e0fffd17 	ldw	r3,-12(fp)
   1103c:	d0a00e04 	addi	r2,gp,-32712
   11040:	18bfcf1e 	bne	r3,r2,10f80 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11044:	0001883a 	nop
}
   11048:	0001883a 	nop
   1104c:	e037883a 	mov	sp,fp
   11050:	dfc00117 	ldw	ra,4(sp)
   11054:	df000017 	ldw	fp,0(sp)
   11058:	dec00204 	addi	sp,sp,8
   1105c:	f800283a 	ret

00011060 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11060:	deffff04 	addi	sp,sp,-4
   11064:	df000015 	stw	fp,0(sp)
   11068:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1106c:	000170fa 	wrctl	ienable,zero
}
   11070:	0001883a 	nop
   11074:	e037883a 	mov	sp,fp
   11078:	df000017 	ldw	fp,0(sp)
   1107c:	dec00104 	addi	sp,sp,4
   11080:	f800283a 	ret

00011084 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11084:	defffa04 	addi	sp,sp,-24
   11088:	dfc00515 	stw	ra,20(sp)
   1108c:	df000415 	stw	fp,16(sp)
   11090:	df000404 	addi	fp,sp,16
   11094:	e13ffe15 	stw	r4,-8(fp)
   11098:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1109c:	e0bfff17 	ldw	r2,-4(fp)
   110a0:	10800017 	ldw	r2,0(r2)
   110a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   110a8:	e13ffe17 	ldw	r4,-8(fp)
   110ac:	0002d980 	call	2d98 <strlen>
   110b0:	10800044 	addi	r2,r2,1
   110b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   110b8:	00000d06 	br	110f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   110bc:	e0bffc17 	ldw	r2,-16(fp)
   110c0:	10800217 	ldw	r2,8(r2)
   110c4:	e0fffd17 	ldw	r3,-12(fp)
   110c8:	180d883a 	mov	r6,r3
   110cc:	e17ffe17 	ldw	r5,-8(fp)
   110d0:	1009883a 	mov	r4,r2
   110d4:	00114380 	call	11438 <memcmp>
   110d8:	1000021e 	bne	r2,zero,110e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   110dc:	e0bffc17 	ldw	r2,-16(fp)
   110e0:	00000706 	br	11100 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   110e4:	e0bffc17 	ldw	r2,-16(fp)
   110e8:	10800017 	ldw	r2,0(r2)
   110ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   110f0:	e0fffc17 	ldw	r3,-16(fp)
   110f4:	e0bfff17 	ldw	r2,-4(fp)
   110f8:	18bff01e 	bne	r3,r2,110bc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   110fc:	0005883a 	mov	r2,zero
}
   11100:	e037883a 	mov	sp,fp
   11104:	dfc00117 	ldw	ra,4(sp)
   11108:	df000017 	ldw	fp,0(sp)
   1110c:	dec00204 	addi	sp,sp,8
   11110:	f800283a 	ret

00011114 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11114:	defffb04 	addi	sp,sp,-20
   11118:	dfc00415 	stw	ra,16(sp)
   1111c:	df000315 	stw	fp,12(sp)
   11120:	df000304 	addi	fp,sp,12
   11124:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11128:	d0a00617 	ldw	r2,-32744(gp)
   1112c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11130:	00003106 	br	111f8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11134:	e0bffd17 	ldw	r2,-12(fp)
   11138:	10800217 	ldw	r2,8(r2)
   1113c:	1009883a 	mov	r4,r2
   11140:	0002d980 	call	2d98 <strlen>
   11144:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11148:	e0bffd17 	ldw	r2,-12(fp)
   1114c:	10c00217 	ldw	r3,8(r2)
   11150:	e0bffe17 	ldw	r2,-8(fp)
   11154:	10bfffc4 	addi	r2,r2,-1
   11158:	1885883a 	add	r2,r3,r2
   1115c:	10800003 	ldbu	r2,0(r2)
   11160:	10803fcc 	andi	r2,r2,255
   11164:	1080201c 	xori	r2,r2,128
   11168:	10bfe004 	addi	r2,r2,-128
   1116c:	10800bd8 	cmpnei	r2,r2,47
   11170:	1000031e 	bne	r2,zero,11180 <alt_find_file+0x6c>
    {
      len -= 1;
   11174:	e0bffe17 	ldw	r2,-8(fp)
   11178:	10bfffc4 	addi	r2,r2,-1
   1117c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11180:	e0bffe17 	ldw	r2,-8(fp)
   11184:	e0ffff17 	ldw	r3,-4(fp)
   11188:	1885883a 	add	r2,r3,r2
   1118c:	10800003 	ldbu	r2,0(r2)
   11190:	10803fcc 	andi	r2,r2,255
   11194:	1080201c 	xori	r2,r2,128
   11198:	10bfe004 	addi	r2,r2,-128
   1119c:	10800be0 	cmpeqi	r2,r2,47
   111a0:	1000081e 	bne	r2,zero,111c4 <alt_find_file+0xb0>
   111a4:	e0bffe17 	ldw	r2,-8(fp)
   111a8:	e0ffff17 	ldw	r3,-4(fp)
   111ac:	1885883a 	add	r2,r3,r2
   111b0:	10800003 	ldbu	r2,0(r2)
   111b4:	10803fcc 	andi	r2,r2,255
   111b8:	1080201c 	xori	r2,r2,128
   111bc:	10bfe004 	addi	r2,r2,-128
   111c0:	10000a1e 	bne	r2,zero,111ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   111c4:	e0bffd17 	ldw	r2,-12(fp)
   111c8:	10800217 	ldw	r2,8(r2)
   111cc:	e0fffe17 	ldw	r3,-8(fp)
   111d0:	180d883a 	mov	r6,r3
   111d4:	e17fff17 	ldw	r5,-4(fp)
   111d8:	1009883a 	mov	r4,r2
   111dc:	00114380 	call	11438 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   111e0:	1000021e 	bne	r2,zero,111ec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   111e4:	e0bffd17 	ldw	r2,-12(fp)
   111e8:	00000706 	br	11208 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   111ec:	e0bffd17 	ldw	r2,-12(fp)
   111f0:	10800017 	ldw	r2,0(r2)
   111f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   111f8:	e0fffd17 	ldw	r3,-12(fp)
   111fc:	d0a00604 	addi	r2,gp,-32744
   11200:	18bfcc1e 	bne	r3,r2,11134 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11204:	0005883a 	mov	r2,zero
}
   11208:	e037883a 	mov	sp,fp
   1120c:	dfc00117 	ldw	ra,4(sp)
   11210:	df000017 	ldw	fp,0(sp)
   11214:	dec00204 	addi	sp,sp,8
   11218:	f800283a 	ret

0001121c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1121c:	defffc04 	addi	sp,sp,-16
   11220:	df000315 	stw	fp,12(sp)
   11224:	df000304 	addi	fp,sp,12
   11228:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1122c:	00bffa04 	movi	r2,-24
   11230:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11234:	e03ffd15 	stw	zero,-12(fp)
   11238:	00001906 	br	112a0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   1123c:	00800074 	movhi	r2,1
   11240:	1089f304 	addi	r2,r2,10188
   11244:	e0fffd17 	ldw	r3,-12(fp)
   11248:	18c00324 	muli	r3,r3,12
   1124c:	10c5883a 	add	r2,r2,r3
   11250:	10800017 	ldw	r2,0(r2)
   11254:	10000f1e 	bne	r2,zero,11294 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11258:	00800074 	movhi	r2,1
   1125c:	1089f304 	addi	r2,r2,10188
   11260:	e0fffd17 	ldw	r3,-12(fp)
   11264:	18c00324 	muli	r3,r3,12
   11268:	10c5883a 	add	r2,r2,r3
   1126c:	e0ffff17 	ldw	r3,-4(fp)
   11270:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11274:	d0e00a17 	ldw	r3,-32728(gp)
   11278:	e0bffd17 	ldw	r2,-12(fp)
   1127c:	1880020e 	bge	r3,r2,11288 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11280:	e0bffd17 	ldw	r2,-12(fp)
   11284:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   11288:	e0bffd17 	ldw	r2,-12(fp)
   1128c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11290:	00000606 	br	112ac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11294:	e0bffd17 	ldw	r2,-12(fp)
   11298:	10800044 	addi	r2,r2,1
   1129c:	e0bffd15 	stw	r2,-12(fp)
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	10800810 	cmplti	r2,r2,32
   112a8:	103fe41e 	bne	r2,zero,1123c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   112ac:	e0bffe17 	ldw	r2,-8(fp)
}
   112b0:	e037883a 	mov	sp,fp
   112b4:	df000017 	ldw	fp,0(sp)
   112b8:	dec00104 	addi	sp,sp,4
   112bc:	f800283a 	ret

000112c0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   112c0:	defffb04 	addi	sp,sp,-20
   112c4:	df000415 	stw	fp,16(sp)
   112c8:	df000404 	addi	fp,sp,16
   112cc:	e13ffe15 	stw	r4,-8(fp)
   112d0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   112d4:	e0bfff17 	ldw	r2,-4(fp)
   112d8:	10840070 	cmpltui	r2,r2,4097
   112dc:	1000021e 	bne	r2,zero,112e8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   112e0:	00840004 	movi	r2,4096
   112e4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   112e8:	e0fffe17 	ldw	r3,-8(fp)
   112ec:	e0bfff17 	ldw	r2,-4(fp)
   112f0:	1885883a 	add	r2,r3,r2
   112f4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   112f8:	e0bffe17 	ldw	r2,-8(fp)
   112fc:	e0bffc15 	stw	r2,-16(fp)
   11300:	00000506 	br	11318 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11304:	e0bffc17 	ldw	r2,-16(fp)
   11308:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1130c:	e0bffc17 	ldw	r2,-16(fp)
   11310:	10800804 	addi	r2,r2,32
   11314:	e0bffc15 	stw	r2,-16(fp)
   11318:	e0fffc17 	ldw	r3,-16(fp)
   1131c:	e0bffd17 	ldw	r2,-12(fp)
   11320:	18bff836 	bltu	r3,r2,11304 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   11324:	e0bffe17 	ldw	r2,-8(fp)
   11328:	108007cc 	andi	r2,r2,31
   1132c:	10000226 	beq	r2,zero,11338 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   11330:	e0bffc17 	ldw	r2,-16(fp)
   11334:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   11338:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1133c:	0001883a 	nop
   11340:	e037883a 	mov	sp,fp
   11344:	df000017 	ldw	fp,0(sp)
   11348:	dec00104 	addi	sp,sp,4
   1134c:	f800283a 	ret

00011350 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11350:	defffe04 	addi	sp,sp,-8
   11354:	df000115 	stw	fp,4(sp)
   11358:	df000104 	addi	fp,sp,4
   1135c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11360:	e0bfff17 	ldw	r2,-4(fp)
   11364:	10bffe84 	addi	r2,r2,-6
   11368:	10c00428 	cmpgeui	r3,r2,16
   1136c:	18001a1e 	bne	r3,zero,113d8 <alt_exception_cause_generated_bad_addr+0x88>
   11370:	100690ba 	slli	r3,r2,2
   11374:	00800074 	movhi	r2,1
   11378:	1084e204 	addi	r2,r2,5000
   1137c:	1885883a 	add	r2,r3,r2
   11380:	10800017 	ldw	r2,0(r2)
   11384:	1000683a 	jmp	r2
   11388:	000113c8 	cmpgei	zero,zero,1103
   1138c:	000113c8 	cmpgei	zero,zero,1103
   11390:	000113d8 	cmpnei	zero,zero,1103
   11394:	000113d8 	cmpnei	zero,zero,1103
   11398:	000113d8 	cmpnei	zero,zero,1103
   1139c:	000113c8 	cmpgei	zero,zero,1103
   113a0:	000113d0 	cmplti	zero,zero,1103
   113a4:	000113d8 	cmpnei	zero,zero,1103
   113a8:	000113c8 	cmpgei	zero,zero,1103
   113ac:	000113c8 	cmpgei	zero,zero,1103
   113b0:	000113d8 	cmpnei	zero,zero,1103
   113b4:	000113c8 	cmpgei	zero,zero,1103
   113b8:	000113d0 	cmplti	zero,zero,1103
   113bc:	000113d8 	cmpnei	zero,zero,1103
   113c0:	000113d8 	cmpnei	zero,zero,1103
   113c4:	000113c8 	cmpgei	zero,zero,1103
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   113c8:	00800044 	movi	r2,1
   113cc:	00000306 	br	113dc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   113d0:	0005883a 	mov	r2,zero
   113d4:	00000106 	br	113dc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   113d8:	0005883a 	mov	r2,zero
  }
}
   113dc:	e037883a 	mov	sp,fp
   113e0:	df000017 	ldw	fp,0(sp)
   113e4:	dec00104 	addi	sp,sp,4
   113e8:	f800283a 	ret

000113ec <atexit>:
   113ec:	200b883a 	mov	r5,r4
   113f0:	000f883a 	mov	r7,zero
   113f4:	000d883a 	mov	r6,zero
   113f8:	0009883a 	mov	r4,zero
   113fc:	00114b41 	jmpi	114b4 <__register_exitproc>

00011400 <exit>:
   11400:	defffe04 	addi	sp,sp,-8
   11404:	000b883a 	mov	r5,zero
   11408:	dc000015 	stw	r16,0(sp)
   1140c:	dfc00115 	stw	ra,4(sp)
   11410:	2021883a 	mov	r16,r4
   11414:	00115cc0 	call	115cc <__call_exitprocs>
   11418:	00800074 	movhi	r2,1
   1141c:	108e6d04 	addi	r2,r2,14772
   11420:	11000017 	ldw	r4,0(r2)
   11424:	20800f17 	ldw	r2,60(r4)
   11428:	10000126 	beq	r2,zero,11430 <exit+0x30>
   1142c:	103ee83a 	callr	r2
   11430:	8009883a 	mov	r4,r16
   11434:	001174c0 	call	1174c <_exit>

00011438 <memcmp>:
   11438:	01c000c4 	movi	r7,3
   1143c:	3980192e 	bgeu	r7,r6,114a4 <memcmp+0x6c>
   11440:	2144b03a 	or	r2,r4,r5
   11444:	11c4703a 	and	r2,r2,r7
   11448:	10000f26 	beq	r2,zero,11488 <memcmp+0x50>
   1144c:	20800003 	ldbu	r2,0(r4)
   11450:	28c00003 	ldbu	r3,0(r5)
   11454:	10c0151e 	bne	r2,r3,114ac <memcmp+0x74>
   11458:	31bfff84 	addi	r6,r6,-2
   1145c:	01ffffc4 	movi	r7,-1
   11460:	00000406 	br	11474 <memcmp+0x3c>
   11464:	20800003 	ldbu	r2,0(r4)
   11468:	28c00003 	ldbu	r3,0(r5)
   1146c:	31bfffc4 	addi	r6,r6,-1
   11470:	10c00e1e 	bne	r2,r3,114ac <memcmp+0x74>
   11474:	21000044 	addi	r4,r4,1
   11478:	29400044 	addi	r5,r5,1
   1147c:	31fff91e 	bne	r6,r7,11464 <memcmp+0x2c>
   11480:	0005883a 	mov	r2,zero
   11484:	f800283a 	ret
   11488:	20c00017 	ldw	r3,0(r4)
   1148c:	28800017 	ldw	r2,0(r5)
   11490:	18bfee1e 	bne	r3,r2,1144c <memcmp+0x14>
   11494:	31bfff04 	addi	r6,r6,-4
   11498:	21000104 	addi	r4,r4,4
   1149c:	29400104 	addi	r5,r5,4
   114a0:	39bff936 	bltu	r7,r6,11488 <memcmp+0x50>
   114a4:	303fe91e 	bne	r6,zero,1144c <memcmp+0x14>
   114a8:	003ff506 	br	11480 <memcmp+0x48>
   114ac:	10c5c83a 	sub	r2,r2,r3
   114b0:	f800283a 	ret

000114b4 <__register_exitproc>:
   114b4:	defffa04 	addi	sp,sp,-24
   114b8:	dc000315 	stw	r16,12(sp)
   114bc:	04000074 	movhi	r16,1
   114c0:	840e6d04 	addi	r16,r16,14772
   114c4:	80c00017 	ldw	r3,0(r16)
   114c8:	dc400415 	stw	r17,16(sp)
   114cc:	dfc00515 	stw	ra,20(sp)
   114d0:	18805217 	ldw	r2,328(r3)
   114d4:	2023883a 	mov	r17,r4
   114d8:	10003726 	beq	r2,zero,115b8 <__register_exitproc+0x104>
   114dc:	10c00117 	ldw	r3,4(r2)
   114e0:	010007c4 	movi	r4,31
   114e4:	20c00e16 	blt	r4,r3,11520 <__register_exitproc+0x6c>
   114e8:	1a000044 	addi	r8,r3,1
   114ec:	8800221e 	bne	r17,zero,11578 <__register_exitproc+0xc4>
   114f0:	18c00084 	addi	r3,r3,2
   114f4:	18c7883a 	add	r3,r3,r3
   114f8:	18c7883a 	add	r3,r3,r3
   114fc:	12000115 	stw	r8,4(r2)
   11500:	10c7883a 	add	r3,r2,r3
   11504:	19400015 	stw	r5,0(r3)
   11508:	0005883a 	mov	r2,zero
   1150c:	dfc00517 	ldw	ra,20(sp)
   11510:	dc400417 	ldw	r17,16(sp)
   11514:	dc000317 	ldw	r16,12(sp)
   11518:	dec00604 	addi	sp,sp,24
   1151c:	f800283a 	ret
   11520:	00800034 	movhi	r2,0
   11524:	1088f404 	addi	r2,r2,9168
   11528:	10002626 	beq	r2,zero,115c4 <__register_exitproc+0x110>
   1152c:	01006404 	movi	r4,400
   11530:	d9400015 	stw	r5,0(sp)
   11534:	d9800115 	stw	r6,4(sp)
   11538:	d9c00215 	stw	r7,8(sp)
   1153c:	00023d00 	call	23d0 <malloc>
   11540:	d9400017 	ldw	r5,0(sp)
   11544:	d9800117 	ldw	r6,4(sp)
   11548:	d9c00217 	ldw	r7,8(sp)
   1154c:	10001d26 	beq	r2,zero,115c4 <__register_exitproc+0x110>
   11550:	81000017 	ldw	r4,0(r16)
   11554:	10000115 	stw	zero,4(r2)
   11558:	02000044 	movi	r8,1
   1155c:	22405217 	ldw	r9,328(r4)
   11560:	0007883a 	mov	r3,zero
   11564:	12400015 	stw	r9,0(r2)
   11568:	20805215 	stw	r2,328(r4)
   1156c:	10006215 	stw	zero,392(r2)
   11570:	10006315 	stw	zero,396(r2)
   11574:	883fde26 	beq	r17,zero,114f0 <__register_exitproc+0x3c>
   11578:	18c9883a 	add	r4,r3,r3
   1157c:	2109883a 	add	r4,r4,r4
   11580:	1109883a 	add	r4,r2,r4
   11584:	21802215 	stw	r6,136(r4)
   11588:	01800044 	movi	r6,1
   1158c:	12406217 	ldw	r9,392(r2)
   11590:	30cc983a 	sll	r6,r6,r3
   11594:	4992b03a 	or	r9,r9,r6
   11598:	12406215 	stw	r9,392(r2)
   1159c:	21c04215 	stw	r7,264(r4)
   115a0:	01000084 	movi	r4,2
   115a4:	893fd21e 	bne	r17,r4,114f0 <__register_exitproc+0x3c>
   115a8:	11006317 	ldw	r4,396(r2)
   115ac:	218cb03a 	or	r6,r4,r6
   115b0:	11806315 	stw	r6,396(r2)
   115b4:	003fce06 	br	114f0 <__register_exitproc+0x3c>
   115b8:	18805304 	addi	r2,r3,332
   115bc:	18805215 	stw	r2,328(r3)
   115c0:	003fc606 	br	114dc <__register_exitproc+0x28>
   115c4:	00bfffc4 	movi	r2,-1
   115c8:	003fd006 	br	1150c <__register_exitproc+0x58>

000115cc <__call_exitprocs>:
   115cc:	defff504 	addi	sp,sp,-44
   115d0:	df000915 	stw	fp,36(sp)
   115d4:	dd400615 	stw	r21,24(sp)
   115d8:	dc800315 	stw	r18,12(sp)
   115dc:	dfc00a15 	stw	ra,40(sp)
   115e0:	ddc00815 	stw	r23,32(sp)
   115e4:	dd800715 	stw	r22,28(sp)
   115e8:	dd000515 	stw	r20,20(sp)
   115ec:	dcc00415 	stw	r19,16(sp)
   115f0:	dc400215 	stw	r17,8(sp)
   115f4:	dc000115 	stw	r16,4(sp)
   115f8:	d9000015 	stw	r4,0(sp)
   115fc:	2839883a 	mov	fp,r5
   11600:	04800044 	movi	r18,1
   11604:	057fffc4 	movi	r21,-1
   11608:	00800074 	movhi	r2,1
   1160c:	108e6d04 	addi	r2,r2,14772
   11610:	12000017 	ldw	r8,0(r2)
   11614:	45005217 	ldw	r20,328(r8)
   11618:	44c05204 	addi	r19,r8,328
   1161c:	a0001c26 	beq	r20,zero,11690 <__call_exitprocs+0xc4>
   11620:	a0800117 	ldw	r2,4(r20)
   11624:	15ffffc4 	addi	r23,r2,-1
   11628:	b8000d16 	blt	r23,zero,11660 <__call_exitprocs+0x94>
   1162c:	14000044 	addi	r16,r2,1
   11630:	8421883a 	add	r16,r16,r16
   11634:	8421883a 	add	r16,r16,r16
   11638:	84402004 	addi	r17,r16,128
   1163c:	a463883a 	add	r17,r20,r17
   11640:	a421883a 	add	r16,r20,r16
   11644:	e0001e26 	beq	fp,zero,116c0 <__call_exitprocs+0xf4>
   11648:	80804017 	ldw	r2,256(r16)
   1164c:	e0801c26 	beq	fp,r2,116c0 <__call_exitprocs+0xf4>
   11650:	bdffffc4 	addi	r23,r23,-1
   11654:	843fff04 	addi	r16,r16,-4
   11658:	8c7fff04 	addi	r17,r17,-4
   1165c:	bd7ff91e 	bne	r23,r21,11644 <__call_exitprocs+0x78>
   11660:	00800034 	movhi	r2,0
   11664:	1088f904 	addi	r2,r2,9188
   11668:	10000926 	beq	r2,zero,11690 <__call_exitprocs+0xc4>
   1166c:	a0800117 	ldw	r2,4(r20)
   11670:	1000301e 	bne	r2,zero,11734 <__call_exitprocs+0x168>
   11674:	a0800017 	ldw	r2,0(r20)
   11678:	10003226 	beq	r2,zero,11744 <__call_exitprocs+0x178>
   1167c:	a009883a 	mov	r4,r20
   11680:	98800015 	stw	r2,0(r19)
   11684:	00023e40 	call	23e4 <free>
   11688:	9d000017 	ldw	r20,0(r19)
   1168c:	a03fe41e 	bne	r20,zero,11620 <__call_exitprocs+0x54>
   11690:	dfc00a17 	ldw	ra,40(sp)
   11694:	df000917 	ldw	fp,36(sp)
   11698:	ddc00817 	ldw	r23,32(sp)
   1169c:	dd800717 	ldw	r22,28(sp)
   116a0:	dd400617 	ldw	r21,24(sp)
   116a4:	dd000517 	ldw	r20,20(sp)
   116a8:	dcc00417 	ldw	r19,16(sp)
   116ac:	dc800317 	ldw	r18,12(sp)
   116b0:	dc400217 	ldw	r17,8(sp)
   116b4:	dc000117 	ldw	r16,4(sp)
   116b8:	dec00b04 	addi	sp,sp,44
   116bc:	f800283a 	ret
   116c0:	a0800117 	ldw	r2,4(r20)
   116c4:	80c00017 	ldw	r3,0(r16)
   116c8:	10bfffc4 	addi	r2,r2,-1
   116cc:	15c01426 	beq	r2,r23,11720 <__call_exitprocs+0x154>
   116d0:	80000015 	stw	zero,0(r16)
   116d4:	183fde26 	beq	r3,zero,11650 <__call_exitprocs+0x84>
   116d8:	95c8983a 	sll	r4,r18,r23
   116dc:	a0806217 	ldw	r2,392(r20)
   116e0:	a5800117 	ldw	r22,4(r20)
   116e4:	2084703a 	and	r2,r4,r2
   116e8:	10000b26 	beq	r2,zero,11718 <__call_exitprocs+0x14c>
   116ec:	a0806317 	ldw	r2,396(r20)
   116f0:	2088703a 	and	r4,r4,r2
   116f4:	20000c1e 	bne	r4,zero,11728 <__call_exitprocs+0x15c>
   116f8:	89400017 	ldw	r5,0(r17)
   116fc:	d9000017 	ldw	r4,0(sp)
   11700:	183ee83a 	callr	r3
   11704:	a0800117 	ldw	r2,4(r20)
   11708:	15bfbf1e 	bne	r2,r22,11608 <__call_exitprocs+0x3c>
   1170c:	98800017 	ldw	r2,0(r19)
   11710:	153fcf26 	beq	r2,r20,11650 <__call_exitprocs+0x84>
   11714:	003fbc06 	br	11608 <__call_exitprocs+0x3c>
   11718:	183ee83a 	callr	r3
   1171c:	003ff906 	br	11704 <__call_exitprocs+0x138>
   11720:	a5c00115 	stw	r23,4(r20)
   11724:	003feb06 	br	116d4 <__call_exitprocs+0x108>
   11728:	89000017 	ldw	r4,0(r17)
   1172c:	183ee83a 	callr	r3
   11730:	003ff406 	br	11704 <__call_exitprocs+0x138>
   11734:	a0800017 	ldw	r2,0(r20)
   11738:	a027883a 	mov	r19,r20
   1173c:	1029883a 	mov	r20,r2
   11740:	003fb606 	br	1161c <__call_exitprocs+0x50>
   11744:	0005883a 	mov	r2,zero
   11748:	003ffb06 	br	11738 <__call_exitprocs+0x16c>

0001174c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1174c:	defffd04 	addi	sp,sp,-12
   11750:	df000215 	stw	fp,8(sp)
   11754:	df000204 	addi	fp,sp,8
   11758:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1175c:	0001883a 	nop
   11760:	e0bfff17 	ldw	r2,-4(fp)
   11764:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11768:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1176c:	10000226 	beq	r2,zero,11778 <_exit+0x2c>
    ALT_SIM_FAIL();
   11770:	002af070 	cmpltui	zero,zero,43969
   11774:	00000106 	br	1177c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11778:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1177c:	003fff06 	br	1177c <_exit+0x30>
